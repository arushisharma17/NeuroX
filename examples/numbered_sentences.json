{
  "1": "returnBuffer . append ( minParam ) ; ",
  "2": "returnBuffer . append ( FieldMetaData . Decimal . SQ_CLOSE ) ; ",
  "3": "returnBuffer . append ( FieldMetaData . Decimal . MAX ) ; ",
  "4": "returnBuffer . append ( maxParam ) ; ",
  "5": "returnBuffer . append ( FieldMetaData . Decimal . STEP_FACTOR ) ; ",
  "6": "returnBuffer . append ( stepFactorParam ) ; ",
  "7": "String prefix = ( prefixParam == null ) ? \"\" : prefixParam ; ",
  "8": "returnBuffer . append ( FieldMetaData . Decimal . PREFIX ) ; ",
  "9": "returnBuffer . append ( prefix ) ; ",
  "10": "return returnBuffer . toString ( ) ; ",
  "11": "} public User createUser ( User userParam ) ",
  "12": "if ( userParam != null && this . serviceTicket != null ) ",
  "13": "userParam . setServiceTicket ( this . serviceTicket ) ; ",
  "14": "return new User ( this . putJson ( ",
  "15": "userParam , WS . Path . User . Version1 . userCreate ( ) ) ) ; ",
  "16": "} public User updateUser ( User userParam ) ",
  "17": "return new User ( this . postJson ( ",
  "18": "userParam , WS . Path . User . Version1 . userUpdate ( ) ) ) ; ",
  "19": "} public User activateUser ( User userParam ) ",
  "20": "userParam , ",
  "21": "WS . Path . User . Version1 . userActivate ( ) ) ) ; ",
  "22": "} public User deActivateUser ( User userParam ) ",
  "23": "WS . Path . User . Version1 . userDeActivate ( ) ) ) ; ",
  "24": "} public User incrementInvalidLoginForUser ( User userParam ) ",
  "25": "WS . Path . User . Version1 . incrementInvalidLogin ( ) ) ) ; ",
  "26": "} public User changePasswordForLoggedInUser ( ",
  "27": "String existingPasswordParam , ",
  "28": "String newPasswordParam , ",
  "29": "String confirmNewPasswordParam ) { ",
  "30": "User toChangePasswordFor = new User ( ) ; ",
  "31": "toChangePasswordFor . setServiceTicket ( this . serviceTicket ) ; ",
  "32": "String existingPassword = ",
  "33": "existingPasswordParam == null ? UtilGlobal . EMPTY : existingPasswordParam ; ",
  "34": "String newPassword = ",
  "35": "newPasswordParam == null ? UtilGlobal . EMPTY : newPasswordParam ; ",
  "36": "String confirmNewPassword = ",
  "37": "confirmNewPasswordParam == null ? UtilGlobal . EMPTY : confirmNewPasswordParam ; ",
  "38": "JSONObject passwordClear = new JSONObject ( ) ; ",
  "39": "passwordClear . put ( \"existing\" , existingPassword ) ; ",
  "40": "passwordClear . put ( \"new\" , newPassword ) ; ",
  "41": "passwordClear . put ( \"confirm_new\" , confirmNewPassword ) ; ",
  "42": "toChangePasswordFor . setPasswordClear ( passwordClear . toString ( ) ) ; ",
  "43": "toChangePasswordFor , ",
  "44": "WS . Path . User . Version1 . changePassword ( ) ) ) ; ",
  "45": "} public User deleteUser ( ",
  "46": "User userToDeleteParam , ",
  "47": "boolean forcefullyDeleteParam ) ",
  "48": "if ( userToDeleteParam != null && this . serviceTicket != null ) ",
  "49": "userToDeleteParam . setServiceTicket ( this . serviceTicket ) ; ",
  "50": "return new User ( this . postJson ( userToDeleteParam , ",
  "51": "WS . Path . User . Version1 . userDelete ( forcefullyDeleteParam ) ) ) ; ",
  "52": "} public User getLoggedInUserInformation ( ) ",
  "53": "User userToGetInfoFor = new User ( ) ; ",
  "54": "if ( this . serviceTicket != null ) ",
  "55": "userToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; ",
  "56": "userToGetInfoFor , ",
  "57": "WS . Path . User . Version1 . userInformation ( ) ) ) ; ",
  "58": "catch ( JSONException jsonExcept ) { ",
  "59": "throw new FluidClientException ( jsonExcept . getMessage ( ) , ",
  "60": "FluidClientException . ErrorCode . JSON_PARSING ) ; ",
  "61": "} public User getUserWhereUsername ( String usernameParam ) ",
  "62": "userToGetInfoFor . setUsername ( usernameParam ) ; ",
  "63": "userToGetInfoFor , WS . Path . User . Version1 . getByUsername ( ) ) ) ; ",
  "64": "} public User getUserWhereEmail ( String emailAddressParam ) ",
  "65": "if ( emailAddressParam != null ) ",
  "66": "List < String > emailAdd = new ArrayList ( ) ; ",
  "67": "emailAdd . add ( emailAddressParam ) ; ",
  "68": "userToGetInfoFor . setEmailAddresses ( emailAdd ) ; ",
  "69": "userToGetInfoFor , WS . Path . User . Version1 . getByEmail ( ) ) ) ; ",
  "70": "} public User getUserById ( Long userIdParam ) ",
  "71": "userToGetInfoFor . setId ( userIdParam ) ; ",
  "72": "userToGetInfoFor , WS . Path . User . Version1 . getById ( ) ) ) ; ",
  "73": "} public UserListing getAllUsers ( ) ",
  "74": "UserListing userToGetInfoFor = new UserListing ( ) ; ",
  "75": "return new UserListing ( this . postJson ( ",
  "76": "WS . Path . User . Version1 . getAllUsers ( ) ) ) ; ",
  "77": "} public UserListing getAllUsersByJobView ( JobView jobViewParam ) { ",
  "78": "if ( this . serviceTicket != null && jobViewParam != null ) { ",
  "79": "jobViewParam . setServiceTicket ( this . serviceTicket ) ; ",
  "80": "jobViewParam , ",
  "81": "WS . Path . User . Version1 . getAllUsersByJobView ( ) ) ) ; ",
  "82": "} catch ( JSONException jsonExcept ) { ",
  "83": "} public UserListing getAllUsersByRole ( Role roleParam ) { ",
  "84": "if ( this . serviceTicket != null && roleParam != null ) { ",
  "85": "roleParam . setServiceTicket ( this . serviceTicket ) ; ",
  "86": "roleParam , WS . Path . User . Version1 . getAllUsersByRole ( ) ) ) ; ",
  "87": "} public UserListing getAllUsersWhereLoggedInSince ( Date loggedInSinceParam ) { ",
  "88": "User userToPost = new User ( ) ; ",
  "89": "userToPost . setLoggedInDateTime ( loggedInSinceParam ) ; ",
  "90": "userToPost . setServiceTicket ( this . serviceTicket ) ; ",
  "91": "userToPost , WS . Path . User . Version1 . getAllUsersWhereLoggedInSince ( ) ) ) ; ",
  "92": "} public UserFieldListing getAllUserFieldValuesByUser ( User userParam ) ",
  "93": "if ( userParam == null ) ",
  "94": "return new UserFieldListing ( this . postJson ( ",
  "95": "WS . Path . User . Version1 . getUserFieldValuesByUser ( ) ) ) ; ",
  "96": "} public byte [ ] getGravatarForEmail ( ",
  "97": "String emailAddressParam , ",
  "98": "int sizeParam ) ",
  "99": "JSONObject gravatarJSONObj = ",
  "100": "this . getJson ( ",
  "101": "WS . Path . User . Version1 . getGravatarByEmail ( ",
  "102": "emailAddressParam , sizeParam ) ) ; ",
  "103": "String base64Text = gravatarJSONObj . optString ( JSON_TAG_DATA , \"\" ) ; ",
  "104": "if ( base64Text == null || base64Text . isEmpty ( ) ) ",
  "105": "return UtilGlobal . decodeBase64 ( base64Text ) ; ",
  "106": "jsonExcept , FluidClientException . ErrorCode . JSON_PARSING ) ; ",
  "107": "catch ( UnsupportedEncodingException unsEncExcept ) { ",
  "108": "throw new FluidClientException ( unsEncExcept . getMessage ( ) , ",
  "109": "unsEncExcept , FluidClientException . ErrorCode . IO_ERROR ) ; ",
  "110": "} public byte [ ] getGravatarForUser ( User userParam , int sizeParam ) ",
  "111": "JSONObject gravatarJSONObj = this . postJson ( ",
  "112": "WS . Path . User . Version1 . getGravatarByUser ( sizeParam ) ) ; ",
  "113": "} @ XmlTransient ",
  "114": "public boolean doesUserHaveAccessToRole ( Role roleParam ) ",
  "115": "if ( roleParam == null ) ",
  "116": "return this . doesUserHaveAccessToRole ( roleParam . getName ( ) ) ; ",
  "117": "public boolean doesUserHaveAccessToRole ( String roleNameParam ) ",
  "118": "if ( roleNameParam == null || roleNameParam . trim ( ) . isEmpty ( ) ) ",
  "119": "if ( this . getRoles ( ) == null || this . getRoles ( ) . isEmpty ( ) ) ",
  "120": "String roleNameParamLower = roleNameParam . trim ( ) . toLowerCase ( ) ; ",
  "121": "for ( Role roleAtIndex : this . getRoles ( ) ) ",
  "122": "if ( roleAtIndex . getName ( ) == null || ",
  "123": "roleAtIndex . getName ( ) . trim ( ) . isEmpty ( ) ) ",
  "124": "String iterRoleNameLower = roleAtIndex . getName ( ) . trim ( ) . toLowerCase ( ) ; ",
  "125": "if ( roleNameParamLower . equals ( iterRoleNameLower ) ) ",
  "126": "@ XmlTransient ",
  "127": "returnVal . put ( JSONMapping . ACTIVE , this . isActive ( ) ) ; ",
  "128": "returnVal . put ( JSONMapping . INVALID_LOGIN_COUNT , ",
  "129": "this . getInvalidLoginCount ( ) ) ; ",
  "130": "if ( this . getUsername ( ) != null ) ",
  "131": "returnVal . put ( JSONMapping . USERNAME , this . getUsername ( ) ) ; ",
  "132": "if ( this . getPasswordSha256 ( ) != null ) ",
  "133": "returnVal . put ( JSONMapping . PASSWORD_SHA_256 , this . getPasswordSha256 ( ) ) ; ",
  "134": "if ( this . getPasswordClear ( ) != null ) ",
  "135": "returnVal . put ( JSONMapping . PASSWORD_CLEAR , this . getPasswordClear ( ) ) ; ",
  "136": "returnVal . put ( User . JSONMapping . DATE_CREATED , ",
  "137": "this . getDateAsLongFromJson ( this . getDateCreated ( ) ) ) ; ",
  "138": "returnVal . put ( User . JSONMapping . DATE_LAST_UPDATED , ",
  "139": "this . getDateAsLongFromJson ( this . getDateLastUpdated ( ) ) ) ; ",
  "140": "if ( this . getPasswordChangedAt ( ) != null ) ",
  "141": "returnVal . put ( JSONMapping . PASSWORD_CHANGED_AT , ",
  "142": "this . getDateAsLongFromJson ( this . getPasswordChangedAt ( ) ) ) ; ",
  "143": "if ( this . getLoggedInDateTime ( ) != null ) ",
  "144": "returnVal . put ( JSONMapping . LOGGED_IN_DATE_TIME , ",
  "145": "this . getDateAsLongFromJson ( this . getLoggedInDateTime ( ) ) ) ; ",
  "146": "if ( this . getSalt ( ) != null ) ",
  "147": "returnVal . put ( JSONMapping . SALT , this . getSalt ( ) ) ; ",
  "148": "if ( this . getTimezone ( ) != null ) ",
  "149": "returnVal . put ( JSONMapping . TIMEZONE , ",
  "150": "this . getTimezone ( ) . doubleValue ( ) ) ; ",
  "151": "if ( this . getDateFormat ( ) != null ) ",
  "152": "returnVal . put ( JSONMapping . DATE_FORMAT , this . getDateFormat ( ) ) ; ",
  "153": "if ( this . getTimeFormat ( ) != null ) ",
  "154": "returnVal . put ( JSONMapping . TIME_FORMAT , this . getTimeFormat ( ) ) ; ",
  "155": "if ( this . getLocale ( ) != null ) { ",
  "156": "returnVal . put ( JSONMapping . LOCALE , this . getLocale ( ) ) ; ",
  "157": "returnVal . put ( JSONMapping . EMAIL_USER_NOTIFICATION , this . isEmailUserNotification ( ) ) ; ",
  "158": "if ( this . getRoles ( ) != null && ! this . getRoles ( ) . isEmpty ( ) ) ",
  "159": "JSONArray rolesArr = new JSONArray ( ) ; ",
  "160": "for ( Role toAdd : this . getRoles ( ) ) ",
  "161": "rolesArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "162": "returnVal . put ( JSONMapping . ROLES , rolesArr ) ; ",
  "163": "if ( this . getEmailAddresses ( ) != null && ",
  "164": "! this . getEmailAddresses ( ) . isEmpty ( ) ) ",
  "165": "JSONArray emailArr = new JSONArray ( ) ; ",
  "166": "for ( String toAdd : this . getEmailAddresses ( ) ) ",
  "167": "emailArr . put ( toAdd ) ; ",
  "168": "returnVal . put ( JSONMapping . EMAIL_ADDRESSES , emailArr ) ; ",
  "169": "JSONArray userFieldsArr = new JSONArray ( ) ; ",
  "170": "for ( Field toAdd : this . getUserFields ( ) ) ",
  "171": "userFieldsArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "172": "returnVal . put ( JSONMapping . USER_FIELDS , userFieldsArr ) ; ",
  "173": "public Field getField ( String fieldNameParam ) { ",
  "174": "if ( fieldNameParam == null || fieldNameParam . trim ( ) . isEmpty ( ) ) { ",
  "175": "if ( this . userFields == null || this . userFields . isEmpty ( ) ) { ",
  "176": "String fieldNameParamLower = fieldNameParam . trim ( ) . toLowerCase ( ) ; ",
  "177": "for ( Field field : this . userFields ) { ",
  "178": "String fieldName = field . getFieldName ( ) ; ",
  "179": "if ( fieldName == null || fieldName . trim ( ) . isEmpty ( ) ) { ",
  "180": "String fieldNameLower = fieldName . trim ( ) . toLowerCase ( ) ; ",
  "181": "if ( fieldNameParamLower . equals ( fieldNameLower ) ) { ",
  "182": "public MultiChoice getFieldValueAsMultiChoice ( String fieldNameParam ) { ",
  "183": "Field fieldReturn = this . getField ( fieldNameParam ) ; ",
  "184": "return ( fieldReturn == null ) ? null : fieldReturn . getFieldValueAsMultiChoice ( ) ; ",
  "185": "if ( this . getJobView ( ) != null ) ",
  "186": "returnVal . put ( JSONMapping . JOB_VIEW , ",
  "187": "this . getJobView ( ) . toJsonObject ( ) ) ; ",
  "188": "if ( this . getRole ( ) != null ) ",
  "189": "returnVal . put ( JSONMapping . ROLE , ",
  "190": "this . getRole ( ) . toJsonObject ( ) ) ; ",
  "191": "public String getFieldValueAsString ( ) { ",
  "192": "Object returnObj = this . getFieldValue ( ) ; ",
  "193": "return ( returnObj == null ) ? null : returnObj . toString ( ) ; ",
  "194": "public Double getFieldValueAsDouble ( ) { ",
  "195": "Object obj = this . getFieldValue ( ) ; ",
  "196": "if ( obj instanceof Double ) { ",
  "197": "return ( Double ) obj ; ",
  "198": "if ( obj instanceof Number ) { ",
  "199": "return ( ( Number ) obj ) . doubleValue ( ) ; ",
  "200": "public Long getFieldValueAsLong ( ) { ",
  "201": "if ( obj instanceof Long ) { ",
  "202": "return ( Long ) obj ; ",
  "203": "return ( ( Number ) obj ) . longValue ( ) ; ",
  "204": "public Integer getFieldValueAsInteger ( ) { ",
  "205": "if ( obj instanceof Integer ) { ",
  "206": "return ( Integer ) obj ; ",
  "207": "return ( ( Number ) obj ) . intValue ( ) ; ",
  "208": "public Number getFieldValueAsNumber ( ) { ",
  "209": "return ( Number ) obj ; ",
  "210": "public Boolean getFieldValueAsBoolean ( ) { ",
  "211": "if ( obj instanceof Boolean ) { ",
  "212": "return ( Boolean ) obj ; ",
  "213": "public Date getFieldValueAsDate ( ) { ",
  "214": "if ( obj instanceof Date ) { ",
  "215": "return ( Date ) obj ; ",
  "216": "else if ( obj instanceof Long ) { ",
  "217": "Long longValue = ( Long ) obj ; ",
  "218": "if ( longValue . longValue ( ) > 0 ) { ",
  "219": "return new Date ( longValue . longValue ( ) ) ; ",
  "220": "public MultiChoice getFieldValueAsMultiChoice ( ) { ",
  "221": "if ( obj instanceof MultiChoice ) { ",
  "222": "return ( MultiChoice ) obj ; ",
  "223": "public TableField getFieldValueAsTableField ( ) { ",
  "224": "if ( obj instanceof TableField ) { ",
  "225": "return ( TableField ) obj ; ",
  "226": "} public void setFieldValue ( Object fieldValueParam ) { ",
  "227": "this . fieldValue = fieldValueParam ; ",
  "228": "if ( this . getFieldType ( ) == null && fieldValueParam != null ) ",
  "229": "if ( fieldValueParam instanceof Date ) ",
  "230": "this . setTypeAsEnum ( Type . DateTime ) ; ",
  "231": "else if ( fieldValueParam instanceof Number ) ",
  "232": "this . setTypeAsEnum ( Type . Decimal ) ; ",
  "233": "else if ( fieldValueParam instanceof MultiChoice ) ",
  "234": "this . setTypeAsEnum ( Type . MultipleChoice ) ; ",
  "235": "else if ( fieldValueParam instanceof TableField ) ",
  "236": "this . setTypeAsEnum ( Type . Table ) ; ",
  "237": "else if ( fieldValueParam instanceof String ) ",
  "238": "this . setTypeAsEnum ( Type . Text ) ; ",
  "239": "else if ( fieldValueParam instanceof Boolean ) ",
  "240": "this . setTypeAsEnum ( Type . TrueFalse ) ; ",
  "241": "public void setTypeAsEnum ( Type typeParam ) { ",
  "242": "if ( typeParam == null ) ",
  "243": "this . fieldType = null ; ",
  "244": "this . fieldType = typeParam . name ( ) ; ",
  "245": "public Type getTypeAsEnum ( ) ",
  "246": "if ( this . getFieldType ( ) == null || this . getFieldType ( ) . trim ( ) . isEmpty ( ) ) ",
  "247": "return Type . valueOf ( this . getFieldType ( ) ) ; ",
  "248": "if ( this . getFieldName ( ) != null ) ",
  "249": "returnVal . put ( JSONMapping . FIELD_NAME , this . getFieldName ( ) ) ; ",
  "250": "if ( this . getFieldDescription ( ) != null ) ",
  "251": "returnVal . put ( JSONMapping . FIELD_DESCRIPTION , this . getFieldDescription ( ) ) ; ",
  "252": "if ( this . getFieldValue ( ) != null ) ",
  "253": "if ( this . getFieldValue ( ) instanceof String ) ",
  "254": "returnVal . put ( JSONMapping . FIELD_VALUE , this . getFieldValue ( ) ) ; ",
  "255": "else if ( this . getFieldValue ( ) instanceof Number ) ",
  "256": "returnVal . put ( JSONMapping . FIELD_VALUE , ",
  "257": "( ( Number ) this . getFieldValue ( ) ) . doubleValue ( ) ) ; ",
  "258": "else if ( this . getFieldValue ( ) instanceof Boolean ) ",
  "259": "( Boolean ) this . getFieldValue ( ) ) ; ",
  "260": "else if ( this . getFieldValue ( ) instanceof Date ) ",
  "261": "this . getDateAsLongFromJson ( ( Date ) this . getFieldValue ( ) ) ) ; ",
  "262": "else if ( this . getFieldValue ( ) instanceof MultiChoice ) ",
  "263": "( ( MultiChoice ) this . getFieldValue ( ) ) . toJsonObject ( ) ) ; ",
  "264": "else if ( this . getFieldValue ( ) instanceof TableField ) ",
  "265": "( ( TableField ) this . getFieldValue ( ) ) . toJsonObject ( ) ) ; ",
  "266": "if ( this . getFieldType ( ) != null ) ",
  "267": "returnVal . put ( JSONMapping . FIELD_TYPE , this . getFieldType ( ) ) ; ",
  "268": "if ( this . getTypeMetaData ( ) != null ) ",
  "269": "returnVal . put ( JSONMapping . TYPE_META_DATA , this . getTypeMetaData ( ) ) ; ",
  "270": "public JSONObject toJsonMappingForElasticSearch ( ) throws JSONException { ",
  "271": "String fieldNameUpperCamel = this . getFieldNameAsUpperCamel ( ) ; ",
  "272": "if ( fieldNameUpperCamel == null ) ",
  "273": "String elasticType = this . getElasticSearchFieldType ( ) ; ",
  "274": "if ( elasticType == null ) ",
  "275": "returnVal . put ( JSONMapping . Elastic . MAPPING_ONLY_TYPE , elasticType ) ; ",
  "276": "public JSONObject toJsonForElasticSearch ( ) throws JSONException { ",
  "277": "if ( ! this . doesFieldQualifyForElasticSearchInsert ( ) ) ",
  "278": "String fieldIdAsString = this . getFieldNameAsUpperCamel ( ) ; ",
  "279": "Object fieldValue = this . getFieldValue ( ) ; ",
  "280": "if ( fieldValue instanceof TableField ) ",
  "281": "TableField tableField = ( TableField ) this . getFieldValue ( ) ; ",
  "282": "if ( tableField . getTableRecords ( ) != null && ",
  "283": "! tableField . getTableRecords ( ) . isEmpty ( ) ) ",
  "284": "JSONArray array = new JSONArray ( ) ; ",
  "285": "for ( Form record : tableField . getTableRecords ( ) ) ",
  "286": "if ( record . getId ( ) == null ) ",
  "287": "array . put ( record . getId ( ) ) ; ",
  "288": "returnVal . put ( fieldIdAsString , array ) ; ",
  "289": "else if ( fieldValue instanceof MultiChoice ) ",
  "290": "MultiChoice multiChoice = ( MultiChoice ) this . getFieldValue ( ) ; ",
  "291": "if ( multiChoice . getSelectedMultiChoices ( ) != null && ",
  "292": "! multiChoice . getSelectedMultiChoices ( ) . isEmpty ( ) ) ",
  "293": "for ( String selectedChoice : multiChoice . getSelectedMultiChoices ( ) ) ",
  "294": "Long selectedChoiceAsLong = null ; ",
  "295": "if ( ! selectedChoice . isEmpty ( ) && ",
  "296": "Character . isDigit ( selectedChoice . charAt ( 0 ) ) ) ",
  "297": "selectedChoiceAsLong = Long . parseLong ( selectedChoice ) ; ",
  "298": "catch ( NumberFormatException nfe ) ",
  "299": "selectedChoiceAsLong = null ; ",
  "300": "if ( selectedChoiceAsLong == null ) ",
  "301": "array . put ( selectedChoice ) ; ",
  "302": "array . put ( selectedChoiceAsLong . longValue ( ) ) ; ",
  "303": "else if ( ( fieldValue instanceof Number || fieldValue instanceof Boolean ) || ",
  "304": "fieldValue instanceof String ) ",
  "305": "if ( ( fieldValue instanceof String ) && LATITUDE_AND_LONGITUDE . equals ( this . getTypeMetaData ( ) ) ) { ",
  "306": "String formFieldValueStr = fieldValue . toString ( ) ; ",
  "307": "UtilGlobal utilGlobal = new UtilGlobal ( ) ; ",
  "308": "String latitude = utilGlobal . getLatitudeFromFluidText ( formFieldValueStr ) ; ",
  "309": "String longitude = utilGlobal . getLongitudeFromFluidText ( formFieldValueStr ) ; ",
  "310": "fieldValue = ( latitude . concat ( UtilGlobal . COMMA ) . concat ( longitude ) ) ; ",
  "311": "returnVal . put ( fieldIdAsString , fieldValue ) ; ",
  "312": "else if ( fieldValue instanceof Date ) ",
  "313": "returnVal . put ( fieldIdAsString , ( ( Date ) fieldValue ) . getTime ( ) ) ; ",
  "314": "throw new FluidElasticSearchException ( ",
  "315": "public Field populateFromElasticSearchJson ( ",
  "316": "JSONObject jsonObjectParam ",
  "317": ") throws JSONException { ",
  "318": "if ( this . getFieldNameAsUpperCamel ( ) == null ) { ",
  "319": "if ( jsonObjectParam . isNull ( fieldIdAsString ) ) { ",
  "320": "Field . Type type ; ",
  "321": "if ( ( type = this . getTypeAsEnum ( ) ) == null ) { ",
  "322": "Object formFieldValue = jsonObjectParam . get ( fieldIdAsString ) ; ",
  "323": "Field fieldToAdd = null ; ",
  "324": "case DateTime : ",
  "325": "if ( formFieldValue instanceof Long ) { ",
  "326": "fieldToAdd = new Field ( ",
  "327": "this . getId ( ) , ",
  "328": "this . getFieldName ( ) , ",
  "329": "new Date ( ( ( Long ) formFieldValue ) . longValue ( ) ) , ",
  "330": "type ) ; ",
  "331": "case Decimal : ",
  "332": "if ( formFieldValue instanceof Number ) { ",
  "333": "( ( Number ) formFieldValue ) . doubleValue ( ) , ",
  "334": "case MultipleChoice : ",
  "335": "if ( formFieldValue instanceof JSONArray ) { ",
  "336": "JSONArray casted = ( JSONArray ) formFieldValue ; ",
  "337": "List < String > selectedChoices = new ArrayList ( ) ; ",
  "338": "for ( int index = 0 ; index < casted . length ( ) ; index ++ ) { ",
  "339": "selectedChoices . add ( casted . get ( index ) . toString ( ) ) ; ",
  "340": "if ( selectedChoices . isEmpty ( ) ) { ",
  "341": "MultiChoice multiChoiceToSet = new MultiChoice ( selectedChoices ) ; ",
  "342": "multiChoiceToSet , ",
  "343": "case Table : ",
  "344": "List < Form > tableRecords = new ArrayList ( ) ; ",
  "345": "Object obAtIndex = casted . get ( index ) ; ",
  "346": "if ( obAtIndex instanceof Number ) { ",
  "347": "tableRecords . add ( new Form ( ( ( Number ) obAtIndex ) . longValue ( ) ) ) ; ",
  "348": "else if ( formFieldValue instanceof Number ) { ",
  "349": "tableRecords . add ( new Form ( ( ( Number ) formFieldValue ) . longValue ( ) ) ) ; ",
  "350": "if ( tableRecords . isEmpty ( ) ) { ",
  "351": "new TableField ( tableRecords ) , ",
  "352": "case Text : ",
  "353": "case ParagraphText : ",
  "354": "if ( formFieldValue instanceof String ) { ",
  "355": "if ( LATITUDE_AND_LONGITUDE . equals ( this . getTypeMetaData ( ) ) ) { ",
  "356": "String formFieldValueStr = formFieldValue . toString ( ) ; ",
  "357": "double latitude = utilGlobal . getLatitudeFromElasticSearchText ( formFieldValueStr ) ; ",
  "358": "double longitude = utilGlobal . getLongitudeFromElasticSearchText ( formFieldValueStr ) ; ",
  "359": "String newFieldVal = ",
  "360": "( latitude + UtilGlobal . PIPE + longitude + UtilGlobal . PIPE ) ; ",
  "361": "newFieldVal , ",
  "362": "formFieldValue . toString ( ) , ",
  "363": "case TrueFalse : ",
  "364": "if ( formFieldValue instanceof Boolean ) { ",
  "365": "formFieldValue , ",
  "366": "return fieldToAdd ; ",
  "367": "public void populateFromElasticSearchJson ( ",
  "368": "JSONObject jsonObjectParam , List < Field > formFieldsParam ) throws JSONException { ",
  "369": "public String getElasticSearchFieldType ( ) ",
  "370": "Type fieldType = this . getTypeAsEnum ( ) ; ",
  "371": "if ( fieldType == null ) ",
  "372": "switch ( fieldType ) ",
  "373": "return ElasticSearchType . TEXT ; ",
  "374": "String metaData = this . getTypeMetaData ( ) ; ",
  "375": "if ( metaData == null || metaData . isEmpty ( ) ) ",
  "376": "if ( LATITUDE_AND_LONGITUDE . equals ( metaData ) ) ",
  "377": "return ElasticSearchType . GEO_POINT ; ",
  "378": "return ElasticSearchType . BOOLEAN ; ",
  "379": "return ElasticSearchType . DATE ; ",
  "380": "return ElasticSearchType . DOUBLE ; ",
  "381": "return ElasticSearchType . KEYWORD ; ",
  "382": "} private boolean doesFieldQualifyForElasticSearchInsert ( ) ",
  "383": "Field . Type fieldType ; ",
  "384": "if ( ( ( this . getFieldValue ( ) ) == null ) || ",
  "385": "( ( fieldType = this . getTypeAsEnum ( ) ) == null ) ) ",
  "386": "if ( this . getFieldName ( ) == null || ",
  "387": "this . getFieldName ( ) . trim ( ) . isEmpty ( ) ) ",
  "388": "switch ( fieldType ) { ",
  "389": "case TextEncrypted : ",
  "390": "if ( this . getClientId ( ) != null ) ",
  "391": "returnVal . put ( JSONMapping . CLIENT_ID , this . getClientId ( ) ) ; ",
  "392": "if ( this . getClientSecret ( ) != null ) ",
  "393": "returnVal . put ( JSONMapping . CLIENT_SECRET , this . getClientSecret ( ) ) ; ",
  "394": "if ( this . getCode ( ) != null ) ",
  "395": "returnVal . put ( JSONMapping . CODE , this . getCode ( ) ) ; ",
  "396": "if ( this . getGrantType ( ) != null ) ",
  "397": "returnVal . put ( JSONMapping . GRANT_TYPE , this . getGrantType ( ) ) ; ",
  "398": "if ( this . getRedirectUri ( ) != null ) ",
  "399": "returnVal . put ( JSONMapping . REDIRECT_URI , this . getRedirectUri ( ) ) ; ",
  "400": "} public void setStepProperty ( ",
  "401": "String nameParam , String valueParam ) ",
  "402": "if ( this . getStepProperties ( ) == null ) ",
  "403": "this . setStepProperties ( new ArrayList ( ) ) ; ",
  "404": "if ( nameParam == null || nameParam . trim ( ) . isEmpty ( ) ) ",
  "405": "if ( valueParam . trim ( ) . isEmpty ( ) ) ",
  "406": "String paramLower = nameParam . toLowerCase ( ) ; ",
  "407": "for ( StepProperty existingProp : this . getStepProperties ( ) ) ",
  "408": "if ( existingProp . getName ( ) . toLowerCase ( ) . equals ( paramLower ) ) ",
  "409": "existingProp . setValue ( valueParam ) ; ",
  "410": "this . getStepProperties ( ) . add ( new StepProperty ( nameParam , valueParam ) ) ; ",
  "411": "} public String getStepProperty ( String nameParam ) ",
  "412": "if ( this . getStepProperties ( ) == null || this . getStepProperties ( ) . isEmpty ( ) ) ",
  "413": "for ( StepProperty stepProperty : this . getStepProperties ( ) ) ",
  "414": "if ( stepProperty . getName ( ) . toLowerCase ( ) . equals ( paramLower ) ) ",
  "415": "return stepProperty . getValue ( ) ; ",
  "416": "returnVal . put ( JSONMapping . DATE_CREATED , ",
  "417": "returnVal . put ( JSONMapping . DATE_LAST_UPDATED , ",
  "418": "if ( this . getFlow ( ) != null ) ",
  "419": "returnVal . put ( JSONMapping . FLOW , ",
  "420": "this . getFlow ( ) . toJsonObject ( ) ) ; ",
  "421": "if ( this . getFlowStepType ( ) != null ) ",
  "422": "returnVal . put ( JSONMapping . FLOW_STEP_TYPE , this . getFlowStepType ( ) ) ; ",
  "423": "if ( this . getFlowStepParentId ( ) != null ) ",
  "424": "returnVal . put ( ",
  "425": "JSONMapping . FLOW_STEP_PARENT_ID , this . getFlowStepParentId ( ) ) ; ",
  "426": "if ( this . getEntryRules ( ) != null && ! this . getEntryRules ( ) . isEmpty ( ) ) ",
  "427": "for ( FlowStepRule rule : this . getEntryRules ( ) ) ",
  "428": "returnVal . put ( JSONMapping . ENTRY_RULES , jsonArray ) ; ",
  "429": "if ( this . getExitRules ( ) != null && ! this . getExitRules ( ) . isEmpty ( ) ) ",
  "430": "for ( FlowStepRule rule : this . getExitRules ( ) ) ",
  "431": "returnVal . put ( JSONMapping . EXIT_RULES , jsonArray ) ; ",
  "432": "if ( this . getViewRules ( ) != null && ! this . getViewRules ( ) . isEmpty ( ) ) ",
  "433": "for ( FlowStepRule rule : this . getViewRules ( ) ) ",
  "434": "returnVal . put ( JSONMapping . VIEW_RULES , jsonArray ) ; ",
  "435": "if ( this . getStepProperties ( ) != null && ! this . getStepProperties ( ) . isEmpty ( ) ) ",
  "436": "jsonArray . put ( stepProperty . toJsonObject ( ) ) ; ",
  "437": "returnVal . put ( JSONMapping . STEP_PROPERTIES , jsonArray ) ; ",
  "438": "if ( this . getUsername ( ) != null ) { ",
  "439": "if ( this . getLifetime ( ) != null ) { ",
  "440": "returnVal . put ( JSONMapping . LIFETIME , this . getLifetime ( ) ) ; ",
  "441": "} public FlowStep createFlowStep ( FlowStep flowStepParam ) ",
  "442": "if ( flowStepParam != null && this . serviceTicket != null ) ",
  "443": "flowStepParam . setServiceTicket ( this . serviceTicket ) ; ",
  "444": "return new FlowStep ( this . putJson ( ",
  "445": "flowStepParam , WS . Path . FlowStep . Version1 . flowStepCreate ( ) ) ) ; ",
  "446": "} public FlowStep updateFlowStep ( FlowStep flowStepParam ) ",
  "447": "return new FlowStep ( this . postJson ( ",
  "448": "flowStepParam , WS . Path . FlowStep . Version1 . flowStepUpdate ( ) ) ) ; ",
  "449": "} public FlowStep getFlowStepById ( ",
  "450": "Long flowStepIdParam , String flowStepTypeParam ) ",
  "451": "FlowStep flowStep = new FlowStep ( flowStepIdParam ) ; ",
  "452": "flowStep . setFlowStepType ( flowStepTypeParam ) ; ",
  "453": "flowStep . setServiceTicket ( this . serviceTicket ) ; ",
  "454": "flowStep , WS . Path . FlowStep . Version1 . getById ( ) ) ) ; ",
  "455": "} public FlowStep getFlowStepByStep ( FlowStep flowStepParam ) ",
  "456": "if ( this . serviceTicket != null && flowStepParam != null ) ",
  "457": "flowStepParam , WS . Path . FlowStep . Version1 . getByStep ( ) ) ) ; ",
  "458": "} public JobViewListing getJobViewsByStepName ( ",
  "459": "String flowStepNameParam , Flow flowParam ) ",
  "460": "FlowStep step = new FlowStep ( ) ; ",
  "461": "step . setName ( flowStepNameParam ) ; ",
  "462": "step . setFlow ( flowParam ) ; ",
  "463": "return this . getJobViewsByStep ( step ) ; ",
  "464": "} public JobView getStandardJobViewBy ( ",
  "465": "String flowNameParam , ",
  "466": "String flowStepNameParam , ",
  "467": "String flowViewNameParam ) ",
  "468": "if ( flowNameParam == null || ",
  "469": "flowNameParam . trim ( ) . isEmpty ( ) ) ",
  "470": "throw new FluidClientException ( ",
  "471": "FluidClientException . ErrorCode . FIELD_VALIDATE ) ; ",
  "472": "if ( flowStepNameParam == null || ",
  "473": "flowStepNameParam . trim ( ) . isEmpty ( ) ) ",
  "474": "if ( flowViewNameParam == null || ",
  "475": "flowViewNameParam . trim ( ) . isEmpty ( ) ) ",
  "476": "JobViewListing jobViewListing = this . getJobViewsByStepName ( ",
  "477": "flowStepNameParam , new Flow ( flowNameParam ) ) ; ",
  "478": "JobView returnVal = null ; ",
  "479": "if ( jobViewListing . getListingCount ( ) . intValue ( ) > 1 ) ",
  "480": "for ( JobView jobView : jobViewListing . getListing ( ) ) ",
  "481": "if ( ViewType . STANDARD . equals ( jobView . getViewType ( ) ) && ",
  "482": "jobView . getViewName ( ) . equalsIgnoreCase ( flowViewNameParam ) ) ",
  "483": "returnVal = jobView ; ",
  "484": "if ( returnVal == null ) ",
  "485": "flowViewNameParam + \"'.\" , ",
  "486": "FluidClientException . ErrorCode . NO_RESULT ) ; ",
  "487": "} public JobViewListing getJobViewsByStep ( FlowStep flowStepParam ) ",
  "488": "return new JobViewListing ( this . postJson ( ",
  "489": "flowStepParam , WS . Path . FlowStep . Version1 . getAllViewsByStep ( ) ) ) ; ",
  "490": "} public JobViewListing getJobViewsByLoggedInUser ( ) ",
  "491": "FlowStep flowStep = new FlowStep ( ) ; ",
  "492": "flowStep , WS . Path . FlowStep . Version1 . getAllViewsByLoggedInUser ( ) ) ) ; ",
  "493": "} public JobViewListing getJobViewsByUser ( User userParam ) ",
  "494": "if ( this . serviceTicket != null && userParam != null ) ",
  "495": "userParam , WS . Path . FlowStep . Version1 . getAllViewsByUser ( ) ) ) ; ",
  "496": "} public JobViewListing getJobViewsByFlow ( Flow flowParam ) ",
  "497": "if ( this . serviceTicket != null && flowParam != null ) ",
  "498": "flowParam . setServiceTicket ( this . serviceTicket ) ; ",
  "499": "flowParam , WS . Path . FlowStep . Version1 . getAllViewsByFlow ( ) ) ) ; ",
  "500": "} public FlowStepListing getStepsByFlow ( Flow flowParam ) ",
  "501": "return new FlowStepListing ( this . postJson ( ",
  "502": "flowParam , WS . Path . FlowStep . Version1 . getAllStepsByFlow ( ) ) ) ; ",
  "503": "} public FlowStep deleteFlowStep ( FlowStep flowStepParam ) ",
  "504": "flowStepParam , WS . Path . FlowStep . Version1 . flowStepDelete ( ) ) ) ; ",
  "505": "} public FlowStep forceDeleteFlowStep ( FlowStep flowStepParam ) ",
  "506": "flowStepParam , WS . Path . FlowStep . Version1 . flowStepDelete ( true ) ) ) ; ",
  "507": "} public final List < ElasticTypeAndId > searchAndConvertHitsToIdsOnly ( ",
  "508": "QueryBuilder qbParam , ",
  "509": "String indexParam , ",
  "510": "int offsetParam , ",
  "511": "int limitParam , ",
  "512": "Long ... formTypesParam ) { ",
  "513": "SearchHits searchHits = this . searchWithHits ( ",
  "514": "qbParam , ",
  "515": "indexParam , ",
  "516": "offsetParam , ",
  "517": "limitParam , ",
  "518": "formTypesParam ) ; ",
  "519": "List < ElasticTypeAndId > returnVal = null ; ",
  "520": "long totalHits ; ",
  "521": "if ( searchHits != null && ( totalHits = searchHits . getTotalHits ( ) ) > 0 ) { ",
  "522": "returnVal = new ArrayList ( ) ; ",
  "523": "if ( ( searchHits . getHits ( ) . length != totalHits ) && ",
  "524": "( searchHits . getHits ( ) . length != limitParam ) ) ",
  "525": "searchHits . getHits ( ) . length + \"'.\" ) ; ",
  "526": "long iterationMax = totalHits ; ",
  "527": "if ( limitParam > 0 && totalHits > limitParam ) { ",
  "528": "iterationMax = limitParam ; ",
  "529": "for ( int index = 0 ; index < iterationMax ; index ++ ) { ",
  "530": "SearchHit searchHit = searchHits . getAt ( index ) ; ",
  "531": "String idAsString ; ",
  "532": "if ( ( idAsString = searchHit . getId ( ) ) == null ) { ",
  "533": "returnVal . add ( new ElasticTypeAndId ( ",
  "534": "this . toLongSafe ( idAsString ) , ",
  "535": "searchHit . getType ( ) ) ) ; ",
  "536": "} public final SearchHits searchWithHits ( ",
  "537": "boolean withNoFieldsParam , ",
  "538": "Long ... formTypesParam ",
  "539": "SearchRequestBuilder searchRequestBuilder = this . client . prepareSearch ( ",
  "540": "indexParam ) ",
  "541": ". setSearchType ( SearchType . DFS_QUERY_THEN_FETCH ) ",
  "542": ". setQuery ( qbParam ) ",
  "543": ". setFrom ( 0 ) ",
  "544": ". setExplain ( false ) ; ",
  "545": "if ( withNoFieldsParam ) { ",
  "546": "searchRequestBuilder = searchRequestBuilder . storedFields ( NO_FIELDS_MAPPER ) ; ",
  "547": "if ( limitParam > 0 ) ",
  "548": "searchRequestBuilder = searchRequestBuilder . setSize ( limitParam ) ; ",
  "549": "if ( offsetParam > - 1 ) { ",
  "550": "searchRequestBuilder = searchRequestBuilder . setFrom ( offsetParam ) ; ",
  "551": "if ( formTypesParam == null ) ",
  "552": "formTypesParam = new Long [ ] { } ; ",
  "553": "if ( formTypesParam != null && formTypesParam . length > 0 ) ",
  "554": "String [ ] formTypesAsString = new String [ formTypesParam . length ] ; ",
  "555": "for ( int index = 0 ; index < formTypesParam . length ; index ++ ) ",
  "556": "Long formTypeId = formTypesParam [ index ] ; ",
  "557": "if ( formTypeId == null ) ",
  "558": "formTypesAsString [ index ] = formTypeId . toString ( ) ; ",
  "559": "searchRequestBuilder = searchRequestBuilder . setTypes ( formTypesAsString ) ; ",
  "560": "SearchResponse searchResponse = searchRequestBuilder . execute ( ) . actionGet ( ) ; ",
  "561": "if ( searchResponse == null ) { ",
  "562": "return searchResponse . getHits ( ) ; ",
  "563": "} public final boolean searchContainHits ( ",
  "564": "withNoFieldsParam , ",
  "565": "return ( searchHits != null && searchHits . getTotalHits ( ) > 0 ) ; ",
  "566": "} public final List < Form > getFormsByIds ( ",
  "567": "List < Long > formIdsParam , ",
  "568": "boolean includeFieldDataParam , ",
  "569": "int limitParam ",
  "570": "if ( formIdsParam == null || formIdsParam . isEmpty ( ) ) { ",
  "571": "if ( indexParam == null || indexParam . trim ( ) . isEmpty ( ) ) { ",
  "572": "StringBuffer byIdQuery = new StringBuffer ( ) ; ",
  "573": "for ( Long formId : formIdsParam ) { ",
  "574": "byIdQuery . append ( ABaseFluidJSONObject . JSONMapping . ID ) ; ",
  "575": "byIdQuery . append ( \":\\\"\" ) ; ",
  "576": "byIdQuery . append ( formId ) ; ",
  "577": "String queryByIdsToString = byIdQuery . toString ( ) ; ",
  "578": "queryByIdsToString = queryByIdsToString . substring ( 0 , queryByIdsToString . length ( ) - 1 ) ; ",
  "579": "List < Form > returnVal = null ; ",
  "580": "if ( includeFieldDataParam ) { ",
  "581": "returnVal = this . searchAndConvertHitsToFormWithAllFields ( ",
  "582": "QueryBuilders . queryStringQuery ( queryByIdsToString ) , ",
  "583": "new Long [ ] { } ) ; ",
  "584": "returnVal = this . searchAndConvertHitsToFormWithNoFields ( ",
  "585": "if ( returnVal == null || returnVal . isEmpty ( ) ) { ",
  "586": "} public final List < Form > searchAndConvertHitsToFormWithAllFields ( ",
  "587": "( searchHits . getHits ( ) . length != limitParam ) ) { ",
  "588": "String source ; ",
  "589": "if ( ( source = searchHit . getSourceAsString ( ) ) == null ) { ",
  "590": "this . printInfoOnSourceFromES ( searchHit ) ; ",
  "591": "Form formFromSource = new Form ( ) ; ",
  "592": "JSONObject jsonObject = new JSONObject ( source ) ; ",
  "593": "List < Field > fieldsForForm = null ; ",
  "594": "if ( jsonObject . has ( Form . JSONMapping . FORM_TYPE_ID ) ) { ",
  "595": "if ( this . fieldUtil == null ) { ",
  "596": "fieldsForForm = formFromSource . convertTo ( ",
  "597": "this . fieldUtil . getFormFieldMappingForFormDefinition ( ",
  "598": "jsonObject . getLong ( Form . JSONMapping . FORM_TYPE_ID ) ) ) ; ",
  "599": "formFromSource . populateFromElasticSearchJson ( ",
  "600": "jsonObject , fieldsForForm ) ; ",
  "601": "returnVal . add ( formFromSource ) ; ",
  "602": "} public final List < Form > searchAndConvertHitsToFormWithNoFields ( ",
  "603": "new JSONObject ( source ) , ",
  "604": "} protected final List < Form > populateTableFields ( ",
  "605": "boolean addAllTableRecordsForReturnParam , ",
  "606": "List < Field > formFieldsParam ) { ",
  "607": "if ( formFieldsParam == null || formFieldsParam . isEmpty ( ) ) { ",
  "608": "List < Form > allTableRecordsFromAllFields = addAllTableRecordsForReturnParam ? ",
  "609": "new ArrayList ( ) : null ; ",
  "610": "for ( Field descendantField : formFieldsParam ) { ",
  "611": "if ( ! ( descendantField . getFieldValue ( ) instanceof TableField ) ) { ",
  "612": "TableField tableField = ( TableField ) descendantField . getFieldValue ( ) ; ",
  "613": "List < Form > tableRecordWithIdOnly = tableField . getTableRecords ( ) ; ",
  "614": "if ( tableRecordWithIdOnly == null || tableRecordWithIdOnly . isEmpty ( ) ) { ",
  "615": "List < Long > formIdsOnly = new ArrayList ( ) ; ",
  "616": "for ( Form tableRecord : tableRecordWithIdOnly ) { ",
  "617": "formIdsOnly . add ( tableRecord . getId ( ) ) ; ",
  "618": "List < Form > populatedTableRecords = this . getFormsByIds ( ",
  "619": "Index . TABLE_RECORD , ",
  "620": "formIdsOnly , ",
  "621": "includeFieldDataParam , ",
  "622": "DEFAULT_OFFSET , MAX_NUMBER_OF_TABLE_RECORDS ) ; ",
  "623": "if ( addAllTableRecordsForReturnParam && populatedTableRecords != null ) { ",
  "624": "allTableRecordsFromAllFields . addAll ( populatedTableRecords ) ; ",
  "625": "tableField . setTableRecords ( populatedTableRecords ) ; ",
  "626": "descendantField . setFieldValue ( tableField ) ; ",
  "627": "return allTableRecordsFromAllFields ; ",
  "628": "} public boolean doesIndexExist ( String indexToCheckParam ) { ",
  "629": "if ( indexToCheckParam == null || indexToCheckParam . trim ( ) . isEmpty ( ) ) { ",
  "630": "return this . client . admin ( ) . cluster ( ) ",
  "631": ". prepareState ( ) . execute ( ) ",
  "632": ". actionGet ( ) . getState ( ) ",
  "633": ". getMetaData ( ) . hasIndex ( indexToCheckParam ) ; ",
  "634": "public void closeConnection ( ) { ",
  "635": "CloseConnectionRunnable closeConnectionRunnable = ",
  "636": "new CloseConnectionRunnable ( this ) ; ",
  "637": "Thread closeConnThread = new Thread ( ",
  "638": "closeConnThread . start ( ) ; ",
  "639": "public boolean doesNameContain ( String containingTextParam ) { ",
  "640": "if ( this . getName ( ) == null || this . getName ( ) . trim ( ) . isEmpty ( ) ) { ",
  "641": "if ( containingTextParam == null || containingTextParam . trim ( ) . isEmpty ( ) ) { ",
  "642": "String paramLower = containingTextParam . toLowerCase ( ) ; ",
  "643": "String nameLower = this . getName ( ) . toLowerCase ( ) ; ",
  "644": "return nameLower . contains ( paramLower ) ; ",
  "645": "if ( this . getAttachmentDataBase64 ( ) != null ) { ",
  "646": "returnVal . put ( JSONMapping . ATTACHMENT_DATA_BASE64 , ",
  "647": "this . getAttachmentDataBase64 ( ) ) ; ",
  "648": "if ( this . getContentType ( ) != null ) { ",
  "649": "returnVal . put ( JSONMapping . CONTENT_TYPE , this . getContentType ( ) ) ; ",
  "650": "if ( this . getFormId ( ) != null ) { ",
  "651": "returnVal . put ( JSONMapping . FORM_ID , this . getFormId ( ) ) ; ",
  "652": "if ( this . getName ( ) != null ) { ",
  "653": "if ( this . getPath ( ) != null ) { ",
  "654": "returnVal . put ( JSONMapping . PATH , this . getPath ( ) ) ; ",
  "655": "if ( this . getVersion ( ) != null ) { ",
  "656": "returnVal . put ( JSONMapping . VERSION , this . getVersion ( ) ) ; ",
  "657": "if ( this . getDateCreated ( ) != null ) { ",
  "658": "this . getDateCreated ( ) . getTime ( ) ) ; ",
  "659": "if ( this . getDateLastUpdated ( ) != null ) { ",
  "660": "this . getDateLastUpdated ( ) . getTime ( ) ) ; ",
  "661": "} public List < Form > getTableForms ( ",
  "662": "Form formToGetTableFormsForParam , ",
  "663": "boolean includeFieldDataParam ) { ",
  "664": "if ( formToGetTableFormsForParam != null && this . serviceTicket != null ) { ",
  "665": "formToGetTableFormsForParam . setServiceTicket ( this . serviceTicket ) ; ",
  "666": "FormListing formListing = new FormListing ( ",
  "667": "this . postJson ( formToGetTableFormsForParam , ",
  "668": "WS . Path . SQLUtil . Version1 . getTableForms ( ",
  "669": "includeFieldDataParam ) ) ) ; ",
  "670": "return formListing . getListing ( ) ; ",
  "671": "catch ( JSONException e ) { ",
  "672": "throw new FluidClientException ( e . getMessage ( ) , e , ",
  "673": "} public List < Form > getDescendants ( ",
  "674": "Form formToGetDescendantsForParam , ",
  "675": "boolean includeTableFieldsParam , ",
  "676": "boolean inclTableFieldFormInfoParam ) { ",
  "677": "if ( formToGetDescendantsForParam != null && this . serviceTicket != null ) { ",
  "678": "formToGetDescendantsForParam . setServiceTicket ( this . serviceTicket ) ; ",
  "679": "this . postJson ( formToGetDescendantsForParam , ",
  "680": "WS . Path . SQLUtil . Version1 . getDescendants ( ",
  "681": "includeTableFieldsParam , ",
  "682": "inclTableFieldFormInfoParam ) ) ) ; ",
  "683": "} public Form getAncestor ( ",
  "684": "Form formToGetAncestorForParam , ",
  "685": "boolean includeTableFieldsParam ) { ",
  "686": "if ( formToGetAncestorForParam != null && this . serviceTicket != null ) { ",
  "687": "formToGetAncestorForParam . setServiceTicket ( this . serviceTicket ) ; ",
  "688": "return new Form ( ",
  "689": "this . postJson ( formToGetAncestorForParam , ",
  "690": "WS . Path . SQLUtil . Version1 . getAncestor ( ",
  "691": "includeTableFieldsParam ) ) ) ; ",
  "692": "} public List < Field > getFormFields ( ",
  "693": "Form formToGetFieldsForParam , ",
  "694": "if ( formToGetFieldsForParam != null && this . serviceTicket != null ) { ",
  "695": "formToGetFieldsForParam . setServiceTicket ( this . serviceTicket ) ; ",
  "696": "FormFieldListing formFieldListing = new FormFieldListing ( ",
  "697": "this . postJson ( formToGetFieldsForParam , ",
  "698": "WS . Path . SQLUtil . Version1 . getFormFields ( ",
  "699": "return formFieldListing . getListing ( ) ; ",
  "700": "} public String toCamelUpperCase ( String inputParam ) { ",
  "701": "if ( inputParam == null ) ",
  "702": "if ( inputParam . isEmpty ( ) ) ",
  "703": "char [ ] original = inputParam . toCharArray ( ) ; ",
  "704": "StringBuilder titleCase = ",
  "705": "new StringBuilder ( Character . toString ( ",
  "706": "Character . toLowerCase ( original [ 0 ] ) ) ) ; ",
  "707": "boolean nextTitleCase = false ; ",
  "708": "for ( int index = 1 ; index < original . length ; index ++ ) ",
  "709": "char c = original [ index ] ; ",
  "710": "if ( Character . isSpaceChar ( c ) ) { ",
  "711": "nextTitleCase = true ; ",
  "712": "else if ( nextTitleCase ) { ",
  "713": "c = Character . toTitleCase ( c ) ; ",
  "714": "nextTitleCase = false ; ",
  "715": "titleCase . append ( c ) ; ",
  "716": "return titleCase . toString ( ) ; ",
  "717": "} public String getLatitudeFromFluidText ( String textToCheckParam ) { ",
  "718": "if ( textToCheckParam == null || textToCheckParam . isEmpty ( ) ) { ",
  "719": "String [ ] latitudeAndLongitude = textToCheckParam . split ( REG_EX_PIPE ) ; ",
  "720": "if ( latitudeAndLongitude == null || latitudeAndLongitude . length < 2 ) { ",
  "721": "latitudeAndLongitude = textToCheckParam . split ( REG_EX_COMMA ) ; ",
  "722": "if ( latitudeAndLongitude == null || latitudeAndLongitude . length == 0 ) { ",
  "723": "return ZERO ; ",
  "724": "if ( latitudeAndLongitude . length > 1 ) ",
  "725": "return toGoeSafe ( latitudeAndLongitude [ 0 ] ) ; ",
  "726": "} public double getLatitudeFromElasticSearchText ( String textToCheckParam ) ",
  "727": "String [ ] latitudeAndLongitude = textToCheckParam . split ( REG_EX_COMMA ) ; ",
  "728": "latitudeAndLongitude = textToCheckParam . split ( REG_EX_PIPE ) ; ",
  "729": "if ( latitudeAndLongitude . length > 1 ) { ",
  "730": "return toDoubleSafe ( latitudeAndLongitude [ 0 ] ) ; ",
  "731": "} public double getLongitudeFromElasticSearchText ( String textToCheckParam ) ",
  "732": "if ( textToCheckParam == null || textToCheckParam . trim ( ) . isEmpty ( ) ) { ",
  "733": "return this . toDoubleSafe ( latitudeAndLongitude [ 1 ] ) ; ",
  "734": "} public final double toDoubleSafe ( String toParseParam ) { ",
  "735": "if ( toParseParam == null || toParseParam . trim ( ) . isEmpty ( ) ) { ",
  "736": "return 0D ; ",
  "737": "return Double . parseDouble ( toParseParam ) ; ",
  "738": "} public final String toGoeSafe ( String toParseParam ) { ",
  "739": "for ( char charToCheck : toParseParam . toCharArray ( ) ) { ",
  "740": "if ( ! Character . isDigit ( charToCheck ) && '.' != charToCheck ) { ",
  "741": "if ( toParseParam . length ( ) > 12 ) { ",
  "742": "return toParseParam . substring ( 0 , 12 ) ; ",
  "743": "return toParseParam ; ",
  "744": "} public static byte [ ] decodeBase64 ( String base64StringParam ) ",
  "745": "if ( base64StringParam == null ) ",
  "746": "if ( base64StringParam . isEmpty ( ) ) ",
  "747": "return new byte [ ] { } ; ",
  "748": "return Base64 . getDecoder ( ) . decode ( base64StringParam ) ; ",
  "749": "} public static String encodeBase16 ( byte [ ] bytesParam ) ",
  "750": "if ( bytesParam == null ) ",
  "751": "if ( bytesParam . length == 0 ) ",
  "752": "return UtilGlobal . EMPTY ; ",
  "753": "return DatatypeConverter . printHexBinary ( bytesParam ) . toUpperCase ( ) ; ",
  "754": "} public static byte [ ] decodeBase16 ( String stringParam ) { ",
  "755": "if ( stringParam == null ) ",
  "756": "if ( stringParam . trim ( ) . isEmpty ( ) ) ",
  "757": "int len = stringParam . length ( ) ; ",
  "758": "byte [ ] data = new byte [ len / 2 ] ; ",
  "759": "for ( int i = 0 ; i < len ; i += 2 ) { ",
  "760": "data [ i / 2 ] = ( byte ) ( ( Character . digit ( stringParam . charAt ( i ) , 16 ) << 4 ) ",
  "761": "+ Character . digit ( stringParam . charAt ( i + 1 ) , 16 ) ) ; ",
  "762": "} public static String encodeBase64 ( byte [ ] bytesParam ) ",
  "763": "return Base64 . getEncoder ( ) . encodeToString ( bytesParam ) ; ",
  "764": "} public void setFlatFieldOnJSONObj ( ",
  "765": "String fieldNamePrefixParam , ",
  "766": "String fieldNameIdPrefixParam , ",
  "767": "Field fieldToExtractFromParam , ",
  "768": "JSONObject objectToSetFieldOnParam ) ",
  "769": "if ( fieldToExtractFromParam == null ) ",
  "770": "String fieldName = fieldToExtractFromParam . getFieldNameAsUpperCamel ( ) ; ",
  "771": "if ( fieldName == null || fieldName . trim ( ) . isEmpty ( ) ) ",
  "772": "String completeFieldName = fieldNamePrefixParam . concat ( fieldName ) ; ",
  "773": "String completeFieldNameId = fieldNameIdPrefixParam . concat ( fieldName ) ; ",
  "774": "objectToSetFieldOnParam . put ( completeFieldNameId , ",
  "775": "fieldToExtractFromParam . getId ( ) ) ; ",
  "776": "Object fieldValue = fieldToExtractFromParam . getFieldValue ( ) ; ",
  "777": "objectToSetFieldOnParam . put ( ",
  "778": "completeFieldName , ",
  "779": "JSONObject . NULL ) ; ",
  "780": "else if ( fieldValue instanceof TableField ) ",
  "781": "else if ( fieldValue instanceof MultiChoice ) { ",
  "782": "MultiChoice multiChoice = ( MultiChoice ) fieldValue ; ",
  "783": "if ( multiChoice . getSelectedMultiChoices ( ) == null || ",
  "784": "multiChoice . getSelectedMultiChoices ( ) . isEmpty ( ) ) ",
  "785": "multiChoice . getSelectedMultiChoices ( ) . forEach ( selectedChoice -> ",
  "786": "builder . append ( selectedChoice ) ; ",
  "787": "String selectVal = builder . toString ( ) ; ",
  "788": "if ( selectVal != null && ! selectVal . trim ( ) . isEmpty ( ) ) ",
  "789": "selectVal = selectVal . substring ( 0 , selectVal . length ( ) - 2 ) ; ",
  "790": "objectToSetFieldOnParam . put ( completeFieldName , selectVal ) ; ",
  "791": "if ( ( fieldValue instanceof String ) && ",
  "792": "Field . LATITUDE_AND_LONGITUDE . equals ( ",
  "793": "fieldToExtractFromParam . getTypeMetaData ( ) ) ) ",
  "794": "String latitudeTxt = this . getLatitudeFromFluidText ( formFieldValueStr ) ; ",
  "795": "String longitudeTxt = this . getLongitudeFromFluidText ( formFieldValueStr ) ; ",
  "796": "fieldValue = ( latitudeTxt . concat ( UtilGlobal . COMMA ) . concat ( longitudeTxt ) ) ; ",
  "797": "objectToSetFieldOnParam . put ( completeFieldName , fieldValue ) ; ",
  "798": "objectToSetFieldOnParam . put ( completeFieldName , ( ( Date ) fieldValue ) . getTime ( ) ) ; ",
  "799": "} public Object doesHandlerQualifyForProcessing ( String messageParam ) { ",
  "800": "JSONObject jsonObject = null ; ",
  "801": "jsonObject = new JSONObject ( messageParam ) ; ",
  "802": "jsonExcept . getMessage ( ) , ",
  "803": "Error fluidError = new Error ( jsonObject ) ; ",
  "804": "if ( fluidError . getErrorCode ( ) > 0 ) { ",
  "805": "return fluidError ; ",
  "806": "String echo = fluidError . getEcho ( ) ; ",
  "807": "if ( this . expectedEchoMessagesBeforeComplete . contains ( echo ) ) { ",
  "808": "public void handleMessage ( Object objectToProcess ) { ",
  "809": "if ( objectToProcess instanceof Error ) { ",
  "810": "Error fluidError = ( ( Error ) objectToProcess ) ; ",
  "811": "this . errors . add ( fluidError ) ; ",
  "812": "if ( this . messageReceivedCallback != null ) ",
  "813": "this . messageReceivedCallback . errorMessageReceived ( fluidError ) ; ",
  "814": "if ( this . completableFuture != null ) ",
  "815": "this . completableFuture . completeExceptionally ( ",
  "816": "new FluidClientException ( ",
  "817": "fluidError . getErrorMessage ( ) , ",
  "818": "fluidError . getErrorCode ( ) ) ) ; ",
  "819": "JSONObject jsonObject = ( JSONObject ) objectToProcess ; ",
  "820": "if ( this . compressedResponse ) { ",
  "821": "CompressedResponse compressedResponse = new CompressedResponse ( jsonObject ) ; ",
  "822": "byte [ ] compressedJsonList = ",
  "823": "UtilGlobal . decodeBase64 ( compressedResponse . getDataBase64 ( ) ) ; ",
  "824": "byte [ ] uncompressedJson = null ; ",
  "825": "uncompressedJson = this . uncompress ( compressedJsonList ) ; ",
  "826": "} catch ( IOException eParam ) { ",
  "827": "eParam , ",
  "828": "FluidClientException . ErrorCode . IO_ERROR ) ; ",
  "829": "jsonObject = new JSONObject ( new String ( uncompressedJson ) ) ; ",
  "830": "T messageForm = this . getNewInstanceBy ( jsonObject ) ; ",
  "831": "this . returnValue . add ( messageForm ) ; ",
  "832": "String echo = messageForm . getEcho ( ) ; ",
  "833": "if ( echo != null && ! echo . trim ( ) . isEmpty ( ) ) ",
  "834": "this . expectedEchoMessagesBeforeComplete . remove ( echo ) ; ",
  "835": "if ( this . expectedEchoMessagesBeforeComplete . isEmpty ( ) ) ",
  "836": "this . completableFuture . complete ( this . returnValue ) ; ",
  "837": "this . messageReceivedCallback . messageReceived ( messageForm ) ; ",
  "838": "public void connectionClosed ( ) { ",
  "839": "this . isConnectionClosed = true ; ",
  "840": "if ( this . getErrors ( ) . isEmpty ( ) ) ",
  "841": "Error firstFluidError = this . getErrors ( ) . get ( 0 ) ; ",
  "842": "this . completableFuture . completeExceptionally ( new FluidClientException ( ",
  "843": "firstFluidError . getErrorMessage ( ) , ",
  "844": "firstFluidError . getErrorCode ( ) ) ) ; ",
  "845": "} public void addExpectedMessage ( String expectedMessageEchoParam ) ",
  "846": "if ( expectedMessageEchoParam == null || ",
  "847": "expectedMessageEchoParam . trim ( ) . isEmpty ( ) ) { ",
  "848": "this . expectedEchoMessagesBeforeComplete . add ( expectedMessageEchoParam ) ; ",
  "849": "} private List < String > getEchoMessagesFromReturnValue ( ) ",
  "850": "List < String > returnListing = new ArrayList ( ) ; ",
  "851": "if ( this . returnValue == null ) ",
  "852": "return returnListing ; ",
  "853": "Iterator < T > iterForReturnVal = ",
  "854": "this . returnValue . iterator ( ) ; ",
  "855": "while ( iterForReturnVal . hasNext ( ) ) ",
  "856": "T returnVal = iterForReturnVal . next ( ) ; ",
  "857": "if ( returnVal . getEcho ( ) == null ) ",
  "858": "returnListing . add ( returnVal . getEcho ( ) ) ; ",
  "859": "} public boolean doReturnValueEchoMessageContainAll ( ",
  "860": "List < String > echoMessageParam ) ",
  "861": "if ( echoMessageParam == null || echoMessageParam . isEmpty ( ) ) ",
  "862": "List < String > allReturnValueEchoMessages = ",
  "863": "this . getEchoMessagesFromReturnValue ( ) ; ",
  "864": "for ( String toCheckFor : echoMessageParam ) ",
  "865": "if ( ! allReturnValueEchoMessages . contains ( toCheckFor ) ) ",
  "866": "} protected byte [ ] uncompress ( ",
  "867": "byte [ ] compressedBytesParam ",
  "868": ") throws IOException { ",
  "869": "byte [ ] returnVal = null ; ",
  "870": "ZipInputStream zis = null ; ",
  "871": "if ( CHARSET == null ) { ",
  "872": "zis = new ZipInputStream ( ",
  "873": "new ByteArrayInputStream ( compressedBytesParam ) ) ; ",
  "874": "new ByteArrayInputStream ( compressedBytesParam ) , ",
  "875": "CHARSET ) ; ",
  "876": "ZipEntry ze = zis . getNextEntry ( ) ; ",
  "877": "if ( ze == null ) { ",
  "878": "while ( ( len = zis . read ( buffer ) ) > 0 ) { ",
  "879": "bos . write ( buffer , 0 , len ) ; ",
  "880": "zis . closeEntry ( ) ; ",
  "881": "zis . close ( ) ; ",
  "882": "bos . flush ( ) ; ",
  "883": "bos . close ( ) ; ",
  "884": "returnVal = bos . toByteArray ( ) ; ",
  "885": "} public List < FluidItem > getPersonalInventoryItems ( ) ",
  "886": "User loggedInUser = new User ( ) ; ",
  "887": "loggedInUser . setServiceTicket ( this . serviceTicket ) ; ",
  "888": "return new FluidItemListing ( this . postJson ( ",
  "889": "loggedInUser , ",
  "890": "WS . Path . PersonalInventory . Version1 . getAllByLoggedInUser ( ) ) ) . getListing ( ) ; ",
  "891": "} public Form removeFromPersonalInventory ( Form formToRemoveParam ) ",
  "892": "if ( formToRemoveParam != null && ",
  "893": "this . serviceTicket != null ) ",
  "894": "formToRemoveParam . setServiceTicket ( this . serviceTicket ) ; ",
  "895": "return new Form ( this . postJson ( ",
  "896": "formToRemoveParam , ",
  "897": "WS . Path . PersonalInventory . Version1 . removeFromPersonalInventory ( ) ) ) ; ",
  "898": "if ( this . getEncryptedDataBase64 ( ) != null ) { ",
  "899": "returnVal . put ( JSONMapping . ENCRYPTED_DATA_BASE_64 , this . getEncryptedDataBase64 ( ) ) ; ",
  "900": "if ( this . getEncryptedDataHmacBase64 ( ) != null ) { ",
  "901": "returnVal . put ( JSONMapping . ENCRYPTED_DATA_HMAC_BASE_64 , this . getEncryptedDataHmacBase64 ( ) ) ; ",
  "902": "if ( this . getIvBase64 ( ) != null ) { ",
  "903": "returnVal . put ( JSONMapping . IV_BASE_64 , this . getIvBase64 ( ) ) ; ",
  "904": "if ( this . getSeedBase64 ( ) != null ) { ",
  "905": "returnVal . put ( JSONMapping . SEED_BASE_64 , this . getSeedBase64 ( ) ) ; ",
  "906": "if ( this . getServiceTicket ( ) != null ) { ",
  "907": "returnVal . put ( ABaseFluidJSONObject . JSONMapping . SERVICE_TICKET , this . getServiceTicket ( ) ) ; ",
  "908": "if ( this . getSalt ( ) != null ) { ",
  "909": "if ( this . getPrincipalClient ( ) != null ) { ",
  "910": "returnVal . put ( JSONMapping . PRINCIPAL_CLIENT , this . getPrincipalClient ( ) ) ; ",
  "911": "if ( this . getRoleString ( ) != null ) { ",
  "912": "returnVal . put ( JSONMapping . ROLE_STRING , this . getRoleString ( ) ) ; ",
  "913": "if ( this . getTimestamp ( ) != null ) { ",
  "914": "returnVal . put ( JSONMapping . TIMESTAMP , this . getTimestamp ( ) ) ; ",
  "915": "} public Form createFormContainer ( Form formParam ) { ",
  "916": "return new Form ( this . putJson ( ",
  "917": "formParam , WS . Path . FormContainer . Version1 . formContainerCreate ( ) ) ) ; ",
  "918": "} public TableRecord createTableRecord ( TableRecord tableRecordParam ) { ",
  "919": "if ( tableRecordParam != null && this . serviceTicket != null ) { ",
  "920": "tableRecordParam . setServiceTicket ( this . serviceTicket ) ; ",
  "921": "return new TableRecord ( this . putJson ( ",
  "922": "tableRecordParam , ",
  "923": "WS . Path . FormContainerTableRecord . Version1 . formContainerTableRecordCreate ( ) ) ) ; ",
  "924": "} public Form updateFormContainer ( Form formParam ) { ",
  "925": "formParam , WS . Path . FormContainer . Version1 . formContainerUpdate ( ) ) ) ; ",
  "926": "} public Form executeCustomWebAction ( ",
  "927": "String customWebActionParam , ",
  "928": "Form formParam ) { ",
  "929": "return this . executeCustomWebAction ( ",
  "930": "customWebActionParam , ",
  "931": "formParam ) ; ",
  "932": "boolean isTableRecordParam , ",
  "933": "Long formContainerTableRecordBelowsToParam , ",
  "934": "if ( customWebActionParam == null || customWebActionParam . trim ( ) . isEmpty ( ) ) { ",
  "935": "formParam , WS . Path . FormContainer . Version1 . executeCustomWebAction ( ",
  "936": "isTableRecordParam , ",
  "937": "formContainerTableRecordBelowsToParam ) ) ) ; ",
  "938": "} catch ( UnsupportedEncodingException unsEncExcept ) { ",
  "939": "} public Form deleteFormContainer ( Form formContainerParam ) { ",
  "940": "if ( formContainerParam != null && this . serviceTicket != null ) { ",
  "941": "formContainerParam . setServiceTicket ( this . serviceTicket ) ; ",
  "942": "return new Form ( this . postJson ( formContainerParam , ",
  "943": "WS . Path . FormContainer . Version1 . formContainerDelete ( ) ) ) ; ",
  "944": "} public List < FormFlowHistoricData > getFormFlowHistoricData ( Form formParam ) { ",
  "945": "return new FormFlowHistoricDataListing ( this . postJson ( ",
  "946": "formParam , WS . Path . FlowItemHistory . Version1 . getByFormContainer ( ) ) ) . getListing ( ) ; ",
  "947": "} public List < FormHistoricData > getFormAndFieldHistoricData ( ",
  "948": "Form formParam , ",
  "949": "boolean includeCurrentParam ",
  "950": "if ( formParam != null && this . serviceTicket != null ) ",
  "951": "return new FormHistoricDataListing ( this . postJson ( ",
  "952": "formParam , WS . Path . FormHistory . Version1 . getByFormContainer ( ",
  "953": "includeCurrentParam ) ) ) . getListing ( ) ; ",
  "954": "} public FormHistoricData getMostRecentFormAndFieldHistoricData ( Form formParam ) { ",
  "955": "return new FormHistoricData ( this . postJson ( ",
  "956": "formParam , WS . Path . FormHistory . Version1 . getByMostRecentByFormContainer ( ) ) ) ; ",
  "957": "} public Form getFormContainerById ( Long formContainerIdParam ) { ",
  "958": "Form form = new Form ( formContainerIdParam ) ; ",
  "959": "form . setServiceTicket ( this . serviceTicket ) ; ",
  "960": "form , WS . Path . FormContainer . Version1 . getById ( ) ) ) ; ",
  "961": "} public Form lockFormContainer ( ",
  "962": "JobView jobViewParam ",
  "963": "return this . lockFormContainer ( ",
  "964": "formParam , jobViewParam , null ) ; ",
  "965": "JobView jobViewParam , ",
  "966": "User userToLockAsParam ",
  "967": "if ( this . serviceTicket != null && formParam != null ) { ",
  "968": "Long jobViewId = ( jobViewParam == null ) ? ",
  "969": "null : jobViewParam . getId ( ) ; ",
  "970": "Long lockAsUserId = ( userToLockAsParam == null ) ? ",
  "971": "null : userToLockAsParam . getId ( ) ; ",
  "972": "formParam , ",
  "973": "WS . Path . FormContainer . Version1 . lockFormContainer ( ",
  "974": "jobViewId , lockAsUserId ) ) ) ; ",
  "975": "} public Form unLockFormContainer ( ",
  "976": "boolean unlockAsyncParam ) { ",
  "977": "return this . unLockFormContainer ( ",
  "978": "formParam , null , unlockAsyncParam , false ) ; ",
  "979": "User userToUnLockAsParam ) { ",
  "980": "formParam , userToUnLockAsParam , true , false ) ; ",
  "981": "User userToUnLockAsParam , ",
  "982": "userToUnLockAsParam , ",
  "983": "unlockAsyncParam , ",
  "984": "boolean unlockAsyncParam , ",
  "985": "boolean removeFromPersonalInventoryParam ) { ",
  "986": "Long unLockAsUserId = ( userToUnLockAsParam == null ) ? ",
  "987": "null : userToUnLockAsParam . getId ( ) ; ",
  "988": "WS . Path . FormContainer . Version1 . unLockFormContainer ( ",
  "989": "unLockAsUserId , ",
  "990": "removeFromPersonalInventoryParam ) ) ) ; ",
  "991": "} public List < Form > getFormTableForms ( ",
  "992": "Long electronicFormIdParam , ",
  "993": "boolean includeFieldDataParam ",
  "994": "List < Form > returnVal = new ArrayList ( ) ; ",
  "995": "if ( electronicFormIdParam == null ) { ",
  "996": "Map < Long , String > definitionAndTitle = ",
  "997": "this . formDefUtil . getFormDefinitionIdAndTitle ( ) ; ",
  "998": "PreparedStatement preparedStatement = null ; ",
  "999": "ResultSet resultSet = null ; ",
  "1000": "ISyntax syntax = SyntaxFactory . getInstance ( ) . getSyntaxFor ( ",
  "1001": "this . getSQLTypeFromConnection ( ) , ",
  "1002": "ISyntax . ProcedureMapping . Form . GetFormContainersTableFieldFormContainers ) ; ",
  "1003": "preparedStatement = this . getConnection ( ) . prepareStatement ( ",
  "1004": "syntax . getPreparedStatement ( ) ) ; ",
  "1005": "preparedStatement . setLong ( 1 , electronicFormIdParam ) ; ",
  "1006": "resultSet = preparedStatement . executeQuery ( ) ; ",
  "1007": "while ( resultSet . next ( ) ) ",
  "1008": "returnVal . add ( this . mapFormContainerTo ( ",
  "1009": "definitionAndTitle , ",
  "1010": "resultSet ) ) ; ",
  "1011": "if ( includeFieldDataParam ) ",
  "1012": "for ( Form form : returnVal ) ",
  "1013": "List < Field > formFields = this . fieldUtil . getFormFields ( ",
  "1014": "form . getId ( ) , ",
  "1015": "form . setFormFields ( formFields ) ; ",
  "1016": "} catch ( SQLException sqlError ) { ",
  "1017": "throw new FluidSQLException ( sqlError ) ; ",
  "1018": "this . closeStatement ( preparedStatement , resultSet ) ; ",
  "1019": "public List < Form > getFormDescendants ( ",
  "1020": "List < Long > electronicFormIdsParam , ",
  "1021": "boolean includeTableFieldFormRecordInfoParam ) { ",
  "1022": "if ( electronicFormIdsParam == null || electronicFormIdsParam . isEmpty ( ) ) { ",
  "1023": "for ( Long electronicFormId : electronicFormIdsParam ) { ",
  "1024": "List < Form > forTheCycle = this . getFormDescendants ( ",
  "1025": "electronicFormId , ",
  "1026": "includeTableFieldFormRecordInfoParam ) ; ",
  "1027": "if ( forTheCycle == null ) { ",
  "1028": "returnVal . addAll ( forTheCycle ) ; ",
  "1029": "} public Form getFormAncestor ( ",
  "1030": "boolean includeTableFieldsParam ",
  "1031": "Form returnVal = null ; ",
  "1032": "ISyntax . ProcedureMapping . Form . GetFormContainersParentFormContainer ) ; ",
  "1033": "if ( resultSet . next ( ) ) { ",
  "1034": "returnVal = this . mapFormContainerTo ( ",
  "1035": "resultSet ) ; ",
  "1036": "if ( includeFieldDataParam && returnVal != null ) { ",
  "1037": "returnVal . setFormFields ( ",
  "1038": "this . fieldUtil . getFormFields ( ",
  "1039": "returnVal . getId ( ) , ",
  "1040": "false ) ) ; ",
  "1041": "} private Form mapFormContainerTo ( ",
  "1042": "Map < Long , String > definitionAndTitleParam , ",
  "1043": "ResultSet resultSetParam ",
  "1044": ") throws SQLException { ",
  "1045": "Long formId = resultSetParam . getLong ( SQLColumnIndex . _01_FORM_ID ) ; ",
  "1046": "String formType = definitionAndTitleParam . get ( ",
  "1047": "resultSetParam . getLong ( SQLColumnIndex . _02_FORM_TYPE ) ) ; ",
  "1048": "String title = resultSetParam . getString ( SQLColumnIndex . _03_TITLE ) ; ",
  "1049": "Date created = resultSetParam . getDate ( SQLColumnIndex . _04_CREATED ) ; ",
  "1050": "Date lastUpdated = resultSetParam . getDate ( SQLColumnIndex . _05_LAST_UPDATED ) ; ",
  "1051": "Long currentUserId = resultSetParam . getLong ( SQLColumnIndex . _06_CURRENT_USER_ID ) ; ",
  "1052": "if ( formType == null ) { ",
  "1053": "resultSetParam . getLong ( SQLColumnIndex . _02_FORM_TYPE ) + \"'.\" ) ; ",
  "1054": "Form toAdd = new Form ( formType ) ; ",
  "1055": "toAdd . setId ( formId ) ; ",
  "1056": "toAdd . setTitle ( title ) ; ",
  "1057": "if ( created != null ) { ",
  "1058": "toAdd . setDateCreated ( new Date ( created . getTime ( ) ) ) ; ",
  "1059": "if ( lastUpdated != null ) { ",
  "1060": "toAdd . setDateLastUpdated ( new Date ( lastUpdated . getTime ( ) ) ) ; ",
  "1061": "if ( currentUserId != null && ",
  "1062": "currentUserId . longValue ( ) > 0 ) { ",
  "1063": "User currentUser = new User ( ) ; ",
  "1064": "currentUser . setId ( currentUserId ) ; ",
  "1065": "toAdd . setCurrentUser ( currentUser ) ; ",
  "1066": "} private void mapFormContainerStatesTo ( ",
  "1067": "Form previousMappedForm , ",
  "1068": "if ( previousMappedForm == null ) { ",
  "1069": "Long formContainerState = resultSetParam . getLong ( ",
  "1070": "SQLColumnIndex . _07_FORM_CONTAINER_STATE ) ; ",
  "1071": "long formContStateId = ( formContainerState == null ) ? ",
  "1072": "0 : formContainerState . longValue ( ) ; ",
  "1073": "if ( formContStateId > 0 ) { ",
  "1074": "if ( formContStateId == 1 ) ",
  "1075": "previousMappedForm . setState ( Form . State . OPEN ) ; ",
  "1076": "else if ( formContStateId == 2 ) ",
  "1077": "previousMappedForm . setState ( Form . State . LOCKED ) ; ",
  "1078": "Long formContainerFlowState = resultSetParam . getLong ( ",
  "1079": "SQLColumnIndex . _08_FORM_CONTAINER_FLOW_STATE ) ; ",
  "1080": "long formContFlowStateId = ( formContainerFlowState == null ) ? ",
  "1081": "0 : formContainerFlowState . longValue ( ) ; ",
  "1082": "if ( formContFlowStateId > 0 ) { ",
  "1083": "if ( formContFlowStateId == 1 ) { ",
  "1084": "previousMappedForm . setFlowState ( ",
  "1085": "FluidItem . FlowState . NotInFlow . name ( ) ) ; ",
  "1086": "else if ( formContFlowStateId == 2 ) { ",
  "1087": "FluidItem . FlowState . WorkInProgress . name ( ) ) ; ",
  "1088": "else if ( formContFlowStateId == 3 ) { ",
  "1089": "FluidItem . FlowState . UserSend . name ( ) ) ; ",
  "1090": "else if ( formContFlowStateId == 4 ) { ",
  "1091": "FluidItem . FlowState . UserSendWorkInProgress . name ( ) ) ; ",
  "1092": "else if ( formContFlowStateId == 5 ) { ",
  "1093": "previousMappedForm . setFlowState ( FluidItem . FlowState . Archive . name ( ) ) ; ",
  "1094": "public static List < Role > convertToObjects ( String roleListingParam ) ",
  "1095": "if ( roleListingParam == null || roleListingParam . trim ( ) . isEmpty ( ) ) ",
  "1096": "String [ ] listOfRoles = roleListingParam . split ( UtilGlobal . REG_EX_COMMA ) ; ",
  "1097": "List < Role > returnVal = new ArrayList < > ( ) ; ",
  "1098": "for ( String roleName : listOfRoles ) ",
  "1099": "Role roleToAdd = new Role ( ) ; ",
  "1100": "roleToAdd . setName ( roleName . trim ( ) ) ; ",
  "1101": "returnVal . add ( roleToAdd ) ; ",
  "1102": "if ( this . getAdminPermissions ( ) != null && ",
  "1103": "! this . getAdminPermissions ( ) . isEmpty ( ) ) ",
  "1104": "JSONArray adminPerArr = new JSONArray ( ) ; ",
  "1105": "for ( String toAdd : this . getAdminPermissions ( ) ) ",
  "1106": "adminPerArr . put ( toAdd ) ; ",
  "1107": "returnVal . put ( JSONMapping . ADMIN_PERMISSIONS , adminPerArr ) ; ",
  "1108": "if ( this . getRoleToFormDefinitions ( ) != null && ",
  "1109": "! this . getRoleToFormDefinitions ( ) . isEmpty ( ) ) ",
  "1110": "JSONArray roleToFormDefArr = new JSONArray ( ) ; ",
  "1111": "for ( RoleToFormDefinition toAdd : this . getRoleToFormDefinitions ( ) ) ",
  "1112": "roleToFormDefArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "1113": "returnVal . put ( JSONMapping . ROLE_TO_FORM_DEFINITIONS , roleToFormDefArr ) ; ",
  "1114": "if ( this . getRoleToFormFieldToFormDefinitions ( ) != null && ",
  "1115": "! this . getRoleToFormFieldToFormDefinitions ( ) . isEmpty ( ) ) ",
  "1116": "JSONArray roleToJobViewArr = new JSONArray ( ) ; ",
  "1117": "for ( RoleToFormFieldToFormDefinition toAdd : this . getRoleToFormFieldToFormDefinitions ( ) ) ",
  "1118": "roleToJobViewArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "1119": "returnVal . put ( JSONMapping . ROLE_TO_FORM_FIELD_TO_FORM_DEFINITIONS , roleToJobViewArr ) ; ",
  "1120": "if ( this . getRoleToJobViews ( ) != null && ",
  "1121": "! this . getRoleToJobViews ( ) . isEmpty ( ) ) ",
  "1122": "for ( RoleToJobView toAdd : this . getRoleToJobViews ( ) ) ",
  "1123": "returnVal . put ( JSONMapping . ROLE_TO_JOB_VIEWS , roleToJobViewArr ) ; ",
  "1124": "if ( this . getRoleToUserQueries ( ) != null && ",
  "1125": "! this . getRoleToUserQueries ( ) . isEmpty ( ) ) ",
  "1126": "JSONArray userQueriesArr = new JSONArray ( ) ; ",
  "1127": "for ( RoleToUserQuery toAdd : this . getRoleToUserQueries ( ) ) ",
  "1128": "userQueriesArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "1129": "returnVal . put ( JSONMapping . ROLE_TO_USER_QUERIES , userQueriesArr ) ; ",
  "1130": "} public Form createFormDefinition ( Form formDefinitionParam ) ",
  "1131": "if ( formDefinitionParam != null && this . serviceTicket != null ) ",
  "1132": "formDefinitionParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1133": "formDefinitionParam , WS . Path . FormDefinition . Version1 . formDefinitionCreate ( ) ) ) ; ",
  "1134": "} public Form updateFormDefinition ( Form formDefinitionParam ) ",
  "1135": "formDefinitionParam , ",
  "1136": "WS . Path . FormDefinition . Version1 . formDefinitionUpdate ( ) ) ) ; ",
  "1137": "} public Form getFormDefinitionById ( Long formDefinitionIdParam ) ",
  "1138": "Form form = new Form ( formDefinitionIdParam ) ; ",
  "1139": "form , WS . Path . FormDefinition . Version1 . getById ( ) ) ) ; ",
  "1140": "} public Form getFormDefinitionByName ( String formDefinitionNameParam ) ",
  "1141": "Form form = new Form ( formDefinitionNameParam ) ; ",
  "1142": "form , WS . Path . FormDefinition . Version1 . getByName ( ) ) ) ; ",
  "1143": "} public List < Form > getAllByLoggedInUser ( boolean includeTableRecordTypesParam ) ",
  "1144": "Form form = new Form ( ) ; ",
  "1145": "if ( includeTableRecordTypesParam ) ",
  "1146": "return new FormListing ( this . postJson ( ",
  "1147": "form , WS . Path . FormDefinition . Version1 . getAllByLoggedInUserIncludeTableTypes ( ) ) ) . getListing ( ) ; ",
  "1148": "form , WS . Path . FormDefinition . Version1 . getAllByLoggedInUser ( ) ) ) . getListing ( ) ; ",
  "1149": "} public List < Form > getAllByLoggedInUserWhereCanCreateInstanceOf ( ) ",
  "1150": "form , WS . Path . FormDefinition . Version1 . getAllByLoggedInAndCanCreateInstanceOf ( ) ) ) . ",
  "1151": "getListing ( ) ; ",
  "1152": "} public Form deleteFormDefinition ( Form formDefinitionParam ) ",
  "1153": "return new Form ( this . postJson ( formDefinitionParam , ",
  "1154": "WS . Path . FormDefinition . Version1 . formDefinitionDelete ( ) ) ) ; ",
  "1155": "} public CachedFieldValue getCachedFieldValueFrom ( ",
  "1156": "Long formDefIdParam , ",
  "1157": "Long formContIdParam , ",
  "1158": "Long formFieldIdParam ) ",
  "1159": "if ( ( formDefIdParam == null || formContIdParam == null ) || ",
  "1160": "formFieldIdParam == null ) ",
  "1161": "String storageKey = this . getStorageKeyFrom ( ",
  "1162": "formDefIdParam , ",
  "1163": "formContIdParam , ",
  "1164": "formFieldIdParam ) ; ",
  "1165": "Object objWithKey ; ",
  "1166": "objWithKey = this . memcachedClient . get ( storageKey ) ; ",
  "1167": "catch ( MemcachedException e ) { ",
  "1168": "} catch ( TimeoutException e ) { ",
  "1169": "return this . getCacheFieldValueFromObject ( objWithKey ) ; ",
  "1170": "private CachedFieldValue getCacheFieldValueFromObject ( Object objWithKeyParam ) ",
  "1171": "if ( objWithKeyParam == null ) ",
  "1172": "Method methodGetWord = CacheUtil . getMethod ( ",
  "1173": "objWithKeyParam . getClass ( ) , ",
  "1174": "CustomCode . IWord . METHOD_getWord ) ; ",
  "1175": "Method methodGetValue = CacheUtil . getMethod ( ",
  "1176": "CustomCode . ADataType . METHOD_getValue ) ; ",
  "1177": "Object getWordObj = CacheUtil . invoke ( methodGetWord , objWithKeyParam ) ; ",
  "1178": "String getWordVal = null ; ",
  "1179": "if ( getWordObj instanceof String ) ",
  "1180": "getWordVal = ( String ) getWordObj ; ",
  "1181": "Object getValueObj ; ",
  "1182": "if ( FlowJobType . MULTIPLE_CHOICE . equals ( getWordVal ) ) ",
  "1183": "MultiChoice multiChoice = new MultiChoice ( ) ; ",
  "1184": "Method methodAvailableChoices = getMethod ( ",
  "1185": "CustomCode . MultipleChoice . METHOD_getAvailableChoices ) ; ",
  "1186": "Object availChoicesObj = ",
  "1187": "CacheUtil . invoke ( methodAvailableChoices , objWithKeyParam ) ; ",
  "1188": "if ( availChoicesObj instanceof List ) ",
  "1189": "multiChoice . setAvailableMultiChoices ( ( List ) availChoicesObj ) ; ",
  "1190": "Method methodSelectedChoices = getMethod ( ",
  "1191": "CustomCode . MultipleChoice . METHOD_getSelectedChoices ) ; ",
  "1192": "Object selectedChoicesObj = ",
  "1193": "invoke ( methodSelectedChoices , objWithKeyParam ) ; ",
  "1194": "if ( selectedChoicesObj instanceof List ) ",
  "1195": "multiChoice . setSelectedMultiChoices ( ( List ) selectedChoicesObj ) ; ",
  "1196": "getValueObj = multiChoice ; ",
  "1197": "getValueObj = CacheUtil . invoke ( methodGetValue , objWithKeyParam ) ; ",
  "1198": "if ( getValueObj == null ) ",
  "1199": "if ( getWordVal == null ) ",
  "1200": "throw new FluidCacheException ( ",
  "1201": "CachedFieldValue returnVal = new CachedFieldValue ( ) ; ",
  "1202": "returnVal . dataType = getWordVal ; ",
  "1203": "returnVal . cachedFieldValue = getValueObj ; ",
  "1204": "private static Method getMethod ( Class clazzParam , String nameParam ) ",
  "1205": "if ( clazzParam == null || nameParam == null ) ",
  "1206": "Method returnVal = clazzParam . getDeclaredMethod ( nameParam ) ; ",
  "1207": "returnVal . setAccessible ( true ) ; ",
  "1208": "catch ( NoSuchMethodException e ) { ",
  "1209": "} private static Object invoke ( Method methodParam , Object objParam ) ",
  "1210": "return methodParam . invoke ( objParam ) ; ",
  "1211": "} private String getStorageKeyFrom ( ",
  "1212": "StringBuilder stringBuff = new StringBuilder ( ) ; ",
  "1213": "if ( formDefIdParam == null ) ",
  "1214": "stringBuff . append ( NULL ) ; ",
  "1215": "stringBuff . append ( formDefIdParam . toString ( ) ) ; ",
  "1216": "stringBuff . append ( DASH ) ; ",
  "1217": "if ( formContIdParam == null ) ",
  "1218": "stringBuff . append ( formContIdParam . toString ( ) ) ; ",
  "1219": "if ( formFieldIdParam == null ) ",
  "1220": "stringBuff . append ( formFieldIdParam . toString ( ) ) ; ",
  "1221": "return stringBuff . toString ( ) ; ",
  "1222": "} private MemcachedClient initXMemcachedClient ( ) ",
  "1223": "if ( this . memcachedClient != null && ! this . memcachedClient . isShutdown ( ) ) ",
  "1224": "return this . memcachedClient ; ",
  "1225": "this . memcachedClient = new XMemcachedClient ( ",
  "1226": "this . cacheHost , this . cachePort ) ; ",
  "1227": "if ( this . memcachedClient != null && ",
  "1228": "! this . memcachedClient . isShutdown ( ) ) ",
  "1229": "this . memcachedClient . shutdown ( ) ; ",
  "1230": "catch ( IOException eParam ) { ",
  "1231": "if ( this . getOrder ( ) != null ) ",
  "1232": "returnVal . put ( JSONMapping . ORDER , this . getOrder ( ) ) ; ",
  "1233": "if ( this . getRule ( ) != null ) ",
  "1234": "returnVal . put ( JSONMapping . RULE , this . getRule ( ) ) ; ",
  "1235": "if ( this . getCurrentTypedSyntax ( ) != null ) ",
  "1236": "returnVal . put ( JSONMapping . CURRENT_TYPED_SYNTAX , ",
  "1237": "this . getCurrentTypedSyntax ( ) ) ; ",
  "1238": "returnVal . put ( JSONMapping . FLOW , this . getFlow ( ) . toJsonObject ( ) ) ; ",
  "1239": "if ( this . getFlowStep ( ) != null ) ",
  "1240": "returnVal . put ( JSONMapping . FLOW_STEP , this . getFlowStep ( ) . toJsonObject ( ) ) ; ",
  "1241": "if ( this . getNextValidSyntaxWords ( ) != null && ! this . getNextValidSyntaxWords ( ) . isEmpty ( ) ) ",
  "1242": "JSONArray jsonArrayOfValidWords = new JSONArray ( ) ; ",
  "1243": "for ( String validWord : this . getNextValidSyntaxWords ( ) ) ",
  "1244": "jsonArrayOfValidWords . put ( validWord ) ; ",
  "1245": "returnVal . put ( JSONMapping . NEXT_VALID_SYNTAX_WORDS , jsonArrayOfValidWords ) ; ",
  "1246": "} public List < FormListing > getDescendantsSynchronized ( ",
  "1247": "Form ... formToGetDescendantsForParam ) { ",
  "1248": "if ( formToGetDescendantsForParam == null || ",
  "1249": "formToGetDescendantsForParam . length == 0 ) { ",
  "1250": "String uniqueReqId = this . initNewRequest ( ) ; ",
  "1251": "int numberOfSentForms = 0 ; ",
  "1252": "if ( this . massFetch ) { ",
  "1253": "FormListing listingToSend = new FormListing ( ) ; ",
  "1254": "List < Form > listOfValidForms = new ArrayList ( ) ; ",
  "1255": "for ( Form formToSend : formToGetDescendantsForParam ) { ",
  "1256": "if ( formToSend == null ) { ",
  "1257": "FluidClientException . ErrorCode . ILLEGAL_STATE_ERROR ) ; ",
  "1258": "listOfValidForms . add ( new Form ( formToSend . getId ( ) ) ) ; ",
  "1259": "listingToSend . setEcho ( UUID . randomUUID ( ) . toString ( ) ) ; ",
  "1260": "listingToSend . setListing ( listOfValidForms ) ; ",
  "1261": "this . sendMessage ( listingToSend , uniqueReqId ) ; ",
  "1262": "numberOfSentForms ++ ; ",
  "1263": "this . setEchoIfNotSet ( formToSend ) ; ",
  "1264": "this . sendMessage ( formToSend , uniqueReqId ) ; ",
  "1265": "List < FormListing > returnValue = ",
  "1266": "this . getHandler ( uniqueReqId ) . getCF ( ) . get ( ",
  "1267": "this . getTimeoutInMillis ( ) , TimeUnit . MILLISECONDS ) ; ",
  "1268": "if ( this . getHandler ( uniqueReqId ) . isConnectionClosed ( ) ) { ",
  "1269": "} catch ( InterruptedException exceptParam ) { ",
  "1270": "exceptParam . getMessage ( ) , ",
  "1271": "exceptParam , ",
  "1272": "FluidClientException . ErrorCode . STATEMENT_EXECUTION_ERROR ) ; ",
  "1273": "} catch ( ExecutionException executeProblem ) { ",
  "1274": "Throwable cause = executeProblem . getCause ( ) ; ",
  "1275": "if ( cause instanceof FluidClientException ) { ",
  "1276": "throw ( FluidClientException ) cause ; ",
  "1277": "cause . getMessage ( ) , cause , ",
  "1278": "} catch ( TimeoutException eParam ) { ",
  "1279": "String errMessage = this . getExceptionMessageVerbose ( ",
  "1280": "\"SQLUtil-WebSocket-GetDescendants\" , ",
  "1281": "uniqueReqId , ",
  "1282": "numberOfSentForms ) ; ",
  "1283": "errMessage , FluidClientException . ErrorCode . IO_ERROR ) ; ",
  "1284": "this . removeHandler ( uniqueReqId ) ; ",
  "1285": "} protected static String getStringPropertyFromProperties ( ",
  "1286": "Properties propertiesParam , ",
  "1287": "String propertyKeyParam ",
  "1288": "if ( propertiesParam == null || propertiesParam . isEmpty ( ) ) { ",
  "1289": "return propertiesParam . getProperty ( propertyKeyParam ) ; ",
  "1290": "} protected static int getIntPropertyFromProperties ( ",
  "1291": "String strProp = getStringPropertyFromProperties ( ",
  "1292": "propertiesParam , propertyKeyParam ) ; ",
  "1293": "if ( strProp == null || strProp . trim ( ) . isEmpty ( ) ) { ",
  "1294": "return Integer . parseInt ( strProp ) ; ",
  "1295": "} protected long toLongSafe ( String toParseParam ) { ",
  "1296": "return Long . parseLong ( toParseParam . trim ( ) ) ; ",
  "1297": "returnVal . put ( JSONMapping . FLOW , this . getFlow ( ) ) ; ",
  "1298": "if ( this . getForm ( ) != null ) ",
  "1299": "returnVal . put ( JSONMapping . FORM , this . getForm ( ) . toJsonObject ( ) ) ; ",
  "1300": "returnVal . put ( JSONMapping . USER_FIELDS , fieldsArr ) ; ",
  "1301": "if ( this . getAttachments ( ) != null ) ",
  "1302": "for ( Attachment toAdd : this . getAttachments ( ) ) ",
  "1303": "jsonArray . put ( toAdd . toJsonObject ( ) ) ; ",
  "1304": "returnVal . put ( JSONMapping . ATTACHMENTS , jsonArray ) ; ",
  "1305": "if ( this . getFlowState ( ) != null ) ",
  "1306": "returnVal . put ( JSONMapping . FLOW_STATE , this . getFlowState ( ) . toString ( ) ) ; ",
  "1307": "public JSONObject convertToFlatJSONObject ( ) ",
  "1308": "FlatFormJSONMapping . FLUID_ITEM_ID , ",
  "1309": "this . getId ( ) == null ? ",
  "1310": "JSONObject . NULL : this . getId ( ) ) ; ",
  "1311": "FlatFormJSONMapping . FLOW_STATE , ",
  "1312": "( this . getFlowState ( ) == null ) ? ",
  "1313": "JSONObject . NULL : this . getFlowState ( ) . name ( ) ) ; ",
  "1314": "JSONObject formJSONObjFlat = ",
  "1315": "( this . getForm ( ) == null ) ? null : ",
  "1316": "this . getForm ( ) . convertToFlatJSONObject ( ) ; ",
  "1317": "if ( formJSONObjFlat != null ) ",
  "1318": "formJSONObjFlat . keySet ( ) . forEach ( ",
  "1319": "( toAdd ) -> ",
  "1320": "returnVal . put ( toAdd , formJSONObjFlat . get ( toAdd ) ) ; ",
  "1321": "if ( this . isCanCreate ( ) != null ) ",
  "1322": "returnVal . put ( JSONMapping . CAN_CREATE , ",
  "1323": "this . isCanCreate ( ) . booleanValue ( ) ) ; ",
  "1324": "if ( this . getFormDefinition ( ) != null ) ",
  "1325": "returnVal . put ( JSONMapping . FORM_DEFINITION , ",
  "1326": "this . getFormDefinition ( ) . toJsonObject ( ) ) ; ",
  "1327": "} public String getListOfProvidersFromIdentities ( ) ",
  "1328": "if ( this . getIdentities ( ) == null || this . getIdentities ( ) . isEmpty ( ) ) ",
  "1329": "StringBuilder returnVal = new StringBuilder ( ) ; ",
  "1330": "for ( Identity identity : this . getIdentities ( ) ) ",
  "1331": "returnVal . append ( identity . getProvider ( ) ) ; ",
  "1332": "returnVal . append ( \",\" ) ; ",
  "1333": "String toString = returnVal . toString ( ) ; ",
  "1334": "return toString . substring ( 0 , toString . length ( ) - 1 ) ; ",
  "1335": "if ( this . getUserId ( ) != null ) ",
  "1336": "returnVal . put ( JSONMapping . USER_ID , this . getUserId ( ) ) ; ",
  "1337": "if ( this . getEmail ( ) != null ) ",
  "1338": "returnVal . put ( JSONMapping . EMAIL , this . getEmail ( ) ) ; ",
  "1339": "returnVal . put ( JSONMapping . EMAIL_VERIFIED , this . isEmailVerified ( ) ) ; ",
  "1340": "if ( this . getNickname ( ) != null ) ",
  "1341": "returnVal . put ( JSONMapping . NICKNAME , this . getNickname ( ) ) ; ",
  "1342": "if ( this . getPicture ( ) != null ) ",
  "1343": "returnVal . put ( JSONMapping . PICTURE , this . getPicture ( ) ) ; ",
  "1344": "if ( this . getGivenName ( ) != null ) ",
  "1345": "returnVal . put ( JSONMapping . GIVEN_NAME , this . getGivenName ( ) ) ; ",
  "1346": "if ( this . getFamilyName ( ) != null ) ",
  "1347": "returnVal . put ( JSONMapping . FAMILY_NAME , this . getFamilyName ( ) ) ; ",
  "1348": "if ( this . getLocale ( ) != null ) ",
  "1349": "if ( this . getIdentities ( ) != null && ! this . getIdentities ( ) . isEmpty ( ) ) ",
  "1350": "JSONArray identitiesArr = new JSONArray ( ) ; ",
  "1351": "for ( Identity toAdd : this . getIdentities ( ) ) ",
  "1352": "identitiesArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "1353": "returnVal . put ( JSONMapping . IDENTITIES , identitiesArr ) ; ",
  "1354": "} public File convertDocumentToPDF ( File inputDocumentParam ) { ",
  "1355": "if ( inputDocumentParam == null || ",
  "1356": "! inputDocumentParam . exists ( ) ) ",
  "1357": "throw new UtilException ( ",
  "1358": "UtilException . ErrorCode . COMMAND ) ; ",
  "1359": "if ( ! inputDocumentParam . isFile ( ) ) ",
  "1360": "File parentFolder = inputDocumentParam . getParentFile ( ) ; ",
  "1361": "String inputFilenameWithoutExt = inputDocumentParam . getName ( ) ; ",
  "1362": "int indexOfDot = - 1 ; ",
  "1363": "if ( ( indexOfDot = inputFilenameWithoutExt . indexOf ( '.' ) ) > - 1 ) ",
  "1364": "inputFilenameWithoutExt = inputFilenameWithoutExt . substring ( 0 , indexOfDot ) ; ",
  "1365": "File generatedPdfFileOut = new File ( parentFolder . getAbsolutePath ( ) . concat ( ",
  "1366": "File . separator ) . concat ( inputFilenameWithoutExt ) . concat ( \".pdf\" ) ) ; ",
  "1367": "String completeOutputPath = generatedPdfFileOut . getAbsolutePath ( ) ; ",
  "1368": "CommandUtil . CommandResult commandResult = ",
  "1369": "this . commandUtil . executeCommand ( ",
  "1370": "CommandUtil . FLUID_CLI , ",
  "1371": "COMMAND_CONVERT_DOC_TO_PDF , ",
  "1372": "\"-i\" , ",
  "1373": "inputDocumentParam . getAbsolutePath ( ) , ",
  "1374": "\"-o\" , ",
  "1375": "completeOutputPath ) ; ",
  "1376": "if ( commandResult . getExitCode ( ) != 0 ) ",
  "1377": "inputDocumentParam . getName ( ) + ",
  "1378": "File returnVal = new File ( completeOutputPath ) ; ",
  "1379": "if ( ! returnVal . exists ( ) ) ",
  "1380": "completeOutputPath + \"'.\" , ",
  "1381": "UtilException . ErrorCode . GENERAL ) ; ",
  "1382": "eParam , UtilException . ErrorCode . GENERAL ) ; ",
  "1383": "if ( DISABLE_WS ) { ",
  "1384": "this . mode = Mode . RESTfulActive ; ",
  "1385": "if ( this . getAncestorClient == null && ",
  "1386": "Mode . RESTfulActive != this . mode ) { ",
  "1387": "this . getAncestorClient = new SQLUtilWebSocketGetAncestorClient ( ",
  "1388": "this . baseURL , ",
  "1389": "this . loggedInUser . getServiceTicketAsHexUpper ( ) , ",
  "1390": "this . timeoutMillis , ",
  "1391": "COMPRESS_RSP , ",
  "1392": "COMPRESS_RSP_CHARSET ) ; ",
  "1393": "this . mode = Mode . WebSocketActive ; ",
  "1394": "} catch ( FluidClientException clientExcept ) { ",
  "1395": "if ( clientExcept . getErrorCode ( ) != ",
  "1396": "FluidClientException . ErrorCode . WEB_SOCKET_DEPLOY_ERROR ) { ",
  "1397": "throw clientExcept ; ",
  "1398": "Form formToUse = ( formToGetAncestorForParam == null ) ? null : ",
  "1399": "new Form ( formToGetAncestorForParam . getId ( ) ) ; ",
  "1400": "return ( this . getAncestorClient == null ) ? ",
  "1401": "this . sqlUtilClient . getAncestor ( ",
  "1402": "formToUse , ",
  "1403": "includeTableFieldsParam ) : ",
  "1404": "this . getAncestorClient . getAncestorSynchronized ( formToUse ) ; ",
  "1405": "} public List < FormListing > getDescendants ( ",
  "1406": "boolean includeTableFieldFormRecordInfoParam , ",
  "1407": "boolean massFetchParam , ",
  "1408": "Form ... formsToGetDescForParam ) ",
  "1409": "if ( this . getDescendantsClient == null && Mode . RESTfulActive != this . mode ) { ",
  "1410": "this . getDescendantsClient = new SQLUtilWebSocketGetDescendantsClient ( ",
  "1411": "includeTableFieldFormRecordInfoParam , ",
  "1412": "massFetchParam , ",
  "1413": "if ( formsToGetDescForParam == null || formsToGetDescForParam . length < 1 ) { ",
  "1414": "Form [ ] formsToFetchFor = ",
  "1415": "new Form [ formsToGetDescForParam . length ] ; ",
  "1416": "for ( int index = 0 ; index < formsToFetchFor . length ; index ++ ) { ",
  "1417": "formsToFetchFor [ index ] = new Form ( formsToGetDescForParam [ index ] . getId ( ) ) ; ",
  "1418": "if ( this . getDescendantsClient != null ) { ",
  "1419": "return this . getDescendantsClient . getDescendantsSynchronized ( ",
  "1420": "formsToFetchFor ) ; ",
  "1421": "List < FormListing > returnVal = new ArrayList < > ( ) ; ",
  "1422": "for ( Form formToFetchFor : formsToFetchFor ) { ",
  "1423": "List < Form > listOfForms = ",
  "1424": "this . sqlUtilClient . getDescendants ( ",
  "1425": "formToFetchFor , ",
  "1426": "FormListing toAdd = new FormListing ( ) ; ",
  "1427": "toAdd . setListing ( listOfForms ) ; ",
  "1428": "toAdd . setListingCount ( ( listOfForms == null ) ? 0 : listOfForms . size ( ) ) ; ",
  "1429": "returnVal . add ( toAdd ) ; ",
  "1430": "} public List < FormListing > getTableForms ( ",
  "1431": "Form ... formsToGetTableFormsForParam ",
  "1432": "if ( this . getTableFormsClient == null && ",
  "1433": "this . getTableFormsClient = new SQLUtilWebSocketGetTableFormsClient ( ",
  "1434": "if ( formsToGetTableFormsForParam == null || formsToGetTableFormsForParam . length < 1 ) { ",
  "1435": "new Form [ formsToGetTableFormsForParam . length ] ; ",
  "1436": "formsToFetchFor [ index ] = new Form ( formsToGetTableFormsForParam [ index ] . getId ( ) ) ; ",
  "1437": "if ( this . getTableFormsClient != null ) { ",
  "1438": "return this . getTableFormsClient . getTableFormsSynchronized ( formsToFetchFor ) ; ",
  "1439": "this . sqlUtilClient . getTableForms ( ",
  "1440": "includeFieldDataParam ) ; ",
  "1441": "} public List < FormFieldListing > getFormFields ( ",
  "1442": "Form ... formsToGetFieldsForParam ",
  "1443": "if ( this . getFormFieldsClient == null && Mode . RESTfulActive != this . mode ) { ",
  "1444": "this . getFormFieldsClient = new SQLUtilWebSocketGetFormFieldsClient ( ",
  "1445": "if ( formsToGetFieldsForParam == null || ",
  "1446": "formsToGetFieldsForParam . length < 1 ) { ",
  "1447": "new Form [ formsToGetFieldsForParam . length ] ; ",
  "1448": "formsToFetchFor [ index ] = new Form ( formsToGetFieldsForParam [ index ] . getId ( ) ) ; ",
  "1449": "if ( this . getFormFieldsClient != null ) { ",
  "1450": "return this . getFormFieldsClient . getFormFieldsSynchronized ( ",
  "1451": "List < FormFieldListing > returnVal = new ArrayList < > ( ) ; ",
  "1452": "List < Field > listOfFields = ",
  "1453": "this . sqlUtilClient . getFormFields ( ",
  "1454": "FormFieldListing toAdd = new FormFieldListing ( ) ; ",
  "1455": "toAdd . setListing ( listOfFields ) ; ",
  "1456": "toAdd . setListingCount ( ( listOfFields == null ) ? 0 : listOfFields . size ( ) ) ; ",
  "1457": "} public void massPopulateFormFields ( ",
  "1458": "Form ... formsToPopulateFormFieldsForParam ",
  "1459": "if ( formsToPopulateFormFieldsForParam == null || ",
  "1460": "formsToPopulateFormFieldsForParam . length < 1 ) { ",
  "1461": "Form [ ] formsToFetchForLocalCacheArr = ",
  "1462": "new Form [ formsToPopulateFormFieldsForParam . length ] ; ",
  "1463": "for ( int index = 0 ; index < formsToFetchForLocalCacheArr . length ; index ++ ) { ",
  "1464": "formsToFetchForLocalCacheArr [ index ] = new Form ( formsToPopulateFormFieldsForParam [ index ] . getId ( ) ) ; ",
  "1465": "formsToFetchForLocalCacheArr [ index ] . setEcho ( UUID . randomUUID ( ) . toString ( ) ) ; ",
  "1466": "List < FormFieldListing > listingReturnFieldValsPopulated = new ArrayList < > ( ) ; ",
  "1467": "listingReturnFieldValsPopulated = ",
  "1468": "this . getFormFieldsClient . getFormFieldsSynchronized ( formsToFetchForLocalCacheArr ) ; ",
  "1469": "for ( Form formToFetchFor : formsToFetchForLocalCacheArr ) { ",
  "1470": "toAdd . setEcho ( formToFetchFor . getEcho ( ) ) ; ",
  "1471": "listingReturnFieldValsPopulated . add ( toAdd ) ; ",
  "1472": "for ( Form formToSetFieldsOn : formsToPopulateFormFieldsForParam ) { ",
  "1473": "formToSetFieldsOn . setFormFields ( ",
  "1474": "this . getFieldValuesForFormFromCache ( ",
  "1475": "formToSetFieldsOn . getId ( ) , ",
  "1476": "listingReturnFieldValsPopulated , ",
  "1477": "formsToFetchForLocalCacheArr ) ) ; ",
  "1478": "} private List < Field > getFieldValuesForFormFromCache ( ",
  "1479": "Long formIdParam , ",
  "1480": "List < FormFieldListing > listingReturnFieldValsPopulatedParam , ",
  "1481": "Form [ ] formsToFetchForLocalCacheArrParam ) { ",
  "1482": "if ( formIdParam == null || formIdParam . longValue ( ) < 1 ) { ",
  "1483": "if ( listingReturnFieldValsPopulatedParam == null || ",
  "1484": "listingReturnFieldValsPopulatedParam . isEmpty ( ) ) { ",
  "1485": "if ( formsToFetchForLocalCacheArrParam == null || ",
  "1486": "formsToFetchForLocalCacheArrParam . length == 0 ) { ",
  "1487": "for ( Form formIter : formsToFetchForLocalCacheArrParam ) { ",
  "1488": "if ( formIdParam . equals ( formIter . getId ( ) ) ) { ",
  "1489": "String echoToUse = formIter . getEcho ( ) ; ",
  "1490": "for ( FormFieldListing fieldListing : listingReturnFieldValsPopulatedParam ) { ",
  "1491": "if ( echoToUse . equals ( fieldListing . getEcho ( ) ) ) { ",
  "1492": "return fieldListing . getListing ( ) ; ",
  "1493": "} public void closeAndClean ( ) { ",
  "1494": "if ( this . sqlUtilClient != null ) { ",
  "1495": "this . sqlUtilClient . closeAndClean ( ) ; ",
  "1496": "if ( this . getAncestorClient != null ) { ",
  "1497": "this . getAncestorClient . closeAndClean ( ) ; ",
  "1498": "this . getDescendantsClient . closeAndClean ( ) ; ",
  "1499": "this . getTableFormsClient . closeAndClean ( ) ; ",
  "1500": "this . getFormFieldsClient . closeAndClean ( ) ; ",
  "1501": "if ( this . getColumnName ( ) != null ) ",
  "1502": "returnVal . put ( JSONMapping . COLUMN_NAME , ",
  "1503": "this . getColumnName ( ) ) ; ",
  "1504": "if ( this . getColumnIndex ( ) != null ) ",
  "1505": "returnVal . put ( JSONMapping . COLUMN_INDEX , ",
  "1506": "this . getColumnIndex ( ) ) ; ",
  "1507": "if ( this . getSqlType ( ) != null ) ",
  "1508": "JSONMapping . SQL_TYPE , this . getSqlType ( ) ) ; ",
  "1509": "if ( this . getSqlValue ( ) != null ) ",
  "1510": "returnVal . put ( JSONMapping . SQL_VALUE , ",
  "1511": "this . getSqlValue ( ) ) ; ",
  "1512": "if ( this . getId ( ) != null ) ",
  "1513": "returnVal . put ( JSONMapping . ID , this . getId ( ) ) ; ",
  "1514": "if ( this . getServiceTicket ( ) != null ) ",
  "1515": "returnVal . put ( JSONMapping . SERVICE_TICKET , this . getServiceTicket ( ) ) ; ",
  "1516": "if ( this . getEcho ( ) != null ) ",
  "1517": "returnVal . put ( JSONMapping . ECHO , this . getEcho ( ) ) ; ",
  "1518": "private Date getLongAsDateFromJson ( Long longValueParam ) ",
  "1519": "if ( longValueParam == null ) ",
  "1520": "return new Date ( longValueParam ) ; ",
  "1521": "public Date getDateFieldValueFromFieldWithName ( String fieldNameParam ) ",
  "1522": "if ( ( fieldNameParam == null || fieldNameParam . trim ( ) . isEmpty ( ) ) || ",
  "1523": "( this . jsonObject == null || this . jsonObject . isNull ( fieldNameParam ) ) ) ",
  "1524": "Object objectAtIndex = this . jsonObject . get ( fieldNameParam ) ; ",
  "1525": "if ( objectAtIndex instanceof Number ) ",
  "1526": "return this . getLongAsDateFromJson ( ( ( Number ) objectAtIndex ) . longValue ( ) ) ; ",
  "1527": "else if ( objectAtIndex instanceof String ) ",
  "1528": "Date validDate = null ; ",
  "1529": "for ( SimpleDateFormat format : SUPPORTED_FORMATS ) ",
  "1530": "validDate = format . parse ( ( String ) objectAtIndex ) ; ",
  "1531": "if ( validDate != null ) ",
  "1532": "catch ( ParseException parseExcept ) ",
  "1533": "validDate = null ; ",
  "1534": "return validDate ; ",
  "1535": "public Long getDateAsLongFromJson ( Date dateValueParam ) ",
  "1536": "if ( dateValueParam == null ) ",
  "1537": "return dateValueParam . getTime ( ) ; ",
  "1538": "} public FlowStepRule createFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) ",
  "1539": "if ( flowStepRuleParam != null && this . serviceTicket != null ) ",
  "1540": "flowStepRuleParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1541": "return new FlowStepRule ( this . putJson ( ",
  "1542": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleEntryCreate ( ) ) ) ; ",
  "1543": "} public FlowStepRule createFlowStepExitRule ( FlowStepRule flowStepRuleParam ) ",
  "1544": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleExitCreate ( ) ) ) ; ",
  "1545": "} public FlowStepRule createFlowStepViewRule ( FlowStepRule flowStepRuleParam ) ",
  "1546": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleViewCreate ( ) ) ) ; ",
  "1547": "} public FlowStepRule updateFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) ",
  "1548": "return new FlowStepRule ( this . postJson ( ",
  "1549": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateEntry ( ) ) ) ; ",
  "1550": "} public FlowStepRule updateFlowStepExitRule ( FlowStepRule flowStepRuleParam ) ",
  "1551": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateExit ( ) ) ) ; ",
  "1552": "} public FlowStepRule updateFlowStepViewRule ( FlowStepRule flowStepRuleParam ) ",
  "1553": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleUpdateView ( ) ) ) ; ",
  "1554": "} public FlowStepRule compileFlowStepViewRule ( String viewRuleSyntaxParam ) ",
  "1555": "FlowStepRule flowStepRule = new FlowStepRule ( ) ; ",
  "1556": "flowStepRule . setRule ( viewRuleSyntaxParam ) ; ",
  "1557": "flowStepRule . setServiceTicket ( this . serviceTicket ) ; ",
  "1558": "flowStepRule , WS . Path . FlowStepRule . Version1 . compileViewSyntax ( ) ) ) ; ",
  "1559": "} public FlowStepRuleListing getExitRulesByStep ( FlowStep flowStepParam ) ",
  "1560": "if ( flowStepParam == null ) ",
  "1561": "return new FlowStepRuleListing ( this . postJson ( ",
  "1562": "flowStepParam , WS . Path . FlowStepRule . Version1 . getExitRulesByStep ( ) ) ) ; ",
  "1563": "} public FlowItemExecuteResult compileFlowStepViewRuleAndExecute ( ",
  "1564": "String viewRuleSyntaxParam , FluidItem fluidItemToExecuteOnParam ) ",
  "1565": "FlowItemExecutePacket toPost = new FlowItemExecutePacket ( ) ; ",
  "1566": "toPost . setServiceTicket ( this . serviceTicket ) ; ",
  "1567": "toPost . setFlowStepRule ( flowStepRule ) ; ",
  "1568": "toPost . setFluidItem ( fluidItemToExecuteOnParam ) ; ",
  "1569": "return new FlowItemExecuteResult ( this . postJson ( ",
  "1570": "toPost , WS . Path . FlowStepRule . Version1 . compileViewSyntaxAndExecute ( ) ) ) ; ",
  "1571": "} public FlowStepRule compileFlowStepEntryRule ( String entryRuleSyntaxParam ) ",
  "1572": "flowStepRule . setRule ( entryRuleSyntaxParam ) ; ",
  "1573": "flowStepRule , WS . Path . FlowStepRule . Version1 . compileEntrySyntax ( ) ) ) ; ",
  "1574": "} public FlowItemExecuteResult compileFlowStepEntryRuleAndExecute ( ",
  "1575": "String entryRuleSyntaxParam , FluidItem fluidItemToExecuteOnParam ) ",
  "1576": "toPost , WS . Path . FlowStepRule . Version1 . compileEntrySyntaxAndExecute ( ) ) ) ; ",
  "1577": "} public FlowStepRule moveFlowStepEntryRuleUp ( FlowStepRule flowStepRuleParam ) ",
  "1578": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleMoveEntryUp ( ) ) ) ; ",
  "1579": "} public FlowStepRule moveFlowStepEntryRuleDown ( FlowStepRule flowStepRuleParam ) ",
  "1580": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleMoveEntryDown ( ) ) ) ; ",
  "1581": "} public FlowStepRule deleteFlowStepEntryRule ( FlowStepRule flowStepRuleParam ) ",
  "1582": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteEntry ( ) ) ) ; ",
  "1583": "} public FlowStep deleteFlowStepExitRule ( FlowStepRule flowStepRuleParam ) ",
  "1584": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteExit ( ) ) ) ; ",
  "1585": "} public FlowStep deleteFlowStepViewRule ( FlowStepRule flowStepRuleParam ) ",
  "1586": "flowStepRuleParam , WS . Path . FlowStepRule . Version1 . flowStepRuleDeleteView ( ) ) ) ; ",
  "1587": "} public List < String > getNextValidSyntaxWordsEntryRule ( String inputRuleParam ) ",
  "1588": "if ( inputRuleParam == null ) ",
  "1589": "inputRuleParam = UtilGlobal . EMPTY ; ",
  "1590": "flowStepRule . setRule ( inputRuleParam ) ; ",
  "1591": "FlowStepRule returnedObj = new FlowStepRule ( this . postJson ( ",
  "1592": "flowStepRule , WS . Path . FlowStepRule . Version1 . getNextValidEntrySyntax ( ) ) ) ; ",
  "1593": "return returnedObj . getNextValidSyntaxWords ( ) ; ",
  "1594": "} public AppRequestToken login ( ",
  "1595": "String usernameParam , String passwordParam ) { ",
  "1596": "return this . login ( usernameParam , passwordParam , TimeUnit . HOURS . toSeconds ( 9 ) ) ; ",
  "1597": "String usernameParam , String passwordParam , Long sessionLifespanSecondsParam ) { ",
  "1598": "if ( this . isEmpty ( usernameParam ) || this . isEmpty ( passwordParam ) ) { ",
  "1599": "AuthRequest authRequest = new AuthRequest ( ) ; ",
  "1600": "authRequest . setUsername ( usernameParam ) ; ",
  "1601": "authRequest . setLifetime ( sessionLifespanSecondsParam ) ; ",
  "1602": "AuthResponse authResponse ; ",
  "1603": "authResponse = new AuthResponse ( ",
  "1604": "this . postJson ( ",
  "1605": "authRequest , ",
  "1606": "WS . Path . User . Version1 . userInitSession ( ) ) ) ; ",
  "1607": "catch ( JSONException jsonException ) { ",
  "1608": "jsonException . getMessage ( ) , jsonException , FluidClientException . ErrorCode . JSON_PARSING ) ; ",
  "1609": "AuthEncryptedData authEncData = ",
  "1610": "this . initializeSession ( passwordParam , authResponse ) ; ",
  "1611": "AppRequestToken appReqToken = this . issueAppRequestToken ( ",
  "1612": "authResponse . getServiceTicketBase64 ( ) , ",
  "1613": "usernameParam , authEncData ) ; ",
  "1614": "appReqToken . setRoleString ( authEncData . getRoleListing ( ) ) ; ",
  "1615": "appReqToken . setSalt ( authResponse . getSalt ( ) ) ; ",
  "1616": "return appReqToken ; ",
  "1617": "} private AuthEncryptedData initializeSession ( ",
  "1618": "String passwordParam , ",
  "1619": "AuthResponse authResponseParam ) { ",
  "1620": "byte [ ] ivBytes = UtilGlobal . decodeBase64 ( ",
  "1621": "authResponseParam . getIvBase64 ( ) ) ; ",
  "1622": "byte [ ] seedBytes = UtilGlobal . decodeBase64 ( ",
  "1623": "authResponseParam . getSeedBase64 ( ) ) ; ",
  "1624": "byte [ ] encryptedData = UtilGlobal . decodeBase64 ( ",
  "1625": "authResponseParam . getEncryptedDataBase64 ( ) ) ; ",
  "1626": "byte [ ] hMacFromResponse = UtilGlobal . decodeBase64 ( ",
  "1627": "authResponseParam . getEncryptedDataHmacBase64 ( ) ) ; ",
  "1628": "byte [ ] localGeneratedHMac = AES256Local . generateLocalHMAC ( ",
  "1629": "encryptedData , passwordParam , authResponseParam . getSalt ( ) , seedBytes ) ; ",
  "1630": "if ( ! Arrays . equals ( hMacFromResponse , localGeneratedHMac ) ) { ",
  "1631": "FluidClientException . ErrorCode . LOGIN_FAILURE ) ; ",
  "1632": "byte [ ] decryptedEncryptedData = ",
  "1633": "AES256Local . decryptInitPacket ( encryptedData , ",
  "1634": "passwordParam , ",
  "1635": "authResponseParam . getSalt ( ) , ",
  "1636": "ivBytes , ",
  "1637": "seedBytes ) ; ",
  "1638": "JSONObject jsonObj = new JSONObject ( new String ( decryptedEncryptedData ) ) ; ",
  "1639": "return new AuthEncryptedData ( jsonObj ) ; ",
  "1640": "} private AppRequestToken issueAppRequestToken ( ",
  "1641": "String serviceTicketBase64Param , ",
  "1642": "String usernameParam , ",
  "1643": "AuthEncryptedData authEncryptDataParam ) ",
  "1644": "byte [ ] iv = AES256Local . generateRandom ( AES256Local . IV_SIZE_BYTES ) ; ",
  "1645": "byte [ ] seed = AES256Local . generateRandom ( AES256Local . SEED_SIZE_BYTES ) ; ",
  "1646": "byte [ ] sessionKey = UtilGlobal . decodeBase64 ( ",
  "1647": "authEncryptDataParam . getSessionKeyBase64 ( ) ) ; ",
  "1648": "byte [ ] dataToEncrypt = usernameParam . getBytes ( ) ; ",
  "1649": "byte [ ] encryptedData = AES256Local . encrypt ( ",
  "1650": "sessionKey , ",
  "1651": "dataToEncrypt , ",
  "1652": "iv ) ; ",
  "1653": "byte [ ] encryptedDataHMac = ",
  "1654": "AES256Local . generateLocalHMACForReqToken ( encryptedData , sessionKey , seed ) ; ",
  "1655": "AppRequestToken requestToServer = new AppRequestToken ( ) ; ",
  "1656": "requestToServer . setEncryptedDataBase64 ( UtilGlobal . encodeBase64 ( encryptedData ) ) ; ",
  "1657": "requestToServer . setEncryptedDataHmacBase64 ( UtilGlobal . encodeBase64 ( encryptedDataHMac ) ) ; ",
  "1658": "requestToServer . setIvBase64 ( UtilGlobal . encodeBase64 ( iv ) ) ; ",
  "1659": "requestToServer . setSeedBase64 ( UtilGlobal . encodeBase64 ( seed ) ) ; ",
  "1660": "requestToServer . setServiceTicket ( serviceTicketBase64Param ) ; ",
  "1661": "return new AppRequestToken ( ",
  "1662": "this . postJson ( requestToServer , WS . Path . User . Version1 . userIssueToken ( ) ) ) ; ",
  "1663": "if ( this . getAssignmentRuleValue ( ) != null ) ",
  "1664": "returnVal . put ( JSONMapping . ASSIGNMENT_RULE_VALUE , ",
  "1665": "this . getAssignmentRuleValue ( ) ) ; ",
  "1666": "if ( this . getStatementResultAsString ( ) != null ) ",
  "1667": "returnVal . put ( JSONMapping . STATEMENT_RESULT_AS_STRING , ",
  "1668": "this . getStatementResultAsString ( ) ) ; ",
  "1669": "if ( this . getExecutePerFluidItemQuery ( ) != null ) ",
  "1670": "returnVal . put ( JSONMapping . EXECUTE_PER_FLUID_ITEM_QUERY , ",
  "1671": "this . getExecutePerFluidItemQuery ( ) ) ; ",
  "1672": "if ( this . getFluidItemQuery ( ) != null ) ",
  "1673": "returnVal . put ( JSONMapping . FLUID_ITEM_QUERY , ",
  "1674": "this . getFluidItemQuery ( ) ) ; ",
  "1675": "if ( this . getExecutionResult ( ) != null ) ",
  "1676": "returnVal . put ( JSONMapping . EXECUTION_RESULT , ",
  "1677": "this . getExecutionResult ( ) ) ; ",
  "1678": "if ( this . getProgressToNextPhase ( ) != null ) ",
  "1679": "returnVal . put ( JSONMapping . PROGRESS_TO_NEXT_PHASE , ",
  "1680": "this . getProgressToNextPhase ( ) ) ; ",
  "1681": "if ( this . getFluidItems ( ) != null && ! this . getFluidItems ( ) . isEmpty ( ) ) ",
  "1682": "for ( FluidItem item : this . getFluidItems ( ) ) ",
  "1683": "jsonArray . put ( item . toJsonObject ( ) ) ; ",
  "1684": "returnVal . put ( JSONMapping . FLUID_ITEMS , jsonArray ) ; ",
  "1685": "if ( this . getExecuteUsers ( ) != null && ! this . getExecuteUsers ( ) . isEmpty ( ) ) ",
  "1686": "for ( User item : this . getExecuteUsers ( ) ) ",
  "1687": "returnVal . put ( JSONMapping . EXECUTE_USERS , jsonArray ) ; ",
  "1688": "if ( this . getMailMessagesToSend ( ) != null && ",
  "1689": "! this . getMailMessagesToSend ( ) . isEmpty ( ) ) ",
  "1690": "for ( MailMessage item : this . getMailMessagesToSend ( ) ) ",
  "1691": "returnVal . put ( JSONMapping . MAIL_MESSAGES_TO_SEND , jsonArray ) ; ",
  "1692": "if ( this . getAvailableMultiChoices ( ) != null ) { ",
  "1693": "List < String > availChoices = this . getAvailableMultiChoices ( ) ; ",
  "1694": "returnVal . put ( JSONMapping . AVAILABLE_MULTI_CHOICES , ",
  "1695": "new JSONArray ( availChoices . toArray ( ) ) ) ; ",
  "1696": "returnVal . put ( JSONMapping . AVAILABLE_CHOICES , ",
  "1697": "JSONMapping . AVAILABLE_CHOICES_COMBINED , ",
  "1698": "this . combineStringArrayWith ( ",
  "1699": "availChoices , ",
  "1700": "UtilGlobal . PIPE ) ) ; ",
  "1701": "if ( this . getSelectedMultiChoices ( ) != null ) { ",
  "1702": "List < String > selectChoices = this . getSelectedMultiChoices ( ) ; ",
  "1703": "returnVal . put ( JSONMapping . SELECTED_MULTI_CHOICES , ",
  "1704": "new JSONArray ( selectChoices . toArray ( ) ) ) ; ",
  "1705": "returnVal . put ( JSONMapping . SELECTED_CHOICES , ",
  "1706": "JSONMapping . SELECTED_CHOICES_COMBINED , ",
  "1707": "selectChoices , ",
  "1708": "public String combineStringArrayWith ( ",
  "1709": "List < String > listToCombineParam , ",
  "1710": "String separatorCharsParam ) { ",
  "1711": "String returnValue = UtilGlobal . EMPTY ; ",
  "1712": "int lengthOfSepChars = ( separatorCharsParam == null ) ? 0 : ",
  "1713": "separatorCharsParam . length ( ) ; ",
  "1714": "if ( listToCombineParam != null && ! listToCombineParam . isEmpty ( ) ) { ",
  "1715": "StringBuffer concatBuffer = new StringBuffer ( ) ; ",
  "1716": "for ( String toAdd : listToCombineParam ) { ",
  "1717": "concatBuffer . append ( toAdd ) ; ",
  "1718": "concatBuffer . append ( separatorCharsParam ) ; ",
  "1719": "String concatString = concatBuffer . toString ( ) ; ",
  "1720": "returnValue = concatString . substring ( 0 , concatString . length ( ) - lengthOfSepChars ) ; ",
  "1721": "} public UserQuery createUserQuery ( UserQuery userQueryParam ) ",
  "1722": "if ( userQueryParam != null && this . serviceTicket != null ) ",
  "1723": "userQueryParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1724": "return new UserQuery ( this . putJson ( ",
  "1725": "userQueryParam , ",
  "1726": "WS . Path . UserQuery . Version1 . userQueryCreate ( ) ) ) ; ",
  "1727": "} public UserQuery updateUserQuery ( UserQuery userQueryParam ) { ",
  "1728": "if ( userQueryParam != null && this . serviceTicket != null ) { ",
  "1729": "return new UserQuery ( this . postJson ( ",
  "1730": "WS . Path . UserQuery . Version1 . userQueryUpdate ( ) ) ) ; ",
  "1731": "} public UserQuery deleteUserQuery ( ",
  "1732": "UserQuery userQueryToDeleteParam ",
  "1733": "if ( userQueryToDeleteParam != null && this . serviceTicket != null ) { ",
  "1734": "userQueryToDeleteParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1735": "return new UserQuery ( this . postJson ( userQueryToDeleteParam , ",
  "1736": "WS . Path . UserQuery . Version1 . userQueryDelete ( ) ) ) ; ",
  "1737": "} public UserQuery getUserQueryById ( Long userQueryIdParam ) { ",
  "1738": "UserQuery userQueryToGetInfoFor = new UserQuery ( ) ; ",
  "1739": "userQueryToGetInfoFor . setId ( userQueryIdParam ) ; ",
  "1740": "userQueryToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; ",
  "1741": "userQueryToGetInfoFor , WS . Path . UserQuery . Version1 . getById ( ) ) ) ; ",
  "1742": "} public UserQueryListing getAllUserQueries ( ) { ",
  "1743": "return new UserQueryListing ( this . postJson ( ",
  "1744": "userQueryToGetInfoFor , WS . Path . UserQuery . Version1 . getAllUserQueries ( ) ) ) ; ",
  "1745": "} public FluidItemListing executeUserQuery ( ",
  "1746": "UserQuery queryToExecuteParam , ",
  "1747": "boolean populateAncestorIdParam , ",
  "1748": "int queryLimitParam , ",
  "1749": "int offsetParam ",
  "1750": "return this . executeUserQuery ( ",
  "1751": "queryToExecuteParam , ",
  "1752": "populateAncestorIdParam , ",
  "1753": "queryLimitParam , ",
  "1754": "boolean forceUseDatabaseParam ",
  "1755": "if ( this . serviceTicket != null && queryToExecuteParam != null ) { ",
  "1756": "queryToExecuteParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1757": "queryToExecuteParam , WS . Path . UserQuery . Version1 . executeUserQuery ( ",
  "1758": "forceUseDatabaseParam , ",
  "1759": "offsetParam ) ) ) ; ",
  "1760": "} public List < FormFieldMapping > getFormFieldMappingForForm ( ",
  "1761": "Long electronicFormIdParam ) ",
  "1762": "List < FormFieldMapping > returnVal = new ArrayList ( ) ; ",
  "1763": "if ( electronicFormIdParam == null ) ",
  "1764": "Long formDefinitionId = this . getFormDefinitionId ( electronicFormIdParam ) ; ",
  "1765": "if ( this . localDefinitionToFieldsMapping . containsKey ( formDefinitionId ) ) ",
  "1766": "return this . localDefinitionToFieldsMapping . get ( formDefinitionId ) ; ",
  "1767": "ISyntax . ProcedureMapping . Field . GetFormFieldsForFormContainer ) ; ",
  "1768": "returnVal . add ( this . mapFormFieldMapping ( resultSet ) ) ; ",
  "1769": "this . localDefinitionToFieldsMapping . put ( formDefinitionId , returnVal ) ; ",
  "1770": "} public List < FormFieldMapping > getFormFieldMappingForFormDefinition ( ",
  "1771": "Long formDefinitionIdParam ",
  "1772": "if ( formDefinitionIdParam == null || formDefinitionIdParam . longValue ( ) < 1 ) ",
  "1773": "if ( this . localDefinitionToFieldsMapping . containsKey ( formDefinitionIdParam ) ) ",
  "1774": "return this . localDefinitionToFieldsMapping . get ( formDefinitionIdParam ) ; ",
  "1775": "ISyntax . ProcedureMapping . Field . GetFormFieldsForFormDefinition ) ; ",
  "1776": "preparedStatement . setLong ( 1 , formDefinitionIdParam ) ; ",
  "1777": "this . localDefinitionToFieldsMapping . put ( formDefinitionIdParam , returnVal ) ; ",
  "1778": "catch ( SQLException sqlError ) { ",
  "1779": "} public Long getFormDefinitionId ( Long electronicFormIdParam ) ",
  "1780": "ResultSet resultSet ; ",
  "1781": "ISyntax . ProcedureMapping . Field . GetFormDefinitionForFormContainer ) ; ",
  "1782": "return resultSet . getLong ( 1 ) ; ",
  "1783": "this . closeStatement ( preparedStatement ) ; ",
  "1784": "boolean includeTableFieldFormRecordInfoParam ",
  "1785": "List < Field > returnVal = new ArrayList ( ) ; ",
  "1786": "List < FormFieldMapping > fieldMappings = ",
  "1787": "this . getFormFieldMappingForForm ( electronicFormIdParam ) ; ",
  "1788": "if ( fieldMappings == null || fieldMappings . isEmpty ( ) ) { ",
  "1789": "for ( FormFieldMapping fieldMapping : fieldMappings ) { ",
  "1790": "if ( ! includeTableFieldsParam && ",
  "1791": "fieldMapping . dataType == UtilGlobal . FieldTypeId . _7_TABLE_FIELD ) { ",
  "1792": "Field fieldToAdd = this . getFormFieldValueFor ( ",
  "1793": "fieldMapping , ",
  "1794": "electronicFormIdParam , ",
  "1795": "if ( fieldToAdd == null ) { ",
  "1796": "if ( includeTableFieldsParam && ( fieldToAdd . getFieldValue ( ) instanceof TableField ) ) { ",
  "1797": "TableField tableField = ( TableField ) fieldToAdd . getFieldValue ( ) ; ",
  "1798": "if ( tableField . getTableRecords ( ) != null && ! tableField . getTableRecords ( ) . isEmpty ( ) ) { ",
  "1799": "for ( Form tableRecordForm : tableField . getTableRecords ( ) ) { ",
  "1800": "tableRecordForm . setFormFields ( ",
  "1801": "this . getFormFields ( ",
  "1802": "tableRecordForm . getId ( ) , ",
  "1803": "returnVal . add ( fieldToAdd ) ; ",
  "1804": "} public Field getFormFieldValueFor ( ",
  "1805": "FormFieldMapping formFieldMappingParam , ",
  "1806": "Long formContainerIdParam , ",
  "1807": "if ( formFieldMappingParam == null ) { ",
  "1808": "if ( this . getCacheUtil ( ) != null ) { ",
  "1809": "CacheUtil . CachedFieldValue cachedFieldValue = ",
  "1810": "this . getCacheUtil ( ) . getCachedFieldValueFrom ( ",
  "1811": "formFieldMappingParam . formDefinitionId , ",
  "1812": "formContainerIdParam , ",
  "1813": "formFieldMappingParam . formFieldId ) ; ",
  "1814": "if ( cachedFieldValue != null ) ",
  "1815": "Field field = cachedFieldValue . getCachedFieldValueAsField ( ) ; ",
  "1816": "if ( field != null ) ",
  "1817": "field . setFieldName ( formFieldMappingParam . name ) ; ",
  "1818": "Field returnVal = null ; ",
  "1819": "PreparedStatement preparedStatement = null , preparedStatementForTblInfo = null ; ",
  "1820": "ResultSet resultSet = null , resultSetForTblInfo = null ; ",
  "1821": "ISyntax syntax = SyntaxFactory . getInstance ( ) . getFieldValueSyntaxFor ( ",
  "1822": "formFieldMappingParam ) ; ",
  "1823": "if ( syntax != null ) { ",
  "1824": "preparedStatement . setLong ( 1 , formFieldMappingParam . formDefinitionId ) ; ",
  "1825": "preparedStatement . setLong ( 2 , formFieldMappingParam . formFieldId ) ; ",
  "1826": "preparedStatement . setLong ( 3 , formContainerIdParam ) ; ",
  "1827": "switch ( formFieldMappingParam . dataType . intValue ( ) ) { ",
  "1828": "case UtilGlobal . FieldTypeId . _1_TEXT : ",
  "1829": "returnVal = new Field ( ",
  "1830": "formFieldMappingParam . name , ",
  "1831": "resultSet . getString ( 1 ) , ",
  "1832": "Field . Type . Text ) ; ",
  "1833": "case UtilGlobal . FieldTypeId . _2_TRUE_FALSE : ",
  "1834": "resultSet . getBoolean ( 1 ) , ",
  "1835": "Field . Type . TrueFalse ) ; ",
  "1836": "case UtilGlobal . FieldTypeId . _3_PARAGRAPH_TEXT : ",
  "1837": "Field . Type . ParagraphText ) ; ",
  "1838": "case UtilGlobal . FieldTypeId . _4_MULTI_CHOICE : ",
  "1839": "List < String > selectedValues = new ArrayList ( ) ; ",
  "1840": "while ( resultSet . next ( ) ) { ",
  "1841": "selectedValues . add ( resultSet . getString ( 1 ) ) ; ",
  "1842": "multiChoice . setSelectedMultiChoices ( selectedValues ) ; ",
  "1843": "if ( ! selectedValues . isEmpty ( ) ) { ",
  "1844": "multiChoice ) ; ",
  "1845": "case UtilGlobal . FieldTypeId . _5_DATE_TIME : ",
  "1846": "resultSet . getDate ( 1 ) , ",
  "1847": "Field . Type . DateTime ) ; ",
  "1848": "case UtilGlobal . FieldTypeId . _6_DECIMAL : ",
  "1849": "resultSet . getDouble ( 1 ) , ",
  "1850": "Field . Type . Decimal ) ; ",
  "1851": "case UtilGlobal . FieldTypeId . _7_TABLE_FIELD : ",
  "1852": "List < Long > formContainerIds = new ArrayList ( ) ; ",
  "1853": "formContainerIds . add ( resultSet . getLong ( 1 ) ) ; ",
  "1854": "if ( formContainerIds . isEmpty ( ) ) { ",
  "1855": "TableField tableField = new TableField ( ) ; ",
  "1856": "final List < Form > formRecords = new ArrayList ( ) ; ",
  "1857": "formContainerIds . forEach ( formContId -> { ",
  "1858": "formRecords . add ( new Form ( formContId ) ) ; ",
  "1859": "if ( includeTableFieldFormRecordInfoParam ) { ",
  "1860": "ISyntax syntaxForFormContInfo = SyntaxFactory . getInstance ( ) . getSyntaxFor ( ",
  "1861": "ISyntax . ProcedureMapping . Form . GetFormContainerInfo ) ; ",
  "1862": "preparedStatementForTblInfo = this . getConnection ( ) . prepareStatement ( ",
  "1863": "syntaxForFormContInfo . getPreparedStatement ( ) ) ; ",
  "1864": "for ( Form formRecordToSetInfoOn : formRecords ) { ",
  "1865": "preparedStatementForTblInfo . setLong ( ",
  "1866": "1 , formRecordToSetInfoOn . getId ( ) ) ; ",
  "1867": "resultSetForTblInfo = preparedStatementForTblInfo . executeQuery ( ) ; ",
  "1868": "if ( resultSetForTblInfo . next ( ) ) { ",
  "1869": "Long formTypeId = resultSetForTblInfo . getLong ( ",
  "1870": "SQLFormUtil . SQLColumnIndex . _02_FORM_TYPE ) ; ",
  "1871": "formRecordToSetInfoOn . setFormTypeId ( formTypeId ) ; ",
  "1872": "formRecordToSetInfoOn . setFormType ( ",
  "1873": "this . sqlFormDefinitionUtil == null ? null : ",
  "1874": "this . sqlFormDefinitionUtil . getFormDefinitionIdAndTitle ( ) . get ( formTypeId ) ",
  "1875": "formRecordToSetInfoOn . setTitle ( resultSetForTblInfo . getString ( ",
  "1876": "SQLFormUtil . SQLColumnIndex . _03_TITLE ) ) ; ",
  "1877": "Date created = resultSetForTblInfo . getDate ( SQLFormUtil . SQLColumnIndex . _04_CREATED ) ; ",
  "1878": "Date lastUpdated = resultSetForTblInfo . getDate ( SQLFormUtil . SQLColumnIndex . _05_LAST_UPDATED ) ; ",
  "1879": "if ( created != null ) ",
  "1880": "formRecordToSetInfoOn . setDateCreated ( new Date ( created . getTime ( ) ) ) ; ",
  "1881": "if ( lastUpdated != null ) ",
  "1882": "formRecordToSetInfoOn . setDateLastUpdated ( new Date ( lastUpdated . getTime ( ) ) ) ; ",
  "1883": "tableField . setTableRecords ( formRecords ) ; ",
  "1884": "tableField , ",
  "1885": "Field . Type . Table ) ; ",
  "1886": "case UtilGlobal . FieldTypeId . _9_LABEL : ",
  "1887": "formFieldMappingParam . description , ",
  "1888": "Field . Type . Label ) ; ",
  "1889": "this . closeStatement ( preparedStatementForTblInfo ) ; ",
  "1890": "} private FormFieldMapping mapFormFieldMapping ( ResultSet resultSetParam ) ",
  "1891": "throws SQLException { ",
  "1892": "return new FormFieldMapping ( ",
  "1893": "resultSetParam . getLong ( 1 ) , ",
  "1894": "resultSetParam . getLong ( 2 ) , ",
  "1895": "resultSetParam . getLong ( 3 ) , ",
  "1896": "resultSetParam . getString ( 4 ) , ",
  "1897": "resultSetParam . getString ( 5 ) , ",
  "1898": "resultSetParam . getString ( 6 ) ) ; ",
  "1899": "} public Role createRole ( Role roleParam ) ",
  "1900": "if ( roleParam != null && this . serviceTicket != null ) ",
  "1901": "return new Role ( this . putJson ( ",
  "1902": "roleParam , WS . Path . Role . Version1 . roleCreate ( ) ) ) ; ",
  "1903": "} public Role updateRole ( Role roleParam ) ",
  "1904": "return new Role ( this . postJson ( ",
  "1905": "roleParam , WS . Path . Role . Version1 . roleUpdate ( ) ) ) ; ",
  "1906": "} public Role deleteRole ( ",
  "1907": "Role roleToDeleteParam ) ",
  "1908": "if ( roleToDeleteParam != null && this . serviceTicket != null ) ",
  "1909": "roleToDeleteParam . setServiceTicket ( this . serviceTicket ) ; ",
  "1910": "return new Role ( this . postJson ( roleToDeleteParam , ",
  "1911": "WS . Path . Role . Version1 . roleDelete ( ) ) ) ; ",
  "1912": "} public Role getRoleById ( Long roleIdParam ) ",
  "1913": "Role roleToGetInfoFor = new Role ( ) ; ",
  "1914": "roleToGetInfoFor . setId ( roleIdParam ) ; ",
  "1915": "roleToGetInfoFor . setServiceTicket ( this . serviceTicket ) ; ",
  "1916": "roleToGetInfoFor , WS . Path . Role . Version1 . getById ( ) ) ) ; ",
  "1917": "} public RoleListing getAllRoles ( ) ",
  "1918": "RoleListing roleToGetInfoFor = new RoleListing ( ) ; ",
  "1919": "return new RoleListing ( this . postJson ( ",
  "1920": "roleToGetInfoFor , WS . Path . Role . Version1 . getAllRoles ( ) ) ) ; ",
  "1921": "if ( this . getAttachmentPath ( ) != null ) ",
  "1922": "returnVal . put ( JSONMapping . ATTACHMENT_PATH , ",
  "1923": "this . getAttachmentPath ( ) ) ; ",
  "1924": "if ( this . getAttachmentDataBase64 ( ) != null ) ",
  "1925": "} public CommandResult executeCommand ( String ... commandParams ) throws IOException { ",
  "1926": "if ( commandParams == null || commandParams . length == 0 ) { ",
  "1927": "List < String > returnedLines = new ArrayList ( ) ; ",
  "1928": "Charset charset = Charset . forName ( ENCODING_UTF_8 ) ; ",
  "1929": "Process process = null ; ",
  "1930": "if ( commandParams . length == 1 ) { ",
  "1931": "process = Runtime . getRuntime ( ) . exec ( commandParams [ 0 ] ) ; ",
  "1932": "process = Runtime . getRuntime ( ) . exec ( commandParams ) ; ",
  "1933": "BufferedReader reader = new BufferedReader ( ",
  "1934": "new InputStreamReader ( ",
  "1935": "process . getInputStream ( ) , charset ) ) ; ",
  "1936": "String readLine = null ; ",
  "1937": "while ( ( readLine = reader . readLine ( ) ) != null ) { ",
  "1938": "returnedLines . add ( readLine ) ; ",
  "1939": "BufferedReader errorReader = new BufferedReader ( ",
  "1940": "new InputStreamReader ( process . getErrorStream ( ) , charset ) ) ; ",
  "1941": "while ( ( readLine = errorReader . readLine ( ) ) != null ) { ",
  "1942": "int exitValue = - 1000 ; ",
  "1943": "exitValue = process . waitFor ( ) ; ",
  "1944": "String commandString = ( commandParams == null || commandParams . length == 0 ) ? ",
  "1945": "\"<unknown>\" : commandParams [ 0 ] ; ",
  "1946": "String [ ] rtnArr = { } ; ",
  "1947": "return new CommandResult ( exitValue , returnedLines . toArray ( rtnArr ) ) ; ",
  "1948": "} catch ( IOException ioExeption ) { ",
  "1949": "} public CommandResult executeCommand ( String objectCommandParam ) throws Exception { ",
  "1950": "if ( objectCommandParam == null ) { ",
  "1951": "return new CommandResult ( 333 , new String [ ] { ",
  "1952": "return this . executeCommand ( new String [ ] { objectCommandParam } ) ; ",
  "1953": "if ( this . getAccessToken ( ) != null ) ",
  "1954": "returnVal . put ( JSONMapping . ACCESS_TOKEN , this . getAccessToken ( ) ) ; ",
  "1955": "if ( this . getIdToken ( ) != null ) ",
  "1956": "returnVal . put ( JSONMapping . ID_TOKEN , this . getIdToken ( ) ) ; ",
  "1957": "if ( this . getTokenType ( ) != null ) ",
  "1958": "returnVal . put ( JSONMapping . TOKEN_TYPE , this . getTokenType ( ) ) ; ",
  "1959": "if ( this . getDate ( ) != null ) { ",
  "1960": "returnVal . put ( JSONMapping . DATE , ",
  "1961": "this . getDateAsLongFromJson ( this . getDate ( ) ) ) ; ",
  "1962": "if ( this . getDateAndFieldName ( ) != null ) { ",
  "1963": "returnVal . put ( JSONMapping . DATE_AND_FIELD_NAME , ",
  "1964": "this . getDateAndFieldName ( ) ) ; ",
  "1965": "if ( this . getFormContainerFieldValuesJSON ( ) != null ) { ",
  "1966": "returnVal . put ( JSONMapping . FORM_CONTAINER_FIELD_VALUES_JSON , ",
  "1967": "this . getFormContainerFieldValuesJSON ( ) ) ; ",
  "1968": "if ( this . getLogEntryType ( ) != null ) { ",
  "1969": "returnVal . put ( JSONMapping . LOG_ENTRY_TYPE , ",
  "1970": "this . getLogEntryType ( ) ) ; ",
  "1971": "if ( this . getDescription ( ) != null ) { ",
  "1972": "returnVal . put ( JSONMapping . DESCRIPTION , ",
  "1973": "this . getDescription ( ) ) ; ",
  "1974": "if ( this . getHistoricEntryType ( ) != null ) { ",
  "1975": "returnVal . put ( JSONMapping . HISTORIC_ENTRY_TYPE , ",
  "1976": "this . getHistoricEntryType ( ) ) ; ",
  "1977": "if ( this . getUser ( ) != null ) { ",
  "1978": "returnVal . put ( JSONMapping . USER , ",
  "1979": "this . getUser ( ) . toJsonObject ( ) ) ; ",
  "1980": "if ( this . getField ( ) != null ) { ",
  "1981": "returnVal . put ( JSONMapping . FIELD , ",
  "1982": "this . getField ( ) . toJsonObject ( ) ) ; ",
  "1983": "if ( this . getIsFieldDifferentFromPrevious ( ) != null ) { ",
  "1984": "returnVal . put ( JSONMapping . IS_FIELD_DIFFERENT_FROM_PREVIOUS , ",
  "1985": "this . getIsFieldDifferentFromPrevious ( ) ) ; ",
  "1986": "if ( this . getIsFieldTypeSignature ( ) != null ) { ",
  "1987": "returnVal . put ( JSONMapping . IS_FIELD_TYPE_SIGNATURE , ",
  "1988": "this . getIsFieldTypeSignature ( ) ) ; ",
  "1989": "if ( this . getIsEscapeText ( ) != null ) { ",
  "1990": "JSONMapping . IS_ESCAPE_TEXT , ",
  "1991": "this . getIsEscapeText ( ) ) ; ",
  "1992": "if ( this . isAttachmentsView ( ) != null ) ",
  "1993": "returnVal . put ( JSONMapping . ATTACHMENTS_VIEW , ",
  "1994": "this . isAttachmentsView ( ) . booleanValue ( ) ) ; ",
  "1995": "if ( this . isAttachmentsCreateUpdate ( ) != null ) ",
  "1996": "returnVal . put ( JSONMapping . ATTACHMENTS_CREATE_UPDATE , ",
  "1997": "this . isAttachmentsCreateUpdate ( ) . booleanValue ( ) ) ; ",
  "1998": "public Object getFieldValueForField ( String fieldNameParam ) { ",
  "1999": "Field fieldWithName = this . getField ( fieldNameParam ) ; ",
  "2000": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValue ( ) ; ",
  "2001": "public String getFieldValueAsString ( String fieldNameParam ) { ",
  "2002": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsString ( ) ; ",
  "2003": "public TableField getFieldValueAsTableField ( String fieldNameParam ) { ",
  "2004": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsTableField ( ) ; ",
  "2005": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsMultiChoice ( ) ; ",
  "2006": "public Date getFieldValueAsDate ( String fieldNameParam ) { ",
  "2007": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDate ( ) ; ",
  "2008": "public Boolean getFieldValueAsBoolean ( String fieldNameParam ) { ",
  "2009": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsBoolean ( ) ; ",
  "2010": "public Double getFieldValueAsDouble ( String fieldNameParam ) { ",
  "2011": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsDouble ( ) ; ",
  "2012": "public Integer getFieldValueAsInt ( String fieldNameParam ) { ",
  "2013": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsInteger ( ) ; ",
  "2014": "public Long getFieldValueAsLong ( String fieldNameParam ) { ",
  "2015": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsLong ( ) ; ",
  "2016": "public Number getFieldValueAsNumber ( String fieldNameParam ) { ",
  "2017": "return ( fieldWithName == null ) ? null : fieldWithName . getFieldValueAsNumber ( ) ; ",
  "2018": "public void setFieldValue ( String fieldNameParam , Object fieldValueParam ) { ",
  "2019": "if ( fieldNameParam == null || fieldNameParam . trim ( ) . length ( ) == 0 ) ",
  "2020": "if ( this . getFormFields ( ) == null || this . getFormFields ( ) . isEmpty ( ) ) ",
  "2021": "this . setFormFields ( new ArrayList ( ) ) ; ",
  "2022": "String fieldNameParamLower = fieldNameParam . toLowerCase ( ) ; ",
  "2023": "for ( Iterator < Field > fieldIter = this . getFormFields ( ) . iterator ( ) ; ",
  "2024": "fieldIter . hasNext ( ) ; ) { ",
  "2025": "Field field = fieldIter . next ( ) ; ",
  "2026": "if ( field . getFieldName ( ) == null || field . getFieldName ( ) . trim ( ) . length ( ) == 0 ) ",
  "2027": "String fieldNameLower = field . getFieldName ( ) . toLowerCase ( ) ; ",
  "2028": "if ( fieldNameParamLower . equals ( fieldNameLower ) ) ",
  "2029": "field . setFieldValue ( fieldValueParam ) ; ",
  "2030": "this . getFormFields ( ) . add ( new Field ( fieldNameParam , fieldValueParam ) ) ; ",
  "2031": "public void setFieldValue ( String fieldNameParam , Object fieldValueParam , Field . Type typeParam ) { ",
  "2032": "if ( fieldNameParam == null ) { ",
  "2033": "if ( this . getFormFields ( ) == null || this . getFormFields ( ) . isEmpty ( ) ) { ",
  "2034": "String paramLower = fieldNameParam . toLowerCase ( ) . trim ( ) ; ",
  "2035": "boolean valueFound = false ; ",
  "2036": "int fieldIndex = 0 ; ",
  "2037": "fieldIter . hasNext ( ) ; fieldIndex ++ ) { ",
  "2038": "String toCheckNameLower = field . getFieldName ( ) ; ",
  "2039": "if ( toCheckNameLower == null || toCheckNameLower . trim ( ) . isEmpty ( ) ) { ",
  "2040": "toCheckNameLower = toCheckNameLower . trim ( ) . toLowerCase ( ) ; ",
  "2041": "if ( paramLower . equals ( toCheckNameLower ) ) { ",
  "2042": "valueFound = true ; ",
  "2043": "this . getFormFields ( ) . get ( fieldIndex ) . setFieldValue ( fieldValueParam ) ; ",
  "2044": "this . getFormFields ( ) . get ( fieldIndex ) . setTypeAsEnum ( typeParam ) ; ",
  "2045": "if ( ! valueFound ) { ",
  "2046": "this . getFormFields ( ) . add ( new Field ( fieldNameParam , fieldValueParam , typeParam ) ) ; ",
  "2047": "public boolean isFormType ( String formTypeParam ) { ",
  "2048": "if ( ( formTypeParam == null || formTypeParam . trim ( ) . isEmpty ( ) ) || ",
  "2049": "( this . getFormType ( ) == null || this . getFormType ( ) . trim ( ) . isEmpty ( ) ) ) { ",
  "2050": "return formTypeParam . toLowerCase ( ) . equals ( getFormType ( ) . toLowerCase ( ) ) ; ",
  "2051": "if ( this . getFormType ( ) != null ) { ",
  "2052": "returnVal . put ( JSONMapping . FORM_TYPE , this . getFormType ( ) ) ; ",
  "2053": "if ( this . getFormTypeId ( ) != null ) { ",
  "2054": "returnVal . put ( JSONMapping . FORM_TYPE_ID , this . getFormTypeId ( ) ) ; ",
  "2055": "if ( this . getTitle ( ) != null ) { ",
  "2056": "returnVal . put ( JSONMapping . TITLE , this . getTitle ( ) ) ; ",
  "2057": "if ( this . getFormDescription ( ) != null ) { ",
  "2058": "returnVal . put ( JSONMapping . FORM_DESCRIPTION , this . getFormDescription ( ) ) ; ",
  "2059": "if ( this . getAncestorLabel ( ) != null ) { ",
  "2060": "returnVal . put ( JSONMapping . ANCESTOR_LABEL , ",
  "2061": "this . getAncestorLabel ( ) ) ; ",
  "2062": "if ( this . getDescendantsLabel ( ) != null ) { ",
  "2063": "returnVal . put ( JSONMapping . DESCENDANTS_LABEL , ",
  "2064": "this . getDescendantsLabel ( ) ) ; ",
  "2065": "if ( this . getNumberInputs ( ) != null ) { ",
  "2066": "returnVal . put ( JSONMapping . NUMBER_INPUTS , ",
  "2067": "this . getNumberInputs ( ) ) ; ",
  "2068": "if ( this . getCurrentUser ( ) != null ) { ",
  "2069": "JSONMapping . CURRENT_USER , ",
  "2070": "this . getCurrentUser ( ) . toJsonObject ( ) ) ; ",
  "2071": "if ( this . getState ( ) != null ) { ",
  "2072": "JSONMapping . STATE , ",
  "2073": "this . getState ( ) ) ; ",
  "2074": "if ( this . getFlowState ( ) != null ) { ",
  "2075": "JSONMapping . FLOW_STATE , ",
  "2076": "this . getFlowState ( ) ) ; ",
  "2077": "if ( this . getFormFields ( ) != null && ! this . getFormFields ( ) . isEmpty ( ) ) { ",
  "2078": "JSONArray formFieldsArr = new JSONArray ( ) ; ",
  "2079": "for ( Field toAdd : this . getFormFields ( ) ) ",
  "2080": "formFieldsArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "2081": "returnVal . put ( JSONMapping . FORM_FIELDS , formFieldsArr ) ; ",
  "2082": "if ( this . getAssociatedFlows ( ) != null && ! this . getAssociatedFlows ( ) . isEmpty ( ) ) { ",
  "2083": "JSONArray assoJobsArr = new JSONArray ( ) ; ",
  "2084": "for ( Flow toAdd : this . getAssociatedFlows ( ) ) ",
  "2085": "assoJobsArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "2086": "returnVal . put ( JSONMapping . ASSOCIATED_FLOWS , assoJobsArr ) ; ",
  "2087": "Long ancestorIdLcl = this . getAncestorId ( ) ; ",
  "2088": "if ( ancestorIdLcl != null ) { ",
  "2089": "returnVal . put ( JSONMapping . ANCESTOR_ID , ancestorIdLcl ) ; ",
  "2090": "if ( this . getTableFieldParentId ( ) != null ) { ",
  "2091": "returnVal . put ( JSONMapping . TABLE_FIELD_PARENT_ID , ",
  "2092": "this . getTableFieldParentId ( ) ) ; ",
  "2093": "if ( this . getDescendantIds ( ) != null && ! this . getDescendantIds ( ) . isEmpty ( ) ) { ",
  "2094": "for ( Long formId : this . getDescendantIds ( ) ) { ",
  "2095": "array . put ( formId ) ; ",
  "2096": "returnVal . put ( JSONMapping . DESCENDANT_IDS , array ) ; ",
  "2097": "JSONObject idJsonObj = new JSONObject ( ) ; ",
  "2098": "idJsonObj . put ( ",
  "2099": "Field . JSONMapping . Elastic . MAPPING_ONLY_TYPE , ",
  "2100": "Field . ElasticSearchType . LONG ) ; ",
  "2101": "returnVal . put ( ABaseFluidJSONObject . JSONMapping . ID , idJsonObj ) ; ",
  "2102": "JSONObject formTypeJsonObj = new JSONObject ( ) ; ",
  "2103": "formTypeJsonObj . put ( ",
  "2104": "Field . ElasticSearchType . KEYWORD ) ; ",
  "2105": "returnVal . put ( JSONMapping . FORM_TYPE , formTypeJsonObj ) ; ",
  "2106": "JSONObject formTypeIdJsonObj = new JSONObject ( ) ; ",
  "2107": "formTypeIdJsonObj . put ( ",
  "2108": "returnVal . put ( JSONMapping . FORM_TYPE_ID , formTypeIdJsonObj ) ; ",
  "2109": "JSONObject titleJsonObj = new JSONObject ( ) ; ",
  "2110": "titleJsonObj . put ( ",
  "2111": "Field . ElasticSearchType . TEXT ) ; ",
  "2112": "returnVal . put ( JSONMapping . TITLE , titleJsonObj ) ; ",
  "2113": "JSONObject formDescJsonObj = new JSONObject ( ) ; ",
  "2114": "formDescJsonObj . put ( ",
  "2115": "returnVal . put ( JSONMapping . FORM_DESCRIPTION , formDescJsonObj ) ; ",
  "2116": "JSONObject stateJsonObj = new JSONObject ( ) ; ",
  "2117": "stateJsonObj . put ( ",
  "2118": "returnVal . put ( JSONMapping . STATE , stateJsonObj ) ; ",
  "2119": "JSONObject flowStateJsonObj = new JSONObject ( ) ; ",
  "2120": "flowStateJsonObj . put ( ",
  "2121": "returnVal . put ( JSONMapping . FLOW_STATE , flowStateJsonObj ) ; ",
  "2122": "JSONObject currentUserJsonObj = new JSONObject ( ) ; ",
  "2123": "currentUserJsonObj . put ( ",
  "2124": "Field . ElasticSearchType . OBJECT ) ; ",
  "2125": "JSONObject properties = new JSONObject ( ) ; ",
  "2126": "JSONObject currentUserUserIdJsonObj = new JSONObject ( ) ; ",
  "2127": "currentUserUserIdJsonObj . put ( ",
  "2128": "properties . put ( User . JSONMapping . Elastic . USER_ID , currentUserUserIdJsonObj ) ; ",
  "2129": "JSONObject currentUserUsernameJsonObj = new JSONObject ( ) ; ",
  "2130": "currentUserUsernameJsonObj . put ( ",
  "2131": "properties . put ( User . JSONMapping . USERNAME , currentUserUsernameJsonObj ) ; ",
  "2132": "ABaseFluidJSONObject . JSONMapping . Elastic . PROPERTIES , ",
  "2133": "properties ) ; ",
  "2134": "returnVal . put ( JSONMapping . CURRENT_USER , currentUserJsonObj ) ; ",
  "2135": "JSONObject dateCreatedJsonObj = new JSONObject ( ) ; ",
  "2136": "dateCreatedJsonObj . put ( ",
  "2137": "Field . ElasticSearchType . DATE ) ; ",
  "2138": "returnVal . put ( JSONMapping . DATE_CREATED , dateCreatedJsonObj ) ; ",
  "2139": "JSONObject dateLastUpdatedJsonObj = new JSONObject ( ) ; ",
  "2140": "dateLastUpdatedJsonObj . put ( ",
  "2141": "returnVal . put ( JSONMapping . DATE_LAST_UPDATED , dateLastUpdatedJsonObj ) ; ",
  "2142": "if ( this . getFormFields ( ) != null && ",
  "2143": "! this . getFormFields ( ) . isEmpty ( ) ) ",
  "2144": "JSONObject convertedField = toAdd . toJsonMappingForElasticSearch ( ) ; ",
  "2145": "if ( convertedField == null ) ",
  "2146": "String fieldNameAsCamel = toAdd . getFieldNameAsUpperCamel ( ) ; ",
  "2147": "returnVal . put ( fieldNameAsCamel , convertedField ) ; ",
  "2148": "JSONObject ancestorJsonObj = new JSONObject ( ) ; ",
  "2149": "ancestorJsonObj . put ( ",
  "2150": "returnVal . put ( JSONMapping . ANCESTOR_ID , ancestorJsonObj ) ; ",
  "2151": "JSONObject tblFieldParentIdJsonObj = new JSONObject ( ) ; ",
  "2152": "tblFieldParentIdJsonObj . put ( ",
  "2153": "returnVal . put ( JSONMapping . TABLE_FIELD_PARENT_ID , tblFieldParentIdJsonObj ) ; ",
  "2154": "if ( this . getFormType ( ) != null ) ",
  "2155": "if ( this . getFormTypeId ( ) != null ) ",
  "2156": "if ( this . getTitle ( ) != null ) ",
  "2157": "if ( this . getFormDescription ( ) != null ) ",
  "2158": "if ( this . getState ( ) != null ) ",
  "2159": "returnVal . put ( JSONMapping . STATE , this . getState ( ) ) ; ",
  "2160": "returnVal . put ( JSONMapping . FLOW_STATE , this . getFlowState ( ) ) ; ",
  "2161": "if ( this . getCurrentUser ( ) == null ) { ",
  "2162": "User . JSONMapping . Elastic . USER_ID , JSONObject . NULL ) ; ",
  "2163": "currentUserJsonObj . put ( User . JSONMapping . USERNAME , JSONObject . NULL ) ; ",
  "2164": "if ( this . getCurrentUser ( ) . getId ( ) == null || ",
  "2165": "this . getCurrentUser ( ) . getId ( ) . longValue ( ) < 1 ) ",
  "2166": "User . JSONMapping . Elastic . USER_ID , ",
  "2167": "this . getCurrentUser ( ) . getId ( ) ) ; ",
  "2168": "if ( this . getCurrentUser ( ) . getUsername ( ) == null || ",
  "2169": "this . getCurrentUser ( ) . getUsername ( ) . trim ( ) . isEmpty ( ) ) ",
  "2170": "currentUserJsonObj . put ( User . JSONMapping . USERNAME , ",
  "2171": "this . getCurrentUser ( ) . getUsername ( ) ) ; ",
  "2172": "if ( this . getFormFields ( ) != null && ! this . getFormFields ( ) . isEmpty ( ) ) ",
  "2173": "JSONObject convertedFieldObj = toAdd . toJsonForElasticSearch ( ) ; ",
  "2174": "if ( convertedFieldObj == null ) ",
  "2175": "Iterator < String > iterKeys = convertedFieldObj . keys ( ) ; ",
  "2176": "while ( iterKeys . hasNext ( ) ) ",
  "2177": "String key = iterKeys . next ( ) ; ",
  "2178": "returnVal . put ( key , convertedFieldObj . get ( key ) ) ; ",
  "2179": "if ( ancestorIdLcl != null ) ",
  "2180": "if ( this . getTableFieldParentId ( ) != null ) ",
  "2181": "if ( this . getDescendantIds ( ) != null && ! this . getDescendantIds ( ) . isEmpty ( ) ) ",
  "2182": "for ( Long formId : this . getDescendantIds ( ) ) ",
  "2183": "FlatFormJSONMapping . FORM_ID , ",
  "2184": "FlatFormJSONMapping . FORM_TITLE , ",
  "2185": "this . getTitle ( ) == null ? ",
  "2186": "JSONObject . NULL : this . getTitle ( ) ) ; ",
  "2187": "FlatFormJSONMapping . FORM_TYPE , ",
  "2188": "this . getFormType ( ) == null ? ",
  "2189": "JSONObject . NULL : this . getFormType ( ) ) ; ",
  "2190": "FlatFormJSONMapping . FORM_STATE , ",
  "2191": "this . getState ( ) == null ? ",
  "2192": "JSONObject . NULL : this . getState ( ) ) ; ",
  "2193": "FlatFormJSONMapping . FORM_FLOW_STATE , ",
  "2194": "this . getFlowState ( ) == null ? ",
  "2195": "JSONObject . NULL : this . getFlowState ( ) ) ; ",
  "2196": "FlatFormJSONMapping . FORM_DATE_CREATED , ",
  "2197": "( this . getDateCreated ( ) == null ) ? ",
  "2198": "JSONObject . NULL : this . getDateCreated ( ) . getTime ( ) ) ; ",
  "2199": "FlatFormJSONMapping . FORM_DATE_LAST_UPDATED , ",
  "2200": "( this . getDateLastUpdated ( ) == null ) ? ",
  "2201": "JSONObject . NULL : this . getDateLastUpdated ( ) . getTime ( ) ) ; ",
  "2202": "this . getFormFields ( ) . forEach ( ",
  "2203": "( formFieldItem ) -> ",
  "2204": "utilGlobal . setFlatFieldOnJSONObj ( ",
  "2205": "FlatFormJSONMapping . FORM_FIELD_PREFIX , ",
  "2206": "FlatFormJSONMapping . FORM_FIELD_ID_PREFIX , ",
  "2207": "formFieldItem , ",
  "2208": "returnVal ",
  "2209": "if ( this . getMailTemplate ( ) != null ) ",
  "2210": "returnVal . put ( JSONMapping . MAIL_TEMPLATE , this . getMailTemplate ( ) ) ; ",
  "2211": "if ( this . getMailSMTPServer ( ) != null ) ",
  "2212": "returnVal . put ( JSONMapping . MAIL_SMTP_SERVER , this . getMailSMTPServer ( ) ) ; ",
  "2213": "if ( this . getRecipients ( ) != null && this . getRecipients ( ) . length > 0 ) ",
  "2214": "for ( String item : this . getRecipients ( ) ) ",
  "2215": "jsonArray . put ( item ) ; ",
  "2216": "returnVal . put ( JSONMapping . RECIPIENTS , jsonArray ) ; ",
  "2217": "if ( this . getAttachments ( ) != null && ! this . getAttachments ( ) . isEmpty ( ) ) ",
  "2218": "for ( MailMessageAttachment item : this . getAttachments ( ) ) ",
  "2219": "if ( this . getNameValues ( ) != null && ",
  "2220": "! this . getNameValues ( ) . isEmpty ( ) ) ",
  "2221": "for ( MailMessageNameValue item : this . getNameValues ( ) ) ",
  "2222": "returnVal . put ( JSONMapping . NAME_VALUES , jsonArray ) ; ",
  "2223": "returnVal . put ( JSONMapping . CLIENT , this . getPrincipalClient ( ) ) ; ",
  "2224": "returnVal . put ( JSONMapping . SESSION_KEY , this . getSessionKeyBase64 ( ) ) ; ",
  "2225": "returnVal . put ( JSONMapping . TICKET_EXPIRES , this . getTicketExpires ( ) ) ; ",
  "2226": "returnVal . put ( JSONMapping . AUTHORISED_USERNAME , this . getAuthorisedUsername ( ) ) ; ",
  "2227": "} public FluidItem sendToFlowSynchronized ( ",
  "2228": "Form formToSendToFlowParam , ",
  "2229": "String destinationFlowParam ) { ",
  "2230": "if ( formToSendToFlowParam == null ) ",
  "2231": "if ( destinationFlowParam == null || ",
  "2232": "destinationFlowParam . trim ( ) . isEmpty ( ) ) ",
  "2233": "FluidItem itemToSend = new FluidItem ( ) ; ",
  "2234": "itemToSend . setFlow ( destinationFlowParam ) ; ",
  "2235": "itemToSend . setForm ( formToSendToFlowParam ) ; ",
  "2236": "itemToSend . setEcho ( UUID . randomUUID ( ) . toString ( ) ) ; ",
  "2237": "this . sendMessage ( itemToSend , uniqueReqId ) ; ",
  "2238": "List < FluidItem > returnValue = this . getHandler ( uniqueReqId ) . getCF ( ) . get ( ",
  "2239": "if ( returnValue == null || returnValue . isEmpty ( ) ) ",
  "2240": "return returnValue . get ( 0 ) ; ",
  "2241": "catch ( InterruptedException exceptParam ) { ",
  "2242": "catch ( ExecutionException executeProblem ) { ",
  "2243": "if ( cause instanceof FluidClientException ) ",
  "2244": "catch ( TimeoutException eParam ) { ",
  "2245": "+ this . getHandler ( uniqueReqId ) . getReturnValue ( ) . size ( ) ",
  "2246": ", FluidClientException . ErrorCode . IO_ERROR ) ; ",
  "2247": "} public String getServiceTicketAsHexUpper ( ) { ",
  "2248": "String serviceTicket = this . getServiceTicket ( ) ; ",
  "2249": "if ( serviceTicket == null ) ",
  "2250": "if ( serviceTicket . isEmpty ( ) ) ",
  "2251": "return serviceTicket ; ",
  "2252": "byte [ ] base64Bytes = Base64 . getDecoder ( ) . decode ( serviceTicket ) ; ",
  "2253": "return this . bytesToHex ( base64Bytes ) ; ",
  "2254": "} private String bytesToHex ( byte [ ] bytesToConvert ) { ",
  "2255": "if ( bytesToConvert == null ) ",
  "2256": "if ( bytesToConvert . length == 0 ) ",
  "2257": "char [ ] hexChars = new char [ bytesToConvert . length * 2 ] ; ",
  "2258": "for ( int index = 0 ; index < bytesToConvert . length ; index ++ ) { ",
  "2259": "int andWith127 = ( bytesToConvert [ index ] & 0xFF ) ; ",
  "2260": "hexChars [ index * 2 ] = HEX_ARRAY [ andWith127 > > > 4 ] ; ",
  "2261": "hexChars [ index * 2 + 1 ] = HEX_ARRAY [ andWith127 & 0x0F ] ; ",
  "2262": "return new String ( hexChars ) ; ",
  "2263": "if ( this . getUserQuery ( ) != null ) ",
  "2264": "returnVal . put ( JSONMapping . USER_QUERY , ",
  "2265": "this . getUserQuery ( ) . toJsonObject ( ) ) ; ",
  "2266": "} public Field createFieldTextMasked ( ",
  "2267": "Field formFieldParam , String maskValueParam ) ",
  "2268": "if ( formFieldParam != null && this . serviceTicket != null ) ",
  "2269": "formFieldParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2270": "if ( maskValueParam == null || maskValueParam . trim ( ) . isEmpty ( ) ) ",
  "2271": "maskValueParam = \"\" ; ",
  "2272": "if ( formFieldParam != null ) ",
  "2273": "formFieldParam . setTypeAsEnum ( Field . Type . Text ) ; ",
  "2274": "formFieldParam . setTypeMetaData ( FieldMetaData . Text . MASKED . concat ( maskValueParam ) ) ; ",
  "2275": "return new Field ( this . putJson ( ",
  "2276": "formFieldParam , WS . Path . FormField . Version1 . formFieldCreate ( ) ) ) ; ",
  "2277": "} public Field createFieldTextBarcode ( ",
  "2278": "Field formFieldParam , String barcodeTypeParam ) ",
  "2279": "if ( barcodeTypeParam == null || barcodeTypeParam . trim ( ) . isEmpty ( ) ) ",
  "2280": "formFieldParam . setTypeMetaData ( FieldMetaData . Text . BARCODE . concat ( barcodeTypeParam ) ) ; ",
  "2281": "} public Field createFieldMultiChoicePlain ( ",
  "2282": "Field formFieldParam , List < String > multiChoiceValuesParam ) ",
  "2283": "if ( multiChoiceValuesParam == null ) ",
  "2284": "multiChoiceValuesParam = new ArrayList ( ) ; ",
  "2285": "formFieldParam . setTypeAsEnum ( Field . Type . MultipleChoice ) ; ",
  "2286": "formFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . PLAIN ) ; ",
  "2287": "formFieldParam . setFieldValue ( new MultiChoice ( multiChoiceValuesParam ) ) ; ",
  "2288": "} public Field createFieldDecimalSpinner ( ",
  "2289": "Field formFieldParam , ",
  "2290": "String prefixParam ) ",
  "2291": "formFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; ",
  "2292": "formFieldParam . setTypeMetaData ( ",
  "2293": "this . getMetaDataForDecimalAs ( ",
  "2294": "FieldMetaData . Decimal . SPINNER , ",
  "2295": "minParam , maxParam , stepFactorParam , prefixParam ) ) ; ",
  "2296": "} public Field createFieldDecimalSlider ( ",
  "2297": "double stepFactorParam ) ",
  "2298": "FieldMetaData . Decimal . SLIDER , ",
  "2299": "minParam , maxParam , stepFactorParam , ",
  "2300": "null ) ) ; ",
  "2301": "} public Field createFieldTable ( ",
  "2302": "Form formDefinitionParam , ",
  "2303": "boolean sumDecimalsParam ) ",
  "2304": "formFieldParam . setTypeAsEnum ( Field . Type . Table ) ; ",
  "2305": "this . getMetaDataForTableField ( ",
  "2306": "formDefinitionParam , sumDecimalsParam ) ) ; ",
  "2307": "} public Field updateFieldTextMasked ( Field formFieldParam , String maskValueParam ) ",
  "2308": "return new Field ( this . postJson ( ",
  "2309": "formFieldParam , WS . Path . FormField . Version1 . formFieldUpdate ( ) ) ) ; ",
  "2310": "} public Field updateFieldTextBarcode ( Field formFieldParam , String barcodeTypeParam ) ",
  "2311": "} public Field updateFieldParagraphTextPlain ( Field formFieldParam ) ",
  "2312": "formFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ; ",
  "2313": "formFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . PLAIN ) ; ",
  "2314": "} public Field updateFieldMultiChoicePlain ( ",
  "2315": "List < String > multiChoiceValuesParam ) { ",
  "2316": "if ( formFieldParam != null && this . serviceTicket != null ) { ",
  "2317": "if ( multiChoiceValuesParam == null || ",
  "2318": "multiChoiceValuesParam . isEmpty ( ) ) { ",
  "2319": "List < String > beforeAvail = null , beforeSelected = null ; ",
  "2320": "if ( formFieldParam != null ) { ",
  "2321": "if ( formFieldParam . getFieldValue ( ) instanceof MultiChoice ) { ",
  "2322": "MultiChoice casted = ( MultiChoice ) formFieldParam . getFieldValue ( ) ; ",
  "2323": "beforeAvail = casted . getAvailableMultiChoices ( ) ; ",
  "2324": "beforeSelected = casted . getSelectedMultiChoices ( ) ; ",
  "2325": "Field returnVal = new Field ( this . postJson ( ",
  "2326": "formFieldParam . setFieldValue ( new MultiChoice ( beforeSelected , beforeAvail ) ) ; ",
  "2327": "} public Field updateFieldDecimalSpinner ( ",
  "2328": "} public Field updateFieldDecimalSlider ( ",
  "2329": "minParam , maxParam , stepFactorParam , null ) ) ; ",
  "2330": "} public Field updateFieldTable ( ",
  "2331": "} public Field getFieldByName ( String fieldNameParam ) ",
  "2332": "Field field = new Field ( ) ; ",
  "2333": "field . setFieldName ( fieldNameParam ) ; ",
  "2334": "field . setServiceTicket ( this . serviceTicket ) ; ",
  "2335": "field , WS . Path . FormField . Version1 . getByName ( ) ) ) ; ",
  "2336": "} public FormFieldListing getFieldsByFormNameAndLoggedInUser ( ",
  "2337": "String formNameParam , ",
  "2338": "boolean editOnlyFieldsParam ) ",
  "2339": "form . setFormType ( formNameParam ) ; ",
  "2340": "return new FormFieldListing ( this . postJson ( ",
  "2341": "form , WS . Path . FormField . Version1 . getByFormDefinitionAndLoggedInUser ( ",
  "2342": "editOnlyFieldsParam ) ) ) ; ",
  "2343": "} public FormFieldListing getFieldsByFormTypeIdAndLoggedInUser ( ",
  "2344": "Long formTypeIdParam , ",
  "2345": "form . setFormTypeId ( formTypeIdParam ) ; ",
  "2346": "} public Field deleteField ( Field fieldParam ) ",
  "2347": "if ( fieldParam != null && this . serviceTicket != null ) ",
  "2348": "fieldParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2349": "return new Field ( this . postJson ( fieldParam , WS . Path . FormField . Version1 . formFieldDelete ( ) ) ) ; ",
  "2350": "} public Field forceDeleteField ( Field fieldParam ) ",
  "2351": "fieldParam , WS . Path . FormField . Version1 . formFieldDelete ( true ) ) ) ; ",
  "2352": "} private String getMetaDataForTableField ( ",
  "2353": "StringBuilder returnBuffer = new StringBuilder ( ) ; ",
  "2354": "Long definitionId = ",
  "2355": "( formDefinitionParam == null ) ? - 1L : ",
  "2356": "formDefinitionParam . getId ( ) ; ",
  "2357": "returnBuffer . append ( definitionId ) ; ",
  "2358": "returnBuffer . append ( FieldMetaData . TableField . UNDERSCORE ) ; ",
  "2359": "returnBuffer . append ( FieldMetaData . TableField . SUM_DECIMALS ) ; ",
  "2360": "returnBuffer . append ( sumDecimalsParam ) ; ",
  "2361": "returnVal . put ( JSONMapping . ROLE_LISTING , this . getRoleListing ( ) ) ; ",
  "2362": "} public Field createFieldTrueFalse ( Field formFieldParam ) ",
  "2363": "formFieldParam . setTypeAsEnum ( Field . Type . TrueFalse ) ; ",
  "2364": "formFieldParam . setTypeMetaData ( FieldMetaData . TrueFalse . TRUE_FALSE ) ; ",
  "2365": "formFieldParam , WS . Path . UserField . Version1 . userFieldCreate ( ) ) ) ; ",
  "2366": "} public Field createFieldDateTimeDateAndTime ( Field formFieldParam ) ",
  "2367": "formFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ; ",
  "2368": "formFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE_AND_TIME ) ; ",
  "2369": "} public Field createFieldDecimalPlain ( Field formFieldParam ) ",
  "2370": "formFieldParam . setTypeMetaData ( FieldMetaData . Decimal . PLAIN ) ; ",
  "2371": "} public Field updateFieldTrueFalse ( Field formFieldParam ) ",
  "2372": "formFieldParam , WS . Path . UserField . Version1 . userFieldUpdate ( ) ) ) ; ",
  "2373": "List < String > multiChoiceValuesParam ) ",
  "2374": "} public Field updateFieldDateTimeDate ( Field formFieldParam ) ",
  "2375": "formFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE ) ; ",
  "2376": "} public Field updateFieldValue ( Field userFieldValueParam ) { ",
  "2377": "if ( userFieldValueParam != null && this . serviceTicket != null ) { ",
  "2378": "userFieldValueParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2379": "userFieldValueParam , ",
  "2380": "WS . Path . UserField . Version1 . userFieldUpdateValue ( ) ) ) ; ",
  "2381": "} public Field getFieldByName ( String fieldNameParam ) { ",
  "2382": "field . setFieldValue ( new MultiChoice ( ) ) ; ",
  "2383": "field , WS . Path . UserField . Version1 . getByName ( ) ) ) ; ",
  "2384": "} public Field deleteField ( Field fieldParam ) { ",
  "2385": "if ( fieldParam != null && this . serviceTicket != null ) { ",
  "2386": "return new Field ( this . postJson ( fieldParam , WS . Path . UserField . Version1 . userFieldDelete ( ) ) ) ; ",
  "2387": "fieldParam , WS . Path . UserField . Version1 . userFieldDelete ( true ) ) ) ; ",
  "2388": "} public void mergeMappingForIndex ( ",
  "2389": "String parentTypeParam , ",
  "2390": "Form fluidFormMappingToUpdateParam ",
  "2391": "if ( indexParam == null ) { ",
  "2392": "if ( fluidFormMappingToUpdateParam == null ) { ",
  "2393": "if ( fluidFormMappingToUpdateParam . getFormTypeId ( ) == null || ",
  "2394": "fluidFormMappingToUpdateParam . getFormTypeId ( ) . longValue ( ) < 1 ) { ",
  "2395": "String formTypeString = ",
  "2396": "fluidFormMappingToUpdateParam . getFormTypeId ( ) . toString ( ) ; ",
  "2397": "JSONObject newContentMappingBuilderFromParam = ",
  "2398": "fluidFormMappingToUpdateParam . toJsonMappingForElasticSearch ( ) ; ",
  "2399": "GetIndexResponse getExistingIndex = this . getOrCreateIndex ( indexParam ) ; ",
  "2400": "JSONObject existingPropsToUpdate = null ; ",
  "2401": "for ( ObjectCursor mappingKey : getExistingIndex . getMappings ( ) . keys ( ) ) { ",
  "2402": "if ( ! mappingKey . value . toString ( ) . equals ( indexParam ) ) { ",
  "2403": "Object obj = getExistingIndex . getMappings ( ) . get ( mappingKey . value . toString ( ) ) ; ",
  "2404": "if ( obj instanceof ImmutableOpenMap ) { ",
  "2405": "ImmutableOpenMap casted = ( ImmutableOpenMap ) obj ; ",
  "2406": "if ( casted . containsKey ( formTypeString ) && ",
  "2407": "casted . get ( formTypeString ) instanceof MappingMetaData ) { ",
  "2408": "MappingMetaData mappingMetaData = ( MappingMetaData ) casted . get ( formTypeString ) ; ",
  "2409": "existingPropsToUpdate = new JSONObject ( mappingMetaData . source ( ) . string ( ) ) ; ",
  "2410": "eParam . getMessage ( ) , eParam ) ; ",
  "2411": "if ( existingPropsToUpdate == null ) { ",
  "2412": "existingPropsToUpdate = new JSONObject ( ) ; ",
  "2413": "existingPropsToUpdate . put ( ",
  "2414": "newContentMappingBuilderFromParam ) ; ",
  "2415": "this . setAdditionalProps ( ",
  "2416": "existingPropsToUpdate , parentTypeParam ) ; ",
  "2417": "PutMappingRequestBuilder putMappingRequestBuilder = ",
  "2418": "this . client . admin ( ) . indices ( ) . preparePutMapping ( indexParam ) ; ",
  "2419": "putMappingRequestBuilder = putMappingRequestBuilder . setType ( formTypeString ) ; ",
  "2420": "putMappingRequestBuilder = putMappingRequestBuilder . setSource ( ",
  "2421": "existingPropsToUpdate . toString ( ) , XContentType . JSON ) ; ",
  "2422": "PutMappingResponse putMappingResponse = putMappingRequestBuilder . get ( ) ; ",
  "2423": "if ( ! putMappingResponse . isAcknowledged ( ) ) { ",
  "2424": "JSONObject existingPropertiesUpdated = ",
  "2425": "existingPropsToUpdate . getJSONObject ( formTypeString ) . getJSONObject ( ",
  "2426": "ABaseFluidJSONObject . JSONMapping . Elastic . PROPERTIES ) ; ",
  "2427": "for ( String existingKey : existingPropertiesUpdated . keySet ( ) ) { ",
  "2428": "newContentMappingBuilderFromParam . put ( existingKey , ",
  "2429": "existingPropertiesUpdated . get ( existingKey ) ) ; ",
  "2430": "boolean noChanges = true ; ",
  "2431": "for ( String possibleExistingKey : newContentMappingBuilderFromParam . keySet ( ) ) { ",
  "2432": "if ( ! existingPropertiesUpdated . has ( possibleExistingKey ) ) { ",
  "2433": "noChanges = false ; ",
  "2434": "if ( noChanges ) { ",
  "2435": "existingPropsToUpdate , ",
  "2436": "parentTypeParam ) ; ",
  "2437": "} private void setAdditionalProps ( ",
  "2438": "JSONObject existingPropsToUpdateParam , ",
  "2439": "String parentTypeParam ",
  "2440": "if ( parentTypeParam == null || parentTypeParam . trim ( ) . length ( ) == 0 ) { ",
  "2441": "JSONObject typeJson = new JSONObject ( ) ; ",
  "2442": "typeJson . put ( Field . JSONMapping . FIELD_TYPE , parentTypeParam ) ; ",
  "2443": "existingPropsToUpdateParam . put ( ",
  "2444": "Form . JSONMapping . _PARENT , typeJson ) ; ",
  "2445": "} public GetIndexResponse getOrCreateIndex ( String indexParam ) { ",
  "2446": "if ( this . doesIndexExist ( indexParam ) ) { ",
  "2447": "return this . client . admin ( ) . indices ( ) . prepareGetIndex ( ) . get ( ) ; ",
  "2448": "CreateIndexRequestBuilder createIndexRequestBuilder = ",
  "2449": "this . client . admin ( ) . indices ( ) . prepareCreate ( indexParam ) ; ",
  "2450": "CreateIndexResponse mappingCreateResponse = ",
  "2451": "createIndexRequestBuilder . execute ( ) . actionGet ( ) ; ",
  "2452": "if ( ! mappingCreateResponse . isAcknowledged ( ) ) { ",
  "2453": "if ( this . getViewName ( ) != null ) ",
  "2454": "returnVal . put ( JSONMapping . VIEW_NAME , this . getViewName ( ) ) ; ",
  "2455": "if ( this . getViewGroupName ( ) != null ) ",
  "2456": "returnVal . put ( JSONMapping . VIEW_GROUP_NAME , this . getViewGroupName ( ) ) ; ",
  "2457": "returnVal . put ( JSONMapping . VIEW_FLOW_NAME , this . getViewFlowName ( ) ) ; ",
  "2458": "returnVal . put ( JSONMapping . VIEW_STEP_NAME , this . getViewStepName ( ) ) ; ",
  "2459": "if ( this . getViewPriority ( ) != null ) ",
  "2460": "returnVal . put ( JSONMapping . VIEW_PRIORITY , this . getViewPriority ( ) ) ; ",
  "2461": "if ( this . getViewType ( ) != null ) ",
  "2462": "returnVal . put ( JSONMapping . VIEW_TYPE , this . getViewType ( ) ) ; ",
  "2463": "if ( this . getDatasourceName ( ) != null ) { ",
  "2464": "returnVal . put ( JSONMapping . DATASOURCE_NAME , ",
  "2465": "this . getDatasourceName ( ) ) ; ",
  "2466": "if ( this . getQuery ( ) != null ) { ",
  "2467": "returnVal . put ( JSONMapping . QUERY , this . getQuery ( ) ) ; ",
  "2468": "if ( this . getStoredProcedure ( ) != null ) { ",
  "2469": "JSONMapping . STORED_PROCEDURE , ",
  "2470": "this . getStoredProcedure ( ) ) ; ",
  "2471": "if ( this . getSqlInputs ( ) != null ) ",
  "2472": "for ( SQLColumn toAdd : this . getSqlInputs ( ) ) ",
  "2473": "returnVal . put ( JSONMapping . SQL_INPUTS , jsonArray ) ; ",
  "2474": "public void addSqlInput ( SQLColumn sqlInputToAddParam ) { ",
  "2475": "if ( this . sqlInputs == null ) { ",
  "2476": "this . sqlInputs = new ArrayList < > ( ) ; ",
  "2477": "if ( sqlInputToAddParam == null ) { ",
  "2478": "this . sqlInputs . add ( sqlInputToAddParam ) ; ",
  "2479": "} public Flow createFlow ( Flow flowParam ) ",
  "2480": "if ( flowParam != null && this . serviceTicket != null ) ",
  "2481": "return new Flow ( this . putJson ( ",
  "2482": "flowParam , WS . Path . Flow . Version1 . flowCreate ( ) ) ) ; ",
  "2483": "} public Flow updateFlow ( Flow flowParam ) ",
  "2484": "return new Flow ( this . postJson ( ",
  "2485": "flowParam , WS . Path . Flow . Version1 . flowUpdate ( ) ) ) ; ",
  "2486": "} public Flow getFlowById ( Long flowIdParam ) ",
  "2487": "Flow flow = new Flow ( flowIdParam ) ; ",
  "2488": "flow . setServiceTicket ( this . serviceTicket ) ; ",
  "2489": "flow , WS . Path . Flow . Version1 . getById ( ) ) ) ; ",
  "2490": "} public Flow getFlowByName ( String flowNameParam ) ",
  "2491": "Flow flow = new Flow ( ) ; ",
  "2492": "flow . setName ( flowNameParam ) ; ",
  "2493": "flow , WS . Path . Flow . Version1 . getByName ( ) ) ) ; ",
  "2494": "} public Flow deleteFlow ( Flow flowParam ) ",
  "2495": "return new Flow ( this . postJson ( flowParam , WS . Path . Flow . Version1 . flowDelete ( ) ) ) ; ",
  "2496": "} public Flow forceDeleteFlow ( Flow flowParam ) ",
  "2497": "return new Flow ( this . postJson ( flowParam , WS . Path . Flow . Version1 . flowDelete ( true ) ) ) ; ",
  "2498": "} public Field updateFieldValue ( Field globalFieldValueParam ) ",
  "2499": "if ( globalFieldValueParam != null && this . serviceTicket != null ) ",
  "2500": "globalFieldValueParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2501": "globalFieldValueParam , ",
  "2502": "Version1 . globalFieldUpdateValue ( ) ) ) ; ",
  "2503": "} public Field getFieldValueByName ( String fieldNameParam ) ",
  "2504": "return this . getFieldValueBy ( field ) ; ",
  "2505": "} private Field getFieldValueBy ( Field fieldParam ) ",
  "2506": "if ( fieldParam != null ) ",
  "2507": "fieldParam . setFieldValue ( new MultiChoice ( ) ) ; ",
  "2508": "fieldParam , Version1 . getValueBy ( ) ) ) ; ",
  "2509": "} public List < Field > getAllGlobalFieldValues ( ) ",
  "2510": "return new GlobalFieldListing ( this . postJson ( ",
  "2511": "field , Version1 . getAllValues ( ) ) ) . getListing ( ) ; ",
  "2512": "boolean includeTableFieldsParam ) ",
  "2513": "StringBuffer ancestorQuery = new StringBuffer ( ",
  "2514": "Form . JSONMapping . DESCENDANT_IDS ) ; ",
  "2515": "ancestorQuery . append ( \":\\\"\" ) ; ",
  "2516": "ancestorQuery . append ( electronicFormIdParam ) ; ",
  "2517": "ancestorQuery . append ( \"\\\"\" ) ; ",
  "2518": "List < Form > ancestorForms = null ; ",
  "2519": "ancestorForms = this . searchAndConvertHitsToFormWithAllFields ( ",
  "2520": "QueryBuilders . queryStringQuery ( ancestorQuery . toString ( ) ) , ",
  "2521": "Index . DOCUMENT , ",
  "2522": "DEFAULT_OFFSET , ",
  "2523": "ancestorForms = this . searchAndConvertHitsToFormWithNoFields ( ",
  "2524": "if ( ancestorForms != null && ! ancestorForms . isEmpty ( ) ) ",
  "2525": "returnVal = ancestorForms . get ( 0 ) ; ",
  "2526": "if ( ! includeTableFieldsParam ) ",
  "2527": "this . populateTableFields ( ",
  "2528": "returnVal . getFormFields ( ) ) ; ",
  "2529": "List < Long > electronicFormIds = new ArrayList ( ) ; ",
  "2530": "electronicFormIds . add ( electronicFormIdParam ) ; ",
  "2531": "return this . getFormDescendants ( ",
  "2532": "electronicFormIds , ",
  "2533": "} public List < Form > getFormDescendants ( ",
  "2534": "boolean includeTableFieldFormRecordInfoParam ) ",
  "2535": "if ( electronicFormIdsParam == null || ",
  "2536": "electronicFormIdsParam . isEmpty ( ) ) ",
  "2537": "StringBuffer descendantQuery = new StringBuffer ( Form . JSONMapping . ANCESTOR_ID ) ; ",
  "2538": "descendantQuery . append ( \":(\" ) ; ",
  "2539": "for ( Long electronicFormId : electronicFormIdsParam ) ",
  "2540": "descendantQuery . append ( \"\\\"\" ) ; ",
  "2541": "descendantQuery . append ( electronicFormId ) ; ",
  "2542": "String fullQueryToExec = descendantQuery . toString ( ) ; ",
  "2543": "fullQueryToExec = fullQueryToExec . substring ( ",
  "2544": "0 , fullQueryToExec . length ( ) - 1 ) ; ",
  "2545": "fullQueryToExec = fullQueryToExec . concat ( \")\" ) ; ",
  "2546": "QueryBuilders . queryStringQuery ( fullQueryToExec ) , ",
  "2547": "DEFAULT_OFFSET , MAX_NUMBER_OF_TABLE_RECORDS , ",
  "2548": "for ( Form descendantForm : returnVal ) ",
  "2549": "descendantForm . getFormFields ( ) ) ; ",
  "2550": "boolean includeFieldDataParam ) ",
  "2551": "StringBuffer primaryQuery = new StringBuffer ( ",
  "2552": "ABaseFluidJSONObject . JSONMapping . ID ) ; ",
  "2553": "primaryQuery . append ( \":\\\"\" ) ; ",
  "2554": "primaryQuery . append ( electronicFormIdParam ) ; ",
  "2555": "primaryQuery . append ( \"\\\"\" ) ; ",
  "2556": "List < Form > formsWithId = null ; ",
  "2557": "formsWithId = this . searchAndConvertHitsToFormWithAllFields ( ",
  "2558": "QueryBuilders . queryStringQuery ( primaryQuery . toString ( ) ) , ",
  "2559": "formsWithId = this . searchAndConvertHitsToFormWithNoFields ( ",
  "2560": "if ( formsWithId != null && ! formsWithId . isEmpty ( ) ) ",
  "2561": "returnVal = formsWithId . get ( 0 ) ; ",
  "2562": "if ( returnVal == null ) { ",
  "2563": "return this . populateTableFields ( ",
  "2564": "} public Map < Long , String > getFormDefinitionIdAndTitle ( ) ",
  "2565": "if ( ! LOCAL_MAPPING . isEmpty ( ) ) ",
  "2566": "Map < Long , String > returnVal = new HashMap < > ( LOCAL_MAPPING ) ; ",
  "2567": "if ( System . currentTimeMillis ( ) > timeToUpdateAgain ) { ",
  "2568": "synchronized ( LOCAL_MAPPING ) ",
  "2569": "LOCAL_MAPPING . clear ( ) ; ",
  "2570": "return new HashMap < > ( LOCAL_MAPPING ) ; ",
  "2571": "ISyntax . ProcedureMapping . FormDefinition . GetFormDefinitions ) ; ",
  "2572": "Long id = resultSet . getLong ( 1 ) ; ",
  "2573": "String title = resultSet . getString ( 2 ) ; ",
  "2574": "LOCAL_MAPPING . put ( id , title ) ; ",
  "2575": "timeToUpdateAgain = ",
  "2576": "( System . currentTimeMillis ( ) + ",
  "2577": "TimeUnit . MINUTES . toMillis ( 10 ) ) ; ",
  "2578": "if ( this . getServiceTicketBase64 ( ) != null ) { ",
  "2579": "returnVal . put ( JSONMapping . SERVICE_TICKET_BASE_64 , this . getServiceTicketBase64 ( ) ) ; ",
  "2580": "if ( this . getDataBase64 ( ) != null ) ",
  "2581": "returnVal . put ( JSONMapping . DATA_BASE_64 , ",
  "2582": "this . getDataBase64 ( ) ) ; ",
  "2583": "if ( this . getSumDecimals ( ) != null ) ",
  "2584": "returnVal . put ( JSONMapping . SUM_DECIMALS , this . getSumDecimals ( ) ) ; ",
  "2585": "if ( this . getTableRecords ( ) != null && ! this . getTableRecords ( ) . isEmpty ( ) ) ",
  "2586": "JSONArray assoFormsArr = new JSONArray ( ) ; ",
  "2587": "for ( Form toAdd : this . getTableRecords ( ) ) ",
  "2588": "assoFormsArr . put ( toAdd . toJsonObject ( ) ) ; ",
  "2589": "returnVal . put ( JSONMapping . TABLE_RECORDS , assoFormsArr ) ; ",
  "2590": "int listingCountFromListing = 0 ; ",
  "2591": "if ( this . getListing ( ) != null && ! this . getListing ( ) . isEmpty ( ) ) ",
  "2592": "listingCountFromListing = this . getListing ( ) . size ( ) ; ",
  "2593": "for ( T toAdd : this . getListing ( ) ) ",
  "2594": "returnVal . put ( JSONMapping . LISTING , jsonArray ) ; ",
  "2595": "if ( this . getListingCount ( ) == null ) ",
  "2596": "returnVal . put ( JSONMapping . LISTING_COUNT , new Integer ( listingCountFromListing ) ) ; ",
  "2597": "returnVal . put ( JSONMapping . LISTING_COUNT , this . getListingCount ( ) ) ; ",
  "2598": "if ( this . getListingIndex ( ) != null ) ",
  "2599": "returnVal . put ( JSONMapping . LISTING_INDEX , this . getListingIndex ( ) ) ; ",
  "2600": "returnVal . put ( JSONMapping . LISTING_PAGE , this . getListingPage ( ) ) ; ",
  "2601": "} public boolean isExpired ( ) ",
  "2602": "if ( this . getExpirationTime ( ) == null ) ",
  "2603": "Date expirationTime = new Date ( this . getExpirationTime ( ) ) ; ",
  "2604": "return ( expirationTime . before ( new Date ( ) ) ) ; ",
  "2605": "} public UserNotification createUserNotification ( UserNotification userNotificationParam ) ",
  "2606": "if ( userNotificationParam != null && this . serviceTicket != null ) ",
  "2607": "userNotificationParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2608": "return new UserNotification ( this . putJson ( ",
  "2609": "userNotificationParam , ",
  "2610": "WS . Path . UserNotification . Version1 . userNotificationCreate ( ) ) ) ; ",
  "2611": "} public UserNotification updateUserNotification ( ",
  "2612": "UserNotification userNotificationParam ) ",
  "2613": "return new UserNotification ( this . postJson ( ",
  "2614": "WS . Path . UserNotification . Version1 . userNotificationUpdate ( ) ) ) ; ",
  "2615": "} public UserNotification markUserNotificationAsRead ( ",
  "2616": "UserNotification userNotificationParam , ",
  "2617": "boolean asyncParam ) ",
  "2618": "WS . Path . UserNotification . Version1 . userNotificationMarkAsRead ( asyncParam ) ) ) ; ",
  "2619": "} public UserNotification deleteUserNotification ( ",
  "2620": "UserNotification userNotificationToDeleteParam ) ",
  "2621": "if ( userNotificationToDeleteParam != null && this . serviceTicket != null ) ",
  "2622": "userNotificationToDeleteParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2623": "return new UserNotification ( this . postJson ( userNotificationToDeleteParam , ",
  "2624": "WS . Path . UserNotification . Version1 . userNotificationDelete ( ) ) ) ; ",
  "2625": "} public UserNotification getUserNotificationById ( ",
  "2626": "Long userNotificationPkParam ) ",
  "2627": "UserNotification userNoti = new UserNotification ( ) ; ",
  "2628": "userNoti . setId ( userNotificationPkParam ) ; ",
  "2629": "userNoti . setServiceTicket ( this . serviceTicket ) ; ",
  "2630": "userNoti , WS . Path . UserNotification . Version1 . getById ( ) ) ) ; ",
  "2631": "} public List < UserNotification > getAllReadByLoggedInUser ( ",
  "2632": "return new UserNotificationListing ( this . postJson ( ",
  "2633": "WS . Path . UserNotification . Version1 . getAllReadByUser ( ",
  "2634": "offsetParam ) ) ) . getListing ( ) ; ",
  "2635": "} public List < UserNotification > getAllByUserAndDateBetween ( ",
  "2636": "User userParam , ",
  "2637": "Date fromDateParam , ",
  "2638": "Date toDateParam ",
  "2639": "return this . getAllByUserAndDateBetween ( ",
  "2640": "- 1 , ",
  "2641": "fromDateParam , ",
  "2642": "toDateParam ",
  "2643": "if ( this . serviceTicket != null && userParam != null ) { ",
  "2644": "long fromDate = ",
  "2645": "( fromDateParam == null ) ? ",
  "2646": "System . currentTimeMillis ( ) - TimeUnit . DAYS . toMillis ( 7 ) ",
  "2647": ": fromDateParam . getTime ( ) ; ",
  "2648": "long toDate = ",
  "2649": "( toDateParam == null ) ? ",
  "2650": "System . currentTimeMillis ( ) : toDateParam . getTime ( ) ; ",
  "2651": "WS . Path . UserNotification . Version1 . getAllByUserAndDate ( ",
  "2652": "fromDate , ",
  "2653": "toDate ",
  "2654": ") ) ) . getListing ( ) ; ",
  "2655": "} public static byte [ ] generateRandom ( int seedParam ) { ",
  "2656": "if ( AES256Local . secureRandom == null ) ",
  "2657": "AES256Local . secureRandom = new SecureRandom ( ) ; ",
  "2658": "return new IvParameterSpec ( AES256Local . secureRandom . generateSeed ( seedParam ) ) . getIV ( ) ; ",
  "2659": "} public static byte [ ] hmacSha256 ( byte [ ] hMacKeyParam , byte [ ] encryptedDataParam ) { ",
  "2660": "Mac hmac = Mac . getInstance ( HMAC_ALGO ) ; ",
  "2661": "hmac . init ( new SecretKeySpec ( hMacKeyParam , HMAC_ALGO ) ) ; ",
  "2662": "return hmac . doFinal ( encryptedDataParam ) ; ",
  "2663": "catch ( NoSuchAlgorithmException except ) { ",
  "2664": "FluidClientException . ErrorCode . AES_256 ) ; ",
  "2665": "catch ( InvalidKeyException except ) { ",
  "2666": "} public static byte [ ] generateLocalHMAC ( ",
  "2667": "byte [ ] encryptedDataParam , String passwordParam , String saltParam , byte [ ] seedParam ) { ",
  "2668": "byte [ ] poisonedSeed = poisonBytes ( seedParam ) ; ",
  "2669": "byte [ ] passwordSha256 = sha256 ( ",
  "2670": "passwordParam . concat ( saltParam ) . getBytes ( ) ) ; ",
  "2671": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( passwordSha256 , poisonedSeed ) ) ; ",
  "2672": "return hmacSha256 ( derivedKey , encryptedDataParam ) ; ",
  "2673": "} public static byte [ ] generateLocalHMACForReqToken ( ",
  "2674": "byte [ ] encryptedDataParam , byte [ ] keyParam , byte [ ] seedParam ) { ",
  "2675": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( keyParam , poisonedSeed ) ) ; ",
  "2676": "} private static byte [ ] poisonBytes ( byte [ ] bytesToPoisonParam ) { ",
  "2677": "if ( bytesToPoisonParam == null ) { ",
  "2678": "byte [ ] returnVal = new byte [ bytesToPoisonParam . length ] ; ",
  "2679": "for ( int index = 0 ; index < bytesToPoisonParam . length ; index ++ ) { ",
  "2680": "byte poisoned = ( byte ) ( bytesToPoisonParam [ index ] ^ 222 ) ; ",
  "2681": "returnVal [ index ] = poisoned ; ",
  "2682": "} public static byte [ ] decryptInitPacket ( ",
  "2683": "byte [ ] encryptedDataParam , ",
  "2684": "String saltParam , ",
  "2685": "byte [ ] ivParam , ",
  "2686": "byte [ ] seedParam ) { ",
  "2687": "byte [ ] passwordSha256 = sha256 ( passwordParam . concat ( saltParam ) . getBytes ( ) ) ; ",
  "2688": "byte [ ] derivedKey = sha256 ( UtilGlobal . addAll ( passwordSha256 , seedParam ) ) ; ",
  "2689": "return decrypt ( derivedKey , encryptedDataParam , ivParam ) ; ",
  "2690": "} public static byte [ ] decrypt ( byte [ ] keyParam , byte [ ] dataToDecryptParam , byte [ ] ivParam ) { ",
  "2691": "Key key = new SecretKeySpec ( keyParam , KEY_ALGO ) ; ",
  "2692": "Cipher cipher = Cipher . getInstance ( ALGO_CBC ) ; ",
  "2693": "cipher . init ( Cipher . DECRYPT_MODE , key , new IvParameterSpec ( ivParam ) ) ; ",
  "2694": "return cipher . doFinal ( dataToDecryptParam ) ; ",
  "2695": "except . getMessage ( ) , except , FluidClientException . ErrorCode . AES_256 ) ; ",
  "2696": "} catch ( InvalidAlgorithmParameterException except ) { ",
  "2697": "} catch ( IllegalBlockSizeException except ) { ",
  "2698": "} catch ( NoSuchPaddingException except ) { ",
  "2699": "} catch ( NoSuchAlgorithmException except ) { ",
  "2700": "} catch ( BadPaddingException except ) { ",
  "2701": "} public static byte [ ] encrypt ( byte [ ] keyParam , byte [ ] dataToEncryptParam , byte [ ] ivParam ) { ",
  "2702": "if ( dataToEncryptParam == null ) { ",
  "2703": "cipher . init ( Cipher . ENCRYPT_MODE , key , new IvParameterSpec ( ivParam ) ) ; ",
  "2704": "return cipher . doFinal ( dataToEncryptParam ) ; ",
  "2705": "} public static byte [ ] sha256 ( final byte [ ] dataParam ) { ",
  "2706": "if ( dataParam == null || dataParam . length == 0 ) { ",
  "2707": "final MessageDigest digest = MessageDigest . getInstance ( \"SHA-256\" ) ; ",
  "2708": "return digest . digest ( dataParam ) ; ",
  "2709": "catch ( final NoSuchAlgorithmException e ) { ",
  "2710": "} public void sendMessage ( ",
  "2711": "ABaseFluidJSONObject baseFluidJSONObjectParam , ",
  "2712": "String requestIdParam ) ",
  "2713": "if ( baseFluidJSONObjectParam != null ) { ",
  "2714": "baseFluidJSONObjectParam . setServiceTicket ( this . serviceTicket ) ; ",
  "2715": "if ( this . getHandler ( requestIdParam ) instanceof AGenericListMessageHandler ) { ",
  "2716": "AGenericListMessageHandler listHandler = ",
  "2717": "( AGenericListMessageHandler ) this . getHandler ( requestIdParam ) ; ",
  "2718": "listHandler . addExpectedMessage ( baseFluidJSONObjectParam . getEcho ( ) ) ; ",
  "2719": "this . webSocketClient . sendMessage ( baseFluidJSONObjectParam ) ; ",
  "2720": "public void closeAndClean ( ) ",
  "2721": "} public synchronized String initNewRequest ( ) { ",
  "2722": "String returnVal = UUID . randomUUID ( ) . toString ( ) ; ",
  "2723": "this . messageHandler . put ( returnVal , this . getNewHandlerInstance ( ) ) ; ",
  "2724": "} private String getWebSocketBaseURIFrom ( String webServiceURLParam ) ",
  "2725": "if ( webServiceURLParam == null ) ",
  "2726": "if ( webServiceURLParam . trim ( ) . length ( ) == 0 ) ",
  "2727": "URI uri = URI . create ( webServiceURLParam ) ; ",
  "2728": "String scheme = uri . getScheme ( ) ; ",
  "2729": "if ( scheme == null ) ",
  "2730": "scheme = scheme . trim ( ) . toLowerCase ( ) ; ",
  "2731": "if ( Constant . HTTP . equals ( scheme ) ) { ",
  "2732": "returnBuffer . append ( Constant . WS ) ; ",
  "2733": "else if ( Constant . HTTPS . equals ( scheme ) ) { ",
  "2734": "returnBuffer . append ( Constant . WSS ) ; ",
  "2735": "returnBuffer . append ( uri . getScheme ( ) ) ; ",
  "2736": "returnBuffer . append ( Constant . SCHEME_SEP ) ; ",
  "2737": "returnBuffer . append ( uri . getHost ( ) ) ; ",
  "2738": "if ( uri . getPort ( ) > 0 ) ",
  "2739": "returnBuffer . append ( Constant . COLON ) ; ",
  "2740": "returnBuffer . append ( uri . getPort ( ) ) ; ",
  "2741": "returnBuffer . append ( uri . getPath ( ) ) ; ",
  "2742": "} protected void setEchoIfNotSet ( ABaseFluidVO baseToSetEchoOnIfNotSetParam ) { ",
  "2743": "if ( baseToSetEchoOnIfNotSetParam == null ) { ",
  "2744": "} else if ( baseToSetEchoOnIfNotSetParam . getEcho ( ) == null || ",
  "2745": "baseToSetEchoOnIfNotSetParam . getEcho ( ) . trim ( ) . isEmpty ( ) ) { ",
  "2746": "baseToSetEchoOnIfNotSetParam . setEcho ( UUID . randomUUID ( ) . toString ( ) ) ; ",
  "2747": "} protected String getExceptionMessageVerbose ( ",
  "2748": "String prefixParam , ",
  "2749": "String uniqueReqIdParam , ",
  "2750": "int numberOfSentItemsParam ",
  "2751": "StringBuilder formFieldsCombined = new StringBuilder ( ) ; ",
  "2752": "int returnValSize = - 1 ; ",
  "2753": "RespHandler respHandler = this . getHandler ( uniqueReqIdParam ) ; ",
  "2754": "if ( respHandler instanceof AGenericListMessageHandler ) { ",
  "2755": "List < ? extends ABaseFluidJSONObject > returnValue = ",
  "2756": "( ( AGenericListMessageHandler ) respHandler ) . getReturnValue ( ) ; ",
  "2757": "if ( returnValue != null ) { ",
  "2758": "returnValSize = returnValue . size ( ) ; ",
  "2759": "returnValue . forEach ( listingItm -> { ",
  "2760": "if ( listingItm instanceof ABaseListing ) { ",
  "2761": "ABaseListing castedToListing = ( ABaseListing ) listingItm ; ",
  "2762": "if ( castedToListing != null ) { ",
  "2763": "castedToListing . getListing ( ) . forEach ( formItm -> { ",
  "2764": "formFieldsCombined . append ( formItm . toString ( ) ) ; ",
  "2765": "formFieldsCombined . append ( listingItm . toString ( ) ) ; ",
  "2766": "formFieldsCombined . toString ( ) + \"'.\" ) ; ",
  "2767": "} public User createAdminUser ( String passwordParam ) { ",
  "2768": "User adminUserCreate = new User ( ) ; ",
  "2769": "adminUserCreate . setPasswordClear ( passwordParam ) ; ",
  "2770": "adminUserCreate , WS . Path . User . Version1 . userCreateAdmin ( ) ) ) ; ",
  "2771": "if ( this . getUser ( ) != null ) ",
  "2772": "if ( this . getDateRead ( ) != null ) ",
  "2773": "returnVal . put ( JSONMapping . DATE_READ , ",
  "2774": "this . getDateAsLongFromJson ( this . getDateRead ( ) ) ) ; ",
  "2775": "if ( this . getExpiringLink ( ) != null ) ",
  "2776": "returnVal . put ( JSONMapping . EXPIRING_LINK , this . getExpiringLink ( ) ) ; ",
  "2777": "if ( this . getMessage ( ) != null ) ",
  "2778": "returnVal . put ( JSONMapping . MESSAGE , this . getMessage ( ) ) ; ",
  "2779": "returnVal . put ( JSONMapping . USER_NOTIFICATION_TYPE , this . getUserNotificationType ( ) ) ; ",
  "2780": "if ( this . getFormContainer ( ) != null ) { ",
  "2781": "if ( this . getMessage ( ) != null ) { ",
  "2782": "if ( this . getDateRead ( ) != null ) { ",
  "2783": "if ( this . getDateSent ( ) != null ) { ",
  "2784": "returnVal . put ( JSONMapping . DATE_SENT , ",
  "2785": "this . getDateAsLongFromJson ( this . getDateSent ( ) ) ) ; ",
  "2786": "if ( this . getFromUser ( ) != null ) { ",
  "2787": "JSONMapping . FROM_USER , ",
  "2788": "this . getFromUser ( ) . toJsonObject ( ) ) ; ",
  "2789": "if ( this . getToUser ( ) != null ) { ",
  "2790": "JSONMapping . TO_USER , ",
  "2791": "this . getToUser ( ) . toJsonObject ( ) ) ; ",
  "2792": "} public AccessToken getAccessToken ( ",
  "2793": "String clientIdParam , ",
  "2794": "String clientSecretParam , ",
  "2795": "String codeParam , ",
  "2796": "String redirectUrlParam ) ",
  "2797": "if ( clientIdParam == null || clientIdParam . trim ( ) . isEmpty ( ) ) ",
  "2798": "if ( clientSecretParam == null || clientSecretParam . trim ( ) . isEmpty ( ) ) ",
  "2799": "if ( codeParam == null || codeParam . trim ( ) . isEmpty ( ) ) ",
  "2800": "AccessTokenRequest tokenRequest = new AccessTokenRequest ( ) ; ",
  "2801": "tokenRequest . setClientId ( clientIdParam ) ; ",
  "2802": "tokenRequest . setClientSecret ( clientSecretParam ) ; ",
  "2803": "tokenRequest . setGrantType ( AUTHORIZATION_CODE ) ; ",
  "2804": "tokenRequest . setCode ( codeParam ) ; ",
  "2805": "tokenRequest . setRedirectUri ( redirectUrlParam ) ; ",
  "2806": "return new AccessToken ( this . postJson ( ",
  "2807": "tokenRequest , WS . Path . Auth0 . Version1 . userToken ( ) ) ) ; ",
  "2808": "} public NormalizedUserProfile getUserProfileInfo ( AccessToken accessTokenParam ) ",
  "2809": "if ( accessTokenParam == null || ( accessTokenParam . getAccessToken ( ) == null || ",
  "2810": "accessTokenParam . getAccessToken ( ) . trim ( ) . isEmpty ( ) ) ) ",
  "2811": "String accessToken = accessTokenParam . getAccessToken ( ) ; ",
  "2812": "List < HeaderNameValue > headerListing = new ArrayList < HeaderNameValue > ( ) ; ",
  "2813": "headerListing . add ( new HeaderNameValue ( ",
  "2814": "NormalizedUserProfile . HeaderMapping . AUTHORIZATION , ",
  "2815": "return new NormalizedUserProfile ( ",
  "2816": "this . getJson ( true , WS . Path . Auth0 . Version1 . userInfo ( ) , headerListing ) ) ; ",
  "2817": "} public Form getFormFields ( Long electronicFormIdParam , boolean includeTableFieldsParam ) { ",
  "2818": "StringBuffer primaryQuery = new StringBuffer ( ABaseFluidJSONObject . JSONMapping . ID ) ; ",
  "2819": "List < Form > formsWithId = this . searchAndConvertHitsToFormWithAllFields ( ",
  "2820": "QueryBuilders . queryStringQuery ( primaryQuery . toString ( ) ) , Index . DOCUMENT , ",
  "2821": "DEFAULT_OFFSET , 1 , ",
  "2822": "if ( formsWithId != null && ! formsWithId . isEmpty ( ) ) { ",
  "2823": "if ( ! includeTableFieldsParam ) { ",
  "2824": "this . populateTableFields ( false , true , returnVal . getFormFields ( ) ) ; ",
  "2825": "if ( this . getFilename ( ) != null ) ",
  "2826": "returnVal . put ( JSONMapping . FILENAME , this . getFilename ( ) ) ; ",
  "2827": "if ( this . getSha256sum ( ) != null ) ",
  "2828": "returnVal . put ( JSONMapping . SHA_256_SUM , this . getSha256sum ( ) ) ; ",
  "2829": "if ( this . isAddToolsToClassPath ( ) != null ) ",
  "2830": "returnVal . put ( JSONMapping . ADD_TOOLS_TO_CLASS_PATH , this . isAddToolsToClassPath ( ) ) ; ",
  "2831": "if ( this . getLibraryDataBase64 ( ) != null ) ",
  "2832": "returnVal . put ( JSONMapping . LIBRARY_DATA_BASE64 , ",
  "2833": "this . getLibraryDataBase64 ( ) ) ; ",
  "2834": "} private String executeHttp ( ",
  "2835": "HttpClient httpClientParam , ",
  "2836": "HttpUriRequest httpUriRequestParam , ",
  "2837": "ResponseHandler responseHandlerParam , ",
  "2838": "String postfixUrlParam ",
  "2839": "Object returnedObj = httpClientParam . execute ( httpUriRequestParam , responseHandlerParam ) ; ",
  "2840": "if ( returnedObj instanceof String ) { ",
  "2841": "return ( String ) returnedObj ; ",
  "2842": "} else if ( returnedObj == null ) { ",
  "2843": "( returnedObj == null ) ? null : returnedObj . getClass ( ) . getName ( ) ) + \"'.\" , ",
  "2844": "} catch ( IOException except ) { ",
  "2845": "if ( except instanceof UnknownHostException ) { ",
  "2846": "except , FluidClientException . ErrorCode . CONNECT_ERROR ) ; ",
  "2847": "if ( except instanceof ConnectException ) { ",
  "2848": "throw new FluidClientException ( except . getMessage ( ) , ",
  "2849": "except , ",
  "2850": "FluidClientException . ErrorCode . CONNECT_ERROR ) ; ",
  "2851": "except . getMessage ( ) , ",
  "2852": "} public JSONObject getJson ( ",
  "2853": "String postfixUrlParam , ",
  "2854": "List < HeaderNameValue > headerNameValuesParam ) { ",
  "2855": "return this . getJson ( ",
  "2856": "postfixUrlParam , ",
  "2857": "headerNameValuesParam ) ; ",
  "2858": "boolean checkConnectionValidParam , ",
  "2859": "if ( checkConnectionValidParam && ! this . isConnectionValid ( ) ) { ",
  "2860": "this . endpointUrl . concat ( postfixUrlParam ) + \"'.\" , ",
  "2861": "CloseableHttpClient httpclient = this . getClient ( ) ; ",
  "2862": "HttpGet httpGet = new HttpGet ( this . endpointUrl . concat ( postfixUrlParam ) ) ; ",
  "2863": "if ( headerNameValuesParam != null && ! headerNameValuesParam . isEmpty ( ) ) { ",
  "2864": "for ( HeaderNameValue headerNameVal : headerNameValuesParam ) { ",
  "2865": "if ( headerNameVal . getName ( ) == null || headerNameVal . getName ( ) . trim ( ) . isEmpty ( ) ) { ",
  "2866": "if ( headerNameVal . getValue ( ) == null ) { ",
  "2867": "httpGet . setHeader ( headerNameVal . getName ( ) , headerNameVal . getValue ( ) ) ; ",
  "2868": "ResponseHandler < String > responseHandler = this . getJsonResponseHandler ( ",
  "2869": "this . endpointUrl . concat ( postfixUrlParam ) ) ; ",
  "2870": "String responseBody = this . executeHttp ( ",
  "2871": "httpclient , httpGet , responseHandler , postfixUrlParam ) ; ",
  "2872": "if ( responseBody == null || responseBody . trim ( ) . isEmpty ( ) ) { ",
  "2873": "JSONObject jsonOjb = new JSONObject ( responseBody ) ; ",
  "2874": "if ( jsonOjb . isNull ( Error . JSONMapping . ERROR_CODE ) ) { ",
  "2875": "return jsonOjb ; ",
  "2876": "int errorCode = jsonOjb . getInt ( Error . JSONMapping . ERROR_CODE ) ; ",
  "2877": "if ( errorCode > 0 ) { ",
  "2878": "String errorMessage = ( jsonOjb . isNull ( Error . JSONMapping . ERROR_MESSAGE ) ",
  "2879": "jsonOjb . getString ( Error . JSONMapping . ERROR_MESSAGE ) ) ; ",
  "2880": "throw new FluidClientException ( errorMessage , errorCode ) ; ",
  "2881": "} protected JSONObject postJson ( ",
  "2882": "ABaseFluidJSONObject baseDomainParam , ",
  "2883": "String postfixUrlParam ) { ",
  "2884": "return this . postJson ( false , baseDomainParam , postfixUrlParam ) ; ",
  "2885": "List < HeaderNameValue > headerNameValuesParam , ",
  "2886": "return this . executeJson ( ",
  "2887": "HttpMethod . POST , ",
  "2888": "headerNameValuesParam , ",
  "2889": "checkConnectionValidParam , ",
  "2890": "baseDomainParam , ",
  "2891": "ContentType . APPLICATION_JSON , ",
  "2892": "postfixUrlParam ) ; ",
  "2893": "} protected JSONObject deleteJson ( ",
  "2894": "return this . deleteJson ( false , baseDomainParam , postfixUrlParam ) ; ",
  "2895": "HttpMethod . DELETE , ",
  "2896": "} protected JSONObject postForm ( ",
  "2897": "List < FormNameValue > formNameValuesParam , ",
  "2898": "return this . executeForm ( ",
  "2899": "formNameValuesParam , ",
  "2900": "ContentType . APPLICATION_FORM_URLENCODED , ",
  "2901": "} protected JSONObject putJson ( ",
  "2902": "HttpMethod . PUT , ",
  "2903": "return this . putJson ( false , baseDomainParam , postfixUrlParam ) ; ",
  "2904": "} protected JSONObject executeJson ( ",
  "2905": "HttpMethod httpMethodParam , ",
  "2906": "ContentType contentTypeParam , ",
  "2907": "if ( baseDomainParam == null ) { ",
  "2908": "String bodyJsonString = baseDomainParam . toJsonObject ( ) . toString ( ) ; ",
  "2909": "return this . executeString ( ",
  "2910": "httpMethodParam , ",
  "2911": "bodyJsonString , ",
  "2912": "contentTypeParam , ",
  "2913": "} protected JSONObject executeForm ( ",
  "2914": "if ( formNameValuesParam == null || formNameValuesParam . isEmpty ( ) ) { ",
  "2915": "StringBuilder strBuilder = new StringBuilder ( ) ; ",
  "2916": "for ( FormNameValue nameValue : formNameValuesParam ) { ",
  "2917": "if ( nameValue . getName ( ) == null || nameValue . getName ( ) . trim ( ) . isEmpty ( ) ) { ",
  "2918": "if ( nameValue . getValue ( ) == null ) { ",
  "2919": "strBuilder . append ( nameValue . getName ( ) ) ; ",
  "2920": "strBuilder . append ( EQUALS ) ; ",
  "2921": "strBuilder . append ( nameValue . getValue ( ) ) ; ",
  "2922": "strBuilder . append ( AMP ) ; ",
  "2923": "String bodyJsonString = strBuilder . toString ( ) ; ",
  "2924": "bodyJsonString = bodyJsonString . substring ( 0 , bodyJsonString . length ( ) - 1 ) ; ",
  "2925": "bodyJsonString , contentTypeParam , postfixUrlParam ) ; ",
  "2926": "} protected JSONObject executeString ( ",
  "2927": "String stringParam , ",
  "2928": "String responseBody = this . executeTxtReceiveTxt ( ",
  "2929": "stringParam , ",
  "2930": "if ( jsonOjb . isNull ( Error . JSONMapping . ERROR_CODE ) ) ",
  "2931": "if ( errorCode > 0 ) ",
  "2932": "if ( responseBody != null && ! responseBody . trim ( ) . isEmpty ( ) ) { ",
  "2933": "responseBody , ",
  "2934": "} protected String executeTxtReceiveTxt ( ",
  "2935": "if ( stringParam == null || stringParam . isEmpty ( ) ) { ",
  "2936": "String responseBody = null ; ",
  "2937": "HttpUriRequest uriRequest = null ; ",
  "2938": "if ( httpMethodParam == HttpMethod . POST ) { ",
  "2939": "if ( contentTypeParam == ContentType . APPLICATION_FORM_URLENCODED ) { ",
  "2940": "RequestBuilder builder = RequestBuilder . post ( ) . setUri ( ",
  "2941": "builder = this . addParamsToBuildFromString ( builder , stringParam ) ; ",
  "2942": "uriRequest = builder . build ( ) ; ",
  "2943": "uriRequest = new HttpPost ( this . endpointUrl . concat ( postfixUrlParam ) ) ; ",
  "2944": "uriRequest . setHeader ( CONTENT_TYPE_HEADER , contentTypeParam . toString ( ) ) ; ",
  "2945": "} else if ( httpMethodParam == HttpMethod . PUT ) { ",
  "2946": "RequestBuilder builder = RequestBuilder . put ( ) . setUri ( ",
  "2947": "uriRequest = new HttpPut ( this . endpointUrl . concat ( postfixUrlParam ) ) ; ",
  "2948": "} else if ( httpMethodParam == HttpMethod . DELETE ) { ",
  "2949": "uriRequest = new HttpDelete ( this . endpointUrl . concat ( postfixUrlParam ) ) ; ",
  "2950": "if ( uriRequest == null ) { ",
  "2951": "uriRequest . setHeader ( headerNameVal . getName ( ) , headerNameVal . getValue ( ) ) ; ",
  "2952": "if ( uriRequest instanceof HttpEntityEnclosingRequestBase ) { ",
  "2953": "HttpEntity httpEntity = new StringEntity ( stringParam , contentTypeParam ) ; ",
  "2954": "( ( HttpEntityEnclosingRequestBase ) uriRequest ) . setEntity ( httpEntity ) ; ",
  "2955": "responseBody = this . executeHttp ( httpclient , uriRequest , ",
  "2956": "responseHandler , postfixUrlParam ) ; ",
  "2957": "} catch ( FluidClientException fluidClientExcept ) { ",
  "2958": "throw fluidClientExcept ; ",
  "2959": "} catch ( Exception otherExcept ) { ",
  "2960": "throw new FluidClientException ( otherExcept . getMessage ( ) , ",
  "2961": "otherExcept , FluidClientException . ErrorCode . ILLEGAL_STATE_ERROR ) ; ",
  "2962": "} private RequestBuilder addParamsToBuildFromString ( ",
  "2963": "RequestBuilder builderParam , ",
  "2964": "String formDataToAddParam ",
  "2965": "String [ ] nameValuePairs = formDataToAddParam . split ( REGEX_AMP ) ; ",
  "2966": "if ( nameValuePairs . length > 0 ) { ",
  "2967": "for ( String nameValuePair : nameValuePairs ) { ",
  "2968": "String [ ] nameValuePairArr = nameValuePair . split ( REGEX_EQUALS ) ; ",
  "2969": "if ( nameValuePairArr . length > 1 ) { ",
  "2970": "String name = nameValuePairArr [ 0 ] ; ",
  "2971": "String value = nameValuePairArr [ 1 ] ; ",
  "2972": "builderParam = builderParam . addParameter ( name , value ) ; ",
  "2973": "return builderParam ; ",
  "2974": "} private ResponseHandler < String > getJsonResponseHandler ( final String urlCalledParam ) { ",
  "2975": "ResponseHandler < String > responseHandler = new ResponseHandler < String > ( ) { ",
  "2976": "public String handleResponse ( final HttpResponse responseParam ) throws IOException { ",
  "2977": "int status = responseParam . getStatusLine ( ) . getStatusCode ( ) ; ",
  "2978": "if ( status == 404 ) { ",
  "2979": "urlCalledParam + \"].\" , ",
  "2980": "} else if ( status >= 200 && status < 300 ) { ",
  "2981": "HttpEntity entity = responseParam . getEntity ( ) ; ",
  "2982": "String responseJsonString = ( entity == null ) ? null : ",
  "2983": "EntityUtils . toString ( entity ) ; ",
  "2984": "return responseJsonString ; ",
  "2985": "} else if ( status == 400 ) { ",
  "2986": "String responseString = ( entity != null ) ? ",
  "2987": "EntityUtils . toString ( entity ) : null ; ",
  "2988": "responseString + \"]\" , ",
  "2989": "return responseHandler ; ",
  "2990": "} public static String encodeParam ( String textParam ) { ",
  "2991": "if ( textParam == null ) { ",
  "2992": "return URLEncoder . encode ( textParam , ENCODING_UTF_8 ) ; ",
  "2993": "} public boolean isConnectionValid ( ) { ",
  "2994": "WS . Path . Test . Version1 . testConnection ( ) ) ; ",
  "2995": "} catch ( FluidClientException flowJobExcept ) { ",
  "2996": "if ( flowJobExcept . getErrorCode ( ) == FluidClientException . ErrorCode . CONNECT_ERROR ) { ",
  "2997": "throw flowJobExcept ; ",
  "2998": "} protected boolean isError ( ABaseFluidJSONObject baseDomainParam ) { ",
  "2999": "if ( baseDomainParam instanceof Error && ( ( Error ) baseDomainParam ) . getErrorCode ( ) > 0 ) { ",
  "3000": "} private CloseableHttpClient getClient ( ) { ",
  "3001": "if ( this . closeableHttpClient != null ) { ",
  "3002": "return this . closeableHttpClient ; ",
  "3003": "String pathToFluidTrustStore = this . getPathToFluidSpecificTrustStore ( ) ; ",
  "3004": "if ( IS_IN_JUNIT_TEST_MODE || pathToFluidTrustStore != null ) { ",
  "3005": "SSLContextBuilder builder = new SSLContextBuilder ( ) ; ",
  "3006": "if ( pathToFluidTrustStore == null ) { ",
  "3007": "builder . loadTrustMaterial ( new SSLTrustAll ( ) ) ; ",
  "3008": "String password = this . getFluidSpecificTrustStorePassword ( ) ; ",
  "3009": "if ( password == null ) { ",
  "3010": "password = UtilGlobal . EMPTY ; ",
  "3011": "if ( IS_IN_JUNIT_TEST_MODE ) { ",
  "3012": "builder . loadTrustMaterial ( ",
  "3013": "new File ( pathToFluidTrustStore ) , ",
  "3014": "password . toCharArray ( ) , ",
  "3015": "new SSLTrustAll ( ) ) ; ",
  "3016": "password . toCharArray ( ) ) ; ",
  "3017": "SSLContext sslContext = builder . build ( ) ; ",
  "3018": "this . closeableHttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( ",
  "3019": "new SSLConnectionSocketFactory ( sslContext ) ) . build ( ) ; ",
  "3020": "} catch ( NoSuchAlgorithmException e ) { ",
  "3021": "e , FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; ",
  "3022": "} catch ( KeyManagementException e ) { ",
  "3023": "FluidClientException . ErrorCode . CRYPTOGRAPHY ) ; ",
  "3024": "} catch ( KeyStoreException e ) { ",
  "3025": "} catch ( CertificateException e ) { ",
  "3026": "this . closeableHttpClient = HttpClients . createDefault ( ) ; ",
  "3027": "} private String getPathToFluidSpecificTrustStore ( ) { ",
  "3028": "String fluidSystemTrustStore = ",
  "3029": "System . getProperty ( SYSTEM_PROP_FLUID_TRUST_STORE ) ; ",
  "3030": "if ( fluidSystemTrustStore == null || fluidSystemTrustStore . trim ( ) . isEmpty ( ) ) { ",
  "3031": "File certFile = new File ( fluidSystemTrustStore ) ; ",
  "3032": "if ( certFile . exists ( ) && certFile . isFile ( ) ) { ",
  "3033": "return fluidSystemTrustStore ; ",
  "3034": "} protected void closeConnectionNonThreaded ( ) { ",
  "3035": "this . closeableHttpClient . close ( ) ; ",
  "3036": "e . getMessage ( ) , ",
  "3037": "e , FluidClientException . ErrorCode . IO_ERROR ) ; ",
  "3038": "this . closeableHttpClient = null ; ",
  "3039": "} public void closeConnection ( ) { ",
  "3040": "if ( this . connection == null ) { ",
  "3041": "if ( this . connection . isClosed ( ) ) { ",
  "3042": "this . connection . close ( ) ; ",
  "3043": "} catch ( SQLException sqlExcept ) { ",
  "3044": "throw new FluidSQLException ( sqlExcept ) ; ",
  "3045": "} public SQLServerType getSQLTypeFromConnection ( ) { ",
  "3046": "if ( this . databaseMetaData == null ) { ",
  "3047": "this . databaseMetaData = this . getConnection ( ) . getMetaData ( ) ; ",
  "3048": "return SQLServerType . getSQLTypeFromProductName ( ",
  "3049": "this . databaseMetaData . getDatabaseProductName ( ) ) ; ",
  "3050": "} protected void closeStatement ( PreparedStatement preparedStatementParam , ",
  "3051": "if ( resultSetParam == null ) { ",
  "3052": "this . closeStatement ( preparedStatementParam ) ; ",
  "3053": "resultSetParam . close ( ) ; ",
  "3054": "} protected void closeStatement ( PreparedStatement preparedStatementParam ) { ",
  "3055": "if ( preparedStatementParam == null ) ",
  "3056": "preparedStatementParam . close ( ) ; ",
  "3057": "} public FluidItem getFluidItemByFormId ( Long formIdParam ) { ",
  "3058": "Form form = new Form ( formIdParam ) ; ",
  "3059": "return new FluidItem ( this . postJson ( ",
  "3060": "form , WS . Path . FlowItem . Version1 . getByForm ( ) ) ) ; ",
  "3061": "} public FluidItem createFlowItem ( ",
  "3062": "FluidItem flowJobItemParam , ",
  "3063": "String flowNameParam ) { ",
  "3064": "if ( flowJobItemParam != null && this . serviceTicket != null ) { ",
  "3065": "flowJobItemParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3066": "if ( flowJobItemParam != null ) ",
  "3067": "flowJobItemParam . setFlow ( flowNameParam ) ; ",
  "3068": "return new FluidItem ( this . putJson ( ",
  "3069": "flowJobItemParam , WS . Path . FlowItem . Version1 . flowItemCreate ( ) ) ) ; ",
  "3070": "} public FluidItemListing getFluidItemsForView ( ",
  "3071": "String sortFieldParam , ",
  "3072": "String sortOrderParam ) ",
  "3073": "if ( this . serviceTicket != null && jobViewParam != null ) ",
  "3074": "WS . Path . FlowItem . Version1 . getByJobView ( ",
  "3075": "sortFieldParam , ",
  "3076": "sortOrderParam ",
  "3077": ") ) ) ; ",
  "3078": "} public FluidItem sendFlowItemOn ( ",
  "3079": "boolean allowCollaboratorToSendOnParam ",
  "3080": "flowJobItemParam , WS . Path . FlowItem . Version1 . sendFlowItemOn ( ",
  "3081": "allowCollaboratorToSendOnParam ) ) ) ; ",
  "3082": "} public FluidItem sendFormToFlow ( ",
  "3083": "String flowParam ) { ",
  "3084": "itemToSend . setFlow ( flowParam ) ; ",
  "3085": "itemToSend . setServiceTicket ( this . serviceTicket ) ; ",
  "3086": "itemToSend , WS . Path . FlowItem . Version1 . sendFlowItemToFlow ( ) ) ) ; ",
  "3087": "} @ OnClose ",
  "3088": "public void onClose ( Session userSessionParam , CloseReason reasonParam ) { ",
  "3089": "this . userSession = null ; ",
  "3090": "if ( this . messageHandlers != null ) { ",
  "3091": "this . messageHandlers . values ( ) . forEach ( handle -> { ",
  "3092": "handle . connectionClosed ( ) ; ",
  "3093": "} @ OnMessage ",
  "3094": "public void onMessage ( String messageParam ) { ",
  "3095": "boolean handlerFoundForMsg = false ; ",
  "3096": "for ( IMessageResponseHandler handler : new ArrayList < > ( this . messageHandlers . values ( ) ) ) { ",
  "3097": "Object qualifyObj = handler . doesHandlerQualifyForProcessing ( messageParam ) ; ",
  "3098": "if ( qualifyObj instanceof Error ) { ",
  "3099": "handler . handleMessage ( qualifyObj ) ; ",
  "3100": "} else if ( qualifyObj instanceof JSONObject ) { ",
  "3101": "handlerFoundForMsg = true ; ",
  "3102": "if ( ! handlerFoundForMsg ) { ",
  "3103": "} public void sendMessage ( ABaseFluidJSONObject aBaseFluidJSONObjectParam ) { ",
  "3104": "if ( aBaseFluidJSONObjectParam == null ) { ",
  "3105": "this . sendMessage ( aBaseFluidJSONObjectParam . toJsonObject ( ) . toString ( ) ) ; ",
  "3106": "} public void sendMessage ( String messageToSendParam ) { ",
  "3107": "if ( this . userSession == null ) { ",
  "3108": "RemoteEndpoint . Async asyncRemote = null ; ",
  "3109": "if ( ( asyncRemote = this . userSession . getAsyncRemote ( ) ) == null ) { ",
  "3110": "asyncRemote . sendText ( messageToSendParam ) ; ",
  "3111": "} public void closeSession ( ) { ",
  "3112": "this . userSession . close ( ) ; ",
  "3113": "returnVal . put ( JSONMapping . ERROR_CODE , this . getErrorCode ( ) ) ; ",
  "3114": "returnVal . put ( JSONMapping . ERROR_CODE_OTHER , this . getErrorCode ( ) ) ; ",
  "3115": "if ( this . getErrorMessage ( ) != null ) ",
  "3116": "returnVal . put ( JSONMapping . ERROR_MESSAGE , this . getErrorMessage ( ) ) ; ",
  "3117": "returnVal . put ( JSONMapping . ERROR_MESSAGE_OTHER , this . getErrorMessage ( ) ) ; ",
  "3118": "} public List < FormFieldListing > getFormFieldsSynchronized ( ",
  "3119": "Form ... formsToGetFieldListingForForParam ",
  "3120": "if ( formsToGetFieldListingForForParam == null ) { ",
  "3121": "if ( formsToGetFieldListingForForParam . length == 0 ) { ",
  "3122": "for ( Form formToSend : formsToGetFieldListingForForParam ) { ",
  "3123": "List < FormFieldListing > returnValue = ",
  "3124": "\"SQLUtil-WebSocket-GetFormFields\" , ",
  "3125": "if ( this . getRuleExecuted ( ) != null ) ",
  "3126": "returnVal . put ( JSONMapping . RULE_EXECUTED , ",
  "3127": "this . getRuleExecuted ( ) ) ; ",
  "3128": "if ( this . getRuleExecutedResult ( ) != null ) ",
  "3129": "returnVal . put ( JSONMapping . RULE_EXECUTED_RESULT , ",
  "3130": "this . getRuleExecutedResult ( ) ) ; ",
  "3131": "if ( this . getFlowRuleOrder ( ) != null ) ",
  "3132": "returnVal . put ( JSONMapping . FLOW_RULE_ORDER , ",
  "3133": "this . getFlowRuleOrder ( ) ) ; ",
  "3134": "if ( this . getLogEntryType ( ) != null ) ",
  "3135": "returnVal . put ( JSONMapping . FLOW_STEP , ",
  "3136": "this . getFlowStep ( ) . toJsonObject ( ) ) ; ",
  "3137": "returnVal . put ( JSONMapping . FORM , ",
  "3138": "this . getForm ( ) . toJsonObject ( ) ) ; ",
  "3139": "this . getJobView ( ) ) ; ",
  "3140": "} public List < SQLResultSet > executeNativeSQLSynchronized ( ",
  "3141": "NativeSQLQuery nativeSQLQueryParam ) { ",
  "3142": "if ( nativeSQLQueryParam == null ) ",
  "3143": "if ( nativeSQLQueryParam . getDatasourceName ( ) == null || ",
  "3144": "nativeSQLQueryParam . getDatasourceName ( ) . isEmpty ( ) ) ",
  "3145": "if ( ( nativeSQLQueryParam . getQuery ( ) == null || ",
  "3146": "nativeSQLQueryParam . getQuery ( ) . isEmpty ( ) ) && ",
  "3147": "( nativeSQLQueryParam . getStoredProcedure ( ) == null || ",
  "3148": "nativeSQLQueryParam . getStoredProcedure ( ) . isEmpty ( ) ) ) ",
  "3149": "this . setEchoIfNotSet ( nativeSQLQueryParam ) ; ",
  "3150": "this . sendMessage ( nativeSQLQueryParam , uniqueReqId ) ; ",
  "3151": "List < SQLResultSet > returnValue = ",
  "3152": "if ( this . getHandler ( uniqueReqId ) . isConnectionClosed ( ) ) ",
  "3153": "} public static SyntaxFactory getInstance ( ) { ",
  "3154": "if ( SyntaxFactory . syntaxFactory == null ) { ",
  "3155": "SyntaxFactory . syntaxFactory = new SyntaxFactory ( ) ; ",
  "3156": "return SyntaxFactory . syntaxFactory ; ",
  "3157": "} public ISyntax getSyntaxFor ( ",
  "3158": "ABaseSQLUtil . SQLServerType sqlTypeParam , ",
  "3159": "String aliasParam ) { ",
  "3160": "if ( ISyntax . ProcedureMapping . isStoredProcedureMapping ( aliasParam ) ) { ",
  "3161": "return new StoredProcedureSyntax ( ",
  "3162": "aliasParam , ",
  "3163": "ISyntax . ProcedureMapping . getParamCountForAlias ( aliasParam ) ) ; ",
  "3164": "throw new FluidSQLException ( ",
  "3165": "} public ISyntax getFieldValueSyntaxFor ( ",
  "3166": "SQLFormFieldUtil . FormFieldMapping formFieldMappingParam ",
  "3167": "Long dataType = formFieldMappingParam . dataType ; ",
  "3168": "switch ( dataType . intValue ( ) ) { ",
  "3169": "return this . getSyntaxFor ( ",
  "3170": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_1_Text ) ; ",
  "3171": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_2_TrueFalse ) ; ",
  "3172": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_3_ParagraphText ) ; ",
  "3173": "if ( this . isPlain ( formFieldMappingParam . metaData ) ) ",
  "3174": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_4_MultiChoice ) ; ",
  "3175": "else if ( this . isSelectMany ( formFieldMappingParam . metaData ) ) ",
  "3176": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldMultipleValue_4_MultiChoice ) ; ",
  "3177": "dataType ",
  "3178": "formFieldMappingParam . metaData + \"'.\" ) ) ; ",
  "3179": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_5_DateTime ) ; ",
  "3180": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_6_Decimal ) ; ",
  "3181": "sqlTypeParam , ISyntax . ProcedureMapping . Field . GetFormFieldValue_7_TableField ) ; ",
  "3182": "case UtilGlobal . FieldTypeId . _8_TEXT_ENCRYPTED : ",
  "3183": "} private boolean isPlain ( String textToCheckParam ) { ",
  "3184": "String toCheckLower = textToCheckParam . toLowerCase ( ) ; ",
  "3185": "return toCheckLower . startsWith ( PLAIN . toLowerCase ( ) ) ; ",
  "3186": "} private boolean isSelectMany ( String textToCheckParam ) { ",
  "3187": "return toCheckLower . startsWith ( SELECT_MANY . toLowerCase ( ) ) ; ",
  "3188": "if ( this . getSqlColumns ( ) != null ) ",
  "3189": "for ( SQLColumn toAdd : this . getSqlColumns ( ) ) ",
  "3190": "returnVal . put ( JSONMapping . SQL_COLUMNS , jsonArray ) ; ",
  "3191": "} public String requestLicense ( LicenseRequest licenseRequestParam ) { ",
  "3192": "if ( licenseRequestParam != null && ",
  "3193": "licenseRequestParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3194": "return this . executeTxtReceiveTxt ( ",
  "3195": "( licenseRequestParam == null ) ? null : ",
  "3196": "licenseRequestParam . toJsonObject ( ) . toString ( ) , ",
  "3197": "Version1 . licenseRequest ( ) ) ; ",
  "3198": "} public LicenseRequest applyLicense ( String licenseToApplyParam ) ",
  "3199": "LicenseRequest liceReq = new LicenseRequest ( ) ; ",
  "3200": "liceReq . setLicenseCipherText ( licenseToApplyParam ) ; ",
  "3201": "liceReq . setServiceTicket ( this . serviceTicket ) ; ",
  "3202": "return new LicenseRequest ( this . postJson ( ",
  "3203": "liceReq , Version1 . licenseApply ( ) ) ) ; ",
  "3204": "if ( this . getInputs ( ) != null ) ",
  "3205": "for ( Field toAdd : this . getInputs ( ) ) ",
  "3206": "returnVal . put ( JSONMapping . INPUTS , jsonArray ) ; ",
  "3207": "if ( this . getRules ( ) != null ) ",
  "3208": "for ( String toAdd : this . getRules ( ) ) ",
  "3209": "jsonArray . put ( toAdd ) ; ",
  "3210": "returnVal . put ( JSONMapping . RULES , jsonArray ) ; ",
  "3211": "} public Field createFieldTextPlain ( Field routeFieldParam ) { ",
  "3212": "if ( routeFieldParam != null && this . serviceTicket != null ) { ",
  "3213": "routeFieldParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3214": "if ( routeFieldParam != null ) { ",
  "3215": "routeFieldParam . setTypeAsEnum ( Field . Type . Text ) ; ",
  "3216": "routeFieldParam . setTypeMetaData ( FieldMetaData . Text . PLAIN ) ; ",
  "3217": "routeFieldParam , Version1 . routeFieldCreate ( ) ) ) ; ",
  "3218": "} public Field createFieldTrueFalse ( Field routeFieldParam ) { ",
  "3219": "routeFieldParam . setTypeAsEnum ( Field . Type . TrueFalse ) ; ",
  "3220": "routeFieldParam . setTypeMetaData ( FieldMetaData . TrueFalse . TRUE_FALSE ) ; ",
  "3221": "} public Field createFieldParagraphTextPlain ( Field routeFieldParam ) { ",
  "3222": "routeFieldParam . setTypeAsEnum ( Field . Type . ParagraphText ) ; ",
  "3223": "routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . PLAIN ) ; ",
  "3224": "} public Field createFieldParagraphTextHTML ( Field routeFieldParam ) { ",
  "3225": "routeFieldParam . setTypeMetaData ( FieldMetaData . ParagraphText . HTML ) ; ",
  "3226": "Field routeFieldParam , ",
  "3227": "List < String > multiChoiceValuesParam ",
  "3228": "if ( multiChoiceValuesParam == null ) { ",
  "3229": "routeFieldParam . setTypeAsEnum ( Field . Type . MultipleChoice ) ; ",
  "3230": "routeFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . PLAIN ) ; ",
  "3231": "routeFieldParam . setFieldValue ( new MultiChoice ( multiChoiceValuesParam ) ) ; ",
  "3232": "} public Field createFieldMultiChoiceSelectMany ( ",
  "3233": "routeFieldParam . setTypeMetaData ( FieldMetaData . MultiChoice . SELECT_MANY ) ; ",
  "3234": "} public Field createFieldDateTimeDate ( Field routeFieldParam ) { ",
  "3235": "routeFieldParam . setTypeAsEnum ( Field . Type . DateTime ) ; ",
  "3236": "routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE ) ; ",
  "3237": "} public Field createFieldDateTimeDateAndTime ( Field routeFieldParam ) { ",
  "3238": "routeFieldParam . setTypeMetaData ( FieldMetaData . DateTime . DATE_AND_TIME ) ; ",
  "3239": "} public Field createFieldDecimalPlain ( Field routeFieldParam ) { ",
  "3240": "routeFieldParam . setTypeAsEnum ( Field . Type . Decimal ) ; ",
  "3241": "routeFieldParam . setTypeMetaData ( FieldMetaData . Decimal . PLAIN ) ; ",
  "3242": "} public Field updateFieldTextPlain ( Field routeFieldParam ) { ",
  "3243": "routeFieldParam , Version1 . routeFieldUpdate ( ) ) ) ; ",
  "3244": "} public Field updateFieldTrueFalse ( Field routeFieldParam ) { ",
  "3245": "} public Field updateFieldParagraphTextPlain ( Field routeFieldParam ) { ",
  "3246": "} public Field updateFieldParagraphTextHTML ( Field routeFieldParam ) { ",
  "3247": "} public Field updateFieldDateTimeDate ( Field routeFieldParam ) { ",
  "3248": "} public Field updateFieldDateTimeDateAndTime ( Field routeFieldParam ) { ",
  "3249": "} public Field updateFieldDecimalPlain ( Field routeFieldParam ) { ",
  "3250": "} public Field updateFieldValue ( Field routeFieldValueParam ) { ",
  "3251": "if ( routeFieldValueParam != null && this . serviceTicket != null ) { ",
  "3252": "routeFieldValueParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3253": "routeFieldValueParam , Version1 . routeFieldUpdateValue ( ) ) ) ; ",
  "3254": "} public Field createFieldValue ( ",
  "3255": "Field routeFieldValueToCreateParam , ",
  "3256": "FluidItem fluidItemParam ) { ",
  "3257": "if ( routeFieldValueToCreateParam != null && this . serviceTicket != null ) { ",
  "3258": "routeFieldValueToCreateParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3259": "Long fluidItmId = ( fluidItemParam == null ) ? null : fluidItemParam . getId ( ) ; ",
  "3260": "routeFieldValueToCreateParam , ",
  "3261": "Version1 . routeFieldCreateValue ( fluidItmId ) ) ) ; ",
  "3262": "} public Field getFieldById ( Long fieldIdParam ) { ",
  "3263": "Field field = new Field ( fieldIdParam ) ; ",
  "3264": "field , Version1 . getById ( ) ) ) ; ",
  "3265": "} public List < Field > getRouteFieldValuesBy ( FluidItem fluidItemParam ) { ",
  "3266": "if ( this . serviceTicket != null && fluidItemParam != null ) { ",
  "3267": "fluidItemParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3268": "return new RouteFieldListing ( this . postJson ( ",
  "3269": "fluidItemParam , Version1 . getValuesBy ( ) ) ) . getListing ( ) ; ",
  "3270": "return new Field ( this . postJson ( fieldParam , Version1 . routeFieldDelete ( ) ) ) ; ",
  "3271": "} public Field forceDeleteField ( Field fieldParam ) { ",
  "3272": "fieldParam , Version1 . routeFieldDelete ( true ) ) ) ; ",
  "3273": "public List < Field > convertTo ( List < SQLFormFieldUtil . FormFieldMapping > formFieldMappingsParam ) ",
  "3274": "if ( formFieldMappingsParam == null ) ",
  "3275": "for ( SQLFormFieldUtil . FormFieldMapping mappingToConvert : formFieldMappingsParam ) ",
  "3276": "returnVal . add ( this . convertTo ( mappingToConvert ) ) ; ",
  "3277": "public Field convertTo ( SQLFormFieldUtil . FormFieldMapping formFieldMappingParam ) ",
  "3278": "switch ( formFieldMappingParam . dataType . intValue ( ) ) ",
  "3279": "return new Field ( ",
  "3280": "formFieldMappingParam . formFieldId , ",
  "3281": "null , Field . Type . Text ) ; ",
  "3282": "null , Field . Type . TrueFalse ) ; ",
  "3283": "Field . Type . MultipleChoice ) ; ",
  "3284": "} public Configuration getConfigurationByKey ( String configurationKeyParam ) ",
  "3285": "Configuration configuration = new Configuration ( ) ; ",
  "3286": "configuration . setKey ( configurationKeyParam ) ; ",
  "3287": "configuration . setServiceTicket ( this . serviceTicket ) ; ",
  "3288": "return new Configuration ( this . postJson ( ",
  "3289": "configuration , WS . Path . Configuration . Version1 . getByKey ( ) ) ) ; ",
  "3290": "} public ConfigurationListing getAllConfigurations ( ) ",
  "3291": "return new ConfigurationListing ( this . postJson ( ",
  "3292": "configuration , WS . Path . Configuration . Version1 . getAllConfigurations ( ) ) ) ; ",
  "3293": "if ( this . getMachineName ( ) != null ) ",
  "3294": "returnVal . put ( JSONMapping . MACHINE_NAME , ",
  "3295": "this . getMachineName ( ) ) ; ",
  "3296": "if ( this . getLicenseCipherText ( ) != null ) ",
  "3297": "returnVal . put ( JSONMapping . LICENSE_CIPHER_TEXT , ",
  "3298": "this . getLicenseCipherText ( ) ) ; ",
  "3299": "if ( this . getLicenseType ( ) != null ) ",
  "3300": "returnVal . put ( JSONMapping . LICENSE_TYPE , ",
  "3301": "this . getLicenseType ( ) ) ; ",
  "3302": "if ( this . getUserCount ( ) != null ) ",
  "3303": "returnVal . put ( JSONMapping . USER_COUNT , ",
  "3304": "this . getUserCount ( ) ) ; ",
  "3305": "if ( this . getDateValidFrom ( ) != null ) ",
  "3306": "returnVal . put ( JSONMapping . DATE_VALID_FROM , ",
  "3307": "this . getDateAsLongFromJson ( this . getDateValidFrom ( ) ) ) ; ",
  "3308": "if ( this . getDateValidTo ( ) != null ) ",
  "3309": "returnVal . put ( JSONMapping . DATE_VALID_TO , ",
  "3310": "this . getDateAsLongFromJson ( this . getDateValidTo ( ) ) ) ; ",
  "3311": "} public Form createFormContainerSynchronized ( ",
  "3312": "Form formToCreateParam ) { ",
  "3313": "if ( formToCreateParam == null ) ",
  "3314": "if ( formToCreateParam . getEcho ( ) == null || formToCreateParam . getEcho ( ) . trim ( ) . isEmpty ( ) ) ",
  "3315": "formToCreateParam . setEcho ( UUID . randomUUID ( ) . toString ( ) ) ; ",
  "3316": "this . sendMessage ( formToCreateParam , uniqueReqId ) ; ",
  "3317": "List < Form > returnValue = this . getHandler ( uniqueReqId ) . getCF ( ) . get ( ",
  "3318": "for ( Client client : this . getIdentities ( ) ) ",
  "3319": "returnVal . append ( client . getProvider ( ) ) ; ",
  "3320": "} public Attachment createAttachment ( Attachment attachmentParam ) ",
  "3321": "if ( attachmentParam != null && this . serviceTicket != null ) ",
  "3322": "attachmentParam . setServiceTicket ( this . serviceTicket ) ; ",
  "3323": "return new Attachment ( this . putJson ( ",
  "3324": "attachmentParam , WS . Path . Attachment . Version1 . attachmentCreate ( ) ) ) ; ",
  "3325": "} public Attachment getAttachmentById ( ",
  "3326": "Long attachmentIdParam , ",
  "3327": "boolean includeAttachmentDataParam ) ",
  "3328": "Attachment attachment = new Attachment ( attachmentIdParam ) ; ",
  "3329": "attachment . setServiceTicket ( this . serviceTicket ) ; ",
  "3330": "return new Attachment ( this . postJson ( ",
  "3331": "attachment , WS . Path . Attachment . Version1 . getById ( ",
  "3332": "includeAttachmentDataParam ) ) ) ; ",
  "3333": "} public List < Attachment > getAttachmentsByForm ( ",
  "3334": "AttachmentListing returnedListing = ",
  "3335": "new AttachmentListing ( postJson ( ",
  "3336": "formParam , WS . Path . Attachment . Version1 . getAllByFormContainer ( ",
  "3337": "includeAttachmentDataParam , false ) ) ) ; ",
  "3338": "return ( returnedListing == null ) ? null : ",
  "3339": "returnedListing . getListing ( ) ; ",
  "3340": "} public Attachment deleteAttachment ( Attachment attachmentParam ) ",
  "3341": "attachmentParam , WS . Path . Attachment . Version1 . attachmentDelete ( ) ) ) ; ",
  "3342": "} public Attachment forceDeleteAttachment ( Attachment attachmentParam ) ",
  "3343": "attachmentParam , ",
  "3344": "WS . Path . Attachment . Version1 . attachmentDelete ( true ) ) ) ; ",
  "3345": "} public static boolean hasDifferentValue ( XsdStringRestrictions o1 , XsdStringRestrictions o2 ) { ",
  "3346": "if ( o1 == null && o2 == null ) { ",
  "3347": "String o1Value = null ; ",
  "3348": "String o2Value ; ",
  "3349": "if ( o1 != null ) { ",
  "3350": "o1Value = o1 . getValue ( ) ; ",
  "3351": "if ( o2 != null ) { ",
  "3352": "o2Value = o2 . getValue ( ) ; ",
  "3353": "return o2Value . equals ( o1Value ) ; ",
  "3354": "} public void replaceUnsolvedAttributes ( NamedConcreteElement element ) { ",
  "3355": "if ( element . getElement ( ) instanceof XsdAttributeGroup ) { ",
  "3356": "attributeGroups . stream ( ) ",
  "3357": ". filter ( attributeGroup -> attributeGroup instanceof UnsolvedReference && ( ( UnsolvedReference ) attributeGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) ",
  "3358": ". findFirst ( ) . ifPresent ( referenceBase -> { ",
  "3359": "attributeGroups . remove ( referenceBase ) ; ",
  "3360": "attributeGroups . add ( element ) ; ",
  "3361": "attributes . addAll ( element . getElement ( ) . getElements ( ) ) ; ",
  "3362": "element . getElement ( ) . setParent ( getOwner ( ) ) ; ",
  "3363": "if ( element . getElement ( ) instanceof XsdAttribute ) { ",
  "3364": "attributes . stream ( ) ",
  "3365": ". filter ( attribute -> attribute instanceof UnsolvedReference && ( ( UnsolvedReference ) attribute ) . getRef ( ) . equals ( element . getName ( ) ) ) ",
  "3366": "attributes . remove ( referenceBase ) ; ",
  "3367": "attributes . add ( element ) ; ",
  "3368": "public void replaceUnsolvedElements ( NamedConcreteElement elementWrapper ) { ",
  "3369": "if ( elementWrapper . getElement ( ) instanceof XsdElement ) { ",
  "3370": "super . replaceUnsolvedElements ( elementWrapper ) ; ",
  "3371": "if ( elementWrapper . getElement ( ) instanceof XsdGroup ) { ",
  "3372": "elements . add ( elementWrapper ) ; ",
  "3373": "this . elements . removeIf ( element -> ",
  "3374": "element instanceof UnsolvedReference && ( ( UnsolvedReference ) element ) . getRef ( ) . equals ( elementWrapper . getName ( ) ) ",
  "3375": "} private void parseJarFile ( InputStream inputStream ) { ",
  "3376": "Node schemaNode = getSchemaNode ( inputStream ) ; ",
  "3377": "if ( isXsdSchema ( schemaNode ) ) { ",
  "3378": "XsdSchema . parse ( this , schemaNode ) ; ",
  "3379": "} catch ( SAXException | IOException | ParserConfigurationException e ) { ",
  "3380": "} private void setClassLoader ( String jarPath ) { ",
  "3381": "if ( ! jarPath . endsWith ( \".jar\" ) ) { ",
  "3382": "ClassLoader originalCl = Thread . currentThread ( ) . getContextClassLoader ( ) ; ",
  "3383": "URL url = originalCl . getResource ( jarPath ) ; ",
  "3384": "url = new URL ( \"file:/\" + jarPath ) ; ",
  "3385": "ClassLoader urlCl = URLClassLoader . newInstance ( new URL [ ] { url } , originalCl ) ; ",
  "3386": "Thread . currentThread ( ) . setContextClassLoader ( urlCl ) ; ",
  "3387": "classLoader = urlCl ; ",
  "3388": "} static ReferenceBase xsdAnnotationChildrenParse ( Node node , XsdAnnotationChildren annotationChildren ) { ",
  "3389": "annotationChildren . content = xsdRawContentParse ( node ) ; ",
  "3390": "return ReferenceBase . createFromXsd ( annotationChildren ) ; ",
  "3391": "} boolean isXsdSchema ( Node node ) { ",
  "3392": "String schemaNodeName = node . getNodeName ( ) ; ",
  "3393": "return schemaNodeName . equals ( XsdSchema . XSD_TAG ) || schemaNodeName . equals ( XsdSchema . XS_TAG ) ; ",
  "3394": "} void resolveRefs ( ) { ",
  "3395": "Map < String , List < NamedConcreteElement > > concreteElementsMap = ",
  "3396": "parseElements . stream ( ) ",
  "3397": ". filter ( concreteElement -> concreteElement instanceof NamedConcreteElement ) ",
  "3398": ". map ( concreteElement -> ( NamedConcreteElement ) concreteElement ) ",
  "3399": ". collect ( groupingBy ( NamedConcreteElement :: getName ) ) ; ",
  "3400": "unsolvedElements . forEach ( unsolvedElement -> replaceUnsolvedReference ( concreteElementsMap , unsolvedElement ) ) ; ",
  "3401": "} private void replaceUnsolvedReference ( Map < String , List < NamedConcreteElement > > concreteElementsMap , UnsolvedReference unsolvedReference ) { ",
  "3402": "List < NamedConcreteElement > concreteElements = concreteElementsMap . get ( unsolvedReference . getRef ( ) ) ; ",
  "3403": "if ( concreteElements != null ) { ",
  "3404": "Map < String , String > oldElementAttributes = unsolvedReference . getElement ( ) . getAttributesMap ( ) ; ",
  "3405": "for ( NamedConcreteElement concreteElement : concreteElements ) { ",
  "3406": "NamedConcreteElement substitutionElementWrapper ; ",
  "3407": "if ( ! unsolvedReference . isTypeRef ( ) ) { ",
  "3408": "XsdNamedElements substitutionElement = concreteElement . getElement ( ) . clone ( oldElementAttributes ) ; ",
  "3409": "substitutionElementWrapper = ( NamedConcreteElement ) ReferenceBase . createFromXsd ( substitutionElement ) ; ",
  "3410": "substitutionElementWrapper = concreteElement ; ",
  "3411": "unsolvedReference . getParent ( ) . replaceUnsolvedElements ( substitutionElementWrapper ) ; ",
  "3412": "storeUnsolvedItem ( unsolvedReference ) ; ",
  "3413": "} private void storeUnsolvedItem ( UnsolvedReference unsolvedReference ) { ",
  "3414": "if ( parserUnsolvedElementsMap . isEmpty ( ) ) { ",
  "3415": "parserUnsolvedElementsMap . add ( new UnsolvedReferenceItem ( unsolvedReference ) ) ; ",
  "3416": "Optional < UnsolvedReferenceItem > innerEntry = ",
  "3417": "parserUnsolvedElementsMap . stream ( ) ",
  "3418": ". filter ( unsolvedReferenceObj -> ",
  "3419": "unsolvedReferenceObj . getUnsolvedReference ( ) ",
  "3420": ". getRef ( ) ",
  "3421": ". equals ( unsolvedReference . getRef ( ) ) ) ",
  "3422": "if ( innerEntry . isPresent ( ) ) { ",
  "3423": "innerEntry . ifPresent ( entry -> entry . getParents ( ) . add ( unsolvedReference . getParent ( ) ) ) ; ",
  "3424": "} public void addFileToParse ( String schemaLocation ) { ",
  "3425": "if ( ! schemaLocations . contains ( schemaLocation ) && schemaLocation . endsWith ( \".xsd\" ) ) { ",
  "3426": "schemaLocations . add ( schemaLocation ) ; ",
  "3427": "} private void rule2 ( ) { ",
  "3428": "if ( ! ( parent instanceof XsdSchema ) && name != null ) { ",
  "3429": "} private void rule3 ( ) { ",
  "3430": "if ( parent instanceof XsdSchema && name == null ) { ",
  "3431": "} public static boolean hasDifferentValue ( XsdDoubleRestrictions o1 , XsdDoubleRestrictions o2 ) { ",
  "3432": "double o1Value = Double . MAX_VALUE ; ",
  "3433": "double o2Value ; ",
  "3434": "return o2Value == o1Value ; ",
  "3435": "} public List < XsdRestriction > getAllRestrictions ( ) { ",
  "3436": "Map < String , XsdRestriction > restrictions = new HashMap < > ( ) ; ",
  "3437": "Map < String , String > xsdBuiltinTypes = XsdParserCore . getXsdTypesToJava ( ) ; ",
  "3438": "if ( restriction != null ) { ",
  "3439": "restrictions . put ( xsdBuiltinTypes . get ( restriction . getBase ( ) ) , restriction ) ; ",
  "3440": "if ( union != null ) { ",
  "3441": "union . getUnionElements ( ) . forEach ( unionMember -> { ",
  "3442": "XsdRestriction unionMemberRestriction = unionMember . getRestriction ( ) ; ",
  "3443": "if ( unionMemberRestriction != null ) { ",
  "3444": "XsdRestriction existingRestriction = restrictions . getOrDefault ( xsdBuiltinTypes . get ( unionMemberRestriction . getBase ( ) ) , null ) ; ",
  "3445": "if ( existingRestriction != null ) { ",
  "3446": "if ( existsRestrictionOverlap ( existingRestriction , unionMemberRestriction ) ) { ",
  "3447": "updateExistingRestriction ( existingRestriction , unionMemberRestriction ) ; ",
  "3448": "restrictions . put ( xsdBuiltinTypes . get ( unionMemberRestriction . getBase ( ) ) , unionMemberRestriction ) ; ",
  "3449": "return new ArrayList < > ( restrictions . values ( ) ) ; ",
  "3450": "} private void updateExistingRestriction ( XsdRestriction existing , XsdRestriction newRestriction ) { ",
  "3451": "XsdPattern pattern = newRestriction . getPattern ( ) ; ",
  "3452": "XsdMaxExclusive maxExclusive = newRestriction . getMaxExclusive ( ) ; ",
  "3453": "XsdMaxInclusive maxInclusive = newRestriction . getMaxInclusive ( ) ; ",
  "3454": "XsdMaxLength maxLength = newRestriction . getMaxLength ( ) ; ",
  "3455": "XsdMinExclusive minExclusive = newRestriction . getMinExclusive ( ) ; ",
  "3456": "XsdMinInclusive minInclusive = newRestriction . getMinInclusive ( ) ; ",
  "3457": "XsdMinLength minLength = newRestriction . getMinLength ( ) ; ",
  "3458": "XsdLength length = newRestriction . getLength ( ) ; ",
  "3459": "XsdFractionDigits fractionDigits = newRestriction . getFractionDigits ( ) ; ",
  "3460": "XsdTotalDigits totalDigits = newRestriction . getTotalDigits ( ) ; ",
  "3461": "XsdWhiteSpace whiteSpace = newRestriction . getWhiteSpace ( ) ; ",
  "3462": "if ( pattern != null ) { ",
  "3463": "existing . setPattern ( pattern ) ; ",
  "3464": "if ( maxExclusive != null ) { ",
  "3465": "existing . setMaxExclusive ( maxExclusive ) ; ",
  "3466": "if ( maxInclusive != null ) { ",
  "3467": "existing . setMaxInclusive ( maxInclusive ) ; ",
  "3468": "if ( maxLength != null ) { ",
  "3469": "existing . setMaxLength ( maxLength ) ; ",
  "3470": "if ( minExclusive != null ) { ",
  "3471": "existing . setMinExclusive ( minExclusive ) ; ",
  "3472": "if ( minInclusive != null ) { ",
  "3473": "existing . setMinInclusive ( minInclusive ) ; ",
  "3474": "if ( minLength != null ) { ",
  "3475": "existing . setMinLength ( minLength ) ; ",
  "3476": "if ( length != null ) { ",
  "3477": "existing . setLength ( length ) ; ",
  "3478": "if ( fractionDigits != null ) { ",
  "3479": "existing . setFractionDigits ( fractionDigits ) ; ",
  "3480": "if ( totalDigits != null ) { ",
  "3481": "existing . setTotalDigits ( totalDigits ) ; ",
  "3482": "if ( whiteSpace != null ) { ",
  "3483": "existing . setWhiteSpace ( whiteSpace ) ; ",
  "3484": "updateExistingRestrictionEnumerations ( existing , newRestriction ) ; ",
  "3485": "} private void updateExistingRestrictionEnumerations ( XsdRestriction existing , XsdRestriction newRestriction ) { ",
  "3486": "List < XsdEnumeration > existingEnumeration = existing . getEnumeration ( ) ; ",
  "3487": "List < XsdEnumeration > newRestrictionEnumeration = newRestriction . getEnumeration ( ) ; ",
  "3488": "if ( existingEnumeration == null ) { ",
  "3489": "existing . setEnumeration ( newRestrictionEnumeration ) ; ",
  "3490": "if ( newRestrictionEnumeration != null ) { ",
  "3491": "for ( XsdEnumeration enumerationElem : newRestrictionEnumeration ) { ",
  "3492": "if ( existingEnumeration . stream ( ) . noneMatch ( existingEnumerationElem -> existingEnumerationElem . getValue ( ) . equals ( enumerationElem . getValue ( ) ) ) ) { ",
  "3493": "existingEnumeration . add ( enumerationElem ) ; ",
  "3494": "} private boolean existsRestrictionOverlap ( XsdRestriction existing , XsdRestriction newRestriction ) { ",
  "3495": "return hasDifferentValue ( existing . getPattern ( ) , newRestriction . getPattern ( ) ) || ",
  "3496": "hasDifferentValue ( existing . getWhiteSpace ( ) , newRestriction . getWhiteSpace ( ) ) || ",
  "3497": "hasDifferentValue ( existing . getTotalDigits ( ) , newRestriction . getTotalDigits ( ) ) || ",
  "3498": "hasDifferentValue ( existing . getFractionDigits ( ) , newRestriction . getFractionDigits ( ) ) || ",
  "3499": "hasDifferentValue ( existing . getMaxExclusive ( ) , newRestriction . getMaxExclusive ( ) ) || ",
  "3500": "hasDifferentValue ( existing . getMaxInclusive ( ) , newRestriction . getMaxInclusive ( ) ) || ",
  "3501": "hasDifferentValue ( existing . getMaxLength ( ) , newRestriction . getMaxLength ( ) ) || ",
  "3502": "hasDifferentValue ( existing . getMinExclusive ( ) , newRestriction . getMinExclusive ( ) ) || ",
  "3503": "hasDifferentValue ( existing . getMinInclusive ( ) , newRestriction . getMinInclusive ( ) ) || ",
  "3504": "hasDifferentValue ( existing . getMinLength ( ) , newRestriction . getMinLength ( ) ) || ",
  "3505": "hasDifferentValue ( existing . getLength ( ) , newRestriction . getLength ( ) ) ; ",
  "3506": "if ( attributesMap . containsKey ( REF_TAG ) && ( simpleType != null || form != null || type != null ) ) { ",
  "3507": "XsdAbstractElement element = elementWrapper . getElement ( ) ; ",
  "3508": "if ( element instanceof XsdSimpleType && simpleType != null && type . equals ( elementWrapper . getName ( ) ) ) { ",
  "3509": "this . simpleType = elementWrapper ; ",
  "3510": "} private void parseFile ( String filePath ) { ",
  "3511": "if ( ! new File ( filePath ) . exists ( ) ) { ",
  "3512": "throw new FileNotFoundException ( ) ; ",
  "3513": "Node schemaNode = getSchemaNode ( filePath ) ; ",
  "3514": "} private Node getSchemaNode ( String filePath ) throws IOException , SAXException , ParserConfigurationException { ",
  "3515": "Document doc = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) . parse ( filePath ) ; ",
  "3516": "return doc . getFirstChild ( ) ; ",
  "3517": "} private void rule7 ( ) { ",
  "3518": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( FORM_TAG ) ) { ",
  "3519": "if ( parent instanceof XsdSchema && attributesMap . containsKey ( REF_TAG ) ) { ",
  "3520": "public void replaceUnsolvedElements ( NamedConcreteElement element ) { ",
  "3521": "super . replaceUnsolvedElements ( element ) ; ",
  "3522": "XsdNamedElements elem = element . getElement ( ) ; ",
  "3523": "boolean isComplexOrSimpleType = elem instanceof XsdComplexType || elem instanceof XsdSimpleType ; ",
  "3524": "if ( this . type instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . type ) . getRef ( ) . equals ( element . getName ( ) ) ) { ",
  "3525": "this . type = element ; ",
  "3526": "elem . setParent ( this ) ; ",
  "3527": "if ( this . substitutionGroup instanceof UnsolvedReference && elem instanceof XsdElement && ( ( UnsolvedReference ) this . substitutionGroup ) . getRef ( ) . equals ( element . getName ( ) ) ) { ",
  "3528": "XsdElement xsdElement = ( XsdElement ) elem ; ",
  "3529": "this . type = xsdElement . type ; ",
  "3530": "this . simpleType = xsdElement . simpleType ; ",
  "3531": "this . complexType = xsdElement . complexType ; ",
  "3532": "this . substitutionGroup = element ; ",
  "3533": "} static ReferenceBase xsdParseSkeleton ( Node node , XsdAbstractElement element ) { ",
  "3534": "XsdParserCore parser = element . getParser ( ) ; ",
  "3535": "if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { ",
  "3536": "String nodeName = child . getNodeName ( ) ; ",
  "3537": "BiFunction < XsdParserCore , Node , ReferenceBase > parserFunction = XsdParserCore . getParseMappers ( ) . get ( nodeName ) ; ",
  "3538": "if ( parserFunction != null ) { ",
  "3539": "XsdAbstractElement childElement = parserFunction . apply ( parser , child ) . getElement ( ) ; ",
  "3540": "childElement . accept ( element . getVisitor ( ) ) ; ",
  "3541": "childElement . validateSchemaRules ( ) ; ",
  "3542": "ReferenceBase wrappedElement = ReferenceBase . createFromXsd ( element ) ; ",
  "3543": "parser . addParsedElement ( wrappedElement ) ; ",
  "3544": "return wrappedElement ; ",
  "3545": "} protected static Map < String , String > convertNodeMap ( NamedNodeMap nodeMap ) { ",
  "3546": "HashMap < String , String > attributesMapped = new HashMap < > ( ) ; ",
  "3547": "for ( int i = 0 ; i < nodeMap . getLength ( ) ; i ++ ) { ",
  "3548": "Node node = nodeMap . item ( i ) ; ",
  "3549": "attributesMapped . put ( node . getNodeName ( ) , node . getNodeValue ( ) ) ; ",
  "3550": "return attributesMapped ; ",
  "3551": "} public void replaceUnsolvedElements ( NamedConcreteElement element ) { ",
  "3552": "List < ReferenceBase > elements = this . getElements ( ) ; ",
  "3553": "if ( elements != null ) { ",
  "3554": "elements . stream ( ) ",
  "3555": ". filter ( referenceBase -> referenceBase instanceof UnsolvedReference ) ",
  "3556": ". map ( referenceBase -> ( UnsolvedReference ) referenceBase ) ",
  "3557": ". filter ( unsolvedReference -> unsolvedReference . getRef ( ) . equals ( element . getName ( ) ) ) ",
  "3558": ". ifPresent ( oldElement -> elements . set ( elements . indexOf ( oldElement ) , element ) ) ; ",
  "3559": "} static String xsdRawContentParse ( Node node ) { ",
  "3560": "StringBuilder stringBuilder = new StringBuilder ( ) ; ",
  "3561": "if ( child . getNodeType ( ) == Node . TEXT_NODE ) { ",
  "3562": "stringBuilder . append ( child . getTextContent ( ) ) ; ",
  "3563": "return stringBuilder . toString ( ) ; ",
  "3564": "} public static boolean hasDifferentValue ( XsdIntegerRestrictions o1 , XsdIntegerRestrictions o2 ) { ",
  "3565": "int o1Value = Integer . MAX_VALUE ; ",
  "3566": "int o2Value ; ",
  "3567": "} public static < T extends XsdEnum > T belongsToEnum ( final XsdEnum < T > instance , final String value ) { ",
  "3568": "Optional < T > enumValue = Arrays . stream ( instance . getValues ( ) ) . filter ( enumField -> enumField . getValue ( ) . equals ( value ) ) . findFirst ( ) ; ",
  "3569": "if ( enumValue . isPresent ( ) ) { ",
  "3570": "return enumValue . get ( ) ; ",
  "3571": "StringBuilder possibleValues = new StringBuilder ( ) ; ",
  "3572": "String values = possibleValues . toString ( ) ; ",
  "3573": "values = values . substring ( 0 , values . length ( ) - 2 ) ; ",
  "3574": "values ) ; ",
  "3575": "} static String maxOccursValidation ( String elementName , String value ) { ",
  "3576": "if ( value . equals ( \"unbounded\" ) ) { ",
  "3577": "validateNonNegativeInteger ( elementName , MAX_OCCURS_TAG , value ) ; ",
  "3578": "} static Integer validateNonNegativeInteger ( String elementName , String attributeName , String value ) { ",
  "3579": "int intValue = Integer . parseInt ( value ) ; ",
  "3580": "if ( intValue < 0 ) { ",
  "3581": "return intValue ; ",
  "3582": "} public static Integer validateRequiredNonNegativeInteger ( String elementName , String attributeName , String value ) { ",
  "3583": "if ( value == null ) throw new ParsingException ( attributeMissingMessage ( elementName , attributeName ) ) ; ",
  "3584": "return validateNonNegativeInteger ( elementName , attributeName , value ) ; ",
  "3585": "} public static Integer validateRequiredPositiveInteger ( String elementName , String attributeName , String value ) { ",
  "3586": "return validatePositiveInteger ( elementName , attributeName , value ) ; ",
  "3587": "} private static Double validateDouble ( String elementName , String attributeName , String value ) { ",
  "3588": "return Double . parseDouble ( value ) ; ",
  "3589": "} public static Double validateRequiredDouble ( String elementName , String attributeName , String value ) { ",
  "3590": "return validateDouble ( elementName , attributeName , value ) ; ",
  "3591": "} static String getFormDefaultValue ( XsdAbstractElement parent ) { ",
  "3592": "if ( parent == null ) return null ; ",
  "3593": "if ( parent instanceof XsdSchema ) { ",
  "3594": "return ( ( XsdSchema ) parent ) . getElementFormDefault ( ) ; ",
  "3595": "return getFormDefaultValue ( parent . getParent ( ) ) ; ",
  "3596": "} static String getFinalDefaultValue ( XsdAbstractElement parent ) { ",
  "3597": "return ( ( XsdSchema ) parent ) . getFinalDefault ( ) ; ",
  "3598": "return getFinalDefaultValue ( parent . getParent ( ) ) ; ",
  "3599": "} static String getBlockDefaultValue ( XsdAbstractElement parent ) { ",
  "3600": "return ( ( XsdSchema ) parent ) . getBlockDefault ( ) ; ",
  "3601": "return getBlockDefaultValue ( parent . getParent ( ) ) ; ",
  "3602": "} public static ReferenceBase createFromXsd ( XsdAbstractElement element ) { ",
  "3603": "String ref = getRef ( element ) ; ",
  "3604": "String name = getName ( element ) ; ",
  "3605": "if ( ! ( element instanceof XsdNamedElements ) ) { ",
  "3606": "return new ConcreteElement ( element ) ; ",
  "3607": "if ( ref == null ) { ",
  "3608": "return new NamedConcreteElement ( ( XsdNamedElements ) element , name ) ; ",
  "3609": "return new UnsolvedReference ( ( XsdNamedElements ) element ) ; ",
  "3610": "String elemName = elem . getRawName ( ) ; ",
  "3611": "if ( this . base instanceof UnsolvedReference && isComplexOrSimpleType && ( ( UnsolvedReference ) this . base ) . getRef ( ) . equals ( elemName ) ) { ",
  "3612": "this . base = element ; ",
  "3613": "if ( this . childElement instanceof UnsolvedReference && ",
  "3614": "elem instanceof XsdGroup && ( ( UnsolvedReference ) this . childElement ) . getRef ( ) . equals ( elemName ) ) { ",
  "3615": "this . childElement = element ; ",
  "3616": "visitor . replaceUnsolvedAttributes ( element ) ; ",
  "3617": "} public void addHeaderView ( View v , Object data , boolean isSelectable ) { ",
  "3618": "final FixedViewInfo info = new FixedViewInfo ( ) ; ",
  "3619": "FrameLayout fl = new FullWidthFixedViewLayout ( getContext ( ) ) ; ",
  "3620": "fl . addView ( v ) ; ",
  "3621": "info . view = v ; ",
  "3622": "info . viewContainer = fl ; ",
  "3623": "info . data = data ; ",
  "3624": "info . isSelectable = isSelectable ; ",
  "3625": "mHeaderViewInfos . add ( info ) ; ",
  "3626": "if ( mAdapter != null ) { ",
  "3627": "if ( ! ( mAdapter instanceof FooterViewGridAdapter ) ) { ",
  "3628": "mAdapter = new FooterViewGridAdapter ( mHeaderViewInfos , mFooterViewInfos , mAdapter ) ; ",
  "3629": "notifiyChanged ( ) ; ",
  "3630": "} public boolean removeFooterView ( View v ) { ",
  "3631": "if ( mFooterViewInfos . size ( ) > 0 ) { ",
  "3632": "boolean result = false ; ",
  "3633": "if ( mAdapter != null && ( ( FooterViewGridAdapter ) mAdapter ) . removeFooter ( v ) ) { ",
  "3634": "removeFixedViewInfo ( v , mFooterViewInfos ) ; ",
  "3635": "public boolean supportsParameter ( ",
  "3636": "ParameterContext parameterContext , ExtensionContext extensionContext ) ",
  "3637": "throws ParameterResolutionException { ",
  "3638": "return parameterContext . getParameter ( ) . getAnnotation ( Random . class ) != null ; ",
  "3639": "public Object resolveParameter ( ",
  "3640": "parameterContext . getParameter ( ) . getType ( ) , ",
  "3641": "parameterContext . getParameter ( ) . getAnnotation ( Random . class ) ) ; ",
  "3642": "} private Object resolve ( Class < ? > targetType , Random annotation ) { ",
  "3643": "if ( targetType . isAssignableFrom ( List . class ) || targetType . isAssignableFrom ( Collection . class ) ) { ",
  "3644": "return random ",
  "3645": ". objects ( annotation . type ( ) , annotation . size ( ) , annotation . excludes ( ) ) ",
  "3646": "} else if ( targetType . isAssignableFrom ( Set . class ) ) { ",
  "3647": "} else if ( targetType . isAssignableFrom ( Stream . class ) ) { ",
  "3648": "return random . objects ( annotation . type ( ) , annotation . size ( ) , annotation . excludes ( ) ) ; ",
  "3649": "return random . nextObject ( targetType , annotation . excludes ( ) ) ; ",
  "3650": "} public File createFile ( String fileName ) throws IOException { ",
  "3651": "Path path = Paths . get ( rootFolder . getPath ( ) , fileName ) ; ",
  "3652": "return Files . createFile ( path ) . toFile ( ) ; ",
  "3653": "} public File createDirectory ( String directoryName ) { ",
  "3654": "Path path = Paths . get ( rootFolder . getPath ( ) , directoryName ) ; ",
  "3655": "return Files . createDirectory ( path ) . toFile ( ) ; ",
  "3656": "throw new TemporaryFolderException ( ",
  "3657": "} void destroy ( ) throws IOException { ",
  "3658": "if ( rootFolder . exists ( ) ) { ",
  "3659": "Files . walkFileTree ( ",
  "3660": "rootFolder . toPath ( ) , ",
  "3661": "new SimpleFileVisitor < Path > ( ) { ",
  "3662": "public FileVisitResult visitFile ( Path file , BasicFileAttributes attributes ) ",
  "3663": "return delete ( file ) ; ",
  "3664": "public FileVisitResult postVisitDirectory ( Path directory , IOException exception ) ",
  "3665": "return delete ( directory ) ; ",
  "3666": "@ SuppressWarnings ( \"SameReturnValue\" ) ",
  "3667": "private FileVisitResult delete ( Path file ) throws IOException { ",
  "3668": "Files . delete ( file ) ; ",
  "3669": "return CONTINUE ; ",
  "3670": "Files . delete ( rootFolder . toPath ( ) ) ; ",
  "3671": "return appliesTo ( parameterContext . getParameter ( ) . getType ( ) ) ; ",
  "3672": "return extensionContext ",
  "3673": ". getStore ( NAMESPACE ) ",
  "3674": ". getOrComputeIfAbsent ( ",
  "3675": "parameterContext , key -> new TemporaryFolder ( ) , TemporaryFolder . class ) ; ",
  "3676": "} private Predicate < String > getPredicate ( ExpectedException annotation ) { ",
  "3677": "if ( has ( annotation . messageStartsWith ( ) ) ) { ",
  "3678": "return s -> s . startsWith ( annotation . messageStartsWith ( ) ) ; ",
  "3679": "} else if ( has ( annotation . messageContains ( ) ) ) { ",
  "3680": "return s -> s . contains ( annotation . messageContains ( ) ) ; ",
  "3681": "} else if ( has ( annotation . messageIs ( ) ) ) { ",
  "3682": "return s -> s . equals ( annotation . messageIs ( ) ) ; ",
  "3683": "return s -> true ; ",
  "3684": "} public static ExtensionContext . Store getStore ( ExtensionContext extensionContext , Class clazz ) { ",
  "3685": "return extensionContext . getStore ( namespace ( extensionContext , clazz ) ) ; ",
  "3686": "} private static ExtensionContext . Namespace namespace ( ",
  "3687": "ExtensionContext extensionContext , Class clazz ) { ",
  "3688": "return ExtensionContext . Namespace . create ( clazz , extensionContext ) ; ",
  "3689": "public void beforeAll ( ExtensionContext extensionContext ) throws Exception { ",
  "3690": "List < SystemProperty > systemProperties = ",
  "3691": "getSystemProperties ( extensionContext . getRequiredTestClass ( ) ) ; ",
  "3692": "if ( ! systemProperties . isEmpty ( ) ) { ",
  "3693": "RestoreContext . Builder builder = RestoreContext . createBuilder ( ) ; ",
  "3694": "for ( SystemProperty systemProperty : systemProperties ) { ",
  "3695": "builder . addPropertyName ( systemProperty . name ( ) ) ; ",
  "3696": "if ( System . getProperty ( systemProperty . name ( ) ) != null ) { ",
  "3697": "builder . addRestoreProperty ( ",
  "3698": "systemProperty . name ( ) , System . getProperty ( systemProperty . name ( ) ) ) ; ",
  "3699": "set ( systemProperty ) ; ",
  "3700": "writeRestoreContext ( extensionContext , builder . build ( ) ) ; ",
  "3701": "public void afterAll ( ExtensionContext extensionContext ) throws Exception { ",
  "3702": "RestoreContext restoreContext = readRestoreContext ( extensionContext ) ; ",
  "3703": "if ( restoreContext != null ) { ",
  "3704": "restoreContext . restore ( ) ; ",
  "3705": "} private List < SystemProperty > getSystemProperties ( AnnotatedElement annotatedElement ) { ",
  "3706": "List < SystemProperty > systemProperties = new ArrayList < > ( ) ; ",
  "3707": "if ( isAnnotated ( annotatedElement , SystemProperties . class ) ) { ",
  "3708": "systemProperties . addAll ( ",
  "3709": "Arrays . asList ( annotatedElement . getAnnotation ( SystemProperties . class ) . value ( ) ) ) ; ",
  "3710": "if ( isAnnotated ( annotatedElement , SystemProperty . class ) ) { ",
  "3711": "systemProperties . add ( annotatedElement . getAnnotation ( SystemProperty . class ) ) ; ",
  "3712": "return systemProperties ; ",
  "3713": "} public void restore ( ) { ",
  "3714": "for ( String propertyName : propertyNames ) { ",
  "3715": "if ( restoreProperties . containsKey ( propertyName ) ) { ",
  "3716": "System . setProperty ( propertyName , restoreProperties . get ( propertyName ) ) ; ",
  "3717": "System . clearProperty ( propertyName ) ; ",
  "3718": "} public Logger getLogger ( String name ) { ",
  "3719": "String tag = name == null ? ANONYMOUS_TAG : name ; ",
  "3720": "Logger logger = loggerMap . get ( tag ) ; ",
  "3721": "if ( logger == null ) { ",
  "3722": "Logger newInstance = new TimberAndroidLoggerAdapter ( tag ) ; ",
  "3723": "Logger oldInstance = loggerMap . putIfAbsent ( tag , newInstance ) ; ",
  "3724": "logger = oldInstance == null ? newInstance : oldInstance ; ",
  "3725": "} public void trace ( String format , Object arg ) { ",
  "3726": "formatAndLog ( Log . VERBOSE , format , arg ) ; ",
  "3727": "} public void trace ( String format , Object arg1 , Object arg2 ) { ",
  "3728": "formatAndLog ( Log . VERBOSE , format , arg1 , arg2 ) ; ",
  "3729": "} public void trace ( String format , Object ... argArray ) { ",
  "3730": "formatAndLog ( Log . VERBOSE , format , argArray ) ; ",
  "3731": "} public void trace ( String msg , Throwable t ) { ",
  "3732": "log ( Log . VERBOSE , msg , t ) ; ",
  "3733": "} public void debug ( String format , Object arg ) { ",
  "3734": "formatAndLog ( Log . DEBUG , format , arg ) ; ",
  "3735": "} public void debug ( String format , Object arg1 , Object arg2 ) { ",
  "3736": "formatAndLog ( Log . DEBUG , format , arg1 , arg2 ) ; ",
  "3737": "} public void debug ( String format , Object ... argArray ) { ",
  "3738": "formatAndLog ( Log . DEBUG , format , argArray ) ; ",
  "3739": "} public void debug ( String msg , Throwable t ) { ",
  "3740": "log ( Log . DEBUG , msg , t ) ; ",
  "3741": "} public void info ( String format , Object arg ) { ",
  "3742": "formatAndLog ( Log . INFO , format , arg ) ; ",
  "3743": "} public void info ( String format , Object arg1 , Object arg2 ) { ",
  "3744": "formatAndLog ( Log . INFO , format , arg1 , arg2 ) ; ",
  "3745": "} public void info ( String format , Object ... argArray ) { ",
  "3746": "formatAndLog ( Log . INFO , format , argArray ) ; ",
  "3747": "} public void info ( String msg , Throwable t ) { ",
  "3748": "log ( Log . INFO , msg , t ) ; ",
  "3749": "} public void warn ( String format , Object arg ) { ",
  "3750": "formatAndLog ( Log . WARN , format , arg ) ; ",
  "3751": "} public void warn ( String format , Object arg1 , Object arg2 ) { ",
  "3752": "formatAndLog ( Log . WARN , format , arg1 , arg2 ) ; ",
  "3753": "} public void warn ( String format , Object ... argArray ) { ",
  "3754": "formatAndLog ( Log . WARN , format , argArray ) ; ",
  "3755": "} public void warn ( String msg , Throwable t ) { ",
  "3756": "log ( Log . WARN , msg , t ) ; ",
  "3757": "} public void error ( String format , Object arg ) { ",
  "3758": "formatAndLog ( Log . ERROR , format , arg ) ; ",
  "3759": "} public void error ( String format , Object arg1 , Object arg2 ) { ",
  "3760": "formatAndLog ( Log . ERROR , format , arg1 , arg2 ) ; ",
  "3761": "} public void error ( String format , Object ... argArray ) { ",
  "3762": "formatAndLog ( Log . ERROR , format , argArray ) ; ",
  "3763": "} public void error ( String msg , Throwable t ) { ",
  "3764": "log ( Log . ERROR , msg , t ) ; ",
  "3765": "public ReadableInstant getLastModified ( ",
  "3766": "ServletContext servletContext , ",
  "3767": "HttpServletRequest request , ",
  "3768": "Page page ",
  "3769": ") throws ServletException , IOException { ",
  "3770": "return AoArrays . maxNonNull ( ",
  "3771": "page . getDateCreated ( ) , ",
  "3772": "page . getDatePublished ( ) , ",
  "3773": "page . getDateModified ( ) ",
  "3774": "public boolean getAllowRobots ( ServletContext servletContext , HttpServletRequest request , HttpServletResponse response , Page page ) throws ServletException , IOException { ",
  "3775": "return PageUtils . findAllowRobots ( servletContext , request , response , page ) ; ",
  "3776": "FileInputStream fis = new FileInputStream ( new File ( \"dic/word-with-attr.dic\" ) ) ; ",
  "3777": "final Set < String > words = new TreeSet < String > ( ) ; ",
  "3778": "final int [ ] num = { 0 } ; ",
  "3779": "FileLoading fl = new FileLoading ( ) { ",
  "3780": "public void row ( String line , int n ) { ",
  "3781": "words . add ( line . trim ( ) ) ; ",
  "3782": "num [ 0 ] ++ ; ",
  "3783": "Dictionary . load ( fis , fl ) ; ",
  "3784": "fis = new FileInputStream ( new File ( \"dic/words-rmmseg.dic\" ) ) ; ",
  "3785": "WriterRow wr = new WriterRow ( new File ( \"dic/words-marge-sogou-no-attr-and-rmmseg.dic\" ) ) ; ",
  "3786": "for ( String word : words ) { ",
  "3787": "wr . writerRow ( word ) ; ",
  "3788": "wr . close ( ) ; ",
  "3789": "int n = 1 ; ",
  "3790": "usage ( ) ; ",
  "3791": "Properties analyzers = new Properties ( ) ; ",
  "3792": "analyzers . load ( new FileInputStream ( new File ( \"analyzer.properties\" ) ) ) ; ",
  "3793": "String mode = System . getProperty ( \"mode\" , \"complex\" ) ; ",
  "3794": "String a = System . getProperty ( \"analyzer\" , \"mmseg4j\" ) ; ",
  "3795": "Analyzer analyzer = null ; ",
  "3796": "String an = ( String ) analyzers . get ( a ) ; ",
  "3797": "if ( an != null ) { ",
  "3798": "analyzer = ( Analyzer ) Class . forName ( an ) . newInstance ( ) ; ",
  "3799": "mode = a ; ",
  "3800": "n = Integer . parseInt ( args [ 1 ] ) ; ",
  "3801": "File path = new File ( args [ 0 ] ) ; ",
  "3802": "System . out . println ( \"analyzer=\" + analyzer . getClass ( ) . getName ( ) ) ; ",
  "3803": "Effect ef = new Effect ( path , analyzer ) ; ",
  "3804": "ef . run ( mode , n ) ; ",
  "3805": "} protected File [ ] listWordsFiles ( ) { ",
  "3806": "return dicPath . listFiles ( new FilenameFilter ( ) { ",
  "3807": "return name . startsWith ( \"words\" ) && name . endsWith ( \".dic\" ) ; ",
  "3808": "} public static int load ( InputStream fin , FileLoading loading ) throws IOException { ",
  "3809": "BufferedReader br = new BufferedReader ( ",
  "3810": "new InputStreamReader ( new BufferedInputStream ( fin ) , \"UTF-8\" ) ) ; ",
  "3811": "while ( ( line = br . readLine ( ) ) != null ) { ",
  "3812": "if ( line == null || line . startsWith ( \"#\" ) ) { ",
  "3813": "loading . row ( line , n ) ; ",
  "3814": "} private static char [ ] tail ( String str ) { ",
  "3815": "char [ ] cs = new char [ str . length ( ) - 1 ] ; ",
  "3816": "str . getChars ( 1 , str . length ( ) , cs , 0 ) ; ",
  "3817": "} private synchronized void addLastTime ( File wordsFile ) { ",
  "3818": "if ( wordsFile != null ) { ",
  "3819": "wordsLastTime . put ( wordsFile , wordsFile . lastModified ( ) ) ; ",
  "3820": "} public synchronized boolean wordsFileIsChange ( ) { ",
  "3821": "for ( Entry < File , Long > flt : wordsLastTime . entrySet ( ) ) { ",
  "3822": "File words = flt . getKey ( ) ; ",
  "3823": "if ( ! words . canRead ( ) ) { ",
  "3824": "if ( words . lastModified ( ) > flt . getValue ( ) ) { ",
  "3825": "File [ ] words = listWordsFiles ( ) ; ",
  "3826": "if ( words != null ) { ",
  "3827": "for ( File wordsFile : words ) { ",
  "3828": "if ( ! wordsLastTime . containsKey ( wordsFile ) ) { ",
  "3829": "} public synchronized boolean reload ( ) { ",
  "3830": "Map < File , Long > oldWordsLastTime = new HashMap < File , Long > ( wordsLastTime ) ; ",
  "3831": "Map < Character , CharNode > oldDict = dict ; ",
  "3832": "Map < Character , Object > oldUnit = unit ; ",
  "3833": "wordsLastTime . clear ( ) ; ",
  "3834": "dict = loadDic ( dicPath ) ; ",
  "3835": "unit = loadUnit ( dicPath ) ; ",
  "3836": "lastLoadTime = System . currentTimeMillis ( ) ; ",
  "3837": "wordsLastTime . putAll ( oldWordsLastTime ) ; ",
  "3838": "dict = oldDict ; ",
  "3839": "unit = oldUnit ; ",
  "3840": "if ( log . isLoggable ( Level . WARNING ) ) { ",
  "3841": "} public boolean match ( String word ) { ",
  "3842": "if ( word == null || word . length ( ) < 2 ) { ",
  "3843": "CharNode cn = dict . get ( word . charAt ( 0 ) ) ; ",
  "3844": "return search ( cn , word . toCharArray ( ) , 0 , word . length ( ) - 1 ) >= 0 ; ",
  "3845": "} public int search ( CharNode node , char [ ] sen , int offset , int tailLen ) { ",
  "3846": "if ( node != null ) { ",
  "3847": "return node . indexOf ( sen , offset , tailLen ) ; ",
  "3848": "} public static File getDefalutPath ( ) { ",
  "3849": "if ( defalutPath == null ) { ",
  "3850": "String defPath = System . getProperty ( \"mmseg.dic.path\" ) ; ",
  "3851": "if ( defPath == null ) { ",
  "3852": "URL url = Dictionary . class . getClassLoader ( ) . getResource ( \"data\" ) ; ",
  "3853": "defPath = url . getFile ( ) ; ",
  "3854": "defPath = System . getProperty ( \"user.dir\" ) + \"/data\" ; ",
  "3855": "defalutPath = new File ( defPath ) ; ",
  "3856": "if ( ! defalutPath . exists ( ) ) { ",
  "3857": "return defalutPath ; ",
  "3858": "} private int readChars ( StringBuilder bufSentence , ReadChar readChar ) throws IOException { ",
  "3859": "int data = - 1 ; ",
  "3860": "while ( ( data = readNext ( ) ) != - 1 ) { ",
  "3861": "int d = readChar . transform ( data ) ; ",
  "3862": "if ( readChar . isRead ( d ) ) { ",
  "3863": "bufSentence . appendCodePoint ( d ) ; ",
  "3864": "num ++ ; ",
  "3865": "pushBack ( data ) ; ",
  "3866": "return num ; ",
  "3867": "} private static char [ ] toChars ( StringBuilder bufSentence ) { ",
  "3868": "char [ ] chs = new char [ bufSentence . length ( ) ] ; ",
  "3869": "bufSentence . getChars ( 0 , bufSentence . length ( ) , chs , 0 ) ; ",
  "3870": "return chs ; ",
  "3871": "} private static int toAscii ( int codePoint ) { ",
  "3872": "if ( ( codePoint >= 65296 && codePoint <= 65305 ) ",
  "3873": "|| ( codePoint >= 65313 && codePoint <= 65338 ) ",
  "3874": "|| ( codePoint >= 65345 && codePoint <= 65370 ) ",
  "3875": "codePoint -= 65248 ; ",
  "3876": "return codePoint ; ",
  "3877": "System . out . println ( \"Usage:\" ) ; ",
  "3878": "Seg seg = null ; ",
  "3879": "Dictionary dic = Dictionary . getInstance ( ) ; ",
  "3880": "if ( \"simple\" . equals ( mode ) ) { ",
  "3881": "seg = new SimpleSeg ( dic ) ; ",
  "3882": "seg = new ComplexSeg ( dic ) ; ",
  "3883": "File [ ] txts = path . listFiles ( new FilenameFilter ( ) { ",
  "3884": "return name . endsWith ( \".txt\" ) ; ",
  "3885": "long time = 0 ; ",
  "3886": "for ( File txt : txts ) { ",
  "3887": "MMSeg mmSeg = new MMSeg ( new InputStreamReader ( new FileInputStream ( txt ) ) , seg ) ; ",
  "3888": "Word word = null ; ",
  "3889": "OutputStreamWriter osw = new OutputStreamWriter ( new FileOutputStream ( new File ( txt . getAbsoluteFile ( ) + \".\" + mode + \".word\" ) ) ) ; ",
  "3890": "BufferedWriter bw = new BufferedWriter ( osw ) ; ",
  "3891": "while ( ( word = mmSeg . next ( ) ) != null ) { ",
  "3892": "bw . append ( new String ( word . getString ( ) ) ) . append ( \"\\r\\n\" ) ; ",
  "3893": "time += System . currentTimeMillis ( ) - start ; ",
  "3894": "} public int getLen ( ) { ",
  "3895": "if ( len < 0 ) { ",
  "3896": "len = 0 ; ",
  "3897": "for ( Word word : words ) { ",
  "3898": "if ( word != null ) { ",
  "3899": "len += word . getLength ( ) ; ",
  "3900": "} public int getCount ( ) { ",
  "3901": "} public double getVariance ( ) { ",
  "3902": "if ( variance < 0 ) { ",
  "3903": "sum += Math . pow ( word . getLength ( ) - getAvgLen ( ) , 2 ) ; ",
  "3904": "variance = sum / getCount ( ) ; ",
  "3905": "return variance ; ",
  "3906": "} public int getSumDegree ( ) { ",
  "3907": "if ( sumDegree < 0 ) { ",
  "3908": "if ( word != null && word . getDegree ( ) > - 1 ) { ",
  "3909": "sum += word . getDegree ( ) ; ",
  "3910": "sumDegree = sum ; ",
  "3911": "return sumDegree ; ",
  "3912": "} protected void printChunk ( List < Chunk > chunks ) { ",
  "3913": "for ( Chunk ck : chunks ) { ",
  "3914": "} protected int search ( char [ ] chs , int offset , int tailLen ) { ",
  "3915": "if ( tailLen == 0 ) { ",
  "3916": "CharNode cn = dic . head ( chs [ offset ] ) ; ",
  "3917": "return search ( cn , chs , offset , tailLen ) ; ",
  "3918": "} protected int search ( CharNode cn , char [ ] chs , int offset , int tailLen ) { ",
  "3919": "if ( tailLen == 0 || cn == null ) { ",
  "3920": "return dic . search ( cn , chs , offset , tailLen ) ; ",
  "3921": "} protected int maxMatch ( CharNode [ ] cns , int cnIdx , char [ ] chs , int offset ) { ",
  "3922": "CharNode cn = null ; ",
  "3923": "if ( offset < chs . length ) { ",
  "3924": "cn = dic . head ( chs [ offset ] ) ; ",
  "3925": "cns [ cnIdx ] = cn ; ",
  "3926": "return dic . maxMatch ( cn , chs , offset ) ; ",
  "3927": "} protected void maxMatch ( CharNode [ ] cns , int cnIdx , char [ ] chs , int offset , ArrayList < Integer > [ ] tailLens , int tailLensIdx ) { ",
  "3928": "dic . maxMatch ( cn , tailLens [ tailLensIdx ] , chs , offset ) ; ",
  "3929": "String words = \"sogou/SogouLabDic.dic\" ; ",
  "3930": "String charset = \"GBK\" ; ",
  "3931": "words = args [ 0 ] ; ",
  "3932": "File file = new File ( words ) ; ",
  "3933": "File dist = new File ( \"dic/word-with-attr.dic\" ) ; ",
  "3934": "DicTransform dt = new DicTransform ( ) ; ",
  "3935": "dt . transform ( file , charset , dist , new NoAttr ( ) ) ; ",
  "3936": "public boolean connectJdbcOnWithUrlAndDriverAndUsernameAndPassword ( String dataBaseId , String url , String driverClassName , String username , String password ) throws ReflectiveOperationException { ",
  "3937": "SimpleDriverDataSource dataSource = new SimpleDriverDataSource ( ) ; ",
  "3938": "dataSource . setUrl ( url ) ; ",
  "3939": "dataSource . setDriverClass ( ( Class < Driver > ) Class . forName ( driverClassName ) ) ; ",
  "3940": "this . templateMap . put ( dataBaseId , new JdbcTemplate ( dataSource ) ) ; ",
  "3941": "} public boolean runInTheSql ( String database , final String sql ) { ",
  "3942": "getDatabaseJdbcTemplate ( database ) . update ( sql ) ; ",
  "3943": "} public String queryInWithSql ( String database , String sql ) { ",
  "3944": "JdbcTemplate template = getDatabaseJdbcTemplate ( database ) ; ",
  "3945": "if ( sql != null && ! sql . trim ( ) . toUpperCase ( ) . startsWith ( JdbcFixture . SELECT_COMMAND_PREFIX ) ) { ",
  "3946": "return Objects . toString ( template . update ( sql ) ) ; ",
  "3947": "List < String > results = template . queryForList ( sql , String . class ) ; ",
  "3948": "if ( results == null || results . isEmpty ( ) ) { ",
  "3949": "return results . get ( 0 ) ; ",
  "3950": "public void postProcessInstance ( ManagedClassSPI managedClass , Object instance ) { ",
  "3951": "if ( ! managedClass . getInstanceScope ( ) . equals ( InstanceScope . APPLICATION ) ) { ",
  "3952": "if ( ! managedClass . getInstanceType ( ) . equals ( InstanceType . PROXY ) ) { ",
  "3953": "Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ; ",
  "3954": "StringBuilder interfaceNames = new StringBuilder ( interfaceClasses [ 0 ] . getName ( ) ) ; ",
  "3955": "for ( int i = 1 ; i < interfaceClasses . length ; ++ i ) { ",
  "3956": "interfaceNames . append ( interfaceClasses [ i ] . getName ( ) ) ; ",
  "3957": "} public boolean isEndReached ( ) { ",
  "3958": "if ( to == null || from == null ) { ",
  "3959": "if ( length == null ) { ",
  "3960": "return to == length - 1 ; ",
  "3961": "public Object [ ] read ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException , IllegalArgumentException { ",
  "3962": "if ( formalParameters . length != 1 ) { ",
  "3963": "if ( formalParameters [ 0 ] instanceof ParameterizedType ) { ",
  "3964": "Class < ? > type = ( Class < ? > ) formalParameters [ 0 ] ; ",
  "3965": "Object [ ] arguments = new Object [ 1 ] ; ",
  "3966": "if ( type . equals ( Form . class ) ) { ",
  "3967": "arguments [ 0 ] = new FormImpl ( httpRequest ) ; ",
  "3968": "else if ( type . equals ( FormIterator . class ) ) { ",
  "3969": "arguments [ 0 ] = new FormIteratorImpl ( httpRequest ) ; ",
  "3970": "else if ( type . equals ( UploadedFile . class ) ) { ",
  "3971": "Form form = new FormImpl ( httpRequest ) ; ",
  "3972": "arguments [ 0 ] = form . getUploadedFile ( ) ; ",
  "3973": "else if ( type . equals ( UploadStream . class ) ) { ",
  "3974": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) ) ) ; ",
  "3975": "else if ( type . equals ( InputStream . class ) ) { ",
  "3976": "threadLocal . set ( ( Closeable ) ( arguments [ 0 ] = getUploadStream ( httpRequest , formalParameters ) . openStream ( ) ) ) ; ",
  "3977": "arguments [ 0 ] = new FormObject ( httpRequest , type ) . getValue ( ) ; ",
  "3978": "return arguments ; ",
  "3979": "} private static UploadStream getUploadStream ( HttpServletRequest httpRequest , Type [ ] formalParameters ) throws IOException { ",
  "3980": "FormIterator form = new FormIteratorImpl ( httpRequest ) ; ",
  "3981": "if ( ! form . hasNext ( ) ) { ",
  "3982": "Part part = form . next ( ) ; ",
  "3983": "if ( ! ( part instanceof UploadStream ) ) { ",
  "3984": "return ( UploadStream ) part ; ",
  "3985": "public void init ( ServletConfig config ) throws UnavailableException { ",
  "3986": "super . init ( config ) ; ",
  "3987": "for ( ManagedMethodSPI managedMethod : container . getManagedMethods ( ) ) { ",
  "3988": "if ( ! managedMethod . isRemotelyAccessible ( ) ) { ",
  "3989": "if ( ! Types . isKindOf ( managedMethod . getReturnType ( ) , Resource . class ) ) { ",
  "3990": "restMethods . put ( key ( managedMethod ) , managedMethod ) ; ",
  "3991": "protected void handleRequest ( RequestContext context ) throws IOException { ",
  "3992": "HttpServletRequest httpRequest = context . getRequest ( ) ; ",
  "3993": "HttpServletResponse httpResponse = context . getResponse ( ) ; ",
  "3994": "ArgumentsReader argumentsReader = null ; ",
  "3995": "ManagedMethodSPI method = null ; ",
  "3996": "method = restMethods . get ( key ( httpRequest . getPathInfo ( ) ) ) ; ",
  "3997": "throw new NoSuchMethodException ( ) ; ",
  "3998": "Type [ ] formalParameters = method . getParameterTypes ( ) ; ",
  "3999": "argumentsReader = argumentsReaderFactory . getArgumentsReader ( httpRequest , formalParameters ) ; ",
  "4000": "Object [ ] arguments = argumentsReader . read ( httpRequest , formalParameters ) ; ",
  "4001": "Object instance = container . getInstance ( method . getDeclaringClass ( ) ) ; ",
  "4002": "value = method . invoke ( instance , arguments ) ; ",
  "4003": "} catch ( AuthorizationException e ) { ",
  "4004": "sendUnauthorized ( context ) ; ",
  "4005": "sendNotFound ( context , e ) ; ",
  "4006": "sendBadRequest ( context ) ; ",
  "4007": "} catch ( InvocationException e ) { ",
  "4008": "sendError ( context , e ) ; ",
  "4009": "if ( argumentsReader != null ) { ",
  "4010": "argumentsReader . clean ( ) ; ",
  "4011": "httpResponse . setCharacterEncoding ( \"UTF-8\" ) ; ",
  "4012": "if ( method . isVoid ( ) ) { ",
  "4013": "httpResponse . setStatus ( HttpServletResponse . SC_NO_CONTENT ) ; ",
  "4014": "ContentType contentType = valueWriterFactory . getContentTypeForValue ( value ) ; ",
  "4015": "httpResponse . setStatus ( HttpServletResponse . SC_OK ) ; ",
  "4016": "httpResponse . setContentType ( contentType . getValue ( ) ) ; ",
  "4017": "ValueWriter valueWriter = valueWriterFactory . getValueWriter ( contentType ) ; ",
  "4018": "valueWriter . write ( httpResponse , value ) ; ",
  "4019": "} private static String key ( String requestPath ) { ",
  "4020": "int queryParametersIndex = requestPath . lastIndexOf ( '?' ) ; ",
  "4021": "if ( queryParametersIndex == - 1 ) { ",
  "4022": "queryParametersIndex = requestPath . length ( ) ; ",
  "4023": "int extensionIndex = requestPath . lastIndexOf ( '.' , queryParametersIndex ) ; ",
  "4024": "if ( extensionIndex == - 1 ) { ",
  "4025": "extensionIndex = queryParametersIndex ; ",
  "4026": "return requestPath . substring ( 0 , extensionIndex ) ; ",
  "4027": "} public static ContentType forFile ( File file ) { ",
  "4028": "Params . notNull ( file , \"File\" ) ; ",
  "4029": "ContentType contentType = FILE_TYPES . get ( Files . getExtension ( file ) ) ; ",
  "4030": "if ( contentType == null ) { ",
  "4031": "contentType = TEXT_HTML ; ",
  "4032": "} public static ContentType valueOf ( String value ) { ",
  "4033": "return ContentType . APPLICATION_JSON ; ",
  "4034": "return new ContentType ( value ) ; ",
  "4035": "} public boolean hasParameter ( String name , String value ) { ",
  "4036": "return value . equals ( parameters . get ( name ) ) ; ",
  "4037": "} public String getParameter ( String name ) { ",
  "4038": "return parameters . get ( name ) ; ",
  "4039": "} private static Map < String , String > parseParameters ( String expression ) { ",
  "4040": "Map < String , String > parameters = new HashMap < > ( ) ; ",
  "4041": "int parametersSeparatorIndex = 0 ; ",
  "4042": "int valueSeparatorIndex = expression . indexOf ( '=' , parametersSeparatorIndex ) ; ",
  "4043": "if ( valueSeparatorIndex == - 1 ) { ",
  "4044": "String name = expression . substring ( parametersSeparatorIndex , valueSeparatorIndex ) . trim ( ) ; ",
  "4045": "++ valueSeparatorIndex ; ",
  "4046": "parametersSeparatorIndex = expression . indexOf ( ';' , valueSeparatorIndex ) ; ",
  "4047": "if ( parametersSeparatorIndex == - 1 ) { ",
  "4048": "parametersSeparatorIndex = expression . length ( ) ; ",
  "4049": "if ( valueSeparatorIndex == parametersSeparatorIndex ) { ",
  "4050": "if ( parameters . put ( name , expression . substring ( valueSeparatorIndex , parametersSeparatorIndex ) . trim ( ) ) != null ) { ",
  "4051": "++ parametersSeparatorIndex ; ",
  "4052": "if ( parameters . isEmpty ( ) ) { ",
  "4053": "return parameters ; ",
  "4054": "public void config ( Config config ) throws Exception { ",
  "4055": "log . trace ( \"config(Config.Element)\" ) ; ",
  "4056": "transactionManager . config ( config ) ; ",
  "4057": "Config config = managedClass . getConfig ( ) ; ",
  "4058": "if ( config == null ) { ",
  "4059": "List < Config > fields = config . findChildren ( \"instance-field\" ) ; ",
  "4060": "if ( ! fields . isEmpty ( ) && ! InstanceType . POJO . equals ( managedClass . getInstanceType ( ) ) ) { ",
  "4061": "for ( Config field : fields ) { ",
  "4062": "Classes . setFieldValue ( instance , field . getAttribute ( \"name\" ) , field . getAttribute ( \"value\" ) ) ; ",
  "4063": "} private void scanAnnotations ( ) { ",
  "4064": "boolean remoteType = false ; ",
  "4065": "Controller controllerAnnotation = getAnnotation ( implementationClass , Controller . class ) ; ",
  "4066": "if ( controllerAnnotation != null ) { ",
  "4067": "remoteType = true ; ",
  "4068": "requestPath = controllerAnnotation . value ( ) ; ",
  "4069": "Service serviceAnnotation = getAnnotation ( implementationClass , Service . class ) ; ",
  "4070": "if ( serviceAnnotation != null ) { ",
  "4071": "requestPath = serviceAnnotation . value ( ) ; ",
  "4072": "Remote remoteAnnotation = getAnnotation ( implementationClass , Remote . class ) ; ",
  "4073": "if ( remoteAnnotation != null ) { ",
  "4074": "RequestPath requestPathAnnotation = getAnnotation ( implementationClass , RequestPath . class ) ; ",
  "4075": "if ( requestPathAnnotation != null ) { ",
  "4076": "requestPath = requestPathAnnotation . value ( ) ; ",
  "4077": "if ( requestPath != null && requestPath . isEmpty ( ) ) { ",
  "4078": "requestPath = null ; ",
  "4079": "if ( remoteType ) { ",
  "4080": "remotelyAccessible = true ; ",
  "4081": "boolean transactionalType = hasAnnotation ( implementationClass , Transactional . class ) ; ",
  "4082": "boolean immutableType = hasAnnotation ( implementationClass , Immutable . class ) ; ",
  "4083": "if ( ! transactionalType && immutableType ) { ",
  "4084": "if ( transactionalType && ! instanceType . isPROXY ( ) ) { ",
  "4085": "Class < ? extends Interceptor > classInterceptor = getInterceptorClass ( implementationClass ) ; ",
  "4086": "boolean publicType = hasAnnotation ( implementationClass , Public . class ) ; ",
  "4087": "for ( Method method : implementationClass . getDeclaredMethods ( ) ) { ",
  "4088": "final int modifiers = method . getModifiers ( ) ; ",
  "4089": "if ( Modifier . isStatic ( modifiers ) || ! Modifier . isPublic ( modifiers ) ) { ",
  "4090": "Method interfaceMethod = getInterfaceMethod ( method ) ; ",
  "4091": "ManagedMethod managedMethod = null ; ",
  "4092": "boolean remoteMethod = hasAnnotation ( method , Remote . class ) ; ",
  "4093": "if ( ! remoteMethod ) { ",
  "4094": "remoteMethod = remoteType ; ",
  "4095": "if ( hasAnnotation ( method , Local . class ) ) { ",
  "4096": "remoteMethod = false ; ",
  "4097": "if ( remoteMethod ) { ",
  "4098": "Class < ? extends Interceptor > methodInterceptor = getInterceptorClass ( method ) ; ",
  "4099": "if ( methodInterceptor == null ) { ",
  "4100": "methodInterceptor = classInterceptor ; ",
  "4101": "if ( methodInterceptor != null ) { ",
  "4102": "if ( ! instanceType . isPROXY ( ) && ! remotelyAccessible ) { ",
  "4103": "managedMethod = new ManagedMethod ( this , methodInterceptor , interfaceMethod ) ; ",
  "4104": "boolean publicMethod = hasAnnotation ( method , Public . class ) ; ",
  "4105": "if ( publicMethod && ! remotelyAccessible ) { ",
  "4106": "if ( ! publicMethod ) { ",
  "4107": "publicMethod = publicType ; ",
  "4108": "if ( hasAnnotation ( method , Private . class ) ) { ",
  "4109": "if ( ! remotelyAccessible ) { ",
  "4110": "publicMethod = false ; ",
  "4111": "RequestPath methodPath = getAnnotation ( method , RequestPath . class ) ; ",
  "4112": "if ( ! remotelyAccessible && methodPath != null ) { ",
  "4113": "if ( managedMethod == null ) { ",
  "4114": "managedMethod = new ManagedMethod ( this , interfaceMethod ) ; ",
  "4115": "managedMethod . setRequestPath ( methodPath != null ? methodPath . value ( ) : null ) ; ",
  "4116": "managedMethod . setRemotelyAccessible ( remoteMethod ) ; ",
  "4117": "managedMethod . setAccess ( publicMethod ? Access . PUBLIC : Access . PRIVATE ) ; ",
  "4118": "if ( ! transactionalType ) { ",
  "4119": "transactionalType = hasAnnotation ( method , Transactional . class ) ; ",
  "4120": "if ( transactionalType ) { ",
  "4121": "transactional = true ; ",
  "4122": "if ( ! instanceType . isPROXY ( ) ) { ",
  "4123": "boolean immutable = hasAnnotation ( method , Immutable . class ) ; ",
  "4124": "if ( immutable && ! transactional ) { ",
  "4125": "if ( ! immutable ) { ",
  "4126": "immutable = immutableType ; ",
  "4127": "if ( hasAnnotation ( method , Mutable . class ) ) { ",
  "4128": "if ( ! transactional ) { ",
  "4129": "immutable = false ; ",
  "4130": "if ( instanceType . isPROXY ( ) && managedMethod == null ) { ",
  "4131": "if ( transactional ) { ",
  "4132": "managedMethod . setTransactional ( true ) ; ",
  "4133": "managedMethod . setImmutable ( immutable ) ; ",
  "4134": "boolean asynchronousMethod = hasAnnotation ( method , Asynchronous . class ) ; ",
  "4135": "if ( asynchronousMethod ) { ",
  "4136": "if ( ! Types . isVoid ( method . getReturnType ( ) ) ) { ",
  "4137": "managedMethod . setAsynchronous ( asynchronousMethod ) ; ",
  "4138": "Cron cronMethod = getAnnotation ( method , Cron . class ) ; ",
  "4139": "if ( cronMethod != null ) { ",
  "4140": "if ( remotelyAccessible ) { ",
  "4141": "managedMethod . setCronExpression ( cronMethod . value ( ) ) ; ",
  "4142": "cronMethodsPool . add ( managedMethod ) ; ",
  "4143": "autoInstanceCreation = true ; ",
  "4144": "if ( managedMethod != null ) { ",
  "4145": "methodsPool . put ( interfaceMethod , managedMethod ) ; ",
  "4146": "if ( managedMethod . isRemotelyAccessible ( ) && netMethodsPool . put ( method . getName ( ) , managedMethod ) != null ) { ",
  "4147": "for ( Field field : implementationClass . getDeclaredFields ( ) ) { ",
  "4148": "ContextParam contextParam = field . getAnnotation ( ContextParam . class ) ; ",
  "4149": "if ( contextParam != null ) { ",
  "4150": "contextParamFields . put ( contextParam . value ( ) , field ) ; ",
  "4151": "} private Class < ? > loadImplementationClass ( Config descriptor ) throws ConfigException { ",
  "4152": "String implementationName = descriptor . getAttribute ( \"class\" ) ; ",
  "4153": "if ( implementationName == null ) { ",
  "4154": "if ( instanceType . requiresImplementation ( ) ) { ",
  "4155": "if ( ! instanceType . requiresImplementation ( ) ) { ",
  "4156": "Class < ? > implementationClass = Classes . forOptionalName ( implementationName ) ; ",
  "4157": "if ( implementationClass == null ) { ",
  "4158": "if ( implementationClass . isInterface ( ) ) { ",
  "4159": "int implementationModifiers = implementationClass . getModifiers ( ) ; ",
  "4160": "if ( Modifier . isAbstract ( implementationModifiers ) ) { ",
  "4161": "if ( Types . isKindOf ( implementationClass , ManagedLifeCycle . class ) && ! InstanceScope . APPLICATION . equals ( instanceScope ) ) { ",
  "4162": "return implementationClass ; ",
  "4163": "} private Class < ? > [ ] loadInterfaceClasses ( Config descriptor ) throws ConfigException { ",
  "4164": "List < String > interfaceNames = new ArrayList < > ( ) ; ",
  "4165": "if ( ! descriptor . hasChildren ( ) ) { ",
  "4166": "if ( ! descriptor . hasAttribute ( \"interface\" ) ) { ",
  "4167": "if ( instanceType . requiresInterface ( ) ) { ",
  "4168": "return new Class < ? > [ ] { implementationClass } ; ",
  "4169": "interfaceNames . add ( descriptor . getAttribute ( \"interface\" ) ) ; ",
  "4170": "if ( \"REMOTE\" . equals ( descriptor . getAttribute ( \"type\" ) ) ) { ",
  "4171": "String url = descriptor . getAttribute ( \"url\" ) ; ",
  "4172": "if ( url == null || url . isEmpty ( ) ) { ",
  "4173": "if ( url . startsWith ( \"${\" ) ) { ",
  "4174": "for ( int i = 0 ; i < descriptor . getChildrenCount ( ) ; ++ i ) { ",
  "4175": "String interfaceName = descriptor . getChild ( i ) . getAttribute ( \"name\" ) ; ",
  "4176": "if ( interfaceName == null ) { ",
  "4177": "interfaceNames . add ( interfaceName ) ; ",
  "4178": "Class < ? > [ ] interfaceClasses = new Class < ? > [ interfaceNames . size ( ) ] ; ",
  "4179": "for ( int i = 0 ; i < interfaceNames . size ( ) ; ++ i ) { ",
  "4180": "final String interfaceName = interfaceNames . get ( i ) ; ",
  "4181": "final Class < ? > interfaceClass = Classes . forOptionalName ( interfaceName ) ; ",
  "4182": "if ( interfaceClass == null ) { ",
  "4183": "if ( Types . isKindOf ( interfaceClass , ManagedLifeCycle . class ) ) { ",
  "4184": "if ( instanceType . requiresInterface ( ) && ! interfaceClass . isInterface ( ) ) { ",
  "4185": "if ( implementationClass != null && ! Types . isKindOf ( implementationClass , interfaceClass ) ) { ",
  "4186": "interfaceClasses [ i ] = interfaceClass ; ",
  "4187": "return interfaceClasses ; ",
  "4188": "} private InstanceScope loadInstanceScope ( Config descriptor ) throws ConfigException { ",
  "4189": "InstanceScope instanceScope = descriptor . getAttribute ( \"scope\" , InstanceScope . class , InstanceScope . APPLICATION ) ; ",
  "4190": "if ( ! container . hasScopeFactory ( instanceScope ) ) { ",
  "4191": "return instanceScope ; ",
  "4192": "} private InstanceType loadInstanceType ( Config descriptor ) throws ConfigException { ",
  "4193": "InstanceType instanceType = descriptor . getAttribute ( \"type\" , InstanceType . class , InstanceType . POJO ) ; ",
  "4194": "if ( ! container . hasInstanceFactory ( instanceType ) ) { ",
  "4195": "return instanceType ; ",
  "4196": "} private String loadImplementationURL ( Config descriptor ) throws ConfigException { ",
  "4197": "String implementationURL = descriptor . getAttribute ( \"url\" ) ; ",
  "4198": "if ( instanceType . equals ( InstanceType . REMOTE ) && implementationURL == null ) { ",
  "4199": "return implementationURL ; ",
  "4200": "} private static Constructor < ? > getDeclaredConstructor ( Class < ? > implementationClass ) { ",
  "4201": "Constructor < ? > [ ] declaredConstructors = ( Constructor < ? > [ ] ) implementationClass . getDeclaredConstructors ( ) ; ",
  "4202": "if ( declaredConstructors . length == 0 ) { ",
  "4203": "for ( Constructor < ? > declaredConstructor : declaredConstructors ) { ",
  "4204": "if ( declaredConstructor . isSynthetic ( ) ) { ",
  "4205": "if ( declaredConstructor . getParameterTypes ( ) . length == 0 ) { ",
  "4206": "if ( declaredConstructor . getAnnotation ( Test . class ) != null ) { ",
  "4207": "if ( constructor != null ) { ",
  "4208": "constructor = declaredConstructor ; ",
  "4209": "constructor = declaredConstructors [ 0 ] ; ",
  "4210": "constructor . setAccessible ( true ) ; ",
  "4211": "return constructor ; ",
  "4212": "} private static Collection < Field > scanDependencies ( Class < ? > clazz ) { ",
  "4213": "Collection < Field > dependencies = new ArrayList < > ( ) ; ",
  "4214": "for ( Field field : clazz . getDeclaredFields ( ) ) { ",
  "4215": "if ( ! field . isAnnotationPresent ( Inject . class ) ) { ",
  "4216": "if ( Modifier . isFinal ( field . getModifiers ( ) ) ) { ",
  "4217": "if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { ",
  "4218": "dependencies . add ( field ) ; ",
  "4219": "return dependencies ; ",
  "4220": "} private void initializeStaticFields ( ) throws ConfigException { ",
  "4221": "for ( Config config : config . findChildren ( \"static-field\" ) ) { ",
  "4222": "String fieldName = config . getAttribute ( \"name\" ) ; ",
  "4223": "if ( fieldName == null ) { ",
  "4224": "if ( ! config . hasAttribute ( \"value\" ) ) { ",
  "4225": "Field field = Classes . getOptionalField ( implementationClass , fieldName ) ; ",
  "4226": "if ( field == null ) { ",
  "4227": "int modifiers = field . getModifiers ( ) ; ",
  "4228": "if ( ! Modifier . isStatic ( modifiers ) ) { ",
  "4229": "Object value = config . getAttribute ( \"value\" , field . getType ( ) ) ; ",
  "4230": "Classes . setFieldValue ( null , field , config . getAttribute ( \"value\" , field . getType ( ) ) ) ; ",
  "4231": "} private String buildStringRepresentation ( Config descriptor ) { ",
  "4232": "builder . append ( descriptor . getName ( ) ) ; ",
  "4233": "builder . append ( ':' ) ; ",
  "4234": "if ( implementationClass != null ) { ",
  "4235": "builder . append ( implementationClass . getName ( ) ) ; ",
  "4236": "for ( Class < ? > interfaceClass : interfaceClasses ) { ",
  "4237": "builder . append ( interfaceClass . getName ( ) ) ; ",
  "4238": "builder . append ( instanceType ) ; ",
  "4239": "builder . append ( instanceScope ) ; ",
  "4240": "builder . append ( remotelyAccessible ? \"NET\" : \"LOCAL\" ) ; ",
  "4241": "if ( implementationURL != null ) { ",
  "4242": "builder . append ( implementationURL ) ; ",
  "4243": "} private static < T extends Annotation > T getAnnotation ( Class < ? > clazz , Class < T > annotationClass ) { ",
  "4244": "T annotation = clazz . getAnnotation ( annotationClass ) ; ",
  "4245": "for ( Class < ? > interfaceClass : clazz . getInterfaces ( ) ) { ",
  "4246": "annotation = interfaceClass . getAnnotation ( annotationClass ) ; ",
  "4247": "if ( annotation != null ) { ",
  "4248": "return annotation ; ",
  "4249": "} private static boolean hasAnnotation ( Class < ? > clazz , Class < ? extends Annotation > annotationClass ) { ",
  "4250": "Annotation annotation = clazz . getAnnotation ( annotationClass ) ; ",
  "4251": "} private static < T extends Annotation > T getAnnotation ( Method method , Class < T > annotationClass ) { ",
  "4252": "T annotation = method . getAnnotation ( annotationClass ) ; ",
  "4253": "for ( Class < ? > interfaceClass : method . getDeclaringClass ( ) . getInterfaces ( ) ) { ",
  "4254": "annotation = interfaceClass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) . getAnnotation ( annotationClass ) ; ",
  "4255": "} catch ( NoSuchMethodException unused ) { ",
  "4256": "} private static Method getInterfaceMethod ( Method method ) { ",
  "4257": "return interfaceClass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; ",
  "4258": "} private static Class < ? extends Interceptor > getInterceptorClass ( Class < ? > clazz ) { ",
  "4259": "Intercepted intercepted = getAnnotation ( clazz , Intercepted . class ) ; ",
  "4260": "return intercepted != null ? intercepted . value ( ) : null ; ",
  "4261": "} private static Class < ? extends Interceptor > getInterceptorClass ( Method method ) { ",
  "4262": "Intercepted intercepted = getAnnotation ( method , Intercepted . class ) ; ",
  "4263": "} private void setValue ( String propertyPath , Object value ) throws ConverterException , IllegalAccessException { ",
  "4264": "List < String > nodeIDs = Strings . split ( propertyPath , '.' ) ; ",
  "4265": "int lastNodeIndex = nodeIDs . size ( ) - 1 ; ",
  "4266": "Node node = new ObjectNode ( object ) ; ",
  "4267": "for ( int index = 0 ; index < lastNodeIndex ; index ++ ) { ",
  "4268": "node = node . getChild ( nodeIDs . get ( index ) ) ; ",
  "4269": "node . setValue ( nodeIDs . get ( lastNodeIndex ) , value ) ; ",
  "4270": "} private static Class < ? > type ( Field field ) { ",
  "4271": "if ( Types . isKindOf ( field . getType ( ) , List . class ) ) { ",
  "4272": "return ( Class < ? > ) ( ( ParameterizedType ) field . getGenericType ( ) ) . getActualTypeArguments ( ) [ 0 ] ; ",
  "4273": "return field . getType ( ) ; ",
  "4274": "protected static Object getDependencyValue ( ManagedClassSPI hostManagedClass , Class < ? > type ) { ",
  "4275": "Stack < Class < ? > > stackTrace = dependenciesStack . get ( ) ; ",
  "4276": "if ( stackTrace == null ) { ",
  "4277": "stackTrace = new Stack < > ( ) ; ",
  "4278": "dependenciesStack . set ( stackTrace ) ; ",
  "4279": "ContainerSPI container = hostManagedClass . getContainer ( ) ; ",
  "4280": "if ( stackTrace . contains ( type ) ) { ",
  "4281": "stackTrace . add ( type ) ; ",
  "4282": "for ( Class < ? > stackTraceClass : stackTrace ) { ",
  "4283": "builder . append ( stackTraceClass . getName ( ) ) ; ",
  "4284": "builder . append ( \"\\r\\n\" ) ; ",
  "4285": "log . error ( builder . toString ( ) ) ; ",
  "4286": "dependenciesStack . remove ( ) ; ",
  "4287": "stackTrace . push ( type ) ; ",
  "4288": "ManagedClassSPI dependencyManagedClass = container . getManagedClass ( type ) ; ",
  "4289": "if ( isProxyRequired ( hostManagedClass , dependencyManagedClass ) ) { ",
  "4290": "ScopeProxyHandler < ? > handler = new ScopeProxyHandler < > ( container , type ) ; ",
  "4291": "return Proxy . newProxyInstance ( dependencyManagedClass . getImplementationClass ( ) . getClassLoader ( ) , dependencyManagedClass . getInterfaceClasses ( ) , handler ) ; ",
  "4292": "Object value = container . getOptionalInstance ( ( Class < ? super Object > ) type ) ; ",
  "4293": "if ( Types . isKindOf ( type , AppFactory . class ) ) { ",
  "4294": "return container ; ",
  "4295": "if ( Classes . isInstantiable ( type ) ) { ",
  "4296": "return Classes . newInstance ( type ) ; ",
  "4297": "stackTrace . pop ( ) ; ",
  "4298": "} private static boolean isProxyRequired ( ManagedClassSPI hostManagedClass , ManagedClassSPI dependencyManagedClass ) { ",
  "4299": "if ( dependencyManagedClass != null ) { ",
  "4300": "InstanceScope dependencyScope = dependencyManagedClass . getInstanceScope ( ) ; ",
  "4301": "if ( InstanceScope . THREAD . equals ( dependencyScope ) ) { ",
  "4302": "return InstanceScope . APPLICATION . equals ( hostManagedClass . getInstanceScope ( ) ) ; ",
  "4303": "return InstanceScope . SESSION . equals ( dependencyScope ) ; ",
  "4304": "} StoppableObservable < TEntity > getObservable ( Scheduler scheduler ) { ",
  "4305": "return runAsync ( scheduler , ( rx . Observer < ? super TEntity > observer , Subscription subscription ) -> { ",
  "4306": "TEntity previousEntity ; ",
  "4307": "previousEntity = read ( ) ; ",
  "4308": "} catch ( IOException | IllegalArgumentException | IllegalAccessException ex ) { ",
  "4309": "observer . onNext ( previousEntity ) ; ",
  "4310": "while ( endCondition == null || ! endCondition . test ( previousEntity ) ) { ",
  "4311": "sleep ( pollingInterval * 1000 ) ; ",
  "4312": "if ( subscription . isUnsubscribed ( ) ) { ",
  "4313": "TEntity newEntity ; ",
  "4314": "newEntity = read ( ) ; ",
  "4315": "if ( ! newEntity . equals ( previousEntity ) ) { ",
  "4316": "observer . onNext ( newEntity ) ; ",
  "4317": "previousEntity = newEntity ; ",
  "4318": "observer . onCompleted ( ) ; ",
  "4319": "} public final void setDefaultLink ( String rel , String ... hrefs ) { ",
  "4320": "if ( hrefs == null || hrefs . length == 0 ) { ",
  "4321": "defaultLinks . remove ( rel ) ; ",
  "4322": "defaultLinks . put ( rel , ",
  "4323": "stream ( hrefs ) . map ( uri :: resolve ) . collect ( toSet ( ) ) ) ; ",
  "4324": "} public final void setDefaultLinkTemplate ( String rel , String href ) { ",
  "4325": "if ( href == null ) { ",
  "4326": "defaultLinkTemplates . remove ( rel ) ; ",
  "4327": "defaultLinkTemplates . put ( rel , href ) ; ",
  "4328": "} protected HttpResponse executeAndHandle ( Request request ) ",
  "4329": "throws IOException , IllegalArgumentException , IllegalAccessException , FileNotFoundException , IllegalStateException { ",
  "4330": "HttpResponse response = execute ( request ) ; ",
  "4331": "handleResponse ( response , request ) ; ",
  "4332": "} protected HttpResponse execute ( Request request ) ",
  "4333": "defaultHeaders . forEach ( request :: addHeader ) ; ",
  "4334": "return executor . execute ( request ) . returnResponse ( ) ; ",
  "4335": "} protected void handleResponse ( HttpResponse response , Request request ) ",
  "4336": "handleLinks ( response ) ; ",
  "4337": "handleCapabilities ( response ) ; ",
  "4338": "handleErrors ( response , request ) ; ",
  "4339": "} protected void handleErrors ( HttpResponse response , Request request ) ",
  "4340": "StatusLine statusLine = response . getStatusLine ( ) ; ",
  "4341": "if ( statusLine . getStatusCode ( ) <= 299 ) { ",
  "4342": "HttpEntity entity = response . getEntity ( ) ; ",
  "4343": "String body ; ",
  "4344": "if ( entity == null ) { ",
  "4345": "body = null ; ",
  "4346": "body = EntityUtils . toString ( entity ) ; ",
  "4347": "Header contentType = entity . getContentType ( ) ; ",
  "4348": "if ( ( contentType != null ) && contentType . getValue ( ) . startsWith ( \"application/json\" ) ) { ",
  "4349": "JsonNode messageNode = serializer . readTree ( body ) . get ( \"message\" ) ; ",
  "4350": "if ( messageNode != null ) { ",
  "4351": "message = messageNode . asText ( ) ; ",
  "4352": "} catch ( JsonProcessingException ex ) { ",
  "4353": "Exception inner = ( body == null ) ? null : new HttpException ( body ) ; ",
  "4354": "switch ( statusLine . getStatusCode ( ) ) { ",
  "4355": "case HttpStatus . SC_BAD_REQUEST : ",
  "4356": "throw new IllegalArgumentException ( message , inner ) ; ",
  "4357": "case HttpStatus . SC_UNAUTHORIZED : ",
  "4358": "throw new IllegalAccessException ( message ) ; ",
  "4359": "case HttpStatus . SC_FORBIDDEN : ",
  "4360": "case HttpStatus . SC_NOT_FOUND : ",
  "4361": "case HttpStatus . SC_GONE : ",
  "4362": "throw new FileNotFoundException ( message ) ; ",
  "4363": "case HttpStatus . SC_CONFLICT : ",
  "4364": "throw new IllegalStateException ( message , inner ) ; ",
  "4365": "case HttpStatus . SC_PRECONDITION_FAILED : ",
  "4366": "case HttpStatus . SC_REQUESTED_RANGE_NOT_SATISFIABLE : ",
  "4367": "case HttpStatus . SC_REQUEST_TIMEOUT : ",
  "4368": "throw new RuntimeException ( message , inner ) ; ",
  "4369": "} @ SuppressWarnings ( \"LocalVariableHidesMemberVariable\" ) ",
  "4370": "private void handleLinks ( HttpResponse response ) { ",
  "4371": "Map < String , Map < URI , String > > links = new HashMap < > ( ) ; ",
  "4372": "Map < String , String > linkTemplates = new HashMap < > ( ) ; ",
  "4373": "handleHeaderLinks ( response , links , linkTemplates ) ; ",
  "4374": "handleBodyLinks ( serializer . readTree ( entity . getContent ( ) ) , links , linkTemplates ) ; ",
  "4375": "throw new RuntimeException ( ) ; ",
  "4376": "this . links = unmodifiableMap ( links ) ; ",
  "4377": "this . linkTemplates = unmodifiableMap ( linkTemplates ) ; ",
  "4378": "} protected void handleHeaderLinks ( HttpResponse response , Map < String , Map < URI , String > > links , Map < String , String > linkTemplates ) { ",
  "4379": "getLinkHeaders ( response ) . forEach ( header -> { ",
  "4380": "if ( header . getRel ( ) == null ) { ",
  "4381": "if ( header . isTemplated ( ) ) { ",
  "4382": "linkTemplates . put ( header . getRel ( ) , header . getHref ( ) ) ; ",
  "4383": "getOrAdd ( links , header . getRel ( ) ) ",
  "4384": ". put ( uri . resolve ( header . getHref ( ) ) , header . getTitle ( ) ) ; ",
  "4385": "} protected void handleBodyLinks ( JsonNode jsonBody , Map < String , Map < URI , String > > links , Map < String , String > linkTemplates ) { ",
  "4386": "if ( jsonBody . getNodeType ( ) != JsonNodeType . OBJECT ) { ",
  "4387": "JsonNode linksNode = jsonBody . get ( \"_links\" ) ; ",
  "4388": "if ( linksNode == null ) { ",
  "4389": "linksNode = jsonBody . get ( \"links\" ) ; ",
  "4390": "linksNode . fields ( ) . forEachRemaining ( x -> { ",
  "4391": "String rel = x . getKey ( ) ; ",
  "4392": "Map < URI , String > linksForRel = getOrAdd ( links , rel ) ; ",
  "4393": "switch ( x . getValue ( ) . getNodeType ( ) ) { ",
  "4394": "x . getValue ( ) . forEach ( subobj -> { ",
  "4395": "if ( subobj . getNodeType ( ) == JsonNodeType . OBJECT ) { ",
  "4396": "parseLinkObject ( rel , ( ObjectNode ) subobj , linksForRel , linkTemplates ) ; ",
  "4397": "parseLinkObject ( rel , ( ObjectNode ) x . getValue ( ) , linksForRel , linkTemplates ) ; ",
  "4398": "} private void parseLinkObject ( String rel , ObjectNode obj , Map < URI , String > linksForRel , Map < String , String > linkTemplates ) { ",
  "4399": "JsonNode href = obj . findValue ( \"href\" ) ; ",
  "4400": "JsonNode templated = obj . findValue ( \"templated\" ) ; ",
  "4401": "if ( templated != null && templated . isBoolean ( ) && templated . asBoolean ( ) ) { ",
  "4402": "linkTemplates . put ( rel , href . asText ( ) ) ; ",
  "4403": "JsonNode title = obj . findValue ( \"title\" ) ; ",
  "4404": "linksForRel . put ( ",
  "4405": "uri . resolve ( href . asText ( ) ) , ",
  "4406": "( title != null && title . getNodeType ( ) == JsonNodeType . STRING ) ? title . asText ( ) : null ) ; ",
  "4407": "} private static Map < URI , String > getOrAdd ( Map < String , Map < URI , String > > map , String key ) { ",
  "4408": "Map < URI , String > value = map . get ( key ) ; ",
  "4409": "map . put ( key , value = new HashMap < > ( ) ) ; ",
  "4410": "} protected void handleCapabilities ( HttpResponse response ) { ",
  "4411": "allowedMethods = unmodifiableSet ( stream ( response . getHeaders ( \"Allow\" ) ) ",
  "4412": ". filter ( x -> x . getName ( ) . equals ( \"Allow\" ) ) ",
  "4413": ". flatMap ( x -> stream ( x . getElements ( ) ) ) . map ( x -> x . getName ( ) ) ",
  "4414": ". collect ( toSet ( ) ) ) ; ",
  "4415": "} protected Optional < Boolean > isMethodAllowed ( String method ) { ",
  "4416": "if ( allowedMethods . isEmpty ( ) ) { ",
  "4417": "return Optional . of ( allowedMethods . contains ( method ) ) ; ",
  "4418": "} @ SuppressWarnings ( \"ThrowableResultIgnored\" ) ",
  "4419": "public static String getFullMessage ( Throwable throwable ) { ",
  "4420": "builder . append ( throwable . getLocalizedMessage ( ) ) . append ( \"\\n\" ) ; ",
  "4421": "throwable = throwable . getCause ( ) ; ",
  "4422": "} while ( throwable != null ) ; ",
  "4423": "public < T > T newInstance ( ManagedClassSPI managedClass , Object ... args ) { ",
  "4424": "return getRemoteInstance ( managedClass . getImplementationURL ( ) , ( Class < ? super T > ) managedClass . getInterfaceClass ( ) ) ; ",
  "4425": "public < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) throws UnsupportedProtocolException { ",
  "4426": "if ( implementationURL == null ) { ",
  "4427": "String protocol = Strings . getProtocol ( implementationURL ) ; ",
  "4428": "RemoteFactory remoteFactory = remoteFactories . get ( protocol ) ; ",
  "4429": "if ( remoteFactory == null ) { ",
  "4430": "return remoteFactory . getRemoteInstance ( implementationURL , interfaceClass ) ; ",
  "4431": "} protected void registerInstanceProcessor ( ) { ",
  "4432": "registerInstanceProcessor ( new InstanceFieldsInjectionProcessor ( ) ) ; ",
  "4433": "registerInstanceProcessor ( new InstanceFieldsInitializationProcessor ( ) ) ; ",
  "4434": "registerInstanceProcessor ( new ConfigurableInstanceProcessor ( ) ) ; ",
  "4435": "registerInstanceProcessor ( new PostConstructInstanceProcessor ( ) ) ; ",
  "4436": "registerInstanceProcessor ( new CronMethodsProcessor ( cronManager ) ) ; ",
  "4437": "registerInstanceProcessor ( new LoggerInstanceProcessor ( ) ) ; ",
  "4438": "} protected void registerScopeFactory ( ScopeFactory scopeFactory ) { ",
  "4439": "if ( scopeFactory == null ) { ",
  "4440": "scopeFactories . put ( InstanceScope . LOCAL , null ) ; ",
  "4441": "final InstanceScope instanceScope = scopeFactory . getInstanceScope ( ) ; ",
  "4442": "if ( scopeFactories . put ( instanceScope , scopeFactory ) != null ) { ",
  "4443": "} protected void registerInstanceFactory ( InstanceType instanceType , InstanceFactory instanceFactory ) { ",
  "4444": "if ( instanceFactories . put ( instanceType , instanceFactory ) != null ) { ",
  "4445": "} protected void registerInstanceProcessor ( InstanceProcessor instanceProcessor ) { ",
  "4446": "for ( InstanceProcessor existingInstanceProcessoor : instanceProcessors ) { ",
  "4447": "if ( existingInstanceProcessoor . getClass ( ) . equals ( instanceProcessor . getClass ( ) ) ) { ",
  "4448": "instanceProcessors . add ( instanceProcessor ) ; ",
  "4449": "} protected void registerClassProcessor ( ClassProcessor classProcessor ) { ",
  "4450": "for ( ClassProcessor existingClassProcessoor : classProcessors ) { ",
  "4451": "if ( existingClassProcessoor . getClass ( ) . equals ( classProcessor . getClass ( ) ) ) { ",
  "4452": "classProcessors . add ( classProcessor ) ; ",
  "4453": "public void config ( Config config ) throws ConfigException { ",
  "4454": "log . trace ( \"config(Config)\" ) ; ",
  "4455": "List < Config > classDescriptors = new ArrayList < > ( ) ; ",
  "4456": "for ( Config descriptorsSection : config . findChildren ( \"managed-classes\" , \"web-sockets\" ) ) { ",
  "4457": "CLASS_DESCRIPTORS : for ( Config classDescriptor : descriptorsSection . getChildren ( ) ) { ",
  "4458": "if ( ! classDescriptor . hasChildren ( ) ) { ",
  "4459": "if ( ! classDescriptor . hasAttribute ( \"interface\" ) ) { ",
  "4460": "classDescriptor . setAttribute ( \"interface\" , classDescriptor . getAttribute ( \"class\" ) ) ; ",
  "4461": "String interfaceClass = classDescriptor . getAttribute ( \"interface\" ) ; ",
  "4462": "for ( int i = 0 ; i < classDescriptors . size ( ) ; ++ i ) { ",
  "4463": "if ( classDescriptors . get ( i ) . hasAttribute ( \"interface\" , interfaceClass ) ) { ",
  "4464": "classDescriptors . set ( i , classDescriptor ) ; ",
  "4465": "continue CLASS_DESCRIPTORS ; ",
  "4466": "classDescriptors . add ( classDescriptor ) ; ",
  "4467": "for ( Config classDescriptor : classDescriptors ) { ",
  "4468": "ManagedClass managedClass = new ManagedClass ( this , classDescriptor ) ; ",
  "4469": "for ( Class < ? > interfaceClass : managedClass . getInterfaceClasses ( ) ) { ",
  "4470": "classesPool . put ( interfaceClass , managedClass ) ; ",
  "4471": "for ( ClassProcessor classProcessor : classProcessors ) { ",
  "4472": "classProcessor . postProcessClass ( managedClass ) ; ",
  "4473": "convertersInitialization ( config ) ; ",
  "4474": "pojoStaticInitialization ( config ) ; ",
  "4475": "ManagedClassSPI appContext = classesPool . get ( AppContext . class ) ; ",
  "4476": "if ( appContext != null && Types . isKindOf ( appContext . getImplementationClass ( ) , ContainerSPI . class ) ) { ",
  "4477": "scopeFactories . get ( InstanceScope . APPLICATION ) . persistInstance ( new InstanceKey ( appContext . getKey ( ) ) , this ) ; ",
  "4478": "log . trace ( \"start()\" ) ; ",
  "4479": "Set < ManagedClassSPI > sortedClasses = new TreeSet < > ( new Comparator < ManagedClassSPI > ( ) { ",
  "4480": "public int compare ( ManagedClassSPI o1 , ManagedClassSPI o2 ) { ",
  "4481": "return o1 . getKey ( ) . compareTo ( o2 . getKey ( ) ) ; ",
  "4482": "for ( ManagedClassSPI managedClass : classesPool . values ( ) ) { ",
  "4483": "if ( managedClass . isAutoInstanceCreation ( ) ) { ",
  "4484": "sortedClasses . add ( managedClass ) ; ",
  "4485": "for ( ManagedClassSPI managedClass : sortedClasses ) { ",
  "4486": "getInstance ( ( Class < ? super Object > ) managedClass . getInterfaceClass ( ) ) ; ",
  "4487": "log . trace ( \"destroy()\" ) ; ",
  "4488": "cronManager . destroy ( ) ; ",
  "4489": "return o2 . getKey ( ) . compareTo ( o1 . getKey ( ) ) ; ",
  "4490": "if ( Types . isKindOf ( managedClass . getImplementationClass ( ) , ManagedPreDestroy . class ) ) { ",
  "4491": "ScopeFactory scopeFactory = scopeFactories . get ( managedClass . getInstanceScope ( ) ) ; ",
  "4492": "InstanceKey instanceKey = new InstanceKey ( managedClass . getKey ( ) ) ; ",
  "4493": "Object instance = scopeFactory . getInstance ( instanceKey ) ; ",
  "4494": "ManagedPreDestroy managedInstance = ( ManagedPreDestroy ) Classes . unproxy ( instance ) ; ",
  "4495": "managedInstance . preDestroy ( ) ; ",
  "4496": "for ( ScopeFactory scopeFactory : scopeFactories . values ( ) ) { ",
  "4497": "if ( scopeFactory != null ) { ",
  "4498": "scopeFactory . clear ( ) ; ",
  "4499": "classesPool . clear ( ) ; ",
  "4500": "instanceProcessors . clear ( ) ; ",
  "4501": "scopeFactories . clear ( ) ; ",
  "4502": "instanceFactories . clear ( ) ; ",
  "4503": "public < T > T getInstance ( Class < ? super T > interfaceClass , Object ... args ) { ",
  "4504": "ManagedClassSPI managedClass = classesPool . get ( interfaceClass ) ; ",
  "4505": "if ( managedClass == null ) { ",
  "4506": "return getInstance ( managedClass , instanceKey , args ) ; ",
  "4507": "private < T > T getInstance ( ManagedClassSPI managedClass , InstanceKey instanceKey , Object ... args ) { ",
  "4508": "InstanceFactory instanceFactory = instanceFactories . get ( managedClass . getInstanceType ( ) ) ; ",
  "4509": "args = argumentsProcessor . preProcessArguments ( managedClass , args ) ; ",
  "4510": "return instanceFactory . newInstance ( managedClass , args ) ; ",
  "4511": "boolean postProcessingEnabled = false ; ",
  "4512": "Object instance = null ; ",
  "4513": "synchronized ( scopeMutex ) { ",
  "4514": "instance = scopeFactory . getInstance ( instanceKey ) ; ",
  "4515": "postProcessingEnabled = true ; ",
  "4516": "instance = instanceFactory . newInstance ( managedClass , args ) ; ",
  "4517": "scopeFactory . persistInstance ( instanceKey , instance ) ; ",
  "4518": "if ( ! postProcessingEnabled ) { ",
  "4519": "return ( T ) instance ; ",
  "4520": "Object pojoInstance = null ; ",
  "4521": "if ( instance instanceof Proxy ) { ",
  "4522": "if ( Proxy . getInvocationHandler ( instance ) instanceof InstanceInvocationHandler ) { ",
  "4523": "InstanceInvocationHandler < T > handler = ( InstanceInvocationHandler < T > ) Proxy . getInvocationHandler ( instance ) ; ",
  "4524": "pojoInstance = handler . getWrappedInstance ( ) ; ",
  "4525": "pojoInstance = instance ; ",
  "4526": "if ( pojoInstance != null ) { ",
  "4527": "for ( InstanceProcessor instanceProcessor : instanceProcessors ) { ",
  "4528": "instanceProcessor . postProcessInstance ( managedClass , pojoInstance ) ; ",
  "4529": "} private static void convertersInitialization ( Config config ) throws ConfigException { ",
  "4530": "Config section = config . getChild ( \"converters\" ) ; ",
  "4531": "for ( Config el : section . findChildren ( \"type\" ) ) { ",
  "4532": "String className = el . getAttribute ( \"class\" ) ; ",
  "4533": "Class < ? > valueType = Classes . forOptionalName ( className ) ; ",
  "4534": "if ( valueType == null ) { ",
  "4535": "String converterName = el . getAttribute ( \"converter\" ) ; ",
  "4536": "Class < ? extends Converter > converterClass = Classes . forOptionalName ( converterName ) ; ",
  "4537": "if ( converterClass == null ) { ",
  "4538": "ConverterRegistry . getInstance ( ) . registerConverter ( valueType , converterClass ) ; ",
  "4539": "} private static void pojoStaticInitialization ( Config config ) throws ConfigException { ",
  "4540": "Config pojoClassesSection = config . getChild ( \"pojo-classes\" ) ; ",
  "4541": "if ( pojoClassesSection == null ) { ",
  "4542": "for ( Config pojoClassElement : pojoClassesSection . getChildren ( ) ) { ",
  "4543": "String pojoClassName = pojoClassElement . getAttribute ( \"class\" ) ; ",
  "4544": "if ( pojoClassName == null ) { ",
  "4545": "Config configSection = config . getChild ( pojoClassElement . getName ( ) ) ; ",
  "4546": "Class < ? > pojoClass = Classes . forOptionalName ( pojoClassName ) ; ",
  "4547": "if ( pojoClass == null ) { ",
  "4548": "if ( configSection == null ) { ",
  "4549": "for ( Config staticElement : configSection . findChildren ( \"static-field\" ) ) { ",
  "4550": "String fieldName = staticElement . getAttribute ( \"name\" ) ; ",
  "4551": "if ( ! staticElement . hasAttribute ( \"value\" ) ) { ",
  "4552": "Field staticField = Classes . getOptionalField ( pojoClass , fieldName ) ; ",
  "4553": "if ( staticField == null ) { ",
  "4554": "int modifiers = staticField . getModifiers ( ) ; ",
  "4555": "Object value = staticElement . getAttribute ( \"value\" , staticField . getType ( ) ) ; ",
  "4556": "Classes . setFieldValue ( null , staticField , value ) ; ",
  "4557": "for ( Field dependency : managedClass . getDependencies ( ) ) { ",
  "4558": "if ( dependency . isSynthetic ( ) ) { ",
  "4559": "Classes . setFieldValue ( instance , dependency , getDependencyValue ( managedClass , dependency . getType ( ) ) ) ; ",
  "4560": "} void setRequestPath ( String requestPath ) { ",
  "4561": "this . requestPath = requestPath != null ? requestPath : Strings . toDashCase ( method . getName ( ) ) ; ",
  "4562": "public < T > T invoke ( Object object , Object ... args ) throws AuthorizationException , IllegalArgumentException , InvocationException { ",
  "4563": "if ( remotelyAccessible && ! isPublic ( ) && ! container . isAuthenticated ( ) ) { ",
  "4564": "throw new AuthorizationException ( ) ; ",
  "4565": "args = argumentsProcessor . preProcessArguments ( this , args ) ; ",
  "4566": "if ( object instanceof Proxy ) { ",
  "4567": "return ( T ) method . invoke ( object , args ) ; ",
  "4568": "throw new InvocationException ( e . getTargetException ( ) ) ; ",
  "4569": "if ( meter == null ) { ",
  "4570": "return ( T ) invoker . invoke ( object , args ) ; ",
  "4571": "meter . incrementInvocationsCount ( ) ; ",
  "4572": "meter . startProcessing ( ) ; ",
  "4573": "T returnValue = null ; ",
  "4574": "returnValue = ( T ) invoker . invoke ( object , args ) ; ",
  "4575": "meter . incrementExceptionsCount ( ) ; ",
  "4576": "meter . stopProcessing ( ) ; ",
  "4577": "if ( currentPart != null ) { ",
  "4578": "currentPart . close ( ) ; ",
  "4579": "if ( ! fileItemIterator . hasNext ( ) ) { ",
  "4580": "FileItemStream fileItemStream = fileItemIterator . next ( ) ; ",
  "4581": "if ( fileItemStream . isFormField ( ) ) { ",
  "4582": "currentPart = new FormFieldImpl ( fileItemStream ) ; ",
  "4583": "currentPart = new UploadStreamImpl ( fileItemStream ) ; ",
  "4584": "} catch ( IOException | FileUploadException e ) { ",
  "4585": "log . error ( e ) ; ",
  "4586": "public ArgumentsReader getArgumentsReader ( HttpServletRequest httpRequest , Type [ ] formalParameters ) { ",
  "4587": "if ( formalParameters . length == 0 ) { ",
  "4588": "return EmptyArgumentsReader . getInstance ( ) ; ",
  "4589": "if ( httpRequest . getQueryString ( ) != null ) { ",
  "4590": "return readers . get ( null ) ; ",
  "4591": "return getArgumentsReader ( httpRequest . getContentType ( ) , formalParameters [ 0 ] ) ; ",
  "4592": "} private ArgumentsReader getArgumentsReader ( String contentType , Type parameterType ) { ",
  "4593": "return readers . get ( EncoderKey . APPLICATION_JSON ) ; ",
  "4594": "EncoderKey key = new EncoderKey ( ContentType . valueOf ( contentType ) , parameterType ) ; ",
  "4595": "ArgumentsReader reader = readers . get ( key ) ; ",
  "4596": "if ( reader != null ) { ",
  "4597": "return reader ; ",
  "4598": "key = new EncoderKey ( ContentType . valueOf ( contentType ) ) ; ",
  "4599": "reader = readers . get ( key ) ; ",
  "4600": "if ( reader == null ) { ",
  "4601": "public ContentType getContentTypeForValue ( Object value ) { ",
  "4602": "if ( value instanceof Document ) { ",
  "4603": "return ContentType . TEXT_XML ; ",
  "4604": "if ( value instanceof StreamHandler ) { ",
  "4605": "return ContentType . APPLICATION_STREAM ; ",
  "4606": "public ValueWriter getValueWriter ( ContentType contentType ) { ",
  "4607": "ValueWriter writer = writers . get ( contentType ) ; ",
  "4608": "return writer ; ",
  "4609": "} StoppableObservable < TEntity > getObservable ( final long startIndex , Scheduler scheduler ) { ",
  "4610": "long currentStartIndex = startIndex ; ",
  "4611": "while ( ! subscription . isUnsubscribed ( ) ) { ",
  "4612": "PartialResponse < TEntity > response ; ",
  "4613": "response = ( currentStartIndex >= 0 ) ",
  "4614": "? readRange ( currentStartIndex , null ) ",
  "4615": ": readRange ( null , - currentStartIndex ) ; ",
  "4616": "} catch ( IllegalStateException ex ) { ",
  "4617": "} catch ( IOException | IllegalArgumentException | IllegalAccessException error ) { ",
  "4618": "observer . onError ( error ) ; ",
  "4619": "response . getElements ( ) . stream ( ) . forEach ( observer :: onNext ) ; ",
  "4620": "if ( response . isEndReached ( ) ) { ",
  "4621": "currentStartIndex = response . getTo ( ) + 1 ; ",
  "4622": "public < T > T asObject ( String string , Class < T > valueType ) { ",
  "4623": "return ( T ) new InstanceScope ( string ) ; ",
  "4624": "} private void setField ( Field field , String parameterName , Object instance ) { ",
  "4625": "final Object value = context . getProperty ( parameterName , field . getType ( ) ) ; ",
  "4626": "field . set ( instance , value ) ; ",
  "4627": "throw new BugError ( e ) ; ",
  "4628": "Object [ ] arguments = new Object [ formalParameters . length ] ; ",
  "4629": "int argumentIndex = 0 ; ",
  "4630": "ServletFileUpload multipart = new ServletFileUpload ( ) ; ",
  "4631": "FileItemIterator iterator = multipart . getItemIterator ( httpRequest ) ; ",
  "4632": "FileItemStream fileItemStream = null ; ",
  "4633": "fileItemStream = iterator . next ( ) ; ",
  "4634": "String contentType = fileItemStream . getContentType ( ) ; ",
  "4635": "Type parameterType = formalParameters [ argumentIndex ] ; ",
  "4636": "ArgumentPartReader reader = argumentsReaderFactory . getArgumentPartReader ( contentType , parameterType ) ; ",
  "4637": "boolean streamArgument = StreamFactory . isStream ( parameterType ) ; ",
  "4638": "ArgumentPartReader argumentPartReader = ( ArgumentPartReader ) reader ; ",
  "4639": "InputStream inputStream = streamArgument ? new LazyFileItemStream ( fileItemStream ) : fileItemStream . openStream ( ) ; ",
  "4640": "arguments [ argumentIndex ] = argumentPartReader . read ( inputStream , parameterType ) ; ",
  "4641": "++ argumentIndex ; ",
  "4642": "if ( streamArgument ) { ",
  "4643": "threadLocal . set ( inputStream ) ; ",
  "4644": "if ( argumentIndex != formalParameters . length ) { ",
  "4645": "protected void serialize ( OutputStream outputStream ) throws IOException { ",
  "4646": "Writer writer = new BufferedWriter ( new OutputStreamWriter ( outputStream , \"UTF-8\" ) ) ; ",
  "4647": "TemplateEngine templateEngine = Classes . loadService ( TemplateEngine . class ) ; ",
  "4648": "Template template = templateEngine . getTemplate ( meta . getTemplateFile ( ) ) ; ",
  "4649": "boolean operatorSerialization = Boolean . parseBoolean ( meta . getProperty ( OPERATOR_SERIALIZATION ) ) ; ",
  "4650": "if ( operatorSerialization ) { ",
  "4651": "template . setProperty ( \"js.template.serialize.operator\" , true ) ; ",
  "4652": "template . serialize ( model , writer ) ; ",
  "4653": "public < T > T asObject ( String string , Class < T > valueType ) throws IllegalArgumentException , ConverterException { ",
  "4654": "return ( T ) new InstanceType ( string ) ; ",
  "4655": "return new Object [ ] { read ( httpRequest . getInputStream ( ) , formalParameters [ 0 ] ) } ; ",
  "4656": "public Object read ( InputStream inputStream , Type type ) throws IOException { ",
  "4657": "if ( Types . isKindOf ( type , Document . class ) ) { ",
  "4658": "return documentBuilder . loadXML ( inputStream ) ; ",
  "4659": "} else if ( Types . isKindOf ( type , InputStream . class ) ) { ",
  "4660": "return inputStream ; ",
  "4661": "public void write ( HttpServletResponse httpResponse , Object value ) throws IOException { ",
  "4662": "final Document document = ( Document ) value ; ",
  "4663": "document . serialize ( new OutputStreamWriter ( httpResponse . getOutputStream ( ) , \"UTF-8\" ) ) ; ",
  "4664": "public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { ",
  "4665": "T instance = appFactory . getInstance ( interfaceClass ) ; ",
  "4666": "return method . invoke ( instance , args ) ; ",
  "4667": "} public void attach ( HttpServletRequest httpRequest , HttpServletResponse httpResponse ) { ",
  "4668": "if ( requestURL == null ) { ",
  "4669": "requestURL = httpRequest . getRequestURI ( ) ; ",
  "4670": "if ( locale == null ) { ",
  "4671": "locale = httpRequest . getLocale ( ) ; ",
  "4672": "if ( requestPath == null ) { ",
  "4673": "requestPath = httpRequest . getRequestURI ( ) . substring ( httpRequest . getContextPath ( ) . length ( ) ) ; ",
  "4674": "this . httpRequest = httpRequest ; ",
  "4675": "this . httpResponse = httpResponse ; ",
  "4676": "this . attached = true ; ",
  "4677": "} public void detach ( ) { ",
  "4678": "attached = false ; ",
  "4679": "locale = null ; ",
  "4680": "securityDomain = null ; ",
  "4681": "cookies = null ; ",
  "4682": "requestURL = null ; ",
  "4683": "} public Cookies getCookies ( ) { ",
  "4684": "assertAttached ( ) ; ",
  "4685": "if ( cookies == null ) { ",
  "4686": "cookies = new Cookies ( httpRequest , httpResponse ) ; ",
  "4687": "return cookies ; ",
  "4688": "} public HttpSession getSession ( boolean ... create ) { ",
  "4689": "if ( create . length == 0 ) { ",
  "4690": "return httpRequest . getSession ( ) ; ",
  "4691": "return httpRequest . getSession ( create [ 0 ] ) ; ",
  "4692": "if ( ! attached ) { ",
  "4693": "StringBuilder message = new StringBuilder ( ) ; ",
  "4694": "message . append ( httpRequest . getRequestURI ( ) ) ; ",
  "4695": "message . append ( \"|:\" ) ; ",
  "4696": "message . append ( System . lineSeparator ( ) ) ; ",
  "4697": "message . append ( httpRequest . getRemoteHost ( ) ) ; ",
  "4698": "message . append ( httpRequest . getMethod ( ) ) ; ",
  "4699": "message . append ( httpRequest . getQueryString ( ) ) ; ",
  "4700": "Enumeration < String > headerNames = httpRequest . getHeaderNames ( ) ; ",
  "4701": "String headerName = headerNames . nextElement ( ) ; ",
  "4702": "message . append ( headerName ) ; ",
  "4703": "message . append ( httpRequest . getHeader ( headerName ) ) ; ",
  "4704": "log . error ( message . toString ( ) ) ; ",
  "4705": "} private static List < InvocationMeter > getMeters ( ) { ",
  "4706": "List < InvocationMeter > invocationMeters = new ArrayList < InvocationMeter > ( ) ; ",
  "4707": "ContainerSPI container = ( ContainerSPI ) Factory . getAppFactory ( ) ; ",
  "4708": "invocationMeters . add ( ( ( ManagedMethod ) managedMethod ) . getMeter ( ) ) ; ",
  "4709": "return invocationMeters ; ",
  "4710": "} protected void config ( EventStreamConfig config ) { ",
  "4711": "if ( config . hasSecretKey ( ) ) { ",
  "4712": "secretKey = config . getSecretKey ( ) ; ",
  "4713": "if ( config . hasKeepAlivePeriod ( ) ) { ",
  "4714": "keepAlivePeriod = config . getKeepAlivePeriod ( ) ; ",
  "4715": "parameters = config . getParameters ( ) ; ",
  "4716": "} public void push ( Event event ) { ",
  "4717": "if ( ! active . get ( ) ) { ",
  "4718": "if ( ! eventsQueue . offer ( event , EVENTS_QUEUE_PUSH_TIMEOUT , TimeUnit . MILLISECONDS ) ) { ",
  "4719": "} catch ( InterruptedException unused ) { ",
  "4720": "push ( new ShutdownEvent ( ) ) ; ",
  "4721": "active . set ( false ) ; ",
  "4722": "} protected void setRemoteHost ( String remoteHost ) { ",
  "4723": "if ( string == null ) { ",
  "4724": "string = Strings . concat ( '#' , STREAM_ID ++ , ':' , remoteHost ) ; ",
  "4725": "} protected boolean loop ( ) { ",
  "4726": "Event event = null ; ",
  "4727": "event = eventsQueue . poll ( keepAlivePeriod , TimeUnit . MILLISECONDS ) ; ",
  "4728": "sendKeepAlive ( ) ; ",
  "4729": "return ! writer . checkError ( ) ; ",
  "4730": "if ( event instanceof ShutdownEvent ) { ",
  "4731": "sendEvent ( event ) ; ",
  "4732": "onSent ( event ) ; ",
  "4733": "} protected < T > T getParameter ( String name , Class < T > type ) { ",
  "4734": "String value = parameters . get ( name ) ; ",
  "4735": "return ConverterRegistry . getConverter ( ) . asObject ( value , type ) ; ",
  "4736": "} protected void sendEvent ( Event event ) { ",
  "4737": "write ( \"data:\" ) ; ",
  "4738": "if ( secretKey == null ) { ",
  "4739": "json . serialize ( writer , event ) ; ",
  "4740": "Cipher cipher = Cipher . getInstance ( secretKey . getAlgorithm ( ) ) ; ",
  "4741": "byte [ ] encryptedMessage = cipher . doFinal ( json . serialize ( event ) ) ; ",
  "4742": "write ( Base64 . encode ( encryptedMessage ) ) ; ",
  "4743": "} catch ( InvalidKeyException | NoSuchPaddingException | BadPaddingException | IllegalBlockSizeException e ) { ",
  "4744": "crlf ( ) ; ",
  "4745": "container = ( ContainerSPI ) config . getServletContext ( ) . getAttribute ( TinyContainer . ATTR_INSTANCE ) ; ",
  "4746": "if ( container == null ) { ",
  "4747": "servletName = Strings . concat ( config . getServletContext ( ) . getServletContextName ( ) , '#' , config . getServletName ( ) ) ; ",
  "4748": "protected void service ( HttpServletRequest httpRequest , HttpServletResponse httpResponse ) throws IOException , ServletException { ",
  "4749": "logContext . put ( LOG_CONTEXT_APP , httpRequest . getContextPath ( ) . isEmpty ( ) ? TinyContainer . ROOT_CONTEXT : httpRequest . getContextPath ( ) . substring ( 1 ) ) ; ",
  "4750": "logContext . put ( LOG_CONTEXT_IP , httpRequest . getRemoteHost ( ) ) ; ",
  "4751": "logContext . put ( LOG_CONTEXT_ID , Integer . toString ( requestID . getAndIncrement ( ) , Character . MAX_RADIX ) ) ; ",
  "4752": "if ( isEmptyUriRequest ( httpRequest ) ) { ",
  "4753": "String requestURI = httpRequest . getRequestURI ( ) ; ",
  "4754": "Factory . bind ( container ) ; ",
  "4755": "RequestContext context = container . getInstance ( RequestContext . class ) ; ",
  "4756": "context . attach ( httpRequest , httpResponse ) ; ",
  "4757": "handleRequest ( context ) ; ",
  "4758": "} catch ( IOException | ServletException | Error | RuntimeException t ) { ",
  "4759": "dumpError ( context , t ) ; ",
  "4760": "logContext . clear ( ) ; ",
  "4761": "context . detach ( ) ; ",
  "4762": "} private static boolean isEmptyUriRequest ( HttpServletRequest httpRequest ) { ",
  "4763": "if ( ! \"GET\" . equals ( httpRequest . getMethod ( ) ) ) { ",
  "4764": "String acceptValue = httpRequest . getHeader ( HttpHeader . ACCEPT ) ; ",
  "4765": "if ( acceptValue != null && acceptValue . contains ( ContentType . TEXT_HTML . getMIME ( ) ) ) { ",
  "4766": "String referer = httpRequest . getHeader ( HttpHeader . REFERER ) ; ",
  "4767": "if ( referer == null ) { ",
  "4768": "StringBuilder uri = new StringBuilder ( httpRequest . getRequestURI ( ) ) ; ",
  "4769": "String query = httpRequest . getQueryString ( ) ; ",
  "4770": "if ( query . charAt ( 0 ) != '?' ) { ",
  "4771": "uri . append ( '?' ) ; ",
  "4772": "uri . append ( query ) ; ",
  "4773": "return referer . toLowerCase ( ) . endsWith ( uri . toString ( ) . toLowerCase ( ) ) ; ",
  "4774": "} protected static void sendUnauthorized ( RequestContext context ) { ",
  "4775": "final ContainerSPI container = context . getContainer ( ) ; ",
  "4776": "final HttpServletResponse httpResponse = context . getResponse ( ) ; ",
  "4777": "if ( httpResponse . isCommitted ( ) ) { ",
  "4778": "String loginPage = container . getLoginPage ( ) ; ",
  "4779": "if ( HttpHeader . isXHR ( context . getRequest ( ) ) && loginPage != null ) { ",
  "4780": "httpResponse . setHeader ( HttpHeader . X_HEADER_LOCATION , container . getLoginPage ( ) ) ; ",
  "4781": "httpResponse . setStatus ( HttpServletResponse . SC_UNAUTHORIZED ) ; ",
  "4782": "} protected static void sendBadRequest ( RequestContext context ) throws IOException { ",
  "4783": "context . dump ( ) ; ",
  "4784": "context . getResponse ( ) . sendError ( HttpServletResponse . SC_BAD_REQUEST , context . getRequestURI ( ) ) ; ",
  "4785": "} protected static void sendNotFound ( RequestContext context , Exception exception ) throws IOException { ",
  "4786": "sendJsonObject ( context , new RemoteException ( exception ) , HttpServletResponse . SC_NOT_FOUND ) ; ",
  "4787": "} protected static void sendError ( RequestContext context , Throwable throwable ) throws IOException { ",
  "4788": "if ( throwable instanceof InvocationException && throwable . getCause ( ) != null ) { ",
  "4789": "if ( throwable instanceof InvocationTargetException ) { ",
  "4790": "throwable = ( ( InvocationTargetException ) throwable ) . getTargetException ( ) ; ",
  "4791": "if ( throwable instanceof BusinessException ) { ",
  "4792": "sendJsonObject ( context , throwable , HttpServletResponse . SC_BAD_REQUEST ) ; ",
  "4793": "dumpError ( context , throwable ) ; ",
  "4794": "sendJsonObject ( context , new RemoteException ( throwable ) , HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; ",
  "4795": "} protected static void dumpError ( RequestContext context , Throwable throwable ) { ",
  "4796": "} protected static void sendJsonObject ( RequestContext context , Object object , int statusCode ) throws IOException { ",
  "4797": "Json json = Classes . loadService ( Json . class ) ; ",
  "4798": "String buffer = json . stringify ( object ) ; ",
  "4799": "byte [ ] bytes = buffer . getBytes ( \"UTF-8\" ) ; ",
  "4800": "httpResponse . setStatus ( statusCode ) ; ",
  "4801": "httpResponse . setContentType ( ContentType . APPLICATION_JSON . getValue ( ) ) ; ",
  "4802": "httpResponse . setContentLength ( bytes . length ) ; ",
  "4803": "httpResponse . setHeader ( \"Content-Language\" , context . getLocale ( ) . toLanguageTag ( ) ) ; ",
  "4804": "httpResponse . getOutputStream ( ) . write ( bytes ) ; ",
  "4805": "httpResponse . getOutputStream ( ) . flush ( ) ; ",
  "4806": "( ( StreamHandler < ? > ) value ) . invokeHandler ( httpResponse . getOutputStream ( ) ) ; ",
  "4807": "} public void setSaveEnabled ( boolean val ) { ",
  "4808": "saveButton . setVisible ( val ) ; ",
  "4809": "setReadOnly ( ! val ) ; ",
  "4810": "entityForm . setReadOnly ( ! val ) ; ",
  "4811": "} protected void delete ( ) { ",
  "4812": "ConfirmDialog . show ( getUI ( ) , question , ( ConfirmDialog cd ) -> { ",
  "4813": "if ( cd . isConfirmed ( ) ) { ",
  "4814": "onDelete ( ) ; ",
  "4815": "} catch ( IOException | IllegalArgumentException | IllegalAccessException | IllegalStateException ex ) { ",
  "4816": "onError ( ex ) ; ",
  "4817": "} catch ( RuntimeException ex ) { ",
  "4818": "getUI ( ) . getErrorHandler ( ) . error ( new com . vaadin . server . ErrorEvent ( ex ) ) ; ",
  "4819": "} protected void onDelete ( ) ",
  "4820": "endpoint . delete ( ) ; ",
  "4821": "eventBus . post ( new ElementDeletedEvent < > ( endpoint ) ) ; ",
  "4822": "Constructor < ? > constructor = managedClass . getConstructor ( ) ; ",
  "4823": "instance = constructor . newInstance ( args ) ; ",
  "4824": "throw new InvocationException ( e ) ; ",
  "4825": "if ( managedClass . getInstanceType ( ) . equals ( InstanceType . PROXY ) ) { ",
  "4826": "ManagedProxyHandler handler = null ; ",
  "4827": "if ( managedClass . isTransactional ( ) ) { ",
  "4828": "TransactionalResource transactionalResource = managedClass . getContainer ( ) . getInstance ( TransactionalResource . class ) ; ",
  "4829": "handler = new ManagedProxyHandler ( transactionalResource , managedClass , instance ) ; ",
  "4830": "handler = new ManagedProxyHandler ( managedClass , instance ) ; ",
  "4831": "final ClassLoader classLoader = managedClass . getImplementationClass ( ) . getClassLoader ( ) ; ",
  "4832": "final Class < ? > [ ] interfaceClasses = managedClass . getInterfaceClasses ( ) ; ",
  "4833": "return ( T ) Proxy . newProxyInstance ( classLoader , interfaceClasses , handler ) ; ",
  "4834": "} public static Iterable < LinkHeader > getLinkHeaders ( HttpResponse response ) { ",
  "4835": "return stream ( response . getHeaders ( \"Link\" ) ) ",
  "4836": ". flatMap ( x -> stream ( x . getElements ( ) ) . map ( LinkHeader :: new ) ) ",
  "4837": ". collect ( toList ( ) ) ; ",
  "4838": "QueryParametersParser queryParameters = new QueryParametersParser ( httpRequest . getInputStream ( ) ) ; ",
  "4839": "return queryParameters . getArguments ( formalParameters ) ; ",
  "4840": "} catch ( SyntaxException e ) { ",
  "4841": "json . stringify ( new OutputStreamWriter ( httpResponse . getOutputStream ( ) , \"UTF-8\" ) , value ) ; ",
  "4842": "} public static < T > T getInstance ( Class < T > interfaceClass , Object ... args ) { ",
  "4843": "return getAppFactory ( ) . getInstance ( interfaceClass , args ) ; ",
  "4844": "} public static < T > T getInstance ( String instanceName , Class < T > interfaceClass , Object ... args ) { ",
  "4845": "return getAppFactory ( ) . getInstance ( instanceName , interfaceClass , args ) ; ",
  "4846": "} public static < T > T getOptionalInstance ( Class < T > interfaceClass , Object ... args ) { ",
  "4847": "return getAppFactory ( ) . getOptionalInstance ( interfaceClass , args ) ; ",
  "4848": "} public static < T > T getRemoteInstance ( String implementationURL , Class < ? super T > interfaceClass ) { ",
  "4849": "return getAppFactory ( ) . getRemoteInstance ( implementationURL , interfaceClass ) ; ",
  "4850": "} public static AppFactory getAppFactory ( ) { ",
  "4851": "AppFactory appFactory = tls . get ( ) ; ",
  "4852": "if ( appFactory == null ) { ",
  "4853": "return appFactory ; ",
  "4854": "} public static void addFilterRow ( Grid grid ) { ",
  "4855": "if ( grid . getHeaderRowCount ( ) < 2 ) { ",
  "4856": "grid . appendHeaderRow ( ) ; ",
  "4857": "Grid . HeaderRow headerRow = grid . getHeaderRow ( 1 ) ; ",
  "4858": "Container . Indexed container = grid . getContainerDataSource ( ) ; ",
  "4859": "container . getContainerPropertyIds ( ) . forEach ( pid -> { ",
  "4860": "TextField filterField = new TextField ( ) ; ",
  "4861": "filterField . setInputPrompt ( \"Filter\" ) ; ",
  "4862": "filterField . addStyleName ( ValoTheme . TEXTFIELD_SMALL ) ; ",
  "4863": "filterField . setWidth ( 100 , Sizeable . Unit . PERCENTAGE ) ; ",
  "4864": "filterField . addTextChangeListener ( event -> { ",
  "4865": "( ( Container . SimpleFilterable ) container ) . removeContainerFilters ( pid ) ; ",
  "4866": "if ( ! event . getText ( ) . isEmpty ( ) ) { ",
  "4867": "( ( Container . Filterable ) container ) . addContainerFilter ( new SimpleStringFilter ( pid , event . getText ( ) , true , false ) ) ; ",
  "4868": "headerRow . getCell ( pid ) . setComponent ( filterField ) ; ",
  "4869": "public < I > I newInstance ( ManagedClassSPI managedClass , Object ... args ) { ",
  "4870": "if ( interfaceClasses == null ) { ",
  "4871": "if ( interfaceClasses . length != 1 ) { ",
  "4872": "return ( I ) Classes . loadService ( interfaceClasses [ 0 ] ) ; ",
  "4873": "} public void setCandidates ( Collection < T > candidates ) { ",
  "4874": "twinColSelect . setContainerDataSource ( ",
  "4875": "container = new BeanItemContainer < > ( entityType , candidates ) ) ; ",
  "4876": "} protected static void loadXML ( InputStream inputStream , Loader loader ) throws ConfigException { ",
  "4877": "SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; ",
  "4878": "SAXParser parser = factory . newSAXParser ( ) ; ",
  "4879": "XMLReader reader = parser . getXMLReader ( ) ; ",
  "4880": "reader . setContentHandler ( loader ) ; ",
  "4881": "reader . parse ( new InputSource ( inputStream ) ) ; ",
  "4882": "} protected void onError ( Exception ex ) { ",
  "4883": "Notification . show ( \"Error\" , ex . getLocalizedMessage ( ) , Notification . Type . ERROR_MESSAGE ) ; ",
  "4884": "} protected Component buildAndBind ( Class < TEntity > entityType ) { ",
  "4885": "FormLayout layout = new FormLayout ( ) ; ",
  "4886": "getPropertiesWithoutAnnotation ( entityType , EditorHidden . class ) . forEach ( ( property ) -> { ",
  "4887": "if ( property . getWriteMethod ( ) == null ) { ",
  "4888": "Component component = buildAndBind ( property ) ; ",
  "4889": "component . setWidth ( 100 , Unit . PERCENTAGE ) ; ",
  "4890": "if ( component . getCaption ( ) == null ) { ",
  "4891": "component . setCaption ( propertyIdToHumanFriendly ( property . getName ( ) ) ) ; ",
  "4892": "if ( component instanceof DateField ) { ",
  "4893": "( ( DateField ) component ) . setResolution ( Resolution . SECOND ) ; ",
  "4894": "layout . addComponent ( component ) ; ",
  "4895": "getAnnotation ( entityType , property , Description . class ) ",
  "4896": ". ifPresent ( x -> layout . addComponent ( buildDescriptionComponent ( property , x . value ( ) ) ) ) ; ",
  "4897": "} private static List < Parameter > parse ( Reader reader ) throws IOException { ",
  "4898": "List < Parameter > parameters = new ArrayList < Parameter > ( ) ; ",
  "4899": "Parameter parameter = new Parameter ( ) ; ",
  "4900": "State state = State . NAME ; ",
  "4901": "int b = reader . read ( ) ; ",
  "4902": "if ( b == - 1 ) { ",
  "4903": "if ( parameter . isEmpty ( ) ) { ",
  "4904": "if ( parameters . isEmpty ( ) && parameter . isRawValue ( ) ) { ",
  "4905": "parameter . commitRawValue ( ) ; ",
  "4906": "parameter . commitValue ( ) ; ",
  "4907": "parameters . add ( parameter ) ; ",
  "4908": "char c = ( char ) b ; ",
  "4909": "case NAME : ",
  "4910": "case '=' : ",
  "4911": "state = State . VALUE ; ",
  "4912": "parameter . commitName ( ) ; ",
  "4913": "if ( parameter . getBuilder ( ) . isEmpty ( ) ) { ",
  "4914": "parameter . append ( c ) ; ",
  "4915": "case VALUE : ",
  "4916": "state = State . NAME ; ",
  "4917": "parameter = new Parameter ( ) ; ",
  "4918": "} public Object [ ] getArguments ( Type [ ] formalParameters ) { ",
  "4919": "if ( isObject ( formalParameters ) ) { ",
  "4920": "Object object = Classes . newInstance ( type ) ; ",
  "4921": "Field field = Classes . getField ( type , Strings . toMemberName ( parameter . getName ( ) ) ) ; ",
  "4922": "Classes . setFieldValue ( object , field , asObject ( parameter . getValue ( ) , field . getType ( ) ) ) ; ",
  "4923": "return new Object [ ] { object } ; ",
  "4924": "int i = 0 , argumentsCount = Math . min ( formalParameters . length , parameters . size ( ) ) ; ",
  "4925": "for ( i = 0 ; i < argumentsCount ; ++ i ) { ",
  "4926": "arguments [ i ] = asObject ( parameters . get ( i ) . getValue ( ) , formalParameters [ i ] ) ; ",
  "4927": "for ( ; i < formalParameters . length ; ++ i ) { ",
  "4928": "arguments [ i ] = null ; ",
  "4929": "for ( ; i < parameters . size ( ) ; ++ i ) { ",
  "4930": "private static < T > T asObject ( String value , Type type ) { ",
  "4931": "return ( T ) Types . getEmptyValue ( type ) ; ",
  "4932": "if ( ! Types . isArrayLike ( type ) ) { ",
  "4933": "if ( ! ( type instanceof Class ) ) { ",
  "4934": "if ( ConverterRegistry . hasType ( type ) ) { ",
  "4935": "return ConverterRegistry . getConverter ( ) . asObject ( value , ( Class < T > ) type ) ; ",
  "4936": "List < String > strings = Strings . split ( value , ',' ) ; ",
  "4937": "if ( type == String [ ] . class ) { ",
  "4938": "return ( T ) strings . toArray ( new String [ strings . size ( ) ] ) ; ",
  "4939": "if ( Types . isKindOf ( type , Collection . class ) ) { ",
  "4940": "Type collectionType = type ; ",
  "4941": "Class < ? > itemType = String . class ; ",
  "4942": "if ( type instanceof ParameterizedType ) { ",
  "4943": "collectionType = ( ( ParameterizedType ) type ) . getRawType ( ) ; ",
  "4944": "itemType = ( Class < ? > ) ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ; ",
  "4945": "Collection < Object > collection = Classes . newCollection ( collectionType ) ; ",
  "4946": "Converter converter = ConverterRegistry . getConverter ( ) ; ",
  "4947": "for ( String s : strings ) { ",
  "4948": "collection . add ( converter . asObject ( s . trim ( ) , itemType ) ) ; ",
  "4949": "return ( T ) collection ; ",
  "4950": "} private static boolean isObject ( Type [ ] formalParameters ) { ",
  "4951": "final Type type = formalParameters [ 0 ] ; ",
  "4952": "if ( Types . isPrimitive ( type ) ) { ",
  "4953": "if ( Types . isArrayLike ( type ) ) { ",
  "4954": "if ( Types . isMap ( type ) ) { ",
  "4955": "JsonReader reader = new JsonReader ( httpRequest . getInputStream ( ) , expectedStartSequence ( formalParameters ) ) ; ",
  "4956": "return json . parse ( reader , formalParameters ) ; ",
  "4957": "} catch ( JsonException e ) { ",
  "4958": "return json . parse ( new InputStreamReader ( inputStream , \"UTF-8\" ) , type ) ; ",
  "4959": "} catch ( JsonException | ClassCastException | UnsupportedEncodingException e ) { ",
  "4960": "} public Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Object ... args ) { ",
  "4961": "if ( args == null ) { ",
  "4962": "args = EMPTY_ARGS ; ",
  "4963": "if ( managedClass . getImplementationClass ( ) == null ) { ",
  "4964": "return args ; ",
  "4965": "final Class < ? > [ ] types = constructor . getParameterTypes ( ) ; ",
  "4966": "return preProcessArguments ( managedClass , constructor , types , args ) ; ",
  "4967": "} public Object [ ] preProcessArguments ( ManagedMethodSPI managedMethod , Object ... args ) { ",
  "4968": "final ManagedClassSPI managedClass = managedMethod . getDeclaringClass ( ) ; ",
  "4969": "final Method method = managedMethod . getMethod ( ) ; ",
  "4970": "final Class < ? > [ ] types = method . getParameterTypes ( ) ; ",
  "4971": "return preProcessArguments ( managedClass , method , types , args ) ; ",
  "4972": "} private static Object [ ] preProcessArguments ( ManagedClassSPI managedClass , Member member , Class < ? > [ ] formalParameters , Object ... args ) { ",
  "4973": "switch ( args . length ) { ",
  "4974": "args = new Object [ formalParameters . length ] ; ",
  "4975": "args [ i ] = getDependencyValue ( managedClass , formalParameters [ i ] ) ; ",
  "4976": "if ( args [ 0 ] instanceof VarArgs && formalParameters . length == 1 && formalParameters [ 0 ] . isArray ( ) ) { ",
  "4977": "args [ 0 ] = ( ( VarArgs < ? > ) args [ 0 ] ) . getArguments ( ) ; ",
  "4978": "if ( formalParameters . length != args . length ) { ",
  "4979": "for ( int i = 0 ; i < formalParameters . length ; ++ i ) { ",
  "4980": "if ( args [ i ] != null && ! Types . isInstanceOf ( args [ i ] , formalParameters [ i ] ) ) { ",
  "4981": "} public static boolean isXHR ( HttpServletRequest httpRequest ) { ",
  "4982": "String requestedWith = httpRequest . getHeader ( X_REQUESTED_WITH ) ; ",
  "4983": "return requestedWith != null ? requestedWith . equalsIgnoreCase ( XML_HTTP_REQUEST ) : false ; ",
  "4984": "} public static boolean isAndroid ( HttpServletRequest httpRequest ) { ",
  "4985": "return requestedWith != null ? requestedWith . equalsIgnoreCase ( ANDROID_USER_AGENT ) : false ; ",
  "4986": "return EMPTY_ARGUMENTS ; ",
  "4987": "Closeable closeable = StreamFactory . getInstance ( inputStream , type ) ; ",
  "4988": "threadLocal . set ( closeable ) ; ",
  "4989": "return closeable ; ",
  "4990": "public void persistInstance ( InstanceKey instanceKey , Object instance ) { ",
  "4991": "instancesPool . put ( instanceKey , instance ) ; ",
  "4992": "public void handle ( ElementEvent < TEntity > message ) { ",
  "4993": "if ( message . getEndpoint ( ) . getEntityType ( ) == this . endpoint . getEntityType ( ) ) { ",
  "4994": "refresh ( ) ; ",
  "4995": "} @ SneakyThrows ",
  "4996": "public static List < PropertyDescriptor > getProperties ( Class < ? > beanType ) { ",
  "4997": "LinkedList < PropertyDescriptor > properties = new LinkedList < > ( ) ; ",
  "4998": "for ( PropertyDescriptor property : Introspector . getBeanInfo ( beanType ) . getPropertyDescriptors ( ) ) { ",
  "4999": "if ( getAnnotation ( beanType , property , Id . class ) . isPresent ( ) || property . getName ( ) . equals ( \"name\" ) ) { ",
  "5000": "properties . addFirst ( property ) ; ",
  "5001": "} public static < TAnnotation extends Annotation > List < PropertyDescriptor > getPropertiesWithAnnotation ( Class < ? > beanType , Class < TAnnotation > annotationType ) { ",
  "5002": "LinkedList < PropertyDescriptor > result = new LinkedList < > ( ) ; ",
  "5003": "getProperties ( beanType ) . forEach ( property -> { ",
  "5004": "if ( property . getReadMethod ( ) != null && property . getReadMethod ( ) . getAnnotation ( annotationType ) != null ",
  "5005": "|| isFieldAnnotated ( beanType , property . getName ( ) , annotationType ) ) { ",
  "5006": "result . add ( property ) ; ",
  "5007": "} public static < TAnnotation extends Annotation > Optional < TAnnotation > getAnnotation ( Class < ? > beanType , PropertyDescriptor property , Class < TAnnotation > annotationType ) { ",
  "5008": "Optional < TAnnotation > annotation = stream ( property . getReadMethod ( ) . getAnnotationsByType ( annotationType ) ) . findAny ( ) ; ",
  "5009": "return annotation . isPresent ( ) ",
  "5010": "? annotation ",
  "5011": ": getAnnotationOnField ( beanType , property . getName ( ) , annotationType ) ; ",
  "5012": "} private static String log ( String message , Object ... args ) { ",
  "5013": "message = String . format ( message , args ) ; ",
  "5014": "java . util . logging . Logger . getLogger ( Server . class . getCanonicalName ( ) ) . log ( java . util . logging . Level . SEVERE , message ) ; ",
  "5015": "public void handleRequest ( RequestContext context ) throws IOException { ",
  "5016": "Matcher matcher = REQUEST_PATH_PATTERN . matcher ( context . getRequestPath ( ) ) ; ",
  "5017": "if ( ! matcher . find ( ) ) { ",
  "5018": "String interfaceName = className ( matcher . group ( 1 ) ) ; ",
  "5019": "String methodName = matcher . group ( 2 ) ; ",
  "5020": "ManagedMethodSPI managedMethod = null ; ",
  "5021": "ManagedClassSPI managedClass = getManagedClass ( container , interfaceName , httpRequest . getRequestURI ( ) ) ; ",
  "5022": "managedMethod = getManagedMethod ( managedClass , methodName , httpRequest . getRequestURI ( ) ) ; ",
  "5023": "final Type [ ] formalParameters = managedMethod . getParameterTypes ( ) ; ",
  "5024": "Object instance = container . getInstance ( managedClass ) ; ",
  "5025": "value = managedMethod . invoke ( instance , arguments ) ; ",
  "5026": "sendError ( context , t ) ; ",
  "5027": "if ( managedMethod . isVoid ( ) ) { ",
  "5028": "} private static ManagedClassSPI getManagedClass ( ContainerSPI container , String interfaceName , String requestURI ) throws ClassNotFoundException { ",
  "5029": "Class < ? > interfaceClass = Classes . forOptionalName ( interfaceName ) ; ",
  "5030": "throw new ClassNotFoundException ( requestURI ) ; ",
  "5031": "ManagedClassSPI managedClass = container . getManagedClass ( interfaceClass ) ; ",
  "5032": "if ( ! managedClass . isRemotelyAccessible ( ) ) { ",
  "5033": "return managedClass ; ",
  "5034": "} private static ManagedMethodSPI getManagedMethod ( ManagedClassSPI managedClass , String methodName , String requestURI ) throws NoSuchMethodException { ",
  "5035": "ManagedMethodSPI managedMethod = managedClass . getNetMethod ( methodName ) ; ",
  "5036": "throw new NoSuchMethodException ( requestURI ) ; ",
  "5037": "if ( Types . isKindOf ( managedMethod . getReturnType ( ) , Resource . class ) ) { ",
  "5038": "return managedMethod ; ",
  "5039": "} private static String className ( String classPath ) { ",
  "5040": "StringBuilder className = new StringBuilder ( ) ; ",
  "5041": "char separator = '.' ; ",
  "5042": "char c = classPath . charAt ( 1 ) ; ",
  "5043": "for ( int i = 1 ; ; ) { ",
  "5044": "if ( c == '/' ) { ",
  "5045": "c = separator ; ",
  "5046": "className . append ( c ) ; ",
  "5047": "if ( ++ i == classPath . length ( ) ) { ",
  "5048": "c = classPath . charAt ( i ) ; ",
  "5049": "if ( Character . isUpperCase ( c ) ) { ",
  "5050": "separator = '$' ; ",
  "5051": "return className . toString ( ) ; ",
  "5052": "public void serialize ( HttpServletResponse httpResponse ) throws IOException { ",
  "5053": "httpResponse . setHeader ( HttpHeader . CACHE_CONTROL , HttpHeader . NO_CACHE ) ; ",
  "5054": "httpResponse . addHeader ( HttpHeader . CACHE_CONTROL , HttpHeader . NO_STORE ) ; ",
  "5055": "httpResponse . setHeader ( HttpHeader . PRAGMA , HttpHeader . NO_CACHE ) ; ",
  "5056": "httpResponse . setDateHeader ( HttpHeader . EXPIRES , 0 ) ; ",
  "5057": "httpResponse . setContentType ( getContentType ( ) . getValue ( ) ) ; ",
  "5058": "serialize ( httpResponse . getOutputStream ( ) ) ; ",
  "5059": "} public String get ( String name ) { ",
  "5060": "if ( name . equals ( cookie . getName ( ) ) ) { ",
  "5061": "return cookie . getValue ( ) ; ",
  "5062": "} public void add ( String name , String value ) { ",
  "5063": "Cookie cookie = new Cookie ( name , value ) ; ",
  "5064": "cookie . setPath ( \"/\" ) ; ",
  "5065": "httpResponse . addCookie ( cookie ) ; ",
  "5066": "} public void add ( String name , Object value ) { ",
  "5067": "add ( name , ConverterRegistry . getConverter ( ) . asString ( value ) ) ; ",
  "5068": "} public void remove ( String name ) { ",
  "5069": "cookie . setMaxAge ( 0 ) ; ",
  "5070": "cookie . setValue ( \"\" ) ; ",
  "5071": "} public Iterator < Cookie > iterator ( ) { ",
  "5072": "return Collections . emptyIterator ( ) ; ",
  "5073": "return Arrays . asList ( cookies ) . iterator ( ) ; ",
  "5074": "if ( ! ( instance instanceof Configurable ) ) { ",
  "5075": "if ( ! ( instance instanceof OptionalConfigurable ) ) { ",
  "5076": "( ( Configurable ) instance ) . config ( config ) ; ",
  "5077": "} catch ( ConfigException e ) { ",
  "5078": "throw new BugError ( t ) ; ",
  "5079": "} public boolean verifyResponse ( String token ) throws NullPointerException { ",
  "5080": "return value . equals ( getValue ( tokenedImageFiles . get ( token ) ) ) ; ",
  "5081": "} private static String getValue ( File file ) throws NullPointerException { ",
  "5082": "public static URI ensureTrailingSlash ( URI uri ) { ",
  "5083": "URIBuilder builder = new URIBuilder ( uri ) ; ",
  "5084": "if ( ! builder . getPath ( ) . endsWith ( \"/\" ) ) { ",
  "5085": "builder . setPath ( builder . getPath ( ) + \"/\" ) ; ",
  "5086": "public void contextInitialized ( ServletContextEvent contextEvent ) { ",
  "5087": "final ServletContext servletContext = contextEvent . getServletContext ( ) ; ",
  "5088": "LogContext logContext = LogFactory . getLogContext ( ) ; ",
  "5089": "logContext . put ( LOG_CONTEXT_APP , servletContext . getContextPath ( ) . isEmpty ( ) ? TinyContainer . ROOT_CONTEXT : servletContext . getContextPath ( ) . substring ( 1 ) ) ; ",
  "5090": "Enumeration < String > parameterNames = servletContext . getInitParameterNames ( ) ; ",
  "5091": "while ( parameterNames . hasMoreElements ( ) ) { ",
  "5092": "final String name = parameterNames . nextElement ( ) ; ",
  "5093": "final String value = servletContext . getInitParameter ( name ) ; ",
  "5094": "contextParameters . setProperty ( name , value ) ; ",
  "5095": "ConfigBuilder builder = new TinyConfigBuilder ( servletContext , contextParameters ) ; ",
  "5096": "config ( builder . build ( ) ) ; ",
  "5097": "Factory . bind ( this ) ; ",
  "5098": "start ( ) ; ",
  "5099": "servletContext . setAttribute ( TinyContainer . ATTR_INSTANCE , this ) ; ",
  "5100": "public void contextDestroyed ( ServletContextEvent contextEvent ) { ",
  "5101": "public boolean login ( String username , String password ) { ",
  "5102": "getHttpServletRequest ( ) . login ( username , password ) ; ",
  "5103": "} catch ( ServletException e ) { ",
  "5104": "log . debug ( e ) ; ",
  "5105": "} private HttpServletRequest getHttpServletRequest ( ) { ",
  "5106": "RequestContext context = getInstance ( RequestContext . class ) ; ",
  "5107": "HttpServletRequest request = context . getRequest ( ) ; ",
  "5108": "if ( request == null ) { ",
  "5109": "return request ; ",
  "5110": "final ManagedMethodSPI managedMethod = managedClass . getManagedMethod ( method ) ; ",
  "5111": "if ( ! managedMethod . isTransactional ( ) ) { ",
  "5112": "return managedMethod . invoke ( managedInstance , args ) ; ",
  "5113": "if ( managedMethod . isImmutable ( ) ) { ",
  "5114": "return executeImmutableTransaction ( managedMethod , args ) ; ",
  "5115": "return executeMutableTransaction ( managedMethod , args ) ; ",
  "5116": "} private Object executeMutableTransaction ( ManagedMethodSPI managedMethod , Object [ ] args ) throws Throwable { ",
  "5117": "Transaction transaction = transactionalResource . createTransaction ( ) ; ",
  "5118": "transactionalResource . storeSession ( transaction . getSession ( ) ) ; ",
  "5119": "Object result = managedMethod . invoke ( managedInstance , args ) ; ",
  "5120": "if ( transaction . unused ( ) ) { ",
  "5121": "transaction . rollback ( ) ; ",
  "5122": "if ( transaction . close ( ) ) { ",
  "5123": "transactionalResource . releaseSession ( ) ; ",
  "5124": "} private Object executeImmutableTransaction ( ManagedMethodSPI managedMethod , Object [ ] args ) throws Throwable { ",
  "5125": "Transaction transaction = transactionalResource . createReadOnlyTransaction ( ) ; ",
  "5126": "} private static Throwable throwable ( Throwable throwable , String message , Object ... args ) { ",
  "5127": "Throwable t = throwable ; ",
  "5128": "if ( t instanceof InvocationException && t . getCause ( ) != null ) { ",
  "5129": "t = t . getCause ( ) ; ",
  "5130": "if ( t instanceof InvocationTargetException && ( ( InvocationTargetException ) t ) . getTargetException ( ) != null ) { ",
  "5131": "t = ( ( InvocationTargetException ) t ) . getTargetException ( ) ; ",
  "5132": "log . dump ( message , t ) ; ",
  "5133": "public Object getInstance ( InstanceKey instanceKey ) { ",
  "5134": "ThreadLocal < Object > tls = instancesPool . get ( instanceKey ) ; ",
  "5135": "if ( tls == null ) { ",
  "5136": "synchronized ( instancesPool ) { ",
  "5137": "tls = instancesPool . get ( instanceKey ) ; ",
  "5138": "tls = new ThreadLocal < > ( ) ; ",
  "5139": "instancesPool . put ( instanceKey , tls ) ; ",
  "5140": "return tls . get ( ) ; ",
  "5141": "tls . set ( instance ) ; ",
  "5142": "for ( ThreadLocal < Object > threadLocal : instancesPool . values ( ) ) { ",
  "5143": "threadLocal . remove ( ) ; ",
  "5144": "instancesPool . clear ( ) ; ",
  "5145": "log . trace ( \"init(ServletConfig)\" ) ; ",
  "5146": "eventStreamManager = container . getInstance ( EventStreamManager . class ) ; ",
  "5147": "log . trace ( \"handleRequest(RequestContext)\" ) ; ",
  "5148": "final String sessionID = getEventStreamSessionID ( context . getRequestPath ( ) ) ; ",
  "5149": "EventStream eventStream = eventStreamManager . createEventStream ( sessionID ) ; ",
  "5150": "if ( eventStream == null ) { ",
  "5151": "httpResponse . setContentType ( \"text/event-stream;charset=UTF-8\" ) ; ",
  "5152": "httpResponse . setHeader ( HttpHeader . CONNECTION , HttpHeader . KEEP_ALIVE ) ; ",
  "5153": "eventStream . setRemoteHost ( context . getRemoteHost ( ) ) ; ",
  "5154": "eventStream . setWriter ( httpResponse . getWriter ( ) ) ; ",
  "5155": "eventStream . onOpen ( ) ; ",
  "5156": "while ( eventStream . loop ( ) ) { ",
  "5157": "eventStream . onClose ( ) ; ",
  "5158": "eventStreamManager . destroyEventStream ( eventStream ) ; ",
  "5159": "} private static String getEventStreamSessionID ( String requestPath ) { ",
  "5160": "int extensionSeparator = requestPath . lastIndexOf ( '.' ) ; ",
  "5161": "if ( extensionSeparator == - 1 ) { ",
  "5162": "extensionSeparator = requestPath . length ( ) ; ",
  "5163": "int pathSeparator = requestPath . lastIndexOf ( '/' , extensionSeparator ) + 1 ; ",
  "5164": "return requestPath . substring ( pathSeparator , extensionSeparator ) ; ",
  "5165": "onSave ( ) ; ",
  "5166": "} catch ( IOException | IllegalArgumentException | IllegalAccessException | Validator . InvalidValueException ex ) { ",
  "5167": "public void init ( FilterConfig config ) throws UnavailableException { ",
  "5168": "log . trace ( \"init(FilterConfig)\" ) ; ",
  "5169": "String localeParameter = config . getInitParameter ( PARAM_LOCALE ) ; ",
  "5170": "if ( localeParameter != null ) { ",
  "5171": "locales = Strings . split ( localeParameter , ',' ) ; ",
  "5172": "for ( String locale : locales ) { ",
  "5173": "String securityDomainParameter = config . getInitParameter ( PARAM_SECURITY_DOMAIN ) ; ",
  "5174": "if ( securityDomainParameter != null ) { ",
  "5175": "securityDomains = Strings . split ( securityDomainParameter , ',' ) ; ",
  "5176": "for ( String securityDomain : securityDomains ) { ",
  "5177": "public void doFilter ( ServletRequest request , ServletResponse response , FilterChain chain ) throws IOException , ServletException { ",
  "5178": "String contextPath = httpRequest . getContextPath ( ) ; ",
  "5179": "String requestPath = requestURI . substring ( contextPath . length ( ) ) ; ",
  "5180": "File file = new File ( request . getServletContext ( ) . getRealPath ( requestPath ) ) ; ",
  "5181": "String queryString = httpRequest . getQueryString ( ) ; ",
  "5182": "context . setRequestURL ( queryString != null ? Strings . concat ( requestURI , '?' , queryString ) : requestURI ) ; ",
  "5183": "if ( ! locales . isEmpty ( ) ) { ",
  "5184": "if ( startsWith ( requestPath , locale ) ) { ",
  "5185": "requestPath = requestPath . substring ( locale . length ( ) + 1 ) ; ",
  "5186": "context . setLocale ( new Locale ( locale ) ) ; ",
  "5187": "if ( startsWith ( requestPath , securityDomain ) ) { ",
  "5188": "requestPath = requestPath . substring ( securityDomain . length ( ) + 1 ) ; ",
  "5189": "context . setSecurityDomain ( securityDomain ) ; ",
  "5190": "context . setRequestPath ( requestPath ) ; ",
  "5191": "request . getRequestDispatcher ( requestPath ) . forward ( request , response ) ; ",
  "5192": "} private static boolean startsWith ( String requestPath , String pathComponent ) { ",
  "5193": "if ( requestPath . charAt ( 0 ) != '/' ) { ",
  "5194": "for ( int j = 0 ; i < requestPath . length ( ) ; ++ i , ++ j ) { ",
  "5195": "if ( requestPath . charAt ( i ) == '/' ) { ",
  "5196": "return j == pathComponent . length ( ) ; ",
  "5197": "if ( j == pathComponent . length ( ) ) { ",
  "5198": "if ( Character . toLowerCase ( requestPath . charAt ( i ) ) != Character . toLowerCase ( pathComponent . charAt ( j ) ) ) { ",
  "5199": "} protected Window asWindow ( ) { ",
  "5200": "if ( containingWindow == null ) { ",
  "5201": "containingWindow = new Window ( getCaption ( ) , this ) ; ",
  "5202": "containingWindow . setWidth ( 80 , Unit . PERCENTAGE ) ; ",
  "5203": "containingWindow . setHeight ( 80 , Unit . PERCENTAGE ) ; ",
  "5204": "containingWindow . center ( ) ; ",
  "5205": "return containingWindow ; ",
  "5206": "HttpSession httpSession = getSession ( instanceKey ) ; ",
  "5207": "return httpSession . getAttribute ( instanceKey . getValue ( ) ) ; ",
  "5208": "httpSession . setAttribute ( instanceKey . getValue ( ) , instance ) ; ",
  "5209": "} private HttpSession getSession ( InstanceKey instanceKey ) { ",
  "5210": "RequestContext requestContext = appFactory . getInstance ( RequestContext . class ) ; ",
  "5211": "HttpServletRequest httpRequest = requestContext . getRequest ( ) ; ",
  "5212": "if ( httpRequest == null ) { ",
  "5213": "return httpRequest . getSession ( true ) ; ",
  "5214": "httpResponse . setContentType ( contentType ) ; ",
  "5215": "httpResponse . setHeader ( HttpHeader . CONTENT_LENGTH , Long . toString ( file . length ( ) ) ) ; ",
  "5216": "Files . copy ( file , httpResponse . getOutputStream ( ) ) ; ",
  "5217": "} public void readMeta ( ) ",
  "5218": "executeAndHandle ( Request . Get ( uri ) ) ; ",
  "5219": "for ( ManagedMethodSPI method : container . getManagedMethods ( ) ) { ",
  "5220": "if ( Types . isKindOf ( method . getReturnType ( ) , Resource . class ) ) { ",
  "5221": "resourceMethods . put ( key ( method ) , method ) ; ",
  "5222": "protected void handleRequest ( RequestContext context ) throws ServletException , IOException { ",
  "5223": "final HttpServletRequest httpRequest = context . getRequest ( ) ; ",
  "5224": "Resource resource = null ; ",
  "5225": "ManagedMethodSPI method = resourceMethods . get ( key ( context . getRequestPath ( ) ) ) ; ",
  "5226": "throw new NoSuchMethodException ( httpRequest . getRequestURI ( ) ) ; ",
  "5227": "final Type [ ] formalParameters = method . getParameterTypes ( ) ; ",
  "5228": "Object controller = container . getInstance ( method . getDeclaringClass ( ) ) ; ",
  "5229": "resource = method . invoke ( controller , arguments ) ; ",
  "5230": "if ( resource == null ) { ",
  "5231": "if ( loginPage != null ) { ",
  "5232": "httpResponse . sendRedirect ( loginPage ) ; ",
  "5233": "httpRequest . authenticate ( httpResponse ) ; ",
  "5234": "} catch ( NoSuchMethodException | IllegalArgumentException e ) { ",
  "5235": "dumpError ( context , e ) ; ",
  "5236": "httpResponse . sendError ( HttpServletResponse . SC_NOT_FOUND , httpRequest . getRequestURI ( ) ) ; ",
  "5237": "if ( e . getCause ( ) instanceof NoSuchResourceException ) { ",
  "5238": "httpResponse . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , e . getCause ( ) . getMessage ( ) ) ; ",
  "5239": "resource . serialize ( httpResponse ) ; ",
  "5240": "} private static String key ( ManagedMethodSPI resourceMethod ) { ",
  "5241": "StringBuilder key = new StringBuilder ( ) ; ",
  "5242": "if ( resourceMethod . getDeclaringClass ( ) . getRequestPath ( ) != null ) { ",
  "5243": "key . append ( '/' ) ; ",
  "5244": "key . append ( resourceMethod . getDeclaringClass ( ) . getRequestPath ( ) ) ; ",
  "5245": "key . append ( resourceMethod . getRequestPath ( ) ) ; ",
  "5246": "return key . toString ( ) ; ",
  "5247": "} protected HttpEntity getContent ( ) ",
  "5248": "Request request = Request . Get ( uri ) ; ",
  "5249": "request = request . addHeader ( IF_NONE_MATCH , last . etag ) ; ",
  "5250": "if ( response . getStatusLine ( ) . getStatusCode ( ) == SC_NOT_MODIFIED && last != null ) { ",
  "5251": "return last . content ; ",
  "5252": "Header etagHeader = response . getFirstHeader ( HttpHeaders . ETAG ) ; ",
  "5253": "last = ( etagHeader == null ) ",
  "5254": "? null ",
  "5255": ": new Memory ( etagHeader . getValue ( ) , response . getEntity ( ) ) ; ",
  "5256": "return response . getEntity ( ) ; ",
  "5257": "} protected HttpResponse putContent ( HttpEntity content ) ",
  "5258": "Request request = Request . Put ( uri ) . body ( content ) ; ",
  "5259": "request . addHeader ( HttpHeaders . IF_MATCH , last . etag ) ; ",
  "5260": "return executeAndHandle ( request ) ; ",
  "5261": "} protected HttpResponse deleteContent ( ) ",
  "5262": "Request request = Request . Delete ( uri ) ; ",
  "5263": "if ( ! ( instance instanceof ManagedPostConstruct ) ) { ",
  "5264": "ManagedPostConstruct managedInstance = ( ManagedPostConstruct ) instance ; ",
  "5265": "managedInstance . postConstruct ( ) ; ",
  "5266": "public void preDestroy ( ) { ",
  "5267": "if ( eventStreams . isEmpty ( ) ) { ",
  "5268": "for ( EventStream eventStream : eventStreams . toArray ( new EventStream [ 0 ] ) ) { ",
  "5269": "eventStream . close ( ) ; ",
  "5270": "} @ Remote ",
  "5271": "@ Public ",
  "5272": "public String subscribe ( EventStreamConfig config ) { ",
  "5273": "SessionID sessionID = new SessionID ( ) ; ",
  "5274": "sessions . put ( sessionID , config ) ; ",
  "5275": "return sessionID . getValue ( ) ; ",
  "5276": "} protected void handleAllowedMethods ( ) { ",
  "5277": "endpoint . isDownloadAllowed ( ) . ifPresent ( this :: setDownloadEnabled ) ; ",
  "5278": "endpoint . isUploadAllowed ( ) . ifPresent ( this :: setUploadEnabled ) ; ",
  "5279": "endpoint . isDeleteAllowed ( ) . ifPresent ( this :: setDeleteEnabled ) ; ",
  "5280": "} protected void upload ( ) { ",
  "5281": "onUpload ( ) ; ",
  "5282": "eventBus . post ( new BlobUploadEvent ( endpoint ) ) ; ",
  "5283": "ConfirmDialog . show ( getUI ( ) , question , new ConfirmDialog . Listener ( ) { ",
  "5284": "public void onClose ( ConfirmDialog cd ) { ",
  "5285": "} public synchronized void period ( final PeriodicTask periodicTask , long period ) { ",
  "5286": "TimerTask task = new PeriodicTaskImpl ( periodicTask ) ; ",
  "5287": "this . tasks . put ( periodicTask , task ) ; ",
  "5288": "this . timer . schedule ( task , 0L , period ) ; ",
  "5289": "} public synchronized void timeout ( final TimeoutTask timeoutTask , long timeout ) { ",
  "5290": "TimerTask task = this . tasks . get ( timeoutTask ) ; ",
  "5291": "if ( task != null ) { ",
  "5292": "this . tasks . values ( ) . remove ( task ) ; ",
  "5293": "task = new TimeoutTaskImpl ( timeoutTask ) ; ",
  "5294": "this . tasks . put ( timeoutTask , task ) ; ",
  "5295": "this . timer . schedule ( task , timeout ) ; ",
  "5296": "} private void purgeTask ( Object task ) { ",
  "5297": "TimerTask timerTask = this . tasks . get ( task ) ; ",
  "5298": "this . tasks . values ( ) . remove ( timerTask ) ; ",
  "5299": "public void config ( Config config ) throws ConfigException , IOException { ",
  "5300": "for ( Config repositorySection : config . findChildren ( \"repository\" ) ) { ",
  "5301": "String className = repositorySection . getAttribute ( \"class\" , DEF_IMPLEMENTATION ) ; ",
  "5302": "Class < ? > implementation = Classes . forOptionalName ( className ) ; ",
  "5303": "if ( implementation == null ) { ",
  "5304": "if ( ! Types . isKindOf ( implementation , View . class ) ) { ",
  "5305": "if ( ! Classes . isInstantiable ( implementation ) ) { ",
  "5306": "Class < ? extends View > viewImplementation = ( Class < ? extends View > ) implementation ; ",
  "5307": "String repositoryPath = repositorySection . getAttribute ( \"path\" ) ; ",
  "5308": "if ( repositoryPath == null ) { ",
  "5309": "String filesPattern = repositorySection . getAttribute ( \"files-pattern\" ) ; ",
  "5310": "if ( filesPattern == null ) { ",
  "5311": "ConfigBuilder builder = new I18nRepository . ConfigBuilder ( repositoryPath , filesPattern ) ; ",
  "5312": "I18nRepository repository = new I18nRepository ( builder . build ( ) ) ; ",
  "5313": "if ( viewsMetaPool == null ) { ",
  "5314": "viewsMetaPool = repository . getPoolInstance ( ) ; ",
  "5315": "Properties properties = repositorySection . getProperties ( ) ; ",
  "5316": "for ( I18nFile template : repository ) { ",
  "5317": "ViewMeta meta = new ViewMeta ( template . getFile ( ) , viewImplementation , properties ) ; ",
  "5318": "if ( viewsMetaPool . put ( meta . getName ( ) , meta , template . getLocale ( ) ) ) { ",
  "5319": "public View getView ( String viewName ) { ",
  "5320": "RequestContext context = Factory . getInstance ( RequestContext . class ) ; ",
  "5321": "ViewMeta meta = viewsMetaPool . get ( viewName , context . getLocale ( ) ) ; ",
  "5322": "if ( meta == null ) { ",
  "5323": "AbstractView view = ( AbstractView ) Classes . newInstance ( meta . getImplementation ( ) ) ; ",
  "5324": "view . setMeta ( meta ) ; ",
  "5325": "return view ; ",
  "5326": "imagesRepositoryDir = config . getProperty ( \"captcha.repository.path\" , File . class ) ; ",
  "5327": "if ( imagesRepositoryDir == null ) { ",
  "5328": "challengeSetSize = config . getProperty ( \"captcha.set.size\" , int . class , 6 ) ; ",
  "5329": "if ( ! imagesRepositoryDir . exists ( ) ) { ",
  "5330": "if ( ! imagesRepositoryDir . isDirectory ( ) ) { ",
  "5331": "if ( ! imagesRepositoryDir . isAbsolute ( ) ) { ",
  "5332": "int imagesCount = imagesRepositoryDir . list ( ) . length ; ",
  "5333": "if ( imagesCount == 0 ) { ",
  "5334": "if ( imagesCount <= challengeSetSize ) { ",
  "5335": "public Challenge getChallenge ( int captchaIndex ) { ",
  "5336": "\"\\t<captcha>\\r\\n\" + ",
  "5337": "\"\\t</captcha>\" ) ; ",
  "5338": "Challenge challenge = new Challenge ( imagesRepositoryDir , challengeSetSize ) ; ",
  "5339": "getChallenges ( ) . put ( captchaIndex , challenge ) ; ",
  "5340": "return challenge ; ",
  "5341": "public Challenge verifyResponse ( int captchaIndex , String challengeResponse ) throws IllegalArgumentException , IllegalStateException { ",
  "5342": "Challenge challenge = getChallenges ( ) . get ( captchaIndex ) ; ",
  "5343": "if ( challenge == null ) { ",
  "5344": "return challenge . verifyResponse ( challengeResponse ) ? null : getChallenge ( captchaIndex ) ; ",
  "5345": "@ RequestPath ( \"image\" ) ",
  "5346": "public Resource getImage ( String token ) throws IllegalArgumentException , NoSuchResourceException { ",
  "5347": "for ( Challenge challenge : getChallenges ( ) . values ( ) ) { ",
  "5348": "File image = challenge . getImage ( token ) ; ",
  "5349": "return new FileResource ( image ) ; ",
  "5350": "throw new NoSuchResourceException ( ) ; ",
  "5351": "} private Map < Integer , Challenge > getChallenges ( ) { ",
  "5352": "HttpSession session = context . getInstance ( RequestContext . class ) . getSession ( true ) ; ",
  "5353": "Map < Integer , Challenge > challenges = ( Map < Integer , Challenge > ) session . getAttribute ( CHALENGES_KEY ) ; ",
  "5354": "if ( challenges == null ) { ",
  "5355": "challenges = new HashMap < > ( ) ; ",
  "5356": "session . setAttribute ( CHALENGES_KEY , challenges ) ; ",
  "5357": "return challenges ; ",
  "5358": "} public void trigger ( ) { ",
  "5359": "onTrigger ( ) ; ",
  "5360": "Notification . show ( getCaption ( ) , \"Successful.\" , Notification . Type . TRAY_NOTIFICATION ) ; ",
  "5361": "} protected void onTrigger ( ) ",
  "5362": "endpoint . trigger ( ) ; ",
  "5363": "eventBus . post ( new TriggerEvent ( endpoint ) ) ; ",
  "5364": "} public void registered ( ResteasyProviderFactory factory ) { ",
  "5365": "ResourceConstructor constructor = this . resourceClass . getConstructor ( ) ; ",
  "5366": "final Class < ? > clazz = this . resourceClass . getClazz ( ) ; ",
  "5367": "final Class < ? > aClass = DI . getSubTypesWithoutInterfacesAndGeneratedOf ( clazz ) . stream ( ) . findFirst ( ) . get ( ) ; ",
  "5368": "constructor = ResourceBuilder . constructor ( aClass ) ; ",
  "5369": "throw new RuntimeException ( Messages . MESSAGES . unableToFindPublicConstructorForClass ( this . scannableClass . getName ( ) ) ) ; ",
  "5370": "this . constructorInjector = factory . getInjectorFactory ( ) . createConstructor ( constructor , factory ) ; ",
  "5371": "this . propertyInjector = factory . getInjectorFactory ( ) . createPropertyInjector ( this . resourceClass , factory ) ; ",
  "5372": "} @ GET ( ) ",
  "5373": "@ Path ( ACTIVATE_METRICS_FOR_CLASS ) ",
  "5374": "public String activateMetricsForClass ( @ QueryParam ( QUERY_PARAM_CLASS_FQ_NAME ) final String classFQN ) { ",
  "5375": "if ( classFQN != null && ! classFQN . isEmpty ( ) ) { ",
  "5376": "final Class < ? > aClass = Class . forName ( classFQN ) ; ",
  "5377": "DI . activateMetrics ( aClass ) ; ",
  "5378": "return e . getMessage ( ) ; ",
  "5379": "return OK ; ",
  "5380": "@ Path ( DE_ACTIVATE_METRICS_FOR_CLASS ) ",
  "5381": "public String deActivateMetricsForClass ( @ QueryParam ( QUERY_PARAM_CLASS_FQ_NAME ) final String classFQN ) { ",
  "5382": "DI . deActivateMetrics ( aClass ) ; ",
  "5383": "return NOT_OK ; ",
  "5384": "} private static DeploymentInfo createServletDeploymentInfos ( ) { ",
  "5385": "final Set < Class < ? > > typesAnnotatedWith = DI . getTypesAnnotatedWith ( WebServlet . class , true ) ; ",
  "5386": "final List < ServletInfo > servletInfos = typesAnnotatedWith ",
  "5387": ". filter ( s -> new ReflectionUtils ( ) . checkInterface ( s , HttpServlet . class ) ) ",
  "5388": ". map ( c -> { ",
  "5389": "Class < HttpServlet > servletClass = ( Class < HttpServlet > ) c ; ",
  "5390": "final ServletInfo servletInfo = servlet ( c . getSimpleName ( ) , servletClass , new ServletInstanceFactory < > ( servletClass ) ) ; ",
  "5391": "if ( c . isAnnotationPresent ( WebInitParam . class ) ) { ",
  "5392": "final WebInitParam [ ] annotationsByType = c . getAnnotationsByType ( WebInitParam . class ) ; ",
  "5393": "for ( WebInitParam webInitParam : annotationsByType ) { ",
  "5394": "final String value = webInitParam . value ( ) ; ",
  "5395": "final String name = webInitParam . name ( ) ; ",
  "5396": "servletInfo . addInitParam ( name , value ) ; ",
  "5397": "final WebServlet annotation = c . getAnnotation ( WebServlet . class ) ; ",
  "5398": "final String [ ] urlPatterns = annotation . urlPatterns ( ) ; ",
  "5399": "for ( String urlPattern : urlPatterns ) { ",
  "5400": "servletInfo . addMapping ( urlPattern ) ; ",
  "5401": "servletInfo . setAsyncSupported ( annotation . asyncSupported ( ) ) ; ",
  "5402": "return servletInfo ; ",
  "5403": ". filter ( servletInfo -> ! servletInfo . getMappings ( ) . isEmpty ( ) ) ",
  "5404": "final Set < Class < ? > > weblisteners = DI . getTypesAnnotatedWith ( WebListener . class ) ; ",
  "5405": "final List < ListenerInfo > listenerInfos = weblisteners . stream ( ) ",
  "5406": ". map ( c -> new ListenerInfo ( ( Class < ? extends EventListener > ) c ) ) ",
  "5407": "final DeploymentInfo deploymentInfo = deployment ( ) ",
  "5408": ". setClassLoader ( Main . class . getClassLoader ( ) ) ",
  "5409": ". setContextPath ( MYAPP ) ",
  "5410": ". setDeploymentName ( \"ROOT\" + \".war\" ) ",
  "5411": ". setDefaultEncoding ( \"UTF-8\" ) ; ",
  "5412": "final Boolean shiroActive = Boolean . valueOf ( System . getProperty ( SHIRO_ACTIVE_PROPERTY , \"false\" ) ) ; ",
  "5413": "final Boolean stagemonitorActive = Boolean . valueOf ( System . getProperty ( STAGEMONITOR_ACTIVE_PROPERTY , \"false\" ) ) ; ",
  "5414": "if ( shiroActive ) addShiroFilter ( ) . apply ( deploymentInfo , DEFAULT_SHIRO_FILTER_NAME , DEFAULT_FILTER_MAPPING ) ; ",
  "5415": "if ( stagemonitorActive ) addStagemonitor ( ) . apply ( deploymentInfo ) ; ",
  "5416": "return deploymentInfo ",
  "5417": ". addListeners ( listenerInfos ) ",
  "5418": ". addServletContextAttribute ( WebSocketDeploymentInfo . ATTRIBUTE_NAME , new WebSocketDeploymentInfo ( ) ) ",
  "5419": ". addServlets ( servletInfos ) ; ",
  "5420": "} private static Object [ ] rehash ( final Object [ ] values , final int newSize ) ",
  "5421": "Object [ ] newArray = new Object [ newSize ] ; ",
  "5422": "for ( Object value : values ) ",
  "5423": "newArray [ predictedPosition ( newArray , value , value . hashCode ( ) ) ] = value ; ",
  "5424": "} private static int predictedPosition ( final Object [ ] array , final Object object , final int hash ) ",
  "5425": "int arraySize = array . length ; ",
  "5426": "int i = Math . abs ( hash ) % arraySize ; ",
  "5427": "Object element = array [ i ] ; ",
  "5428": "while ( element != null ) ",
  "5429": "if ( element . equals ( object ) ) ",
  "5430": "i = ( i + 1 ) % arraySize ; ",
  "5431": "element = array [ i ] ; ",
  "5432": "} private void findNextSeparator ( ) ",
  "5433": "mLastSeparatorPos = mNextSeparatorPos ; ",
  "5434": "while ( ++ mNextSeparatorPos < mValue . length ( ) ) ",
  "5435": "char c = mValue . charAt ( mNextSeparatorPos ) ; ",
  "5436": "if ( c == mSeparator ) ",
  "5437": "boolean isQuoted = false ; ",
  "5438": "if ( ! isQuoted ) ",
  "5439": "else if ( c == '\"' ) ",
  "5440": "isQuoted = ! isQuoted ; ",
  "5441": "public void initialize ( InitContext initContext ) { ",
  "5442": "if ( initContext . projectStage ( ) . isPresent ( ) ) { ",
  "5443": "StageConfig stageConfig = initContext . projectStage ( ) . get ( ) ; ",
  "5444": "String configvalue = stageConfig . resolve ( SwarmProperties . CONSUL_URL ) ",
  "5445": ". withDefault ( null ) ",
  "5446": "this . url = configvalue != null ? new URL ( configvalue ) : DEFAULT_URL ; ",
  "5447": "} private static PrintStream unbuffered ( final PrintStream stream ) ",
  "5448": "return new PrintStream ( stream , true , \"UTF-8\" ) ; ",
  "5449": "catch ( UnsupportedEncodingException e ) ",
  "5450": "return new PrintStream ( stream , true ) ; ",
  "5451": "} public void subscribe ( final String pattern , ",
  "5452": "final Object instance , ",
  "5453": "final String methodName ) ",
  "5454": "throws NoSuchMethodException ",
  "5455": "this . subscribe ( pattern , new FunctionObject9 ( instance , methodName ) ) ; ",
  "5456": "final Class < ? > clazz , ",
  "5457": "this . subscribe ( pattern , new FunctionObject9 ( this , clazz , methodName ) ) ; ",
  "5458": "final FunctionInterface9 callback ) ",
  "5459": "final String s = this . prefix + pattern ; ",
  "5460": "LinkedList < FunctionInterface9 > callback_list = this . callbacks . get ( s ) ; ",
  "5461": "if ( callback_list == null ) ",
  "5462": "callback_list = new LinkedList < FunctionInterface9 > ( ) ; ",
  "5463": "callback_list . addLast ( callback ) ; ",
  "5464": "this . callbacks . put ( s , callback_list ) ; ",
  "5465": "OtpOutputStream subscribe = new OtpOutputStream ( ) ; ",
  "5466": "subscribe . write ( OtpExternal . versionTag ) ; ",
  "5467": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"subscribe\" ) , ",
  "5468": "new OtpErlangString ( pattern ) } ; ",
  "5469": "subscribe . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5470": "send ( subscribe ) ; ",
  "5471": "} public int subscribe_count ( final String pattern ) ",
  "5472": "throws InvalidInputException , ",
  "5473": "TerminateException ",
  "5474": "OtpOutputStream subscribe_count = new OtpOutputStream ( ) ; ",
  "5475": "subscribe_count . write ( OtpExternal . versionTag ) ; ",
  "5476": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"subscribe_count\" ) , ",
  "5477": "subscribe_count . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5478": "send ( subscribe_count ) ; ",
  "5479": "return ( Integer ) poll_request ( null , false ) ; ",
  "5480": "catch ( MessageDecodingException e ) ",
  "5481": "e . printStackTrace ( API . err ) ; ",
  "5482": "} public void unsubscribe ( final String pattern ) ",
  "5483": "throws InvalidInputException ",
  "5484": "throw new InvalidInputException ( ) ; ",
  "5485": "callback_list . removeFirst ( ) ; ",
  "5486": "if ( callback_list . isEmpty ( ) ) ",
  "5487": "this . callbacks . remove ( s ) ; ",
  "5488": "OtpOutputStream unsubscribe = new OtpOutputStream ( ) ; ",
  "5489": "unsubscribe . write ( OtpExternal . versionTag ) ; ",
  "5490": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"unsubscribe\" ) , ",
  "5491": "unsubscribe . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5492": "send ( unsubscribe ) ; ",
  "5493": "} public TransId send_async ( final String name , ",
  "5494": "final byte [ ] request ) ",
  "5495": "MessageDecodingException , ",
  "5496": "return send_async ( name , ( \"\" ) . getBytes ( ) , request , ",
  "5497": "this . timeout_async , this . priority_default ) ; ",
  "5498": "} public Response send_sync ( final String name , ",
  "5499": "return send_sync ( name , ( \"\" ) . getBytes ( ) , request , ",
  "5500": "this . timeout_sync , this . priority_default ) ; ",
  "5501": "final byte [ ] request_info , ",
  "5502": "final byte [ ] request , ",
  "5503": "final Integer timeout , ",
  "5504": "final Byte priority ) ",
  "5505": "OtpOutputStream send_sync = new OtpOutputStream ( ) ; ",
  "5506": "send_sync . write ( OtpExternal . versionTag ) ; ",
  "5507": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"send_sync\" ) , ",
  "5508": "new OtpErlangString ( name ) , ",
  "5509": "new OtpErlangBinary ( request_info ) , ",
  "5510": "new OtpErlangBinary ( request ) , ",
  "5511": "new OtpErlangUInt ( timeout ) , ",
  "5512": "new OtpErlangInt ( priority ) } ; ",
  "5513": "send_sync . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5514": "send ( send_sync ) ; ",
  "5515": "return ( Response ) poll_request ( null , false ) ; ",
  "5516": "catch ( OtpErlangRangeException e ) ",
  "5517": "} public ArrayList < TransId > mcast_async ( final String name , ",
  "5518": "return mcast_async ( name , new byte [ 0 ] , request , ",
  "5519": "} public void forward_ ( final Integer request_type , ",
  "5520": "final Byte priority , ",
  "5521": "final byte [ ] trans_id , ",
  "5522": "final OtpErlangPid pid ) ",
  "5523": "throws ForwardAsyncException , ",
  "5524": "ForwardSyncException , ",
  "5525": "InvalidInputException ",
  "5526": "if ( request_type == API . ASYNC ) ",
  "5527": "forward_async ( name , request_info , request , ",
  "5528": "timeout , priority , trans_id , pid ) ; ",
  "5529": "else if ( request_type == API . SYNC ) ",
  "5530": "forward_sync ( name , request_info , request , ",
  "5531": "} public void forward_async ( final String name , ",
  "5532": "Integer timeout , ",
  "5533": "throws ForwardAsyncException ",
  "5534": "OtpOutputStream forward_async = new OtpOutputStream ( ) ; ",
  "5535": "forward_async . write ( OtpExternal . versionTag ) ; ",
  "5536": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"forward_async\" ) , ",
  "5537": "new OtpErlangInt ( priority ) , ",
  "5538": "new OtpErlangBinary ( trans_id ) , ",
  "5539": "pid } ; ",
  "5540": "forward_async . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5541": "send ( forward_async ) ; ",
  "5542": "throw new ForwardAsyncException ( ) ; ",
  "5543": "} public void return_ ( final Integer request_type , ",
  "5544": "final String pattern , ",
  "5545": "final byte [ ] response_info , ",
  "5546": "final byte [ ] response , ",
  "5547": "throws ReturnAsyncException , ",
  "5548": "ReturnSyncException , ",
  "5549": "return_async ( name , pattern , response_info , response , ",
  "5550": "timeout , trans_id , pid ) ; ",
  "5551": "return_sync ( name , pattern , response_info , response , ",
  "5552": "} public void return_sync ( final String name , ",
  "5553": "byte [ ] response_info , ",
  "5554": "byte [ ] response , ",
  "5555": "throws ReturnSyncException ",
  "5556": "OtpOutputStream return_sync = new OtpOutputStream ( ) ; ",
  "5557": "return_sync . write ( OtpExternal . versionTag ) ; ",
  "5558": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"return_sync\" ) , ",
  "5559": "new OtpErlangString ( pattern ) , ",
  "5560": "new OtpErlangBinary ( response_info ) , ",
  "5561": "new OtpErlangBinary ( response ) , ",
  "5562": "return_sync . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5563": "send ( return_sync ) ; ",
  "5564": "throw new ReturnSyncException ( ) ; ",
  "5565": "} public Response recv_async ( final Integer timeout ) ",
  "5566": "return recv_async ( timeout , TransIdNull , true ) ; ",
  "5567": "} public Response recv_async ( final byte [ ] trans_id ) ",
  "5568": "return recv_async ( this . timeout_sync , trans_id , true ) ; ",
  "5569": "} public Response recv_async ( final boolean consume ) ",
  "5570": "return recv_async ( this . timeout_sync , TransIdNull , consume ) ; ",
  "5571": "} public Response recv_async ( final byte [ ] trans_id , ",
  "5572": "final boolean consume ) ",
  "5573": "return recv_async ( this . timeout_sync , trans_id , consume ) ; ",
  "5574": "} public Response recv_async ( final Integer timeout , ",
  "5575": "OtpOutputStream recv_async = new OtpOutputStream ( ) ; ",
  "5576": "recv_async . write ( OtpExternal . versionTag ) ; ",
  "5577": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"recv_async\" ) , ",
  "5578": "consume ? ",
  "5579": "new OtpErlangAtom ( \"true\" ) : ",
  "5580": "new OtpErlangAtom ( \"false\" ) } ; ",
  "5581": "recv_async . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5582": "send ( recv_async ) ; ",
  "5583": "} public boolean poll ( final int timeout ) ",
  "5584": "if ( Boolean . TRUE == poll_request ( timeout , true ) ) ",
  "5585": "} public void shutdown ( final String reason ) ",
  "5586": "OtpOutputStream shutdown = new OtpOutputStream ( ) ; ",
  "5587": "shutdown . write ( OtpExternal . versionTag ) ; ",
  "5588": "final OtpErlangObject [ ] tuple = { new OtpErlangAtom ( \"shutdown\" ) , ",
  "5589": "new OtpErlangString ( reason ) } ; ",
  "5590": "shutdown . write_any ( new OtpErlangTuple ( tuple ) ) ; ",
  "5591": "send ( shutdown ) ; ",
  "5592": "} public void setIntegerValidator ( Function < Integer , String > valueToErrorMessage ) { ",
  "5593": "setValidator ( valueToErrorMessage . compose ( v -> Integer . valueOf ( v ) ) ) ; ",
  "5594": "} public void setItems ( List < V > items ) { ",
  "5595": "final List < V > its = items == null ? ImmutableList . of ( ) : items ; ",
  "5596": "this . items = its ; ",
  "5597": "getComboBoxCellEditor ( ) . setInput ( items ) ; ",
  "5598": "} public static PermissionDialogFragment getInstance ( PermBean bean , int requestCode ) { ",
  "5599": "Bundle extras = new Bundle ( 3 ) ; ",
  "5600": "HashMap < Permission , String > map = ( HashMap < Permission , String > ) bean . getPermissions ( ) ; ",
  "5601": "extras . putSerializable ( PERMISSION , map ) ; ",
  "5602": "extras . putInt ( REQUEST , requestCode ) ; ",
  "5603": "PermissionDialogFragment fragment = new PermissionDialogFragment ( ) ; ",
  "5604": "fragment . setArguments ( extras ) ; ",
  "5605": "public void onResume ( ) { ",
  "5606": "super . onResume ( ) ; ",
  "5607": "getDialog ( ) . setOnKeyListener ( new DialogInterface . OnKeyListener ( ) { ",
  "5608": "public boolean onKey ( DialogInterface dialog , int keyCode , KeyEvent keyEvent ) { ",
  "5609": "return keyCode != KeyEvent . ACTION_DOWN ; ",
  "5610": "} @ OPermission ( value = Permission . WRITE_EXTERNAL_STORAGE ) ",
  "5611": "void onStoragePermission ( @ Result boolean isGranted ) { ",
  "5612": "if ( isGranted ) { ",
  "5613": "} @ OPermission ( values = { Permission . ACCESS_COARSE_LOCATION , ",
  "5614": "Permission . ACCESS_FINE_LOCATION } ) ",
  "5615": "void onLocationPermission ( @ Result boolean isGranted ) { ",
  "5616": "} public PermBean put ( Permission permission , String message ) { ",
  "5617": "mPermissions . put ( permission , message ) ; ",
  "5618": "} public RequestPermission with ( PermBean permBean ) { ",
  "5619": "if ( permBean . getPermissions ( ) . isEmpty ( ) ) { ",
  "5620": "RequestPermission . permBean = permBean ; ",
  "5621": "} public void request ( ) { ",
  "5622": "mLog . i ( TAG , \"Requesting.........\" ) ; ",
  "5623": "resultMap = new LinkedHashMap < > ( permBean . size ( ) ) ; ",
  "5624": "if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . M ",
  "5625": "&& isPermissionRequired ( permBean ) ) { ",
  "5626": "if ( RequestPermission . mBase == null ) { ",
  "5627": "RequestPermission . mBase = mActivity ; ",
  "5628": "PermBean bean = new PermBean ( ) ; ",
  "5629": "Map < Permission , String > map = permBean . getPermissions ( ) ; ",
  "5630": "for ( Map . Entry < Permission , String > m : map . entrySet ( ) ) { ",
  "5631": "if ( mActivity . checkSelfPermission ( m . getKey ( ) . toString ( ) ) != PackageManager . PERMISSION_GRANTED ) { ",
  "5632": "bean . put ( m . getKey ( ) , m . getValue ( ) ) ; ",
  "5633": "resultMap . put ( m . getKey ( ) , Result . GRANTED ) ; ",
  "5634": "if ( bean . size ( ) > 0 ) { ",
  "5635": "showDialog ( bean ) ; ",
  "5636": "for ( Map . Entry < Permission , String > m : permBean . getPermissions ( ) . entrySet ( ) ) { ",
  "5637": "invokeAnnotatedMethods ( resultMap ) ; ",
  "5638": "mLog . e ( TAG , e . getMessage ( ) , e ) ; ",
  "5639": "} private static boolean isPermissionRequired ( PermBean permBean ) { ",
  "5640": "if ( Build . VERSION . SDK_INT < Build . VERSION_CODES . M ) { ",
  "5641": "if ( permBean . size ( ) > 0 ) { ",
  "5642": "for ( Permission permission : map . keySet ( ) ) { ",
  "5643": "int status = mActivity . checkSelfPermission ( permission . toString ( ) ) ; ",
  "5644": "if ( status != PackageManager . PERMISSION_GRANTED ) return true ; ",
  "5645": "} private void showDialog ( PermBean permBean ) { ",
  "5646": "PermissionDialogFragment fragment = PermissionDialogFragment . getInstance ( permBean , requestCode ) ; ",
  "5647": "fragment . show ( mActivity . getSupportFragmentManager ( ) , TAG ) ; ",
  "5648": "} public static void onResult ( int requestCode , @ NonNull String [ ] permissions , @ NonNull int [ ] grantResults ) { ",
  "5649": "if ( RequestPermission . requestCode == requestCode ) { ",
  "5650": "int count = permissions . length ; ",
  "5651": "List < String > granted = new ArrayList < > ( count ) ; ",
  "5652": "List < String > denied = new ArrayList < > ( count ) ; ",
  "5653": "for ( int k = 0 ; k < count ; k ++ ) { ",
  "5654": "resultMap . put ( Permission . get ( permissions [ k ] ) , Result . get ( grantResults [ k ] ) ) ; ",
  "5655": "if ( grantResults [ k ] == PackageManager . PERMISSION_GRANTED ) { ",
  "5656": "granted . add ( permissions [ k ] ) ; ",
  "5657": "} else if ( grantResults [ k ] == PackageManager . PERMISSION_DENIED ) { ",
  "5658": "denied . add ( permissions [ k ] ) ; ",
  "5659": "String [ ] grantedArray = granted . toArray ( new String [ granted . size ( ) ] ) ; ",
  "5660": "String [ ] deniedArray = denied . toArray ( new String [ denied . size ( ) ] ) ; ",
  "5661": "Intent intent = new Intent ( PERMISSION_RESULT_BROADCAST ) ; ",
  "5662": "intent . putExtra ( GRANTED , grantedArray ) ; ",
  "5663": "intent . putExtra ( DENIED , deniedArray ) ; ",
  "5664": "LocalBroadcastManager . getInstance ( mActivity ) . sendBroadcast ( intent ) ; ",
  "5665": "} private static void invokeAnnotatedMethods ( HashMap < Permission , Result > resultMap ) ",
  "5666": "throws InvocationTargetException , IllegalAccessException { ",
  "5667": "Method [ ] methods = getBase ( ) . getClass ( ) . getDeclaredMethods ( ) ; ",
  "5668": "if ( method != null && method . isAnnotationPresent ( GrantedPermission . class ) ) { ",
  "5669": "GrantedPermission granted = method . getAnnotation ( GrantedPermission . class ) ; ",
  "5670": "if ( granted != null ) { ",
  "5671": "if ( ! granted . permission ( ) . equals ( \"\" ) || granted . value ( ) != Permission . NONE ) { ",
  "5672": "for ( Map . Entry < Permission , Result > permResult : resultMap . entrySet ( ) ) { ",
  "5673": "if ( ( granted . permission ( ) . equals ( permResult . getKey ( ) . toString ( ) ) || ",
  "5674": "granted . value ( ) == permResult . getKey ( ) ) ",
  "5675": "&& Result . GRANTED == permResult . getValue ( ) ) { ",
  "5676": "method . invoke ( getBase ( ) ) ; ",
  "5677": "if ( granted . values ( ) . length > 0 ) { ",
  "5678": "if ( allValuesGranted ( granted . values ( ) , resultMap ) ) { ",
  "5679": "if ( granted . permissions ( ) . length > 0 ) { ",
  "5680": "if ( allValuesGranted ( granted . permissions ( ) , resultMap ) ) { ",
  "5681": "} else if ( method != null && method . isAnnotationPresent ( DeniedPermission . class ) ) { ",
  "5682": "DeniedPermission denied = method . getAnnotation ( DeniedPermission . class ) ; ",
  "5683": "if ( denied != null ) { ",
  "5684": "if ( ! denied . permission ( ) . equals ( \"\" ) || denied . value ( ) != Permission . NONE ) { ",
  "5685": "if ( ( denied . permission ( ) . equals ( permResult . getKey ( ) . toString ( ) ) ",
  "5686": "|| denied . value ( ) == permResult . getKey ( ) ) ",
  "5687": "&& Result . DENIED == permResult . getValue ( ) ) { ",
  "5688": "if ( denied . values ( ) . length > 0 ) { ",
  "5689": "if ( anyValueDenied ( denied . values ( ) , resultMap ) ) { ",
  "5690": "if ( denied . permissions ( ) . length > 0 ) { ",
  "5691": "if ( anyValueDenied ( denied . permissions ( ) , resultMap ) ) { ",
  "5692": "} else if ( method != null && method . isAnnotationPresent ( OPermission . class ) ) { ",
  "5693": "OPermission oPermission = method . getAnnotation ( OPermission . class ) ; ",
  "5694": "final Annotation [ ] [ ] paramAnnotations = method . getParameterAnnotations ( ) ; ",
  "5695": "final Class [ ] paramTypes = method . getParameterTypes ( ) ; ",
  "5696": "if ( oPermission != null ",
  "5697": "&& paramAnnotations [ 0 ] [ 0 ] instanceof co . omkar . utility . opermission . annotation . Result ",
  "5698": "&& ( paramTypes [ 0 ] == boolean . class ",
  "5699": "|| paramTypes [ 0 ] == Boolean . class ) ) { ",
  "5700": "if ( oPermission . permission ( ) . equals ( permResult . getKey ( ) . toString ( ) ) ",
  "5701": "|| oPermission . value ( ) . equals ( permResult . getKey ( ) ) ) { ",
  "5702": "switch ( permResult . getValue ( ) ) { ",
  "5703": "case GRANTED : ",
  "5704": "method . invoke ( getBase ( ) , true ) ; ",
  "5705": "case DENIED : ",
  "5706": "method . invoke ( getBase ( ) , false ) ; ",
  "5707": "if ( oPermission . values ( ) . length > 0 ) { ",
  "5708": "if ( allValuesGranted ( oPermission . values ( ) , resultMap ) ) { ",
  "5709": "if ( oPermission . permissions ( ) . length > 0 ) { ",
  "5710": "if ( allValuesGranted ( oPermission . permissions ( ) , resultMap ) ) { ",
  "5711": "} private static boolean allValuesGranted ( Object [ ] values , HashMap < Permission , Result > resultMap ) { ",
  "5712": "if ( values instanceof Permission [ ] ) { ",
  "5713": "Set < Permission > valueSet = new HashSet < > ( Arrays . asList ( ( Permission [ ] ) values ) ) ; ",
  "5714": "if ( resultMap . keySet ( ) . containsAll ( valueSet ) ) { ",
  "5715": "for ( Object value : values ) { ",
  "5716": "if ( Result . GRANTED != resultMap . get ( ( Permission ) value ) ) { ",
  "5717": "} else if ( values instanceof String [ ] ) { ",
  "5718": "Set < String > valueSet = new HashSet < > ( Arrays . asList ( ( String [ ] ) values ) ) ; ",
  "5719": "Set < String > permission = new HashSet < > ( ) ; ",
  "5720": "for ( Permission perm : resultMap . keySet ( ) ) { ",
  "5721": "permission . add ( perm . toString ( ) ) ; ",
  "5722": "if ( permission . containsAll ( valueSet ) ) { ",
  "5723": "if ( Result . GRANTED != resultMap . get ( Permission . get ( String . valueOf ( value ) ) ) ) { ",
  "5724": "} private static boolean anyValueDenied ( Object [ ] values , HashMap < Permission , Result > resultMap ) { ",
  "5725": "Set < Permission > valueSet = new LinkedHashSet < > ( Arrays . asList ( ( Permission [ ] ) values ) ) ; ",
  "5726": "if ( Result . DENIED == resultMap . get ( ( Permission ) value ) ) { ",
  "5727": "Set < String > permissionSet = new HashSet < > ( ) ; ",
  "5728": "permissionSet . add ( perm . toString ( ) ) ; ",
  "5729": "if ( permissionSet . containsAll ( valueSet ) ) { ",
  "5730": "if ( Result . DENIED == resultMap . get ( Permission . get ( ( String ) value ) ) ) { ",
  "5731": "} public static LoginException newLoginException ( final String message , final Throwable cause ) { ",
  "5732": "final LoginException loginException = new LoginException ( message ) ; ",
  "5733": "loginException . initCause ( cause ) ; ",
  "5734": "return loginException ; ",
  "5735": "public final void make ( ",
  "5736": "final Map < String , Object > pAddParams ) throws Exception { ",
  "5737": "this . factoryAppBeans . releaseBeans ( ) ; ",
  "5738": "Writer htmlWriter = ( Writer ) pAddParams . get ( \"htmlWriter\" ) ; ",
  "5739": "if ( htmlWriter != null ) { ",
  "5740": "+ PrepareDbAfterGetCopy . class . getSimpleName ( ) ",
  "5741": "this . logger . info ( null , PrepareDbAfterGetCopy . class , ",
  "5742": "} @ SuppressWarnings ( \"PMD.NonThreadSafeSingleton\" ) ",
  "5743": "public static PasswordValidator getSingleton ( final String className , final CommonProperties properties ) ",
  "5744": "throws FactoryException { ",
  "5745": "if ( passwordValidatorInstance == null ) { ",
  "5746": "synchronized ( PasswordValidatorFactory . class ) { ",
  "5747": "passwordValidatorInstance = getInstance ( className , properties ) ; ",
  "5748": "return passwordValidatorInstance ; ",
  "5749": "public final String makeFilter ( final Class < ? > pEntityClass , ",
  "5750": "final Map < String , Object > pAddParam ) throws Exception { ",
  "5751": "return pEntityClass . getSimpleName ( ) . toUpperCase ( ) + \".ITSVERSION>\" ",
  "5752": "+ this . lastReplicatedDateEvaluator . evalData ( pAddParam ) . getTime ( ) ; ",
  "5753": "} public static void close ( final Connection conn ) { ",
  "5754": "if ( conn != null ) { ",
  "5755": "conn . close ( ) ; ",
  "5756": "} catch ( SQLException e ) { ",
  "5757": "LOG . warn ( error , e ) ; ",
  "5758": "} public static void close ( final PreparedStatement statement ) { ",
  "5759": "if ( statement != null ) { ",
  "5760": "statement . close ( ) ; ",
  "5761": "} public static void close ( final ResultSet resultSet ) { ",
  "5762": "if ( resultSet != null ) { ",
  "5763": "resultSet . close ( ) ; ",
  "5764": "public final void fill ( final Map < String , Object > pAddParam , ",
  "5765": "final Object pEntity , final String pFieldName , ",
  "5766": "final String pFieldStrValue ) throws Exception { ",
  "5767": "Field rField = getUtlReflection ( ) . retrieveField ( pEntity . getClass ( ) , ",
  "5768": "pFieldName ) ; ",
  "5769": "rField . setAccessible ( true ) ; ",
  "5770": "if ( \"NULL\" . equals ( pFieldStrValue ) ) { ",
  "5771": "rField . set ( pEntity , null ) ; ",
  "5772": "boolean isFilled = true ; ",
  "5773": "if ( rField . getType ( ) == Double . class ) { ",
  "5774": "rField . set ( pEntity , Double . valueOf ( pFieldStrValue ) ) ; ",
  "5775": "} else if ( rField . getType ( ) == Float . class ) { ",
  "5776": "rField . set ( pEntity , Float . valueOf ( pFieldStrValue ) ) ; ",
  "5777": "} else if ( rField . getType ( ) == BigDecimal . class ) { ",
  "5778": "rField . set ( pEntity , new BigDecimal ( pFieldStrValue ) ) ; ",
  "5779": "} else if ( rField . getType ( ) == Date . class ) { ",
  "5780": "rField . set ( pEntity , new Date ( Long . parseLong ( pFieldStrValue ) ) ) ; ",
  "5781": "} else if ( Enum . class . isAssignableFrom ( rField . getType ( ) ) ) { ",
  "5782": "Integer intVal = Integer . valueOf ( pFieldStrValue ) ; ",
  "5783": "Enum val = null ; ",
  "5784": "val = ( Enum ) rField . getType ( ) . getEnumConstants ( ) [ intVal ] ; ",
  "5785": "rField . set ( pEntity , val ) ; ",
  "5786": "} else if ( rField . getType ( ) == Boolean . class ) { ",
  "5787": "rField . set ( pEntity , Boolean . valueOf ( pFieldStrValue ) ) ; ",
  "5788": "} else if ( Integer . class == rField . getType ( ) ) { ",
  "5789": "rField . set ( pEntity , Integer . valueOf ( pFieldStrValue ) ) ; ",
  "5790": "} else if ( Long . class == rField . getType ( ) ) { ",
  "5791": "rField . set ( pEntity , Long . valueOf ( pFieldStrValue ) ) ; ",
  "5792": "} else if ( String . class == rField . getType ( ) ) { ",
  "5793": "String unescaped = this . utilXml . unescapeXml ( pFieldStrValue ) ; ",
  "5794": "rField . set ( pEntity , unescaped ) ; ",
  "5795": "isFilled = false ; ",
  "5796": "throw new ExceptionWithCode ( ExceptionWithCode ",
  "5797": "if ( ! isFilled ) { ",
  "5798": "+ \"/\" + pFieldName + \"/\" + pFieldStrValue ) ; ",
  "5799": "public final void init ( final CommonProperties properties ) { ",
  "5800": "connProps . set ( JaasBasedConnPropsBuilder . build ( properties . getAdditionalProperties ( ) ) ) ; ",
  "5801": "dbProps . set ( JaasBasedDbPropsBuilder . build ( properties . getAdditionalProperties ( ) ) ) ; ",
  "5802": "} @ SuppressWarnings ( { \"PMD.CyclomaticComplexity\" , \"PMD.NPathComplexity\" } ) ",
  "5803": "public final Subject authenticate ( final String domain , final String userName , final char [ ] password , ",
  "5804": "final PasswordValidator passwordValidator ) ",
  "5805": "throws LoginException { ",
  "5806": "if ( domain == null || userName == null || password == null ) { ",
  "5807": "if ( StringUtils . isBlank ( dbProps . get ( ) . getSqlUserQuery ( ) ) ) { ",
  "5808": "LOG . warn ( error ) ; ",
  "5809": "throw new LoginException ( error ) ; ",
  "5810": "final UserRecord userRecord = getUserRecord ( domain , userName ) ; ",
  "5811": "if ( userRecord . getUserId ( ) == null || userRecord . getUserId ( ) . length ( ) == 0 ) { ",
  "5812": "if ( userRecord . getCredential ( ) == null || userRecord . getCredential ( ) . length ( ) == 0 ) { ",
  "5813": "final char [ ] myPassword = password . clone ( ) ; ",
  "5814": "final char [ ] myCredential = userRecord . getCredential ( ) . toCharArray ( ) ; ",
  "5815": "if ( ! passwordValidator . validate ( myPassword , myCredential ) ) { ",
  "5816": "LOG . info ( error ) ; ",
  "5817": "throw new FailedLoginException ( error ) ; ",
  "5818": "Cleanser . wipe ( myCredential ) ; ",
  "5819": "Cleanser . wipe ( myPassword ) ; ",
  "5820": "final UserPrincipal userPrincipal = new UserPrincipal ( userRecord . getUserId ( ) , domain , userName ) ; ",
  "5821": "final Subject subject = new Subject ( ) ; ",
  "5822": "subject . getPrincipals ( ) . add ( userPrincipal ) ; ",
  "5823": "return subject ; ",
  "5824": "} @ edu . umd . cs . findbugs . annotations . SuppressWarnings ( \"SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING\" ) ",
  "5825": "private UserRecord getUserRecord ( final String domain , final String userName ) ",
  "5826": "String userId ; ",
  "5827": "String credential ; ",
  "5828": "Connection connection = null ; ",
  "5829": "PreparedStatement statement = null ; ",
  "5830": "connection = getDatabaseConnection ( ) ; ",
  "5831": "statement = connection . prepareStatement ( dbProps . get ( ) . getSqlUserQuery ( ) ) ; ",
  "5832": "statement . setString ( 1 , domain ) ; ",
  "5833": "statement . setString ( 2 , userName ) ; ",
  "5834": "resultSet = statement . executeQuery ( ) ; ",
  "5835": "userId = resultSet . getString ( 1 ) ; ",
  "5836": "credential = resultSet . getString ( 2 ) ; ",
  "5837": "throw Util . newLoginException ( error , e ) ; ",
  "5838": "DbUtil . close ( resultSet ) ; ",
  "5839": "DbUtil . close ( statement ) ; ",
  "5840": "DbUtil . close ( connection ) ; ",
  "5841": "return new UserRecord ( domain , userName , userId , credential ) ; ",
  "5842": "} private Connection getDatabaseConnection ( ) ",
  "5843": "Connection connection ; ",
  "5844": "if ( StringUtils . isNotEmpty ( dbProps . get ( ) . getJndiConnectionName ( ) ) ) { ",
  "5845": "connection = ConnectionFactory . getConnection ( dbProps . get ( ) . getJndiConnectionName ( ) ) ; ",
  "5846": "} catch ( FactoryException e ) { ",
  "5847": "if ( connProps . get ( ) == null ) { ",
  "5848": "throw new FactoryException ( error ) ; ",
  "5849": "if ( StringUtils . isBlank ( connProps . get ( ) . getDriver ( ) ) ) { ",
  "5850": "if ( StringUtils . isBlank ( connProps . get ( ) . getUrl ( ) ) ) { ",
  "5851": "connection = ConnectionFactory . getConnection ( connProps . get ( ) ) ; ",
  "5852": "if ( ! UserRoleTomcat . class . isAssignableFrom ( pEntity . getClass ( ) ) ) { ",
  "5853": "+ pEntity + \"/\" + pFieldName + \"/\" + pFieldStrValue ) ; ",
  "5854": "UserRoleTomcat userRoleTomcat = ( UserRoleTomcat ) pEntity ; ",
  "5855": "userRoleTomcat . setItsUser ( null ) ; ",
  "5856": "UserTomcat ownedEntity = new UserTomcat ( ) ; ",
  "5857": "ownedEntity . setItsUser ( pFieldStrValue ) ; ",
  "5858": "userRoleTomcat . setItsUser ( ownedEntity ) ; ",
  "5859": "@ SuppressWarnings ( \"PMD.GuardLogStatementJavaUtil\" ) ",
  "5860": "public final void audit ( final Events event , final String domain , final String username ) { ",
  "5861": "if ( LOG . isInfoEnabled ( ) ) { ",
  "5862": "public static PasswordAuthenticator getSingleton ( final String className , final CommonProperties properties ) ",
  "5863": "if ( passwordAuthenticatorInstance == null ) { ",
  "5864": "synchronized ( PasswordAuthenticatorFactory . class ) { ",
  "5865": "passwordAuthenticatorInstance = getInstance ( className , properties ) ; ",
  "5866": "return passwordAuthenticatorInstance ; ",
  "5867": "public final void write ( final Map < String , Object > pAddParam , ",
  "5868": "final Object pField , final String pFieldName , ",
  "5869": "final Writer pWriter ) throws Exception { ",
  "5870": "String fieldValue ; ",
  "5871": "if ( pField == null ) { ",
  "5872": "fieldValue = \"NULL\" ; ",
  "5873": "} else if ( Enum . class . isAssignableFrom ( pField . getClass ( ) ) ) { ",
  "5874": "fieldValue = String . valueOf ( ( ( Enum ) pField ) . ordinal ( ) ) ; ",
  "5875": "} else if ( pField . getClass ( ) == Date . class ) { ",
  "5876": "fieldValue = String . valueOf ( ( ( Date ) pField ) . getTime ( ) ) ; ",
  "5877": "fieldValue = pField . toString ( ) ; ",
  "5878": "if ( pField instanceof String ) { ",
  "5879": "fieldValue = getUtilXml ( ) . escapeXml ( fieldValue ) ; ",
  "5880": "+ \"\\\"\\n\" ) ; ",
  "5881": "} public static void postMessage ( final MessageQ messageQ , final String domain , final String username , ",
  "5882": "final Events event , final String error ) ",
  "5883": "if ( messageQ == null ) { ",
  "5884": "messageQ . create ( event , domain , username ) ; ",
  "5885": "} catch ( MessageQException e ) { ",
  "5886": "@ SuppressWarnings ( \"PMD.UseVarargs\" ) ",
  "5887": "public final void handle ( final Callback [ ] callbacks ) ",
  "5888": "throws IOException , UnsupportedCallbackException { ",
  "5889": "for ( final Callback callback : callbacks ) { ",
  "5890": "if ( callback instanceof NameCallback ) { ",
  "5891": "final NameCallback nameCallback = ( NameCallback ) callback ; ",
  "5892": "nameCallback . setName ( username ) ; ",
  "5893": "} else if ( callback instanceof PasswordCallback ) { ",
  "5894": "final PasswordCallback passwordCallback = ( PasswordCallback ) callback ; ",
  "5895": "passwordCallback . setPassword ( password ) ; ",
  "5896": "} else if ( callback instanceof TextInputCallback ) { ",
  "5897": "final TextInputCallback textInputCallback = ( TextInputCallback ) callback ; ",
  "5898": "textInputCallback . setText ( domain ) ; ",
  "5899": "+ TextInputCallback . class . getCanonicalName ( ) ; ",
  "5900": "throw new UnsupportedCallbackException ( callback , error ) ; ",
  "5901": "final Object pEntity , final Writer pWriter ) throws Exception { ",
  "5902": "Map < String , Map < String , String > > fieldsSettingsMap = ",
  "5903": "getMngSettings ( ) . lazFldsSts ( pEntity . getClass ( ) ) ; ",
  "5904": "for ( Map . Entry < String , Map < String , String > > entry ",
  "5905": ": fieldsSettingsMap . entrySet ( ) ) { ",
  "5906": "if ( \"true\" . equals ( entry . getValue ( ) . get ( \"isEnabled\" ) ) ) { ",
  "5907": "Field field = getUtlReflection ( ) ",
  "5908": ". retrieveField ( pEntity . getClass ( ) , entry . getKey ( ) ) ; ",
  "5909": "Object fieldValue = field . get ( pEntity ) ; ",
  "5910": "ISrvFieldWriter srvFieldWriter = getFieldsWritersMap ( ) ",
  "5911": ". get ( entry . getValue ( ) . get ( \"ISrvFieldWriter\" ) ) ; ",
  "5912": "if ( srvFieldWriter == null ) { ",
  "5913": "srvFieldWriter . write ( pAddParam , fieldValue , field . getName ( ) , pWriter ) ; ",
  "5914": "pWriter . write ( \"/>\\n\" ) ; ",
  "5915": "public final < T > int retrieveAndWriteEntities ( ",
  "5916": "final Map < String , Object > pAddParam , ",
  "5917": "final Class < T > pEntityClass , final Writer pWriter ) throws Exception { ",
  "5918": "String conditions = ( String ) pAddParam . get ( \"conditions\" ) ; ",
  "5919": "int requestingDatabaseVersion = Integer ",
  "5920": ". parseInt ( ( String ) pAddParam . get ( \"requestingDatabaseVersion\" ) ) ; ",
  "5921": "int databaseVersion = this . srvDatabase . getVersionDatabase ( ) ; ",
  "5922": "List < T > entities = null ; ",
  "5923": "int entitiesCount = 0 ; ",
  "5924": "DatabaseInfo di ; ",
  "5925": "if ( requestingDatabaseVersion == databaseVersion ) { ",
  "5926": "this . srvDatabase . setIsAutocommit ( false ) ; ",
  "5927": "this . srvDatabase . ",
  "5928": "setTransactionIsolation ( ISrvDatabase . TRANSACTION_READ_UNCOMMITTED ) ; ",
  "5929": "this . srvDatabase . beginTransaction ( ) ; ",
  "5930": "di = getSrvOrm ( ) ",
  "5931": ". retrieveEntityWithConditions ( pAddParam , DatabaseInfo . class , \"\" ) ; ",
  "5932": "String requestedDatabaseIdStr = ( String ) pAddParam ",
  "5933": ". get ( \"requestedDatabaseId\" ) ; ",
  "5934": "if ( requestedDatabaseIdStr != null ) { ",
  "5935": "int requestedDatabaseId = Integer . parseInt ( requestedDatabaseIdStr ) ; ",
  "5936": "if ( requestedDatabaseId != di . getDatabaseId ( ) ) { ",
  "5937": "+ requestedDatabaseId + \"/\" + di . getDatabaseId ( ) ; ",
  "5938": "this . logger . error ( null , DatabaseWriterXml . class , error ) ; ",
  "5939": "pWriter . write ( \"</message>\\n\" ) ; ",
  "5940": "return entitiesCount ; ",
  "5941": "if ( conditions == null ) { ",
  "5942": "entities = getSrvOrm ( ) . retrieveList ( pAddParam , pEntityClass ) ; ",
  "5943": "entities = getSrvOrm ( ) ",
  "5944": ". retrieveListWithConditions ( pAddParam , pEntityClass , conditions ) ; ",
  "5945": "entitiesCount = entities . size ( ) ; ",
  "5946": "this . srvDatabase . commitTransaction ( ) ; ",
  "5947": "this . srvDatabase . rollBackTransaction ( ) ; ",
  "5948": "this . srvDatabase . releaseResources ( ) ; ",
  "5949": "+ entitiesCount + \"\\\">\\n\" ) ; ",
  "5950": "for ( T entity : entities ) { ",
  "5951": "this . srvEntityWriter . write ( pAddParam , entity , pWriter ) ; ",
  "5952": "this . logger . info ( null , DatabaseWriterXml . class , ",
  "5953": "this . logger . error ( null , DatabaseWriterXml . class , ",
  "5954": "public static Audit getSingleton ( final String className , final CommonProperties properties ) ",
  "5955": "if ( auditInstance == null ) { ",
  "5956": "synchronized ( AuditFactory . class ) { ",
  "5957": "auditInstance = getInstance ( className , properties ) ; ",
  "5958": "return auditInstance ; ",
  "5959": "int preparedEntitiesCount = 0 ; ",
  "5960": "for ( Class < ? > entityClass : this . classes ) { ",
  "5961": "if ( APersistableBase . class . isAssignableFrom ( entityClass ) ) { ",
  "5962": "preparedEntitiesCount ++ ; ",
  "5963": "+ entityClass . getSimpleName ( ) . toUpperCase ( ) + \";\" ; ",
  "5964": "Integer maxId = this . srvDatabase ",
  "5965": ". evalIntegerResult ( queryMaxId , \"MAXID\" ) ; ",
  "5966": "if ( maxId != null ) { ",
  "5967": "maxId ++ ; ",
  "5968": "this . srvDatabase . executeQuery ( querySec ) ; ",
  "5969": "+ PrepareDbAfterGetCopyPostgresql . class . getSimpleName ( ) ",
  "5970": "this . logger . info ( null , PrepareDbAfterGetCopyPostgresql . class , ",
  "5971": "} @ SuppressWarnings ( { \"PMD.ExcessiveMethodLength\" , \"PMD.NPathComplexity\" , \"PMD.CyclomaticComplexity\" , \"PMD.StdCyclomaticComplexity\" , \"PMD.ModifiedCyclomaticComplexity\" } ) ",
  "5972": "public static CommonProperties build ( final Map < String , ? > properties ) { ",
  "5973": "final CommonProperties commonProps = new CommonProperties ( ) ; ",
  "5974": "String tmp = getOption ( KEY_AUDIT_CLASS_NAME , properties ) ; ",
  "5975": "if ( StringUtils . isNotEmpty ( tmp ) ) { ",
  "5976": "commonProps . setAuditClassName ( tmp ) ; ",
  "5977": "logValue ( KEY_AUDIT_CLASS_NAME , tmp ) ; ",
  "5978": "commonProps . setAuditClassName ( DEFAULT_AUDIT_CLASS_NAME ) ; ",
  "5979": "logDefault ( KEY_AUDIT_CLASS_NAME , DEFAULT_AUDIT_CLASS_NAME ) ; ",
  "5980": "tmp = getOption ( KEY_AUDIT_IS_ENABLED , properties ) ; ",
  "5981": "commonProps . setAuditEnabled ( Boolean . parseBoolean ( tmp ) ) ; ",
  "5982": "logValue ( KEY_AUDIT_IS_ENABLED , tmp ) ; ",
  "5983": "commonProps . setAuditEnabled ( DEFAULT_AUDIT_IS_ENABLED ) ; ",
  "5984": "logDefault ( KEY_AUDIT_IS_ENABLED , String . valueOf ( DEFAULT_AUDIT_IS_ENABLED ) ) ; ",
  "5985": "tmp = getOption ( KEY_AUDIT_IS_SINGLETON , properties ) ; ",
  "5986": "commonProps . setAuditSingleton ( Boolean . parseBoolean ( tmp ) ) ; ",
  "5987": "logValue ( KEY_AUDIT_IS_SINGLETON , tmp ) ; ",
  "5988": "commonProps . setAuditSingleton ( DEFAULT_AUDIT_IS_SINGLETON ) ; ",
  "5989": "logDefault ( KEY_AUDIT_IS_SINGLETON , String . valueOf ( DEFAULT_AUDIT_IS_SINGLETON ) ) ; ",
  "5990": "tmp = getOption ( KEY_MESSAGEQ_CLASS_NAME , properties ) ; ",
  "5991": "commonProps . setMessageQueueClassName ( tmp ) ; ",
  "5992": "logValue ( KEY_MESSAGEQ_CLASS_NAME , tmp ) ; ",
  "5993": "commonProps . setMessageQueueClassName ( DEFAULT_MESSAGEQ_CLASS_NAME ) ; ",
  "5994": "logDefault ( KEY_MESSAGEQ_CLASS_NAME , DEFAULT_MESSAGEQ_CLASS_NAME ) ; ",
  "5995": "tmp = getOption ( KEY_MESSAGEQ_IS_ENABLED , properties ) ; ",
  "5996": "commonProps . setMessageQueueEnabled ( Boolean . parseBoolean ( tmp ) ) ; ",
  "5997": "logValue ( KEY_MESSAGEQ_IS_ENABLED , tmp ) ; ",
  "5998": "commonProps . setMessageQueueEnabled ( DEFAULT_MESSAGEQ_IS_ENABLED ) ; ",
  "5999": "logDefault ( KEY_MESSAGEQ_IS_ENABLED , String . valueOf ( DEFAULT_MESSAGEQ_IS_ENABLED ) ) ; ",
  "6000": "tmp = getOption ( KEY_MESSAGEQ_IS_SINGLETON , properties ) ; ",
  "6001": "commonProps . setMessageQueueSingleton ( Boolean . parseBoolean ( tmp ) ) ; ",
  "6002": "logValue ( KEY_MESSAGEQ_IS_SINGLETON , tmp ) ; ",
  "6003": "commonProps . setMessageQueueSingleton ( DEFAULT_MESSAGEQ_IS_SINGLETON ) ; ",
  "6004": "logDefault ( KEY_MESSAGEQ_IS_SINGLETON , String . valueOf ( DEFAULT_MESSAGEQ_IS_SINGLETON ) ) ; ",
  "6005": "tmp = getOption ( KEY_PASSWORD_AUTHENTICATOR_CLASS_NAME , properties ) ; ",
  "6006": "commonProps . setPasswordAuthenticatorClassName ( tmp ) ; ",
  "6007": "logValue ( KEY_PASSWORD_AUTHENTICATOR_CLASS_NAME , tmp ) ; ",
  "6008": "commonProps . setPasswordAuthenticatorClassName ( DEFAULT_PASSWORD_AUTHENTICATOR_CLASS_NAME ) ; ",
  "6009": "logDefault ( KEY_PASSWORD_AUTHENTICATOR_CLASS_NAME , DEFAULT_PASSWORD_AUTHENTICATOR_CLASS_NAME ) ; ",
  "6010": "tmp = getOption ( KEY_PASSWORD_AUTHENTICATOR_IS_SINGLETON , properties ) ; ",
  "6011": "commonProps . setPasswordAuthenticatorSingleton ( Boolean . parseBoolean ( tmp ) ) ; ",
  "6012": "logValue ( KEY_PASSWORD_AUTHENTICATOR_IS_SINGLETON , tmp ) ; ",
  "6013": "commonProps . setPasswordAuthenticatorSingleton ( DEFAULT_PASSWORD_AUTHENTICATOR_IS_SINGLETON ) ; ",
  "6014": "logDefault ( KEY_PASSWORD_AUTHENTICATOR_IS_SINGLETON , ",
  "6015": "String . valueOf ( DEFAULT_PASSWORD_AUTHENTICATOR_IS_SINGLETON ) ) ; ",
  "6016": "tmp = getOption ( KEY_PASSWORD_VALIDATOR_CLASS_NAME , properties ) ; ",
  "6017": "commonProps . setPasswordValidatorClassName ( tmp ) ; ",
  "6018": "logValue ( KEY_PASSWORD_VALIDATOR_CLASS_NAME , tmp ) ; ",
  "6019": "commonProps . setPasswordValidatorClassName ( DEFAULT_PASSWORD_VALIDATOR_CLASS_NAME ) ; ",
  "6020": "logDefault ( KEY_PASSWORD_VALIDATOR_CLASS_NAME , DEFAULT_PASSWORD_VALIDATOR_CLASS_NAME ) ; ",
  "6021": "tmp = getOption ( KEY_PASSWORD_VALIDATOR_IS_SINGLETON , properties ) ; ",
  "6022": "commonProps . setPasswordValidatorSingleton ( Boolean . parseBoolean ( tmp ) ) ; ",
  "6023": "logValue ( KEY_PASSWORD_VALIDATOR_IS_SINGLETON , tmp ) ; ",
  "6024": "commonProps . setPasswordValidatorSingleton ( DEFAULT_PASSWORD_VALIDATOR_IS_SINGLETON ) ; ",
  "6025": "logDefault ( KEY_PASSWORD_VALIDATOR_IS_SINGLETON , String . valueOf ( DEFAULT_PASSWORD_VALIDATOR_IS_SINGLETON ) ) ; ",
  "6026": "final Map < String , String > tempMap = new ConcurrentHashMap < > ( ) ; ",
  "6027": "for ( final Map . Entry < String , ? > entry : properties . entrySet ( ) ) { ",
  "6028": "final String key = entry . getKey ( ) ; ",
  "6029": "final String value = ( String ) entry . getValue ( ) ; ",
  "6030": "tempMap . put ( key , value ) ; ",
  "6031": "throw new IllegalArgumentException ( error , e ) ; ",
  "6032": "commonProps . setAdditionalProperties ( tempMap ) ; ",
  "6033": "return commonProps ; ",
  "6034": "private static < T > T getOption ( final String key , final Map < String , ? > properties ) { ",
  "6035": "return ( T ) properties . get ( key ) ; ",
  "6036": "public final boolean sync ( final Map < String , Object > pAddParam , ",
  "6037": "final Object pEntity ) throws Exception { ",
  "6038": "IHasVersion entityPb = ( IHasVersion ) pEntity ; ",
  "6039": "IHasVersion entityPbDb = getSrvOrm ( ) . retrieveEntity ( pAddParam , entityPb ) ; ",
  "6040": "boolean isNew = true ; ",
  "6041": "if ( entityPbDb != null ) { ",
  "6042": "entityPb . setItsVersion ( entityPbDb . getItsVersion ( ) ) ; ",
  "6043": "isNew = false ; ",
  "6044": "return isNew ; ",
  "6045": "} public static ConnectionProperties build ( final Map < String , ? > properties ) { ",
  "6046": "final Map < String , String > tmpConfig = new ConcurrentHashMap < > ( ) ; ",
  "6047": "tmpConfig . put ( key , value ) ; ",
  "6048": "copyValue ( properties , KEY_DRIVER , tmpConfig , MapBasedConnPropsBuilder . KEY_DRIVER ) ; ",
  "6049": "copyValue ( properties , KEY_URL , tmpConfig , MapBasedConnPropsBuilder . KEY_URL ) ; ",
  "6050": "copyValue ( properties , KEY_USERNAME , tmpConfig , MapBasedConnPropsBuilder . KEY_USERNAME ) ; ",
  "6051": "copyValue ( properties , KEY_PASSWORD , tmpConfig , MapBasedConnPropsBuilder . KEY_PASSWORD ) ; ",
  "6052": "copyValue ( properties , KEY_MAX_TOTAL , tmpConfig , MapBasedConnPropsBuilder . KEY_MAX_TOTAL ) ; ",
  "6053": "copyValue ( properties , KEY_MAX_IDLE , tmpConfig , MapBasedConnPropsBuilder . KEY_MAX_IDLE ) ; ",
  "6054": "copyValue ( properties , KEY_MIN_IDLE , tmpConfig , MapBasedConnPropsBuilder . KEY_MIN_IDLE ) ; ",
  "6055": "copyValue ( properties , KEY_MAX_WAIT_MILLIS , tmpConfig , MapBasedConnPropsBuilder . KEY_MAX_WAIT_MILLIS ) ; ",
  "6056": "copyValue ( properties , KEY_TEST_ON_CREATE , tmpConfig , MapBasedConnPropsBuilder . KEY_TEST_ON_CREATE ) ; ",
  "6057": "copyValue ( properties , KEY_TEST_ON_BORROW , tmpConfig , MapBasedConnPropsBuilder . KEY_TEST_ON_BORROW ) ; ",
  "6058": "copyValue ( properties , KEY_TEST_ON_RETURN , tmpConfig , MapBasedConnPropsBuilder . KEY_TEST_ON_RETURN ) ; ",
  "6059": "copyValue ( properties , KEY_TEST_WHILE_IDLE , tmpConfig , MapBasedConnPropsBuilder . KEY_TEST_WHILE_IDLE ) ; ",
  "6060": "copyValue ( properties , KEY_TIME_BETWEEN_EVICTION_RUNS_MILLIS , ",
  "6061": "tmpConfig , MapBasedConnPropsBuilder . KEY_TIME_BETWEEN_EVICTION_RUNS_MILLIS ) ; ",
  "6062": "copyValue ( properties , KEY_NUM_TESTS_PER_EVICITON_RUN , ",
  "6063": "tmpConfig , MapBasedConnPropsBuilder . KEY_NUM_TESTS_PER_EVICITON_RUN ) ; ",
  "6064": "copyValue ( properties , KEY_MIN_EVICTABLE_IDLE_TIME_MILLIS , ",
  "6065": "tmpConfig , MapBasedConnPropsBuilder . KEY_MIN_EVICTABLE_IDLE_TIME_MILLIS ) ; ",
  "6066": "copyValue ( properties , KEY_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS , ",
  "6067": "tmpConfig , MapBasedConnPropsBuilder . KEY_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS ) ; ",
  "6068": "copyValue ( properties , KEY_LIFO , tmpConfig , MapBasedConnPropsBuilder . KEY_LIFO ) ; ",
  "6069": "copyValue ( properties , KEY_AUTO_COMMIT , tmpConfig , MapBasedConnPropsBuilder . KEY_AUTO_COMMIT ) ; ",
  "6070": "copyValue ( properties , KEY_READ_ONLY , tmpConfig , MapBasedConnPropsBuilder . KEY_READ_ONLY ) ; ",
  "6071": "copyValue ( properties , KEY_TRANSACTION_ISOLATION , tmpConfig , MapBasedConnPropsBuilder . KEY_TRANSACTION_ISOLATION ) ; ",
  "6072": "copyValue ( properties , KEY_CACHE_STATE , tmpConfig , MapBasedConnPropsBuilder . KEY_CACHE_STATE ) ; ",
  "6073": "copyValue ( properties , KEY_VALIDATION_QUERY , tmpConfig , MapBasedConnPropsBuilder . KEY_VALIDATION_QUERY ) ; ",
  "6074": "copyValue ( properties , KEY_MAX_CONN_LIFETIME_MILLIS , ",
  "6075": "tmpConfig , MapBasedConnPropsBuilder . KEY_MAX_CONN_LIFETIME_MILLIS ) ; ",
  "6076": "return MapBasedConnPropsBuilder . build ( tmpConfig ) ; ",
  "6077": "} private static void copyValue ( final Map < String , ? > sourceMap , final String sourceKey , ",
  "6078": "final Map < String , String > targetMap , final String targetKey ) { ",
  "6079": "if ( getOption ( sourceKey , sourceMap ) != null && String . class . isInstance ( getOption ( sourceKey , sourceMap ) ) ) { ",
  "6080": "targetMap . put ( targetKey , ( String ) getOption ( sourceKey , sourceMap ) ) ; ",
  "6081": "} public static void auditEvent ( final Audit audit , final String domain , final String username , ",
  "6082": "if ( audit == null ) { ",
  "6083": "audit . audit ( event , domain , username ) ; ",
  "6084": "} catch ( AuditException e ) { ",
  "6085": "public final Object read ( final Map < String , Object > pAddParam , ",
  "6086": "final Reader pReader ) throws Exception { ",
  "6087": "Map < String , String > attributesMap = readAttributes ( pAddParam , pReader ) ; ",
  "6088": "if ( attributesMap . get ( \"class\" ) == null ) { ",
  "6089": "Class entityClass = Class . forName ( attributesMap . get ( \"class\" ) ) ; ",
  "6090": "Constructor constructor = entityClass . getDeclaredConstructor ( ) ; ",
  "6091": "Object entity = constructor . newInstance ( ) ; ",
  "6092": "getMngSettings ( ) . lazFldsSts ( entityClass ) ; ",
  "6093": "if ( \"true\" . equals ( entry . getValue ( ) . get ( \"isEnabled\" ) ) ",
  "6094": "&& attributesMap . get ( entry . getKey ( ) ) != null ) { ",
  "6095": "ISrvEntityFieldFiller srvEntityFieldFiller = getFieldsFillersMap ( ) ",
  "6096": ". get ( entry . getValue ( ) . get ( \"ISrvEntityFieldFiller\" ) ) ; ",
  "6097": "if ( srvEntityFieldFiller == null ) { ",
  "6098": "srvEntityFieldFiller . fill ( pAddParam , entity , entry . getKey ( ) , ",
  "6099": "attributesMap . get ( entry . getKey ( ) ) ) ; ",
  "6100": "return entity ; ",
  "6101": "public final Map < String , String > readAttributes ( ",
  "6102": "return this . utilXml . readAttributes ( pReader , pAddParam ) ; ",
  "6103": "if ( ! APersistableBase . class . isAssignableFrom ( pEntityClass ) ) { ",
  "6104": "throw new ExceptionWithCode ( ExceptionWithCode . CONFIGURATION_MISTAKE , ",
  "6105": "+ pEntityClass ) ; ",
  "6106": "int requestedDatabaseId ; ",
  "6107": "requestedDatabaseId = Integer . parseInt ( pAddParam ",
  "6108": ". get ( \"requestedDatabaseId\" ) . toString ( ) ) ; ",
  "6109": "throw new ExceptionWithCode ( ExceptionWithCode . WRONG_PARAMETER , ",
  "6110": "+ pAddParam . get ( \"requestedDatabaseId\" ) ) ; ",
  "6111": "+ requestedDatabaseId + \";\" ; ",
  "6112": "Long maxIdBirth = this . srvDatabase ",
  "6113": ". evalLongResult ( queryMaxIdBirth , \"MAX_IDBIRTH\" ) ; ",
  "6114": "if ( maxIdBirth == null ) { ",
  "6115": "maxIdBirth = 0L ; ",
  "6116": "String tblNm = pEntityClass . getSimpleName ( ) . toUpperCase ( ) ; ",
  "6117": "+ \".IDDATABASEBIRTH=\" + requestedDatabaseId + \")\" ; ",
  "6118": "} public final Subject authenticate ( final String domain , final String userName , final char [ ] password , ",
  "6119": "if ( domain == null ) { ",
  "6120": "if ( userName == null ) { ",
  "6121": "final char [ ] myCredential = userName . toCharArray ( ) ; ",
  "6122": "final UserPrincipal userPrincipal = new UserPrincipal ( \"ID:\" + userName , domain , userName ) ; ",
  "6123": "public final void readAndStoreEntities ( final Map < String , Object > pAddParam , ",
  "6124": "while ( this . utilXml . readUntilStart ( pReader , \"entity\" ) ) { ",
  "6125": "Object entity = this . srvEntityReader . read ( pAddParam , pReader ) ; ",
  "6126": "String nameEntitySync = this . mngSettings . lazClsSts ( entity . getClass ( ) ) ",
  "6127": ". get ( \"ISrvEntitySync\" ) ; ",
  "6128": "ISrvEntitySync srvEntitySync = this . srvEntitySyncMap ",
  "6129": ". get ( nameEntitySync ) ; ",
  "6130": "if ( srvEntitySync == null ) { ",
  "6131": "boolean isNew = srvEntitySync . sync ( pAddParam , entity ) ; ",
  "6132": "if ( isNew ) { ",
  "6133": "this . srvOrm . insertEntity ( pAddParam , entity ) ; ",
  "6134": "this . srvOrm . updateEntity ( pAddParam , entity ) ; ",
  "6135": "public final boolean validate ( final char [ ] providedPassword , final char [ ] storedCredential ) { ",
  "6136": "if ( providedPassword == null || storedCredential == null ) { ",
  "6137": "return Arrays . equals ( providedPassword , storedCredential ) ; ",
  "6138": "ArrayList < Class < ? > > classesArr = ",
  "6139": "new ArrayList < Class < ? > > ( this . mngSettings . getClasses ( ) ) ; ",
  "6140": "for ( int i = classesArr . size ( ) - 1 ; i >= 0 ; i -- ) { ",
  "6141": "Class < ? > entityClass = classesArr . get ( i ) ; ",
  "6142": "this . srvDatabase . executeDelete ( entityClass . getSimpleName ( ) ",
  "6143": ". toUpperCase ( ) , null ) ; ",
  "6144": "+ SrvClearDatabase . class . getSimpleName ( ) ",
  "6145": "if ( ! AHasIdString . class . isAssignableFrom ( rField . getType ( ) ) ) { ",
  "6146": "Constructor constructor = rField . getType ( ) . getDeclaredConstructor ( ) ; ",
  "6147": "Object ownedEntity = constructor . newInstance ( ) ; ",
  "6148": "( ( AHasIdString ) ownedEntity ) . setItsId ( pFieldStrValue ) ; ",
  "6149": "rField . set ( pEntity , ownedEntity ) ; ",
  "6150": "public final void replicate ( ",
  "6151": "String urlSourceStr = \"https://\" + ( String ) pAddParams . get ( \"urlSource\" ) ; ",
  "6152": "if ( urlSourceStr == null || urlSourceStr . length ( ) < 10 ) { ",
  "6153": "URL url = new URL ( urlSourceStr ) ; ",
  "6154": "String authMethod = ( String ) pAddParams . get ( \"authMethod\" ) ; ",
  "6155": "if ( \"base\" . equals ( authMethod ) ) { ",
  "6156": "final String userName = ( String ) pAddParams . get ( \"userName\" ) ; ",
  "6157": "final String userPass = ( String ) pAddParams . get ( \"userPass\" ) ; ",
  "6158": "Authenticator . setDefault ( new Authenticator ( ) { ",
  "6159": "protected PasswordAuthentication getPasswordAuthentication ( ) { ",
  "6160": "return new PasswordAuthentication ( userName , userPass . toCharArray ( ) ) ; ",
  "6161": "} else if ( \"form\" . equals ( authMethod ) ) { ",
  "6162": "CookieManager cookieManager = new CookieManager ( ) ; ",
  "6163": "CookieHandler . setDefault ( cookieManager ) ; ",
  "6164": "cookieManager . setCookiePolicy ( CookiePolicy . ACCEPT_ALL ) ; ",
  "6165": "requestCookiesGet ( pAddParams ) ; ",
  "6166": "authForm ( pAddParams , cookieManager ) ; ",
  "6167": "Map < String , Integer > classesCounts = makeJob ( url , pAddParams ) ; ",
  "6168": "htmlWriter . write ( \"<h4>\" + new Date ( ) . toString ( ) ",
  "6169": "+ statusString + \"</h4>\" ) ; ",
  "6170": "+ ReplicatorXmlHttp . class . getSimpleName ( ) ",
  "6171": "+ statusString ) ; ",
  "6172": "this . logger . info ( null , ReplicatorXmlHttp . class , statusString ) ; ",
  "6173": "htmlWriter . write ( \"<table>\" ) ; ",
  "6174": "for ( Map . Entry < String , Integer > entry : classesCounts . entrySet ( ) ) { ",
  "6175": "htmlWriter . write ( \"<tr>\" ) ; ",
  "6176": "htmlWriter . write ( \"<td>\" + entry . getKey ( ) + \"</td>\" ) ; ",
  "6177": "htmlWriter . write ( \"<td>\" + entry . getValue ( ) + \"</td>\" ) ; ",
  "6178": "htmlWriter . write ( \"</tr>\" ) ; ",
  "6179": "htmlWriter . write ( \"</table>\" ) ; ",
  "6180": "} catch ( ExceptionWithCode ex ) { ",
  "6181": "this . logger . error ( null , ReplicatorXmlHttp . class , ",
  "6182": "ex . getShortMessage ( ) ) ; ",
  "6183": "} public final Map < String , Integer > makeJob ( final URL pUrl , ",
  "6184": "String requestedDatabaseId = ( String ) pAddParams . get ( \"requestedDatabaseId\" ) ; ",
  "6185": "String maxRecordsStr = ( String ) pAddParams . get ( \"maxRecords\" ) ; ",
  "6186": "if ( maxRecordsStr == null || maxRecordsStr . length ( ) == 0 ) { ",
  "6187": "int maxRecords = Integer . parseInt ( maxRecordsStr ) ; ",
  "6188": "Map < String , Integer > classesCounts = new LinkedHashMap < String , Integer > ( ) ; ",
  "6189": "Integer classCount = 0 ; ",
  "6190": "boolean isDbPreparedBefore = false ; ",
  "6191": "for ( Class < ? > entityClass : this . mngSettings . getClasses ( ) ) { ",
  "6192": "int entitiesReceived = 0 ; ",
  "6193": "int firstRecord = 0 ; ",
  "6194": "HttpsURLConnection urlConnection = ( HttpsURLConnection ) pUrl . openConnection ( ) ; ",
  "6195": "if ( ! pUrl . getHost ( ) . equals ( urlConnection . getURL ( ) . getHost ( ) ) ) { ",
  "6196": "throw new ExceptionWithCode ( ExceptionWithCode . SOMETHING_WRONG , ",
  "6197": "OutputStreamWriter writer = null ; ",
  "6198": "BufferedReader reader = null ; ",
  "6199": "urlConnection . setDoOutput ( true ) ; ",
  "6200": "urlConnection . setRequestMethod ( \"POST\" ) ; ",
  "6201": "if ( getCookies ( ) != null ) { ",
  "6202": "urlConnection . addRequestProperty ( \"Cookie\" , getCookies ( ) ) ; ",
  "6203": "writer = new OutputStreamWriter ( urlConnection ",
  "6204": ". getOutputStream ( ) , Charset . forName ( \"UTF-8\" ) . newEncoder ( ) ) ; ",
  "6205": "String nameFilterEntities = this . mngSettings . lazClsSts ( entityClass ) ",
  "6206": ". get ( \"filter\" ) ; ",
  "6207": "String conditions = \"\" ; ",
  "6208": "if ( nameFilterEntities != null ) { ",
  "6209": "IFilterEntities filterEntities = this . filtersEntities ",
  "6210": ". get ( nameFilterEntities ) ; ",
  "6211": "if ( filterEntities != null ) { ",
  "6212": "String cond = filterEntities . makeFilter ( entityClass , pAddParams ) ; ",
  "6213": "if ( cond != null ) { ",
  "6214": "String requestedDatabaseIdStr = \"\" ; ",
  "6215": "if ( requestedDatabaseId != null ) { ",
  "6216": "if ( Integer . parseInt ( requestedDatabaseId ) ",
  "6217": "== getSrvDatabase ( ) . getIdDatabase ( ) ) { ",
  "6218": "\"requested_database_must_be_different\" ) ; ",
  "6219": "requestedDatabaseIdStr = \"&requestedDatabaseId=\" ",
  "6220": "+ requestedDatabaseId ; ",
  "6221": "writer . write ( \"entityName=\" + entityClass . getCanonicalName ( ) ",
  "6222": "+ \"&conditions=\" + conditions + \"&requestingDatabaseVersion=\" ",
  "6223": "+ databaseVersion + requestedDatabaseIdStr ) ; ",
  "6224": "writer . write ( \"&writerName=\" + pAddParams . get ( \"writerName\" ) ) ; ",
  "6225": "if ( HttpsURLConnection . HTTP_OK == urlConnection . getResponseCode ( ) ) { ",
  "6226": "reader = new BufferedReader ( new InputStreamReader ( urlConnection ",
  "6227": ". getInputStream ( ) , Charset . forName ( \"UTF-8\" ) . newDecoder ( ) ) ) ; ",
  "6228": "if ( ! this . utilXml . readUntilStart ( reader , \"message\" ) ) { ",
  "6229": "Map < String , String > msgAttrsMap = this . srvEntityReaderXml . ",
  "6230": "readAttributes ( pAddParams , reader ) ; ",
  "6231": "String error = msgAttrsMap . get ( \"error\" ) ; ",
  "6232": "error ) ; ",
  "6233": "String entitiesCountStr = msgAttrsMap . get ( \"entitiesCount\" ) ; ",
  "6234": "if ( entitiesCountStr == null ) { ",
  "6235": "entitiesReceived = Integer . parseInt ( entitiesCountStr ) ; ",
  "6236": "if ( entitiesReceived > 0 ) { ",
  "6237": "classCount += entitiesReceived ; ",
  "6238": "this . logger . info ( null , ReplicatorXmlHttp . class , ",
  "6239": "+ entityClass . getCanonicalName ( ) ) ; ",
  "6240": "if ( ! isDbPreparedBefore ) { ",
  "6241": "if ( this . databasePrepearerBefore != null ) { ",
  "6242": "this . databasePrepearerBefore . make ( pAddParams ) ; ",
  "6243": "isDbPreparedBefore = true ; ",
  "6244": "this . databaseReader . readAndStoreEntities ( pAddParams , reader ) ; ",
  "6245": "if ( entitiesReceived == maxRecords ) { ",
  "6246": "firstRecord += maxRecords ; ",
  "6247": "firstRecord = 0 ; ",
  "6248": "entitiesReceived = 0 ; ",
  "6249": ". getResponseCode ( ) ) ; ",
  "6250": "if ( writer != null ) { ",
  "6251": "urlConnection . disconnect ( ) ; ",
  "6252": "} while ( entitiesReceived > 0 ) ; ",
  "6253": "classesCounts . put ( entityClass . getCanonicalName ( ) , classCount ) ; ",
  "6254": "classCount = 0 ; ",
  "6255": "if ( this . databasePrepearerAfter != null ) { ",
  "6256": "this . databasePrepearerAfter . make ( pAddParams ) ; ",
  "6257": "return classesCounts ; ",
  "6258": "} public final void requestCookiesGet ( ",
  "6259": "String urlGetAuthCookStr = ( String ) pAddParams . get ( \"urlGetAuthCookies\" ) ; ",
  "6260": "URL urlGetAuthCookies = new URL ( urlGetAuthCookStr ) ; ",
  "6261": "HttpsURLConnection urlConnection = null ; ",
  "6262": "urlConnection = ( HttpsURLConnection ) urlGetAuthCookies . openConnection ( ) ; ",
  "6263": "urlConnection . setRequestMethod ( \"GET\" ) ; ",
  "6264": "urlConnection . addRequestProperty ( \"Connection\" , \"keep-alive\" ) ; ",
  "6265": "while ( reader . read ( ) != - 1 ) { ",
  "6266": "+ urlConnection . getResponseCode ( ) ) ; ",
  "6267": "if ( urlConnection != null ) { ",
  "6268": "} public final void authForm ( final Map < String , Object > pAddParams , ",
  "6269": "final CookieManager pCookieManager ) throws Exception { ",
  "6270": "String authUrl = ( String ) pAddParams . get ( \"authUrl\" ) ; ",
  "6271": "String authUserName = ( String ) pAddParams . get ( \"authUserName\" ) ; ",
  "6272": "String authUserPass = ( String ) pAddParams . get ( \"authUserPass\" ) ; ",
  "6273": "String userName = ( String ) pAddParams . get ( \"userName\" ) ; ",
  "6274": "String userPass = ( String ) pAddParams . get ( \"userPass\" ) ; ",
  "6275": "URL url = new URL ( authUrl ) ; ",
  "6276": "HttpsURLConnection urlConnection = ( HttpsURLConnection ) url ",
  "6277": ". openConnection ( ) ; ",
  "6278": "if ( ! url . getHost ( ) . equals ( urlConnection . getURL ( ) . getHost ( ) ) ) { ",
  "6279": "String paramStr = authUserName + \"=\" + userName + \"&\" ",
  "6280": "+ authUserPass + \"=\" + userPass ; ",
  "6281": "StringBuffer cookiesSb = new StringBuffer ( ) ; ",
  "6282": "for ( HttpCookie cookie : pCookieManager . getCookieStore ( ) . getCookies ( ) ) { ",
  "6283": "cookiesSb . append ( cookie . getName ( ) + \"=\" + cookie . getValue ( ) + \";\" ) ; ",
  "6284": "setCookies ( cookiesSb . toString ( ) ) ; ",
  "6285": "urlConnection . addRequestProperty ( \"Content-Type\" , ",
  "6286": "\"application/x-www-form-urlencoded\" ) ; ",
  "6287": "urlConnection . addRequestProperty ( \"Content-Length\" , ",
  "6288": "String . valueOf ( paramStr . length ( ) ) ) ; ",
  "6289": "boolean isDbgSh = this . logger . getDbgSh ( this . getClass ( ) ) ",
  "6290": "&& this . logger . getDbgFl ( ) < 8001 && this . logger . getDbgCl ( ) > 8003 ; ",
  "6291": "if ( isDbgSh ) { ",
  "6292": "getLogger ( ) . debug ( null , ReplicatorXmlHttp . class , ",
  "6293": "for ( Map . Entry < String , List < String > > entry ",
  "6294": ": urlConnection . getRequestProperties ( ) . entrySet ( ) ) { ",
  "6295": "this . logger . debug ( null , ReplicatorXmlHttp . class , ",
  "6296": "for ( String val : entry . getValue ( ) ) { ",
  "6297": "writer . write ( paramStr ) ; ",
  "6298": "} @ SuppressWarnings ( \"PMD.GuardLogStatementJavaUtil\" ) ",
  "6299": "public final void create ( final Events event , final String userId ) { ",
  "6300": "} public final void setLastDateReplication ( final Date pLastDateReplication ) { ",
  "6301": "if ( pLastDateReplication == null ) { ",
  "6302": "this . lastDateReplication = null ; ",
  "6303": "this . lastDateReplication = new Date ( pLastDateReplication . getTime ( ) ) ; ",
  "6304": "public final void initialize ( final Subject subject , final CallbackHandler callbackHandler , ",
  "6305": "final Map < String , ? > sharedState , final Map < String , ? > options ) { ",
  "6306": "LOG . debug ( \"Initializing\" ) ; ",
  "6307": "this . pSubject = subject ; ",
  "6308": "this . pCallbackHandler = callbackHandler ; ",
  "6309": "final CommonProperties commonProps = JaasBasedCommonPropsBuilder . build ( options ) ; ",
  "6310": "initAudit ( commonProps ) ; ",
  "6311": "initMessageQueue ( commonProps ) ; ",
  "6312": "initPwValidator ( commonProps ) ; ",
  "6313": "initPwAuthenticator ( commonProps ) ; ",
  "6314": "public final boolean login ( ) ",
  "6315": "if ( pCallbackHandler == null ) { ",
  "6316": "LOG . error ( error ) ; ",
  "6317": "Callback [ ] callbacks = new Callback [ 3 ] ; ",
  "6318": "callbacks [ 0 ] = new TextInputCallback ( \"j_domain\" ) ; ",
  "6319": "callbacks [ 1 ] = new NameCallback ( \"j_username\" ) ; ",
  "6320": "callbacks [ 2 ] = new PasswordCallback ( \"j_password\" , false ) ; ",
  "6321": "pCallbackHandler . handle ( callbacks ) ; ",
  "6322": "domain = ( ( TextInputCallback ) callbacks [ 0 ] ) . getText ( ) ; ",
  "6323": "username = ( ( NameCallback ) callbacks [ 1 ] ) . getName ( ) ; ",
  "6324": "final char [ ] tempPassword = ( ( PasswordCallback ) callbacks [ 2 ] ) . getPassword ( ) ; ",
  "6325": "password = tempPassword . clone ( ) ; ",
  "6326": "( ( PasswordCallback ) callbacks [ 2 ] ) . clearPassword ( ) ; ",
  "6327": "cleanState ( ) ; ",
  "6328": "} catch ( UnsupportedCallbackException e ) { ",
  "6329": "final String error = ",
  "6330": "pendingSubject = pwAuthenticator . authenticate ( domain , username , password , pwValidator ) ; ",
  "6331": "Cleanser . wipe ( password ) ; ",
  "6332": "final String baseError = new StringBuilder ( ) . ",
  "6333": "append ( username ) . ",
  "6334": "append ( \"@\" ) . ",
  "6335": "append ( domain ) . ",
  "6336": "toString ( ) ; ",
  "6337": "AuditHelper . auditEvent ( audit , domain , username , Events . AUTHN_ATTEMPT , ",
  "6338": "MessageHelper . postMessage ( messageQ , domain , username , Events . AUTHN_ATTEMPT , ",
  "6339": "} catch ( LoginException e ) { ",
  "6340": "final String tempUsername = username ; ",
  "6341": "final String tempDomain = domain ; ",
  "6342": "append ( tempUsername ) . ",
  "6343": "append ( tempDomain ) . ",
  "6344": "AuditHelper . auditEvent ( audit , tempDomain , tempUsername , Events . AUTHN_FAILURE , ",
  "6345": "MessageHelper . postMessage ( messageQ , tempDomain , tempUsername , Events . AUTHN_FAILURE , ",
  "6346": "LOG . info ( error , e ) ; ",
  "6347": "public final boolean commit ( ) ",
  "6348": "if ( pendingSubject == null ) { ",
  "6349": "if ( committedSubject == null ) { ",
  "6350": "committedSubject = new Subject ( ) ; ",
  "6351": "AuditHelper . auditEvent ( audit , tempDomain , tempUsername , Events . AUTHN_ERROR , ",
  "6352": "MessageHelper . postMessage ( messageQ , tempDomain , tempUsername , Events . AUTHN_ERROR , ",
  "6353": "for ( final Principal p : pendingSubject . getPrincipals ( ) ) { ",
  "6354": "if ( ! pSubject . getPrincipals ( ) . contains ( p ) ) { ",
  "6355": "pSubject . getPrincipals ( ) . add ( p ) ; ",
  "6356": "if ( ! committedSubject . getPrincipals ( ) . contains ( p ) ) { ",
  "6357": "committedSubject . getPrincipals ( ) . add ( p ) ; ",
  "6358": "AuditHelper . auditEvent ( audit , domain , username , Events . AUTHN_SUCCESS , ",
  "6359": "MessageHelper . postMessage ( messageQ , domain , username , Events . AUTHN_SUCCESS , ",
  "6360": "public final boolean abort ( ) ",
  "6361": "} else if ( committedSubject == null ) { ",
  "6362": "AuditHelper . auditEvent ( audit , tempDomain , tempUsername , Events . AUTHN_ABORT_COMMIT , ",
  "6363": "MessageHelper . postMessage ( messageQ , tempDomain , tempUsername , Events . AUTHN_ABORT_COMMIT , ",
  "6364": "AuditHelper . auditEvent ( audit , domain , username , Events . AUTHN_ABORT_CHAIN , ",
  "6365": "MessageHelper . postMessage ( messageQ , domain , username , Events . AUTHN_ABORT_CHAIN , ",
  "6366": "logout ( ) ; ",
  "6367": "public final boolean logout ( ) ",
  "6368": "final StringBuilder principals = new StringBuilder ( \":\" ) ; ",
  "6369": "if ( committedSubject != null && committedSubject . getPrincipals ( ) != null ) { ",
  "6370": "final StringBuilder stringBuilder = new StringBuilder ( ) ; ",
  "6371": "for ( final Principal p : committedSubject . getPrincipals ( ) ) { ",
  "6372": "pSubject . getPrincipals ( ) . remove ( p ) ; ",
  "6373": "principals . append ( p . getName ( ) ) . append ( ':' ) ; ",
  "6374": "stringBuilder . delete ( 0 , stringBuilder . length ( ) ) ; ",
  "6375": "final String baseError = stringBuilder . ",
  "6376": "AuditHelper . auditEvent ( audit , domain , username , Events . AUTHN_LOGOUT , ",
  "6377": "MessageHelper . postMessage ( messageQ , domain , username , Events . AUTHN_LOGOUT , ",
  "6378": "} @ SuppressWarnings ( \"PMD.NullAssignment\" ) ",
  "6379": "private void cleanState ( ) { ",
  "6380": "domain = null ; ",
  "6381": "pendingSubject = null ; ",
  "6382": "committedSubject = null ; ",
  "6383": "} @ SuppressWarnings ( \"PMD.ConfusingTernary\" ) ",
  "6384": "private void initAudit ( final CommonProperties commonProps ) { ",
  "6385": "final String auditClassName = commonProps . getAuditClassName ( ) ; ",
  "6386": "if ( ! commonProps . isAuditEnabled ( ) ) { ",
  "6387": "} else if ( auditClassName == null ) { ",
  "6388": "throw new IllegalStateException ( error ) ; ",
  "6389": "if ( commonProps . isAuditSingleton ( ) ) { ",
  "6390": "this . audit = AuditFactory . getSingleton ( auditClassName , commonProps ) ; ",
  "6391": "this . audit = AuditFactory . getInstance ( auditClassName , commonProps ) ; ",
  "6392": "LOG . error ( error , e ) ; ",
  "6393": "throw new IllegalStateException ( error , e ) ; ",
  "6394": "private void initMessageQueue ( final CommonProperties commonProps ) { ",
  "6395": "final String messageClassName = commonProps . getMessageQueueClassName ( ) ; ",
  "6396": "if ( ! commonProps . isMessageQueueEnabled ( ) ) { ",
  "6397": "} else if ( messageClassName == null ) { ",
  "6398": "if ( commonProps . isMessageQueueSingleton ( ) ) { ",
  "6399": "this . messageQ = MessageQFactory . getSingleton ( messageClassName , commonProps ) ; ",
  "6400": "this . messageQ = MessageQFactory . getInstance ( messageClassName , commonProps ) ; ",
  "6401": "} private void initPwValidator ( final CommonProperties commonProps ) { ",
  "6402": "final String validatorClass = commonProps . getPasswordValidatorClassName ( ) ; ",
  "6403": "if ( validatorClass == null ) { ",
  "6404": "if ( commonProps . isPasswordValidatorSingleton ( ) ) { ",
  "6405": "this . pwValidator = PasswordValidatorFactory . getSingleton ( validatorClass , commonProps ) ; ",
  "6406": "this . pwValidator = PasswordValidatorFactory . getInstance ( validatorClass , commonProps ) ; ",
  "6407": "} private void initPwAuthenticator ( final CommonProperties commonProps ) { ",
  "6408": "final String authNticatorClass = commonProps . getPasswordAuthenticatorClassName ( ) ; ",
  "6409": "if ( authNticatorClass == null ) { ",
  "6410": "if ( commonProps . isPasswordAuthenticatorSingleton ( ) ) { ",
  "6411": "this . pwAuthenticator = PasswordAuthenticatorFactory . getSingleton ( authNticatorClass , commonProps ) ; ",
  "6412": "this . pwAuthenticator = PasswordAuthenticatorFactory . getInstance ( authNticatorClass , commonProps ) ; ",
  "6413": "Object entityPbDb = getSrvOrm ( ) . retrieveEntity ( pAddParam , pEntity ) ; ",
  "6414": "return entityPbDb == null ; ",
  "6415": "} public static DbProperties build ( final Map < String , ? > properties ) { ",
  "6416": "final DbProperties dbProps = new DbProperties ( ) ; ",
  "6417": "String tmp = getOption ( KEY_JNDI_CONNECTION_NAME , properties ) ; ",
  "6418": "dbProps . setJndiConnectionName ( tmp ) ; ",
  "6419": "logValue ( KEY_JNDI_CONNECTION_NAME , tmp ) ; ",
  "6420": "dbProps . setJndiConnectionName ( DEFAULT_JNDI_NAME ) ; ",
  "6421": "logDefault ( KEY_JNDI_CONNECTION_NAME , DEFAULT_JNDI_NAME ) ; ",
  "6422": "tmp = getOption ( KEY_SQL_USER_QUERY , properties ) ; ",
  "6423": "dbProps . setSqlUserQuery ( tmp ) ; ",
  "6424": "logValue ( KEY_SQL_USER_QUERY , tmp ) ; ",
  "6425": "dbProps . setSqlUserQuery ( DEFAULT_SQL_USER_QUERY ) ; ",
  "6426": "logDefault ( KEY_SQL_USER_QUERY , DEFAULT_SQL_USER_QUERY ) ; ",
  "6427": "dbProps . setAdditionalProperties ( tempMap ) ; ",
  "6428": "return dbProps ; ",
  "6429": "} public static MessageQ getInstance ( final String className , final CommonProperties properties ) ",
  "6430": "final Class < ? extends MessageQ > messageClazz ; ",
  "6431": "messageClazz = Class . forName ( className ) . asSubclass ( MessageQ . class ) ; ",
  "6432": "throw new FactoryException ( error , e ) ; ",
  "6433": "final MessageQ messageQ ; ",
  "6434": "final Constructor < ? extends MessageQ > constructor = messageClazz . getDeclaredConstructor ( ) ; ",
  "6435": "if ( ! constructor . isAccessible ( ) ) { ",
  "6436": "messageQ = constructor . newInstance ( ) ; ",
  "6437": "} catch ( InstantiationException | IllegalAccessException | InvocationTargetException ",
  "6438": "| NoSuchMethodException | IllegalArgumentException e ) { ",
  "6439": "messageQ . init ( properties ) ; ",
  "6440": "return messageQ ; ",
  "6441": "public static MessageQ getSingleton ( final String className , final CommonProperties properties ) ",
  "6442": "if ( messageQInstance == null ) { ",
  "6443": "synchronized ( MessageQFactory . class ) { ",
  "6444": "messageQInstance = getInstance ( className , properties ) ; ",
  "6445": "return messageQInstance ; ",
  "6446": "APersistableBaseVersion entityPb = ( APersistableBaseVersion ) pEntity ; ",
  "6447": "int currDbId = getSrvOrm ( ) . getIdDatabase ( ) ; ",
  "6448": "if ( currDbId == entityPb . getIdDatabaseBirth ( ) ) { ",
  "6449": "+ \",\" + entityPb . getIdDatabaseBirth ( ) ) ; ",
  "6450": "String tblNm = pEntity . getClass ( ) . getSimpleName ( ) . toUpperCase ( ) ; ",
  "6451": "APersistableBaseVersion entityPbDb = getSrvOrm ( ) ",
  "6452": ". retrieveEntityWithConditions ( pAddParam , entityPb . getClass ( ) , whereStr ) ; ",
  "6453": "entityPb . setIdBirth ( entityPb . getItsId ( ) ) ; ",
  "6454": "entityPb . setItsId ( null ) ; ",
  "6455": "entityPb . setItsId ( entityPbDb . getItsId ( ) ) ; ",
  "6456": "} public QueryParameter partialCopy ( final QueryParameterKind ... excludedElements ) { ",
  "6457": "List < QueryParameterKind > excludedList = Arrays . asList ( excludedElements ) ; ",
  "6458": "QueryParameter returnValue = new QueryParameter ( ) ; ",
  "6459": "if ( ! excludedList . contains ( QueryParameterKind . CONSTRAINTS ) ) { ",
  "6460": "returnValue . rawConstraints = this . rawConstraints ; ",
  "6461": "if ( ! excludedList . contains ( QueryParameterKind . GROUPS ) ) { ",
  "6462": "returnValue . groups = this . groups ; ",
  "6463": "if ( ! excludedList . contains ( QueryParameterKind . ORDERS ) ) { ",
  "6464": "returnValue . orders = this . orders ; ",
  "6465": "if ( ! excludedList . contains ( QueryParameterKind . PAGE ) ) { ",
  "6466": "returnValue . pageSize = this . pageSize ; ",
  "6467": "returnValue . page = this . page ; ",
  "6468": "if ( ! excludedList . contains ( QueryParameterKind . TIMEZONE ) ) { ",
  "6469": "returnValue . timezoneName = this . timezoneName ; ",
  "6470": "public boolean areLinked ( SqlTable table1 , SqlTable table2 ) { ",
  "6471": "return predecessorRelation . get ( table1 . getTableName ( ) ) . containsKey ( table2 . getTableName ( ) ) ; ",
  "6472": "public DimensionTable getDimensionByName ( String dimensionName , String tzNameAlias ) { ",
  "6473": "DimensionTable dimensionTable ; ",
  "6474": "if ( StringUtils . isBlank ( tzNameAlias ) || ( StringUtils . isNotBlank ( tzNameAlias ) && tzNameAlias . equals ( getDefaultTimezone ( ) ) ) ) { ",
  "6475": "dimensionTable = dimensions . get ( dimensionName . toUpperCase ( ) ) ; ",
  "6476": "if ( ! isTimeZoneSupported ( tzNameAlias ) ) { ",
  "6477": "String tzName = tzNamesAliases . get ( tzNameAlias ) ; ",
  "6478": "dimensionTable = alternateDimensions . get ( Pair . of ( dimensionName . toUpperCase ( ) , tzName ) ) ; ",
  "6479": "if ( dimensionTable == null ) { ",
  "6480": "return dimensionTable ; ",
  "6481": "public List < AbstractSqlColumn > getMeasuresColumn ( ) { ",
  "6482": "return Collections . unmodifiableList ( Lists . newArrayList ( factTable . getMeasuresColumn ( ) . values ( ) ) ) ; ",
  "6483": "public Optional < AbstractSqlColumn > getMeasuresByName ( String informationName ) { ",
  "6484": "for ( AbstractSqlColumn column : factTable . getMeasuresColumn ( ) . values ( ) ) { ",
  "6485": "if ( column . getBusinessName ( ) . equalsIgnoreCase ( informationName ) ) { ",
  "6486": "return Optional . of ( column ) ; ",
  "6487": "return Optional . absent ( ) ; ",
  "6488": "public AbstractSqlColumn getInformationColumn ( DimensionTable dimension , String informationName ) { ",
  "6489": "final AbstractSqlColumn sqlTableColumn = dimension . getSqlTableColumnByInformationName ( informationName ) ; ",
  "6490": "if ( sqlTableColumn == null ) { ",
  "6491": "return sqlTableColumn ; ",
  "6492": "public boolean isValidDimension ( String dimensionName , String informationName ) { ",
  "6493": "if ( StringUtils . isNotBlank ( dimensionName ) ) { ",
  "6494": "DimensionTable dim = dimensions . get ( dimensionName . toUpperCase ( ) ) ; ",
  "6495": "if ( StringUtils . isBlank ( informationName ) ) { ",
  "6496": "if ( dim . getSqlTableColumnByInformationName ( informationName . toUpperCase ( ) ) != null ) { ",
  "6497": "public boolean isMandatoryDimension ( String dimensionName ) { ",
  "6498": "if ( isValidDimension ( dimensionName , null ) ) { ",
  "6499": "return mandatoryDimensionNames . contains ( dimensionName . toUpperCase ( Locale . ENGLISH ) ) ; ",
  "6500": "public ColumnDataType getInformationType ( String dimensionName , String informationName ) { ",
  "6501": "return dim . getDefaultSearchColumn ( ) . getColumnType ( ) ; ",
  "6502": "AbstractSqlColumn information = dim . getSqlTableColumnByInformationName ( informationName ) ; ",
  "6503": "if ( information == null ) { ",
  "6504": "return information . getColumnType ( ) ; ",
  "6505": "} public void addSupportedTZ ( String tzName ) { ",
  "6506": "if ( ! StringUtils . isBlank ( tzName ) && ! tzNamesAliases . containsKey ( tzName . trim ( ) ) ) { ",
  "6507": "tzNamesAliases . put ( tzName . trim ( ) , tzName . trim ( ) ) ; ",
  "6508": "} public void addTZAlternateDimension ( String orignalDimensionName , DimensionTable alternateDimension , String tzName ) { ",
  "6509": "addSupportedTZ ( tzName ) ; ",
  "6510": "if ( tzNamesAliases . containsValue ( tzName ) ) { ",
  "6511": "sqlTables . put ( alternateDimension . getTableName ( ) , alternateDimension ) ; ",
  "6512": "alternateDimensions . put ( Pair . of ( orignalDimensionName . toUpperCase ( ) , tzName ) , alternateDimension ) ; ",
  "6513": "} public void addDimension ( DimensionTable table , boolean mandatory ) { ",
  "6514": "sqlTables . put ( table . getTableName ( ) , table ) ; ",
  "6515": "dimensions . put ( table . getDimensionName ( ) . toUpperCase ( ) , table ) ; ",
  "6516": "mandatoryDimensionNames . add ( table . getDimensionName ( ) . toUpperCase ( Locale . ENGLISH ) ) ; ",
  "6517": "} public Collection < Error > buildAndValidateConfig ( ) { ",
  "6518": "Collection < Error > returnValue = new ArrayList < Error > ( ) ; ",
  "6519": "if ( defaultTimezone == null ) { ",
  "6520": "for ( Pair < Pair < String , String > , Pair < String , String > > fkRelationship : fkRelationshipSet ) { ",
  "6521": "Optional < PhysicalSqlColumn > left = getColumnByPair ( fkRelationship . getLeft ( ) ) ; ",
  "6522": "Optional < PhysicalSqlColumn > right = getColumnByPair ( fkRelationship . getRight ( ) ) ; ",
  "6523": "if ( ! left . isPresent ( ) ) { ",
  "6524": "} else if ( ! right . isPresent ( ) ) { ",
  "6525": "buildSqlForeignKey ( left . get ( ) , right . get ( ) ) ; ",
  "6526": "for ( Entry < Pair < String , String > , DimensionTable > entry : alternateDimensions . entrySet ( ) ) { ",
  "6527": "DimensionTable dim = dimensions . get ( entry . getKey ( ) . getLeft ( ) ) ; ",
  "6528": "if ( ! dim . isEquivalent ( entry . getValue ( ) , returnValue ) ) { ",
  "6529": "+ \".\" ) ) ; ",
  "6530": "public boolean isValidMeasure ( String name ) { ",
  "6531": "if ( column . getBusinessName ( ) . equals ( name ) ) { ",
  "6532": "} @ RequestMapping ( value = { \"/{schema:[^\\\\.]+}\" , \"/{schema}.json\" } , produces = \"application/json\" , headers = { \"Accept=application/json\" } ) ",
  "6533": "@ ResponseBody ",
  "6534": "public Report processJsonRequest ( @ PathVariable String schema , HttpServletRequest request ) throws ServiceException , InvalidParameterException , ",
  "6535": "InvalidSchemaException { ",
  "6536": "return processRequest ( schema , request ) ; ",
  "6537": "private Report processRequest ( String schema , HttpServletRequest request ) throws ServiceException , InvalidParameterException , ",
  "6538": "long begin = System . currentTimeMillis ( ) ; ",
  "6539": "SchemaDefinition config = schemaRepository . getStarSchemaConfig ( schema ) ; ",
  "6540": "Map < String , String [ ] > params = request . getParameterMap ( ) ; ",
  "6541": "for ( String mandatory : MANDATORY_FIELDS ) { ",
  "6542": "if ( ! params . containsKey ( mandatory ) ) { ",
  "6543": "QueryParameterEnvelope queryParameterDto = new QueryParameterEnvelope ( ) ; ",
  "6544": "for ( String key : params . keySet ( ) ) { ",
  "6545": "if ( DOMAIN_PARAMETERS . contains ( key ) ) { ",
  "6546": "String domainParameter = params . get ( key ) [ 0 ] ; ",
  "6547": "final DomainParserAware systemParameter = SystemParameter . valueOf ( key ) ; ",
  "6548": "systemParameter . parseValue ( domainParameter , config , queryParameterDto ) ; ",
  "6549": "Pair < String , String > pair = splitKey ( key ) ; ",
  "6550": "if ( ! config . isValidDimension ( pair . getLeft ( ) , pair . getRight ( ) ) ) { ",
  "6551": "String [ ] multiParam = request . getParameterValues ( key ) ; ",
  "6552": "for ( String param : multiParam ) { ",
  "6553": "queryParameterDto . addConstraints ( new HttpQueryConstraint ( config , key , param ) ) ; ",
  "6554": "final Report report = schemaService . generateReport ( config , queryParameterDto ) ; ",
  "6555": "report . setRecords ( inMemoryPagination ( report . getRecords ( ) , queryParameterDto ) ) ; ",
  "6556": "return report ; ",
  "6557": "} @ ExceptionHandler ( ServiceException . class ) ",
  "6558": "public ResponseEntity < String > handleServiceException ( ServiceException exception ) { ",
  "6559": "HttpHeaders headers = new HttpHeaders ( ) ; ",
  "6560": "headers . setContentType ( MediaType . TEXT_PLAIN ) ; ",
  "6561": "return new ResponseEntity < String > ( exception . getMessage ( ) , headers , HttpStatus . INTERNAL_SERVER_ERROR ) ; ",
  "6562": "} @ ExceptionHandler ( InvalidParameterException . class ) ",
  "6563": "public ResponseEntity < String > handleControllerException ( InvalidParameterException exception ) { ",
  "6564": "return new ResponseEntity < String > ( exception . getMessage ( ) , headers , HttpStatus . BAD_REQUEST ) ; ",
  "6565": "} @ ExceptionHandler ( InvalidSchemaException . class ) ",
  "6566": "public ResponseEntity < String > handleInvalidSchemaException ( InvalidSchemaException exception ) { ",
  "6567": "return new ResponseEntity < String > ( exception . getMessage ( ) , headers , HttpStatus . NOT_FOUND ) ; ",
  "6568": "} private static Pair < String , String > splitKey ( String key ) { ",
  "6569": "String dimension = null ; ",
  "6570": "String info = null ; ",
  "6571": "if ( ! key . contains ( \".\" ) ) { ",
  "6572": "dimension = key ; ",
  "6573": "dimension = key . substring ( 0 , key . indexOf ( '.' ) ) ; ",
  "6574": "info = key . substring ( key . indexOf ( '.' ) + 1 , key . length ( ) ) ; ",
  "6575": "return Pair . of ( dimension , info ) ; ",
  "6576": "} private List < ReportRecord > inMemoryPagination ( final List < ReportRecord > recordList , QueryParameterEnvelope queryParameterEnvelope ) { ",
  "6577": "final QueryParameterAware pageSize = queryParameterEnvelope . getPageSize ( ) ; ",
  "6578": "final QueryParameterAware pageNumber = queryParameterEnvelope . getPageNumber ( ) ; ",
  "6579": "if ( pageSize != null && pageNumber != null ) { ",
  "6580": "final Integer pageSizeValue = ( ( PageSizeConstraint ) pageSize ) . getPageSizeValue ( ) ; ",
  "6581": "final Integer pageValue = ( ( PageNumberConstraint ) pageNumber ) . getPageNumberValue ( ) - 1 ; ",
  "6582": "int offset = pageValue * pageSizeValue ; ",
  "6583": "return recordList . subList ( offset > recordList . size ( ) ? recordList . size ( ) : offset , offset + pageSizeValue > recordList . size ( ) ",
  "6584": "? recordList . size ( ) : offset + pageSizeValue ) ; ",
  "6585": "return recordList ; ",
  "6586": "} public final boolean containsColumn ( String columnName ) { ",
  "6587": "if ( StringUtils . isNotBlank ( columnName ) ) { ",
  "6588": "return sqlTableColumns . containsKey ( columnName ) ; ",
  "6589": "} public boolean isEquivalent ( DimensionTable otherDim , Collection < Error > errors ) { ",
  "6590": "if ( this . informationNameToColumn . size ( ) != otherDim . informationNameToColumn . size ( ) ) { ",
  "6591": "for ( Entry < String , AbstractSqlColumn > entry : this . informationNameToColumn . entrySet ( ) ) { ",
  "6592": "AbstractSqlColumn otherCol = otherDim . informationNameToColumn . get ( entry . getKey ( ) ) ; ",
  "6593": "if ( otherCol == null ) { ",
  "6594": "if ( ! otherCol . getBusinessName ( ) . equals ( entry . getValue ( ) . getBusinessName ( ) ) ) { ",
  "6595": "if ( otherCol . getColumnType ( ) != entry . getValue ( ) . getColumnType ( ) ) { ",
  "6596": "if ( ! otherDim . getDefaultSearchColumn ( ) . getBusinessName ( ) . equals ( this . getDefaultSearchColumn ( ) . getBusinessName ( ) ) ) { ",
  "6597": "if ( ! otherDim . getDefaultGroupByColumn ( ) . getBusinessName ( ) . equals ( this . getDefaultGroupByColumn ( ) . getBusinessName ( ) ) ) { ",
  "6598": "if ( ! otherDim . getLinkedTables ( ) . equals ( this . getLinkedTables ( ) ) ) { ",
  "6599": "} public < T extends MeasureAppender > T retrieveSummary ( SchemaDefinition schemaDefinition , Class < T > resultClazz , QueryParameter queryParameter ) throws NovieRuntimeException { ",
  "6600": "final SqlQueryBuilder < T > sqlQueryBuilder = new SqlQueryBuilder < T > ( schemaDefinition , resultClazz , ",
  "6601": "queryParameter . partialCopy ( QueryParameterKind . GROUPS , QueryParameterKind . PAGE ) ) ; ",
  "6602": "List < T > result = executeQuery ( sqlQueryBuilder ) ; ",
  "6603": "return result . get ( 0 ) ; ",
  "6604": "} public < T extends MeasureAppender > List < T > retrieveRecords ( SchemaDefinition schemaDefinition , Class < T > resultClazz , QueryParameter queryParameter ) throws NovieRuntimeException { ",
  "6605": "final SqlQueryBuilder < T > sqlQueryBuilder = new SqlQueryBuilder < T > ( schemaDefinition , resultClazz , queryParameter ) ; ",
  "6606": "return executeQuery ( sqlQueryBuilder ) ; ",
  "6607": "} private < T extends MeasureAppender > List < T > executeQuery ( final SqlQueryBuilder < T > sqlQueryBuilder ) throws NovieRuntimeException { ",
  "6608": "sqlQueryBuilder . buildQuery ( ) ; ",
  "6609": "final String queryString = sqlQueryBuilder . getQueryString ( ) ; ",
  "6610": "LOG . debug ( queryString ) ; ",
  "6611": "long beforeQuery = System . currentTimeMillis ( ) ; ",
  "6612": "List < T > returnValue = jdbcTemplate . query ( queryString , sqlQueryBuilder . getMapSqlParameterSource ( ) , sqlQueryBuilder ) ; ",
  "6613": "for ( Entry < String , Object > e : sqlQueryBuilder . getMapSqlParameterSource ( ) . getValues ( ) . entrySet ( ) ) { ",
  "6614": "sb . append ( \",\" ) ; ",
  "6615": "sb . append ( e . getKey ( ) ) ; ",
  "6616": "sb . append ( \"=\" ) ; ",
  "6617": "sb . append ( e . getValue ( ) ) ; ",
  "6618": "LOG . debug ( sb . toString ( ) ) ; ",
  "6619": "} private static synchronized void initializeForType1 ( ) { ",
  "6620": "if ( type1Initialized == true ) { ",
  "6621": "RANDOM = new SecureRandom ( ) ; ",
  "6622": "_seq = ( short ) RANDOM . nextInt ( MAX_14BIT ) ; ",
  "6623": "byte [ ] ip = null ; ",
  "6624": "ip = InetAddress . getLocalHost ( ) . getAddress ( ) ; ",
  "6625": "throw new NestableRuntimeException ( ioe ) ; ",
  "6626": "IP = new byte [ 6 ] ; ",
  "6627": "RANDOM . nextBytes ( IP ) ; ",
  "6628": "System . arraycopy ( ip , 0 , IP , 2 , ip . length ) ; ",
  "6629": "type1Initialized = true ; ",
  "6630": "} public static byte [ ] next ( ) { ",
  "6631": "if ( type1Initialized == false ) { ",
  "6632": "initializeForType1 ( ) ; ",
  "6633": "byte [ ] uuid = new byte [ 16 ] ; ",
  "6634": "System . arraycopy ( IP , 0 , uuid , 10 , IP . length ) ; ",
  "6635": "long now = 0 ; ",
  "6636": "synchronized ( Type1UUID . class ) { ",
  "6637": "now = getTime ( ) ; ",
  "6638": "uuid [ IDX_TIME_SEQ ] = ( byte ) ( ( _seq & 0x3F00 ) > > > 8 ) ; ",
  "6639": "uuid [ IDX_VARIATION ] |= 0x80 ; ",
  "6640": "uuid [ IDX_TIME_SEQ + 1 ] = ( byte ) ( _seq & 0xFF ) ; ",
  "6641": "byte [ ] timeBytes = toBytes ( now ) ; ",
  "6642": "System . arraycopy ( timeBytes , TS_TIME_LO_IDX , uuid , IDX_TIME_LO , TS_TIME_LO_LEN ) ; ",
  "6643": "System . arraycopy ( timeBytes , TS_TIME_MID_IDX , uuid , IDX_TIME_MID , TS_TIME_MID_LEN ) ; ",
  "6644": "System . arraycopy ( timeBytes , TS_TIME_HI_IDX , uuid , IDX_TIME_HI , TS_TIME_HI_LEN ) ; ",
  "6645": "uuid [ IDX_TYPE ] |= TYPE_TIME_BASED ; ",
  "6646": "return uuid ; ",
  "6647": "} static long getTime ( ) { ",
  "6648": "if ( RANDOM == null ) ",
  "6649": "long newTime = getUUIDTime ( ) ; ",
  "6650": "if ( newTime <= _lastMillis ) { ",
  "6651": "incrementSequence ( ) ; ",
  "6652": "newTime = getUUIDTime ( ) ; ",
  "6653": "_lastMillis = newTime ; ",
  "6654": "return newTime ; ",
  "6655": "} private static long getUUIDTime ( ) { ",
  "6656": "if ( _currentMillis != System . currentTimeMillis ( ) ) { ",
  "6657": "_currentMillis = System . currentTimeMillis ( ) ; ",
  "6658": "_counter = 0 ; ",
  "6659": "if ( _counter + 1 >= MILLI_MULT ) { ",
  "6660": "_currentMillis ++ ; ",
  "6661": "long currentTime = ( _currentMillis + GREG_OFFSET ) * MILLI_MULT ; ",
  "6662": "return currentTime + _counter ++ ; ",
  "6663": "} void internalize ( ContentManagerImpl contentManager , boolean readOnly ) { ",
  "6664": "this . contentManager = contentManager ; ",
  "6665": "updated = false ; ",
  "6666": "newcontent = false ; ",
  "6667": "this . readOnly = readOnly ; ",
  "6668": "} public void reset ( Map < String , Object > updatedMap ) { ",
  "6669": "if ( ! readOnly ) { ",
  "6670": "this . content = ImmutableMap . copyOf ( updatedMap ) ; ",
  "6671": "updatedContent . clear ( ) ; ",
  "6672": "} public void setProperty ( String key , Object value ) { ",
  "6673": "if ( readOnly ) { ",
  "6674": "Object o = content . get ( key ) ; ",
  "6675": "if ( ! value . equals ( o ) ) { ",
  "6676": "updatedContent . put ( key , value ) ; ",
  "6677": "updated = true ; ",
  "6678": "} else if ( updatedContent . containsKey ( key ) && ! value . equals ( updatedContent . get ( key ) ) ) { ",
  "6679": "} public void processRequest ( HttpServletRequest request ) throws IOException , ",
  "6680": "FileUploadException , StorageClientException , AccessDeniedException { ",
  "6681": "boolean debug = LOGGER . isDebugEnabled ( ) ; ",
  "6682": "if ( ServletFileUpload . isMultipartContent ( request ) ) { ",
  "6683": "ServletFileUpload upload = new ServletFileUpload ( ) ; ",
  "6684": "FileItemIterator iterator = upload . getItemIterator ( request ) ; ",
  "6685": "FileItemStream item = iterator . next ( ) ; ",
  "6686": "String name = item . getFieldName ( ) ; ",
  "6687": "InputStream stream = item . openStream ( ) ; ",
  "6688": "ParameterType pt = ParameterType . typeOfRequestParameter ( name ) ; ",
  "6689": "String propertyName = RequestUtils . propertyName ( pt . getPropertyName ( name ) ) ; ",
  "6690": "RequestUtils . accumulate ( stores . get ( pt ) , propertyName , RequestUtils . toValue ( name , Streams . asString ( stream ) ) ) ; ",
  "6691": "feedback . add ( pt . feedback ( propertyName ) ) ; ",
  "6692": "if ( streamProcessor != null ) { ",
  "6693": "feedback . addAll ( streamProcessor . processStream ( name , StorageClientUtils . getObjectName ( item . getName ( ) ) , item . getContentType ( ) , stream , this ) ) ; ",
  "6694": "Map < String , String [ ] > parameters = request . getParameterMap ( ) ; ",
  "6695": "Set < Entry < String , String [ ] > > entries = parameters . entrySet ( ) ; ",
  "6696": "for ( Entry < String , String [ ] > param : entries ) { ",
  "6697": "String name = ( String ) param . getKey ( ) ; ",
  "6698": "RequestUtils . accumulate ( stores . get ( pt ) , propertyName , RequestUtils . toValue ( name , param . getValue ( ) ) ) ; ",
  "6699": "} public void resetProperties ( ) { ",
  "6700": "for ( Entry < ParameterType , Map < String , Object > > e : stores . entrySet ( ) ) { ",
  "6701": "e . getValue ( ) . clear ( ) ; ",
  "6702": "} public static String calculateRFC2104HMAC ( String data , String key ) ",
  "6703": "throws java . security . SignatureException { ",
  "6704": "byte [ ] keyBytes = key . getBytes ( \"UTF-8\" ) ; ",
  "6705": "SecretKeySpec signingKey = new SecretKeySpec ( keyBytes , HMAC_SHA1_ALGORITHM ) ; ",
  "6706": "Mac mac = Mac . getInstance ( HMAC_SHA1_ALGORITHM ) ; ",
  "6707": "mac . init ( signingKey ) ; ",
  "6708": "byte [ ] rawHmac = mac . doFinal ( data . getBytes ( \"UTF-8\" ) ) ; ",
  "6709": "return Base64 . encodeBase64URLSafeString ( rawHmac ) ; ",
  "6710": "} catch ( InvalidKeyException e ) { ",
  "6711": "protected void batchRequest ( HttpServletRequest request , ",
  "6712": "HttpServletResponse response , boolean allowModify ) throws IOException , ServletException { ",
  "6713": "String json = request . getParameter ( REQUESTS_PARAMETER ) ; ",
  "6714": "String template = request . getParameter ( REQUEST_TEMPLATE ) ; ",
  "6715": "if ( template != null && template . length ( ) > 0 ) { ",
  "6716": "if ( templateService . checkTemplateExists ( template ) ) { ",
  "6717": "StringWriter processedTemplate = new StringWriter ( ) ; ",
  "6718": "templateService . process ( request . getParameterMap ( ) , \"UTF-8\" , processedTemplate , template ) ; ",
  "6719": "json = processedTemplate . toString ( ) ; ",
  "6720": "batchProcessor . batchRequest ( request , response , json , allowModify ) ; ",
  "6721": "} public static void addAcl ( boolean grant , Permission permssion , String key , ",
  "6722": "List < AclModification > modifications ) { ",
  "6723": "if ( grant ) { ",
  "6724": "key = AclModification . grantKey ( key ) ; ",
  "6725": "key = AclModification . denyKey ( key ) ; ",
  "6726": "modifications . add ( new AclModification ( key , permssion . getPermission ( ) , ",
  "6727": "AclModification . Operation . OP_OR ) ) ; ",
  "6728": "} public static void removeAcl ( boolean grant , Permission permssion , String key , ",
  "6729": "modifications . add ( new AclModification ( key , ~ permssion . getPermission ( ) , ",
  "6730": "AclModification . Operation . OP_AND ) ) ; ",
  "6731": "} public static void filterAcl ( Map < String , Object > acl , boolean grant , Permission permission , ",
  "6732": "boolean set , List < AclModification > modifications ) { ",
  "6733": "int perm = permission . getPermission ( ) ; ",
  "6734": "Operation op = Operation . OP_OR ; ",
  "6735": "if ( ! set ) { ",
  "6736": "perm = 0xffff ^ perm ; ",
  "6737": "op = Operation . OP_AND ; ",
  "6738": "for ( Entry < String , Object > ace : acl . entrySet ( ) ) { ",
  "6739": "String key = ace . getKey ( ) ; ",
  "6740": "if ( AclModification . isGrant ( key ) == grant ) { ",
  "6741": "modifications . add ( new AclModification ( key , perm , op ) ) ; ",
  "6742": "} public static String getPrincipal ( String principalKey ) { ",
  "6743": "if ( principalKey == null ) { ",
  "6744": "return principalKey ; ",
  "6745": "if ( principalKey . length ( ) <= GRANTED_MARKER . length ( ) ) { ",
  "6746": "if ( principalKey . endsWith ( GRANTED_MARKER ) ) { ",
  "6747": "return principalKey . substring ( 0 , principalKey . length ( ) - GRANTED_MARKER . length ( ) ) ; ",
  "6748": "} else if ( principalKey . endsWith ( DENIED_MARKER ) ) { ",
  "6749": "return principalKey . substring ( 0 , principalKey . length ( ) - DENIED_MARKER . length ( ) ) ; ",
  "6750": "} public static Permission [ ] listPermissions ( int perms ) { ",
  "6751": "List < Permission > permissions = Lists . newArrayList ( ) ; ",
  "6752": "for ( Permission p : Permissions . PRIMARY_PERMISSIONS ) { ",
  "6753": "if ( ( perms & p . getPermission ( ) ) == p . getPermission ( ) ) { ",
  "6754": "permissions . add ( p ) ; ",
  "6755": "return permissions . toArray ( new Permission [ permissions . size ( ) ] ) ; ",
  "6756": "} private static < K , V > ImmutableMap < K , V > createDelegate ( ",
  "6757": "final Map < K , V > base , ",
  "6758": "final Set < ? extends K > keys , ",
  "6759": "final Function < K , V > augmentation ",
  "6760": "final ImmutableMap . Builder < K , V > builder = ImmutableMap . builder ( ) ; ",
  "6761": "builder . putAll ( base ) ; ",
  "6762": "keys . stream ( ) ",
  "6763": ". filter ( key -> ! base . containsKey ( key ) ) ",
  "6764": ". forEach ( key -> builder . put ( key , augmentation . apply ( key ) ) ) ; ",
  "6765": "} public < V > Cache < V > getCache ( String name , CacheScope scope ) { ",
  "6766": "case INSTANCE : ",
  "6767": "return getInstanceCache ( name ) ; ",
  "6768": "case CLUSTERINVALIDATED : ",
  "6769": "case CLUSTERREPLICATED : ",
  "6770": "case REQUEST : ",
  "6771": "return getRequestCache ( name ) ; ",
  "6772": "case THREAD : ",
  "6773": "return getThreadCache ( name ) ; ",
  "6774": "private < V > Cache < V > getThreadCache ( String name ) { ",
  "6775": "Map < String , Cache < ? > > threadCacheMap = threadCacheMapHolder . get ( ) ; ",
  "6776": "Cache < V > threadCache = ( Cache < V > ) threadCacheMap . get ( name ) ; ",
  "6777": "if ( threadCache == null ) { ",
  "6778": "threadCache = new MapCacheImpl < V > ( ) ; ",
  "6779": "threadCacheMap . put ( name , threadCache ) ; ",
  "6780": "return threadCache ; ",
  "6781": "private < V > Cache < V > getRequestCache ( String name ) { ",
  "6782": "Map < String , Cache < ? > > requestCacheMap = requestCacheMapHolder . get ( ) ; ",
  "6783": "Cache < V > requestCache = ( Cache < V > ) requestCacheMap . get ( name ) ; ",
  "6784": "if ( requestCache == null ) { ",
  "6785": "requestCache = new MapCacheImpl < V > ( ) ; ",
  "6786": "requestCacheMap . put ( name , requestCache ) ; ",
  "6787": "return requestCache ; ",
  "6788": "} public void onDelete ( String zone , String path , String user , String resourceType , Map < String , Object > beforeEvent , String ... attributes ) { ",
  "6789": "String topic = DEFAULT_DELETE_TOPIC ; ",
  "6790": "if ( deleteTopics . containsKey ( zone ) ) { ",
  "6791": "topic = deleteTopics . get ( zone ) ; ",
  "6792": "postEvent ( topic , path , user , resourceType , beforeEvent , attributes ) ; ",
  "6793": "} public void onUpdate ( String zone , String path , String user , String resourceType , boolean isNew , Map < String , Object > beforeEvent , String ... attributes ) { ",
  "6794": "String topic = DEFAULT_UPDATE_TOPIC ; ",
  "6795": "topic = DEFAULT_CREATE_TOPIC ; ",
  "6796": "topic = createTopics . get ( zone ) ; ",
  "6797": "topic = updateTopics . get ( zone ) ; ",
  "6798": "} public static String getAltField ( String field , String streamId ) { ",
  "6799": "if ( streamId == null ) { ",
  "6800": "return field + \"/\" + streamId ; ",
  "6801": "} public static String insecureHash ( String naked ) { ",
  "6802": "return insecureHash ( naked . getBytes ( UTF8 ) ) ; ",
  "6803": "} catch ( UnsupportedEncodingException e3 ) { ",
  "6804": "public static < K , V > Map < K , V > getFilterMap ( Map < K , V > source , Map < K , V > modified , Set < K > include , Set < K > exclude , boolean includingRemoveProperties ) { ",
  "6805": "if ( ( modified == null || modified . size ( ) == 0 ) && ( include == null ) && ( exclude == null || exclude . size ( ) == 0 ) ) { ",
  "6806": "if ( source instanceof ImmutableMap ) { ",
  "6807": "return ImmutableMap . copyOf ( source ) ; ",
  "6808": "Builder < K , V > filteredMap = new ImmutableMap . Builder < K , V > ( ) ; ",
  "6809": "for ( Entry < K , V > e : source . entrySet ( ) ) { ",
  "6810": "K k = e . getKey ( ) ; ",
  "6811": "if ( include == null || include . contains ( k ) ) { ",
  "6812": "if ( exclude == null || ! exclude . contains ( k ) ) { ",
  "6813": "if ( modified != null && modified . containsKey ( k ) ) { ",
  "6814": "V o = modified . get ( k ) ; ",
  "6815": "if ( o instanceof Map ) { ",
  "6816": "filteredMap . put ( k , ",
  "6817": "( V ) getFilterMap ( ( Map < K , V > ) o , null , null , exclude , includingRemoveProperties ) ) ; ",
  "6818": "} else if ( includingRemoveProperties ) { ",
  "6819": "filteredMap . put ( k , o ) ; ",
  "6820": "} else if ( ! ( o instanceof RemoveProperty ) ) { ",
  "6821": "Object o = e . getValue ( ) ; ",
  "6822": "( V ) getFilterMap ( ( Map < K , V > ) e . getValue ( ) , null , null , exclude , includingRemoveProperties ) ) ; ",
  "6823": "filteredMap . put ( k , e . getValue ( ) ) ; ",
  "6824": "if ( modified != null ) { ",
  "6825": "for ( Entry < K , V > e : modified . entrySet ( ) ) { ",
  "6826": "if ( ! source . containsKey ( k ) ) { ",
  "6827": "V v = e . getValue ( ) ; ",
  "6828": "if ( ! ( v instanceof RemoveProperty ) && v != null ) { ",
  "6829": "filteredMap . put ( k , v ) ; ",
  "6830": "return filteredMap . build ( ) ; ",
  "6831": "public static Map < String , Object > getFilteredAndEcodedMap ( Map < String , Object > source , ",
  "6832": "Set < String > filter ) { ",
  "6833": "Map < String , Object > filteredMap = Maps . newHashMap ( ) ; ",
  "6834": "for ( Entry < String , Object > e : source . entrySet ( ) ) { ",
  "6835": "if ( ! filter . contains ( e . getKey ( ) ) ) { ",
  "6836": "filteredMap . put ( e . getKey ( ) , ",
  "6837": "getFilteredAndEcodedMap ( ( Map < String , Object > ) o , filter ) ) ; ",
  "6838": "filteredMap . put ( e . getKey ( ) , o ) ; ",
  "6839": "return filteredMap ; ",
  "6840": "} public static String shardPath ( String id ) { ",
  "6841": "String hash = insecureHash ( id ) ; ",
  "6842": "return hash . substring ( 0 , 2 ) + \"/\" + hash . substring ( 2 , 4 ) + \"/\" + hash . substring ( 4 , 6 ) + \"/\" ",
  "6843": "} public static String arrayEscape ( String string ) { ",
  "6844": "string = string . replaceAll ( \"%\" , \"%1\" ) ; ",
  "6845": "string = string . replaceAll ( \",\" , \"%2\" ) ; ",
  "6846": "} public static String arrayUnEscape ( String string ) { ",
  "6847": "string = string . replaceAll ( \"%2\" , \",\" ) ; ",
  "6848": "string = string . replaceAll ( \"%1\" , \"%\" ) ; ",
  "6849": "} public static Session adaptToSession ( Object source ) { ",
  "6850": "if ( source instanceof SessionAdaptable ) { ",
  "6851": "return ( ( SessionAdaptable ) source ) . getSession ( ) ; ",
  "6852": "Object userManager = safeMethod ( source , \"getUserManager\" , new Object [ 0 ] , new Class [ 0 ] ) ; ",
  "6853": "if ( userManager != null ) { ",
  "6854": "return ( Session ) safeMethod ( userManager , \"getSession\" , new Object [ 0 ] , new Class [ 0 ] ) ; ",
  "6855": "} private static Object safeMethod ( Object target , String methodName , Object [ ] args , ",
  "6856": "@ SuppressWarnings ( \"rawtypes\" ) Class [ ] argsTypes ) { ",
  "6857": "Method m = target . getClass ( ) . getMethod ( methodName , argsTypes ) ; ",
  "6858": "if ( ! m . isAccessible ( ) ) { ",
  "6859": "m . setAccessible ( true ) ; ",
  "6860": "return m . invoke ( target , args ) ; ",
  "6861": "} public static void deleteTree ( ContentManager contentManager , String path ) ",
  "6862": "throws AccessDeniedException , StorageClientException { ",
  "6863": "Content content = contentManager . get ( path ) ; ",
  "6864": "for ( String childPath : content . listChildPaths ( ) ) { ",
  "6865": "deleteTree ( contentManager , childPath ) ; ",
  "6866": "contentManager . delete ( path ) ; ",
  "6867": "V o = super . remove ( key ) ; ",
  "6868": "if ( o instanceof ThreadBound ) { ",
  "6869": "( ( ThreadBound ) o ) . unbind ( ) ; ",
  "6870": "for ( String k : super . keySet ( ) ) { ",
  "6871": "Object o = get ( k ) ; ",
  "6872": "super . clear ( ) ; ",
  "6873": "} public void removeChildren ( String key ) { ",
  "6874": "super . remove ( key ) ; ",
  "6875": "if ( ! key . endsWith ( \"/\" ) ) { ",
  "6876": "key = key + \"/\" ; ",
  "6877": "Set < String > keys = super . keySet ( ) ; ",
  "6878": "for ( String k : keys ) { ",
  "6879": "if ( ( k ) . startsWith ( key ) ) { ",
  "6880": "super . remove ( k ) ; ",
  "6881": "} public Object getProperty ( QName name ) { ",
  "6882": "String n = getFullName ( name ) ; ",
  "6883": "Object o = content . getProperty ( n ) ; ",
  "6884": "} public LockToken createAndLock ( String name , LockTimeout timeout , ",
  "6885": "LockInfo lockInfo ) throws NotAuthorizedException { ",
  "6886": "String newPath = StorageClientUtils . newPath ( path , name ) ; ",
  "6887": "LockHolder lockHolder = new LockHolder ( lockInfo , timeout ) ; ",
  "6888": "String token = session . getLockManager ( ) . lock ( newPath , ",
  "6889": "lockHolder . getTimeoutInSeconds ( ) , lockHolder . toString ( ) ) ; ",
  "6890": "return new LockToken ( token , lockInfo , timeout ) ; ",
  "6891": "} catch ( StorageClientException e ) { ",
  "6892": "LOGGER . error ( e . getMessage ( ) , e ) ; ",
  "6893": "throw new NotAuthorizedException ( this ) ; ",
  "6894": "} catch ( AlreadyLockedException e ) { ",
  "6895": "} private static String getSlingHome ( Map < String , String > commandLine ) { ",
  "6896": "String source = null ; ",
  "6897": "String slingHome = commandLine . get ( \"c\" ) ; ",
  "6898": "if ( slingHome != null ) { ",
  "6899": "slingHome = System . getProperty ( SharedConstants . SLING_HOME ) ; ",
  "6900": "slingHome = System . getenv ( ENV_SLING_HOME ) ; ",
  "6901": "source = \"default\" ; ",
  "6902": "slingHome = SharedConstants . SLING_HOME_DEFAULT ; ",
  "6903": "System . setProperty ( SharedConstants . SLING_HOME , slingHome ) ; ",
  "6904": "return slingHome ; ",
  "6905": "} static Map < String , String > parseCommandLine ( String [ ] args ) { ",
  "6906": "Map < String , String > commandLine = new HashMap < String , String > ( ) ; ",
  "6907": "boolean readUnparsed = false ; ",
  "6908": "for ( int argc = 0 ; args != null && argc < args . length ; argc ++ ) { ",
  "6909": "String arg = args [ argc ] ; ",
  "6910": "if ( readUnparsed ) { ",
  "6911": "commandLine . put ( arg , arg ) ; ",
  "6912": "} else if ( arg . startsWith ( \"-\" ) ) { ",
  "6913": "if ( arg . length ( ) == 1 ) { ",
  "6914": "readUnparsed = true ; ",
  "6915": "String key = String . valueOf ( arg . charAt ( 1 ) ) ; ",
  "6916": "if ( arg . length ( ) > 2 ) { ",
  "6917": "commandLine . put ( key , arg . substring ( 2 ) ) ; ",
  "6918": "argc ++ ; ",
  "6919": "if ( argc < args . length ",
  "6920": "&& ( args [ argc ] . equals ( \"-\" ) || ! args [ argc ] ",
  "6921": ". startsWith ( \"-\" ) ) ) { ",
  "6922": "commandLine . put ( key , args [ argc ] ) ; ",
  "6923": "commandLine . put ( key , key ) ; ",
  "6924": "argc -- ; ",
  "6925": "return commandLine ; ",
  "6926": "} static void info ( String message , Throwable t ) { ",
  "6927": "log ( System . out , \"*INFO*\" , message , t ) ; ",
  "6928": "} static void error ( String message , Throwable t ) { ",
  "6929": "log ( System . err , \"*ERROR*\" , message , t ) ; ",
  "6930": "} private static void log ( PrintStream out , String prefix , String message , ",
  "6931": "Throwable t ) { ",
  "6932": "final StringBuilder linePrefixBuilder = new StringBuilder ( ) ; ",
  "6933": "synchronized ( fmt ) { ",
  "6934": "linePrefixBuilder . append ( fmt . format ( new Date ( ) ) ) ; ",
  "6935": "linePrefixBuilder . append ( prefix ) ; ",
  "6936": "linePrefixBuilder . append ( Thread . currentThread ( ) . getName ( ) ) ; ",
  "6937": "final String linePrefix = linePrefixBuilder . toString ( ) ; ",
  "6938": "out . print ( linePrefix ) ; ",
  "6939": "out . println ( message ) ; ",
  "6940": "if ( t != null ) { ",
  "6941": "t . printStackTrace ( new PrintStream ( out ) { ",
  "6942": "public void println ( String x ) { ",
  "6943": "print ( linePrefix ) ; ",
  "6944": "super . println ( x ) ; ",
  "6945": "} protected Map < String , Object > getCached ( String keySpace , String columnFamily , String key ) throws StorageClientException { ",
  "6946": "Map < String , Object > m = null ; ",
  "6947": "String cacheKey = getCacheKey ( keySpace , columnFamily , key ) ; ",
  "6948": "CacheHolder cacheHolder = getFromCacheInternal ( cacheKey ) ; ",
  "6949": "if ( cacheHolder != null ) { ",
  "6950": "m = cacheHolder . get ( ) ; ",
  "6951": "if ( m != null ) { ",
  "6952": "if ( m == null ) { ",
  "6953": "m = client . get ( keySpace , columnFamily , key ) ; ",
  "6954": "putToCacheInternal ( cacheKey , new CacheHolder ( m ) , true ) ; ",
  "6955": "} private String getCacheKey ( String keySpace , String columnFamily , String key ) throws StorageClientException { ",
  "6956": "if ( client instanceof RowHasher ) { ",
  "6957": "return ( ( RowHasher ) client ) . rowHash ( keySpace , columnFamily , key ) ; ",
  "6958": "return keySpace + \":\" + columnFamily + \":\" + key ; ",
  "6959": "} protected void removeCached ( String keySpace , String columnFamily , String key ) throws StorageClientException { ",
  "6960": "if ( sharedCache != null ) { ",
  "6961": "final String cacheKey = getCacheKey ( keySpace , columnFamily , key ) ; ",
  "6962": "putToCacheInternal ( cacheKey , new CacheHolder ( null , managerId ) , false ) ; ",
  "6963": "if ( client instanceof Disposer ) { ",
  "6964": "( ( Disposer ) client ) . registerDisposable ( new Disposable ( ) { ",
  "6965": "public void setDisposer ( Disposer disposer ) { ",
  "6966": "CacheHolder ch = sharedCache . get ( cacheKey ) ; ",
  "6967": "if ( ch != null && ch . wasLockedTo ( managerId ) ) { ",
  "6968": "sharedCache . remove ( cacheKey ) ; ",
  "6969": "client . remove ( keySpace , columnFamily , key ) ; ",
  "6970": "} protected void putCached ( String keySpace , String columnFamily , String key , Map < String , Object > encodedProperties , ",
  "6971": "boolean probablyNew ) throws StorageClientException { ",
  "6972": "String cacheKey = null ; ",
  "6973": "cacheKey = getCacheKey ( keySpace , columnFamily , key ) ; ",
  "6974": "if ( sharedCache != null && ! probablyNew ) { ",
  "6975": "CacheHolder ch = getFromCacheInternal ( cacheKey ) ; ",
  "6976": "if ( ch != null && ch . isLocked ( this . managerId ) ) { ",
  "6977": "client . insert ( keySpace , columnFamily , key , encodedProperties , probablyNew ) ; ",
  "6978": "} protected void activate ( Map < String , Object > properties ) throws Exception { ",
  "6979": "configProperties = properties ; ",
  "6980": "String [ ] safePostProcessorNames = ( String [ ] ) configProperties ",
  "6981": ". get ( SAFE_POSTPROCESSORS ) ; ",
  "6982": "if ( safePostProcessorNames == null ) { ",
  "6983": "safeOpenProcessors . add ( \"rss\" ) ; ",
  "6984": "safeOpenProcessors . add ( \"trustedLoginTokenProxyPostProcessor\" ) ; ",
  "6985": "for ( String pp : safePostProcessorNames ) { ",
  "6986": "safeOpenProcessors . add ( pp ) ; ",
  "6987": "String proxyHost = System . getProperty ( \"http.proxyHost\" , \"\" ) ; ",
  "6988": "if ( ! proxyHost . equals ( \"\" ) ) { ",
  "6989": "useJreProxy = true ; ",
  "6990": "} public ProxyResponse executeCall ( Map < String , Object > config , ",
  "6991": "Map < String , Object > headers , Map < String , Object > input , ",
  "6992": "InputStream requestInputStream , long requestContentLength , ",
  "6993": "String requestContentType ) throws ProxyClientException { ",
  "6994": "LOGGER . info ( ",
  "6995": "new Object [ ] { config , headers , input , requestInputStream , ",
  "6996": "requestContentLength , requestContentType } ) ; ",
  "6997": "bindConfig ( config ) ; ",
  "6998": "if ( config != null ",
  "6999": "&& config . containsKey ( CONFIG_REQUEST_PROXY_ENDPOINT ) ) { ",
  "7000": "String endpointURL = ( String ) config ",
  "7001": ". get ( CONFIG_REQUEST_PROXY_ENDPOINT ) ; ",
  "7002": "if ( isUnsafeProxyDefinition ( config ) ) { ",
  "7003": "URL u = new URL ( endpointURL ) ; ",
  "7004": "String host = u . getHost ( ) ; ",
  "7005": "if ( host . indexOf ( '$' ) >= 0 ) { ",
  "7006": "throw new ProxyClientException ( ",
  "7007": "+ u ) ; ",
  "7008": "Map < String , Object > context = Maps . newHashMap ( input ) ; ",
  "7009": "context . put ( \"config\" , configProperties ) ; ",
  "7010": "endpointURL = processUrlTemplate ( endpointURL , context ) ; ",
  "7011": "ProxyMethod proxyMethod = ProxyMethod . GET ; ",
  "7012": "if ( config . containsKey ( CONFIG_REQUEST_PROXY_METHOD ) ) { ",
  "7013": "proxyMethod = ProxyMethod . valueOf ( ( String ) config ",
  "7014": ". get ( CONFIG_REQUEST_PROXY_METHOD ) ) ; ",
  "7015": "HttpClient client = getHttpClient ( ) ; ",
  "7016": "HttpUriRequest method = null ; ",
  "7017": "switch ( proxyMethod ) { ",
  "7018": "case GET : ",
  "7019": "if ( config . containsKey ( CONFIG_LIMIT_GET_SIZE ) ) { ",
  "7020": "long maxSize = ( Long ) config . get ( CONFIG_LIMIT_GET_SIZE ) ; ",
  "7021": "HttpHead h = new HttpHead ( endpointURL ) ; ",
  "7022": "HttpParams params = h . getParams ( ) ; ",
  "7023": "params . setBooleanParameter ( ",
  "7024": "\"http.protocol.reject-head-body\" , true ) ; ",
  "7025": "h . setParams ( params ) ; ",
  "7026": "populateMessage ( method , config , headers ) ; ",
  "7027": "HttpResponse response = client . execute ( h ) ; ",
  "7028": "if ( response . getStatusLine ( ) . getStatusCode ( ) == 200 ) { ",
  "7029": "Header contentLengthHeader = response ",
  "7030": ". getLastHeader ( \"Content-Length\" ) ; ",
  "7031": "if ( contentLengthHeader != null ) { ",
  "7032": "long length = Long ",
  "7033": ". parseLong ( contentLengthHeader ",
  "7034": ". getValue ( ) ) ; ",
  "7035": "if ( length > maxSize ) { ",
  "7036": "return new ProxyResponseImpl ( ",
  "7037": "HttpServletResponse . SC_PRECONDITION_FAILED , ",
  "7038": "return new ProxyResponseImpl ( response ) ; ",
  "7039": "method = new HttpGet ( endpointURL ) ; ",
  "7040": "case HEAD : ",
  "7041": "method = new HttpHead ( endpointURL ) ; ",
  "7042": "case OPTIONS : ",
  "7043": "method = new HttpOptions ( endpointURL ) ; ",
  "7044": "case POST : ",
  "7045": "method = new HttpPost ( endpointURL ) ; ",
  "7046": "case PUT : ",
  "7047": "method = new HttpPut ( endpointURL ) ; ",
  "7048": "if ( requestInputStream == null ",
  "7049": "&& ! config . containsKey ( CONFIG_PROXY_REQUEST_TEMPLATE ) ) { ",
  "7050": "if ( method instanceof HttpPost ) { ",
  "7051": "HttpPost postMethod = ( HttpPost ) method ; ",
  "7052": "MultipartEntity multipart = new MultipartEntity ( ) ; ",
  "7053": "for ( Entry < String , Object > param : input . entrySet ( ) ) { ",
  "7054": "String key = param . getKey ( ) ; ",
  "7055": "Object value = param . getValue ( ) ; ",
  "7056": "if ( value instanceof Object [ ] ) { ",
  "7057": "for ( Object val : ( Object [ ] ) value ) { ",
  "7058": "addPart ( multipart , key , val ) ; ",
  "7059": "addPart ( multipart , key , value ) ; ",
  "7060": "postMethod . setEntity ( multipart ) ; ",
  "7061": "if ( method instanceof HttpEntityEnclosingRequestBase ) { ",
  "7062": "String contentType = requestContentType ; ",
  "7063": "if ( contentType == null ",
  "7064": "&& config ",
  "7065": ". containsKey ( CONFIG_REQUEST_CONTENT_TYPE ) ) { ",
  "7066": "contentType = ( String ) config ",
  "7067": ". get ( CONFIG_REQUEST_CONTENT_TYPE ) ; ",
  "7068": "contentType = APPLICATION_OCTET_STREAM ; ",
  "7069": "HttpEntityEnclosingRequestBase eemethod = ( HttpEntityEnclosingRequestBase ) method ; ",
  "7070": "if ( requestInputStream != null ) { ",
  "7071": "eemethod . setHeader ( HttpHeaders . CONTENT_TYPE , ",
  "7072": "contentType ) ; ",
  "7073": "eemethod . setEntity ( new InputStreamEntity ( ",
  "7074": "requestInputStream , requestContentLength ) ) ; ",
  "7075": "StringWriter body = new StringWriter ( ) ; ",
  "7076": "templateService . evaluate ( context , body , ( String ) config ",
  "7077": ". get ( \"path\" ) , ( String ) config ",
  "7078": ". get ( CONFIG_PROXY_REQUEST_TEMPLATE ) ) ; ",
  "7079": "byte [ ] soapBodyContent = body . toString ( ) . getBytes ( ",
  "7080": "\"UTF-8\" ) ; ",
  "7081": "new ByteArrayInputStream ( soapBodyContent ) , ",
  "7082": "soapBodyContent . length ) ) ; ",
  "7083": "HttpResponse response = client . execute ( method ) ; ",
  "7084": "if ( response . getStatusLine ( ) . getStatusCode ( ) == 302 ",
  "7085": "&& method instanceof HttpEntityEnclosingRequestBase ) { ",
  "7086": "String url = response . getFirstHeader ( \"Location\" ) . getValue ( ) ; ",
  "7087": "method = new HttpGet ( url ) ; ",
  "7088": "response = client . execute ( method ) ; ",
  "7089": "} catch ( ProxyClientException e ) { ",
  "7090": "unbindConfig ( ) ; ",
  "7091": "} public void log ( int level , String msg ) { ",
  "7092": "if ( inDebugMode ) { ",
  "7093": "logger . info ( msg ) ; ",
  "7094": "case LogChute . DEBUG_ID : ",
  "7095": "logger . debug ( msg ) ; ",
  "7096": "case LogChute . ERROR_ID : ",
  "7097": "logger . error ( msg ) ; ",
  "7098": "case LogChute . INFO_ID : ",
  "7099": "case LogChute . TRACE_ID : ",
  "7100": "logger . trace ( msg ) ; ",
  "7101": "case LogChute . WARN_ID : ",
  "7102": "} private void initComponents ( ) { ",
  "7103": "launchButton = new javax . swing . JButton ( ) ; ",
  "7104": "statusLabel = new javax . swing . JLabel ( ) ; ",
  "7105": "exitButton = new javax . swing . JButton ( ) ; ",
  "7106": "headingLabel = new javax . swing . JLabel ( ) ; ",
  "7107": "disclaimerLabel = new javax . swing . JLabel ( ) ; ",
  "7108": "browserButton = new javax . swing . JButton ( ) ; ",
  "7109": "setDefaultCloseOperation ( javax . swing . WindowConstants . EXIT_ON_CLOSE ) ; ",
  "7110": "setName ( \"mainFrame\" ) ; ",
  "7111": "setResizable ( false ) ; ",
  "7112": "launchButton . setFont ( new java . awt . Font ( \"Arial\" , 0 , 13 ) ) ; ",
  "7113": "launchButton . setText ( \"Launch\" ) ; ",
  "7114": "launchButton . addActionListener ( new java . awt . event . ActionListener ( ) { ",
  "7115": "public void actionPerformed ( java . awt . event . ActionEvent evt ) { ",
  "7116": "launchButtonActionPerformed ( evt ) ; ",
  "7117": "statusLabel . setFont ( new java . awt . Font ( \"Arial\" , 0 , 12 ) ) ; ",
  "7118": "exitButton . setFont ( new java . awt . Font ( \"Arial\" , 0 , 13 ) ) ; ",
  "7119": "exitButton . setText ( \"Exit\" ) ; ",
  "7120": "exitButton . addActionListener ( new java . awt . event . ActionListener ( ) { ",
  "7121": "exitButtonActionPerformed ( evt ) ; ",
  "7122": "headingLabel . setBorder ( javax . swing . BorderFactory . createEtchedBorder ( ) ) ; ",
  "7123": "disclaimerLabel . setFont ( new java . awt . Font ( \"Arial\" , 0 , 13 ) ) ; ",
  "7124": "disclaimerLabel . setText ( \"jLabel1\" ) ; ",
  "7125": "disclaimerLabel . setVerticalAlignment ( javax . swing . SwingConstants . TOP ) ; ",
  "7126": "disclaimerLabel . setAutoscrolls ( true ) ; ",
  "7127": "disclaimerLabel . setBorder ( javax . swing . BorderFactory . createTitledBorder ( \"Disclaimer\" ) ) ; ",
  "7128": "browserButton . addActionListener ( new java . awt . event . ActionListener ( ) { ",
  "7129": "browserButtonActionPerformed ( evt ) ; ",
  "7130": "javax . swing . GroupLayout layout = new javax . swing . GroupLayout ( getContentPane ( ) ) ; ",
  "7131": "getContentPane ( ) . setLayout ( layout ) ; ",
  "7132": "layout . setHorizontalGroup ( layout . createParallelGroup ( ",
  "7133": "javax . swing . GroupLayout . Alignment . LEADING ) . addGroup ( ",
  "7134": "layout ",
  "7135": ". createSequentialGroup ( ) ",
  "7136": ". addGroup ( ",
  "7137": ". createParallelGroup ( javax . swing . GroupLayout . Alignment . LEADING ) ",
  "7138": ". addGap ( 27 , 27 , 27 ) ",
  "7139": ". addComponent ( launchButton ) ",
  "7140": ". addGap ( 18 , 18 , 18 ) ",
  "7141": ". addComponent ( statusLabel ) ",
  "7142": ". addPreferredGap ( ",
  "7143": "javax . swing . LayoutStyle . ComponentPlacement . RELATED , 162 , ",
  "7144": "Short . MAX_VALUE ) ",
  "7145": ". addComponent ( browserButton ) ",
  "7146": "javax . swing . LayoutStyle . ComponentPlacement . RELATED ) ",
  "7147": ". addComponent ( exitButton ) ) ",
  "7148": "javax . swing . GroupLayout . Alignment . CENTER , ",
  "7149": ". addContainerGap ( ) ",
  "7150": ". addComponent ( headingLabel , ",
  "7151": "javax . swing . GroupLayout . PREFERRED_SIZE , 149 , ",
  "7152": "javax . swing . GroupLayout . PREFERRED_SIZE ) ",
  "7153": ". addComponent ( disclaimerLabel , ",
  "7154": "javax . swing . GroupLayout . PREFERRED_SIZE , 493 , ",
  "7155": "javax . swing . GroupLayout . PREFERRED_SIZE ) ) ) ",
  "7156": ". addContainerGap ( ) ) ) ; ",
  "7157": "layout . linkSize ( javax . swing . SwingConstants . HORIZONTAL , new java . awt . Component [ ] { ",
  "7158": "exitButton , launchButton } ) ; ",
  "7159": "layout . setVerticalGroup ( layout ",
  "7160": "javax . swing . GroupLayout . Alignment . TRAILING , ",
  "7161": "javax . swing . GroupLayout . PREFERRED_SIZE , 215 , ",
  "7162": "javax . swing . GroupLayout . PREFERRED_SIZE , 116 , ",
  "7163": "javax . swing . GroupLayout . PREFERRED_SIZE ) ) ",
  "7164": ". addGap ( 58 , 58 , 58 ) ",
  "7165": "layout . createParallelGroup ( javax . swing . GroupLayout . Alignment . CENTER ) ",
  "7166": ". addComponent ( browserButton ) . addComponent ( exitButton ) ) ",
  "7167": ". addContainerGap ( ) ) ",
  "7168": ". addGap ( 259 , 259 , 259 ) ",
  "7169": ". createParallelGroup ( javax . swing . GroupLayout . Alignment . BASELINE ) ",
  "7170": ". addComponent ( launchButton , ",
  "7171": "javax . swing . GroupLayout . PREFERRED_SIZE , 50 , ",
  "7172": ". addComponent ( statusLabel ) ) ",
  "7173": ". addContainerGap ( javax . swing . GroupLayout . DEFAULT_SIZE , Short . MAX_VALUE ) ) ) ; ",
  "7174": "pack ( ) ; ",
  "7175": "} private void launchButtonActionPerformed ( java . awt . event . ActionEvent evt ) { ",
  "7176": "if ( runStatus == APP_NOT_RUNNING ) { ",
  "7177": "System . setSecurityManager ( null ) ; ",
  "7178": "NakamuraMain . main ( savedArgs ) ; ",
  "7179": "JOptionPane . showMessageDialog ( this , ",
  "7180": "\"Information\" , JOptionPane . INFORMATION_MESSAGE ) ; ",
  "7181": "runStatus = APP_RUNNING ; ",
  "7182": "isStartupFinished ( ) ; ",
  "7183": "JOptionPane . WARNING_MESSAGE ) ; ",
  "7184": "} private void isStartupFinished ( ) { ",
  "7185": "boolean started = false ; ",
  "7186": "while ( ! started ) { ",
  "7187": "if ( exists ( localhostURL ) ) ",
  "7188": "Thread . sleep ( 5 * 1000 ) ; ",
  "7189": "if ( started ) { ",
  "7190": "statusLabel . setForeground ( Color . green ) ; ",
  "7191": "launchButton . setEnabled ( false ) ; ",
  "7192": "browserButton . setEnabled ( true ) ; ",
  "7193": "} public static boolean exists ( String URLName ) { ",
  "7194": "HttpURLConnection . setFollowRedirects ( false ) ; ",
  "7195": "HttpURLConnection con = ( HttpURLConnection ) new URL ( URLName ) . openConnection ( ) ; ",
  "7196": "con . setRequestMethod ( \"HEAD\" ) ; ",
  "7197": "return ( con . getResponseCode ( ) == HttpURLConnection . HTTP_OK ) ; ",
  "7198": "} private void browserButtonActionPerformed ( java . awt . event . ActionEvent evt ) { ",
  "7199": "Desktop . getDesktop ( ) . browse ( new URL ( localhostURL ) . toURI ( ) ) ; ",
  "7200": "} protected ImageIcon createImageIcon ( String path , String description ) { ",
  "7201": "java . net . URL imgURL = getClass ( ) . getResource ( path ) ; ",
  "7202": "if ( imgURL != null ) { ",
  "7203": "return new ImageIcon ( imgURL , description ) ; ",
  "7204": "} protected String getLabelText ( String path ) throws IOException { ",
  "7205": "InputStream is = this . getClass ( ) . getResourceAsStream ( path ) ; ",
  "7206": "char [ ] buffer = new char [ 1024 ] ; ",
  "7207": "Reader reader = new BufferedReader ( new InputStreamReader ( is , \"UTF-8\" ) ) ; ",
  "7208": "while ( ( n = reader . read ( buffer ) ) != - 1 ) { ",
  "7209": "writer . write ( buffer , 0 , n ) ; ",
  "7210": "savedArgs = args ; ",
  "7211": "java . awt . EventQueue . invokeLater ( new Runnable ( ) { ",
  "7212": "new LaunchNakamura ( ) . setVisible ( true ) ; ",
  "7213": "} public boolean allowImpersonate ( Subject impersSubject ) { ",
  "7214": "String impersonators = ( String ) getProperty ( IMPERSONATORS_FIELD ) ; ",
  "7215": "if ( impersonators == null ) { ",
  "7216": "Set < String > impersonatorSet = ImmutableSet . copyOf ( StringUtils . split ( impersonators , ';' ) ) ; ",
  "7217": "for ( Principal p : impersSubject . getPrincipals ( ) ) { ",
  "7218": "if ( ADMIN_USER . equals ( p . getName ( ) ) || SYSTEM_USER . equals ( p . getName ( ) ) ",
  "7219": "|| impersonatorSet . contains ( p . getName ( ) ) ) { ",
  "7220": "} public void setLoginEnabled ( long from , long to , boolean day , TimeZone timeZone ) { ",
  "7221": "String enabledSetting = EnabledPeriod . getEnableValue ( from , to , day , timeZone ) ; ",
  "7222": "if ( enabledSetting == null ) { ",
  "7223": "removeProperty ( LOGIN_ENABLED_PERIOD_FIELD ) ; ",
  "7224": "setProperty ( LOGIN_ENABLED_PERIOD_FIELD , enabledSetting ) ; ",
  "7225": "} public V get ( String key ) { ",
  "7226": "Element e = cache . get ( key ) ; ",
  "7227": "if ( e == null ) { ",
  "7228": "return stats ( null ) ; ",
  "7229": "return stats ( e . getObjectValue ( ) ) ; ",
  "7230": "public V put ( String key , V payload ) { ",
  "7231": "V previous = null ; ",
  "7232": "if ( cache . isKeyInCache ( key ) ) { ",
  "7233": "previous = ( V ) e . getObjectValue ( ) ; ",
  "7234": "cache . put ( new Element ( key , payload ) ) ; ",
  "7235": "return previous ; ",
  "7236": "cache . remove ( key ) ; ",
  "7237": "List < ? > keys = cache . getKeys ( ) ; ",
  "7238": "for ( Object k : keys ) { ",
  "7239": "if ( ( ( String ) k ) . startsWith ( key ) ) { ",
  "7240": "cache . remove ( k ) ; ",
  "7241": "public List < V > list ( ) { ",
  "7242": "List < String > keys = cache . getKeys ( ) ; ",
  "7243": "List < V > values = new ArrayList < V > ( ) ; ",
  "7244": "Element e = cache . get ( k ) ; ",
  "7245": "values . add ( ( V ) e . getObjectValue ( ) ) ; ",
  "7246": "} public void handleEvent ( Event event ) { ",
  "7247": "String topic = event . getTopic ( ) ; ",
  "7248": "Session session = ( Session ) event . getProperty ( Session . class . getName ( ) ) ; ",
  "7249": "RepositorySession repositoryRession = null ; ",
  "7250": "Thread thisThread = Thread . currentThread ( ) ; ",
  "7251": "ClassLoader classloader = thisThread . getContextClassLoader ( ) ; ",
  "7252": "thisThread . setContextClassLoader ( this . getClass ( ) . getClassLoader ( ) ) ; ",
  "7253": "repositoryRession = new RepositorySessionImpl ( session , ",
  "7254": "repository ) ; ",
  "7255": "} catch ( ClientPoolException e1 ) { ",
  "7256": "LOGGER . error ( e1 . getMessage ( ) , e1 ) ; ",
  "7257": "} catch ( StorageClientException e1 ) { ",
  "7258": "} catch ( AccessDeniedException e1 ) { ",
  "7259": "Collection < IndexingHandler > contentIndexHandler = handlers ",
  "7260": ". get ( topic ) ; ",
  "7261": "if ( contentIndexHandler != null && contentIndexHandler . size ( ) > 0 ) { ",
  "7262": "BulkRequestBuilder bulk = client . prepareBulk ( ) ; ",
  "7263": "int added = 0 ; ",
  "7264": "for ( IndexingHandler indexingHandler : contentIndexHandler ) { ",
  "7265": "Collection < InputDocument > documents = indexingHandler ",
  "7266": ". getDocuments ( repositoryRession , event ) ; ",
  "7267": "for ( InputDocument in : documents ) { ",
  "7268": "if ( in . isDelete ( ) ) { ",
  "7269": "bulk . add ( client . prepareDelete ( in . getIndexName ( ) , ",
  "7270": "in . getDocumentType ( ) , in . getDocumentId ( ) ) ) ; ",
  "7271": "added ++ ; ",
  "7272": "IndexRequestBuilder r = client . prepareIndex ( ",
  "7273": "in . getIndexName ( ) , ",
  "7274": "in . getDocumentType ( ) , ",
  "7275": "in . getDocumentId ( ) ) ; ",
  "7276": "XContentBuilder d = XContentFactory ",
  "7277": ". jsonBuilder ( ) ; ",
  "7278": "d = d . startObject ( ) ; ",
  "7279": "for ( Entry < String , Object > e : in . getKeyData ( ) ) { ",
  "7280": "d = d . field ( e . getKey ( ) , e . getValue ( ) ) ; ",
  "7281": "r . setSource ( d . endObject ( ) ) ; ",
  "7282": "bulk . add ( r ) ; ",
  "7283": "if ( added > 0 ) { ",
  "7284": "BulkResponse resp = bulk . execute ( ) . actionGet ( ) ; ",
  "7285": "if ( resp . hasFailures ( ) ) { ",
  "7286": "for ( BulkItemResponse br : Iterables . adaptTo ( resp ",
  "7287": ". iterator ( ) ) ) { ",
  "7288": "if ( br . failed ( ) ) { ",
  "7289": "br . getFailureMessage ( ) ) ; ",
  "7290": "if ( repositoryRession != null ) { ",
  "7291": "repositoryRession . logout ( ) ; ",
  "7292": "thisThread . setContextClassLoader ( classloader ) ; ",
  "7293": "public void invalidate ( String keySpace , String columnFamily , Map < String , Object > queryProperties ) { ",
  "7294": "Map < String , CacheHolder > queryCache = client . getQueryCache ( ) ; ",
  "7295": "if ( queryCache == null ) { ",
  "7296": "String cacheKey = getCacheKey ( keySpace , columnFamily , queryProperties ) ; ",
  "7297": "if ( cacheKey != null ) { ",
  "7298": "queryCache . remove ( cacheKey ) ; ",
  "7299": "} public static Object toValue ( String name , Object value ) { ",
  "7300": "String [ ] parts = StringUtils . split ( name , \"@\" , 2 ) ; ",
  "7301": "String fieldName = null ; ",
  "7302": "String fieldType = \"String\" ; ",
  "7303": "if ( parts . length == 2 ) { ",
  "7304": "fieldType = parts [ 1 ] ; ",
  "7305": "fieldName = parts [ 0 ] ; ",
  "7306": "} else if ( parts . length == 1 ) { ",
  "7307": "int l = Array . getLength ( value ) ; ",
  "7308": "RequestParameterType < ? > rpt = TYPES . get ( fieldType ) ; ",
  "7309": "if ( rpt == null ) { ",
  "7310": "rpt = TYPES . get ( RequestParameterType . STRING ) ; ",
  "7311": "if ( ! fieldName . endsWith ( \"[]\" ) && l == 1 ) { ",
  "7312": "return rpt . newInstance ( Array . get ( value , 0 ) ) ; ",
  "7313": "Class < ? > componentType = rpt . getComponentType ( ) ; ",
  "7314": "Object [ ] a = ( Object [ ] ) Array . newInstance ( componentType , l ) ; ",
  "7315": "for ( int i = 0 ; i < l ; i ++ ) { ",
  "7316": "a [ i ] = rpt . newInstance ( Array . get ( value , i ) ) ; ",
  "7317": "return rpt . newInstance ( value ) ; ",
  "7318": "} protected void activate ( Map < String , Object > props ) { ",
  "7319": "sharedSecret = toString ( props . get ( \"sharedSecret\" ) , ",
  "7320": "\"e2KS54H35j6vS5Z38nK40\" ) ; ",
  "7321": "hostname = toString ( props . get ( \"hostname\" ) , \"localhost\" ) ; ",
  "7322": "port = toInteger ( props . get ( \"port\" ) , 80 ) ; ",
  "7323": "public Map < String , Object > getPropertiesForUpdate ( ) { ",
  "7324": "if ( ! readOnly && membersModified ) { ",
  "7325": "modifiedMap . put ( MEMBERS_FIELD , StringUtils . join ( members , ';' ) ) ; ",
  "7326": "Map < String , Object > propertiesForUpdate = super . getPropertiesForUpdate ( ) ; ",
  "7327": "return propertiesForUpdate ; ",
  "7328": "public Map < String , Object > getSafeProperties ( ) { ",
  "7329": "return super . getSafeProperties ( ) ; ",
  "7330": "} public void process ( Map < String , Object > config , Map < String , Object > templateParams , ",
  "7331": "HttpServletResponse response , ProxyResponse proxyResponse ) throws IOException { ",
  "7332": "for ( Entry < String , String [ ] > h : proxyResponse . getResponseHeaders ( ) . entrySet ( ) ) { ",
  "7333": "for ( String v : h . getValue ( ) ) { ",
  "7334": "response . setHeader ( h . getKey ( ) , v ) ; ",
  "7335": "int code = proxyResponse . getResultCode ( ) ; ",
  "7336": "response . setStatus ( code ) ; ",
  "7337": "IOUtils . copy ( proxyResponse . getResponseBodyAsInputStream ( ) , response ",
  "7338": ". getOutputStream ( ) ) ; ",
  "7339": "} public InputStream getResponseBodyAsInputStream ( ) throws IOException { ",
  "7340": "InputStream in = response . getEntity ( ) . getContent ( ) ; ",
  "7341": "leakedInputStreams . add ( in ) ; ",
  "7342": "} public String getResponseBodyAsString ( ) throws IOException { ",
  "7343": "String contentEncoding = getContentEncoding ( entity ) ; ",
  "7344": "InputStream in = entity . getContent ( ) ; ",
  "7345": "BufferedReader r = new BufferedReader ( new InputStreamReader ( in , ",
  "7346": "contentEncoding ) ) ; ",
  "7347": "String l = r . readLine ( ) ; ",
  "7348": "if ( l == null ) { ",
  "7349": "sb . append ( l ) . append ( \"\\n\" ) ; ",
  "7350": "r . close ( ) ; ",
  "7351": "for ( InputStream in : leakedInputStreams ) { ",
  "7352": "LOGGER . debug ( e . getMessage ( ) , e ) ; ",
  "7353": "} private ImmutableMap < C , V > mapContentToValues ( ",
  "7354": "final ImmutableMap < K , V > base ",
  "7355": "final ImmutableMap . Builder < C , V > builder = ImmutableMap . builder ( ) ; ",
  "7356": "for ( final Entry < K , V > entry : base . entrySet ( ) ) { ",
  "7357": "builder . put ( ",
  "7358": "this . key ( entry . getKey ( ) ) , ",
  "7359": "entry . getValue ( ) ",
  "7360": "} public StorageClient getClient ( ) throws ClientPoolException { ",
  "7361": "StorageClient client = ( StorageClient ) pool . borrowObject ( ) ; ",
  "7362": "return client ; ",
  "7363": "} public void releaseClient ( StorageClient client ) { ",
  "7364": "if ( client != null ) { ",
  "7365": "pool . returnObject ( client ) ; ",
  "7366": "} public PropertyAcl getPropertyAcl ( String objectType , String objectPath ) throws AccessDeniedException , StorageClientException { ",
  "7367": "long t = System . currentTimeMillis ( ) ; ",
  "7368": "checkOpen ( ) ; ",
  "7369": "compilingPermissions . inc ( ) ; ",
  "7370": "String key = this . getAclKey ( objectType , objectPath ) ; ",
  "7371": "Map < String , Object > objectAcl = getCached ( keySpace , aclColumnFamily , key ) ; ",
  "7372": "Set < String > orderedPrincipals = Sets . newLinkedHashSet ( ) ; ",
  "7373": "String principal = user . getId ( ) ; ",
  "7374": "if ( principal . startsWith ( \"_\" ) ) { ",
  "7375": "orderedPrincipals . add ( principal ) ; ",
  "7376": "for ( String principal : getPrincipals ( user ) ) { ",
  "7377": "if ( ! User . ANON_USER . equals ( user . getId ( ) ) ) { ",
  "7378": "orderedPrincipals . add ( Group . EVERYONE ) ; ",
  "7379": "Map < String , Integer > grants = Maps . newHashMap ( ) ; ",
  "7380": "Map < String , Integer > denies = Maps . newHashMap ( ) ; ",
  "7381": "for ( String principal : orderedPrincipals ) { ",
  "7382": "String ppk = PROPERTY_PRINCIPAL_STEM + principal ; ",
  "7383": "for ( Entry < String , Object > e : objectAcl . entrySet ( ) ) { ",
  "7384": "String k = e . getKey ( ) ; ",
  "7385": "if ( k . startsWith ( ppk ) ) { ",
  "7386": "String [ ] parts = StringUtils . split ( k . substring ( PROPERTY_PRINCIPAL_STEM . length ( ) ) , \"@\" ) ; ",
  "7387": "String propertyName = parts [ 1 ] ; ",
  "7388": "if ( AclModification . isDeny ( k ) ) { ",
  "7389": "int td = toInt ( e . getValue ( ) ) ; ",
  "7390": "denies . put ( propertyName , toInt ( denies . get ( propertyName ) ) | td ) ; ",
  "7391": "} else if ( AclModification . isGrant ( k ) ) { ",
  "7392": "int tg = toInt ( e . getValue ( ) ) ; ",
  "7393": "grants . put ( propertyName , toInt ( grants . get ( propertyName ) ) | tg ) ; ",
  "7394": "for ( Entry < String , Integer > g : grants . entrySet ( ) ) { ",
  "7395": "String k = g . getKey ( ) ; ",
  "7396": "if ( denies . containsKey ( k ) ) { ",
  "7397": "denies . put ( k , toInt ( denies . get ( k ) ) & ~ g . getValue ( ) ) ; ",
  "7398": "return new PropertyAcl ( denies ) ; ",
  "7399": "compilingPermissions . dec ( ) ; ",
  "7400": "statsService . apiCall ( AccessControlManagerImpl . class . getName ( ) , \"getPropertyAcl\" , System . currentTimeMillis ( ) - t ) ; ",
  "7401": "} public void signContentToken ( Content token , String securityZone , String objectPath ) throws StorageClientException , ",
  "7402": "AccessDeniedException { ",
  "7403": "check ( Security . ZONE_CONTENT , objectPath , Permissions . CAN_WRITE_ACL ) ; ",
  "7404": "check ( Security . ZONE_CONTENT , objectPath , Permissions . CAN_READ_ACL ) ; ",
  "7405": "String key = this . getAclKey ( securityZone , objectPath ) ; ",
  "7406": "Map < String , Object > currentAcl = getCached ( keySpace , aclColumnFamily , key ) ; ",
  "7407": "String secretKey = ( String ) currentAcl . get ( _SECRET_KEY ) ; ",
  "7408": "principalTokenValidator . signToken ( token , secretKey ) ; ",
  "7409": "statsService . apiCall ( AccessControlManagerImpl . class . getName ( ) , \"signContentToken\" , System . currentTimeMillis ( ) - t ) ; ",
  "7410": "} private Set < R > multiplication ( ) { ",
  "7411": "final Set < R > answer = new LinkedHashSet < > ( ",
  "7412": "this . one . size ( ) * this . two . size ( ) ",
  "7413": "for ( final A left : this . one ) { ",
  "7414": "for ( final B right : this . two ) { ",
  "7415": "final R element = this . function . apply ( left , right ) ; ",
  "7416": "if ( answer . contains ( element ) ) { ",
  "7417": "String . format ( ",
  "7418": "element ",
  "7419": "answer . add ( element ) ; ",
  "7420": "return ImmutableSet . copyOf ( answer ) ; ",
  "7421": "} protected void batchRequest ( HttpServletRequest request , ",
  "7422": "HttpServletResponse response , String jsonRequest , ",
  "7423": "boolean allowModify ) throws IOException , ServletException { ",
  "7424": "JsonParser jsonParser = new JsonParser ( ) ; ",
  "7425": "JsonElement element = jsonParser . parse ( jsonRequest ) ; ",
  "7426": "if ( ! element . isJsonArray ( ) ) { ",
  "7427": "response . sendError ( HttpServletResponse . SC_BAD_REQUEST , ",
  "7428": "JsonArray arr = element . getAsJsonArray ( ) ; ",
  "7429": "response . setContentType ( \"application/json\" ) ; ",
  "7430": "response . setCharacterEncoding ( \"UTF-8\" ) ; ",
  "7431": "MessageDigest md = MessageDigest . getInstance ( \"SHA-1\" ) ; ",
  "7432": "key = Base64 . encodeBase64URLSafeString ( md . digest ( jsonRequest ",
  "7433": ". getBytes ( \"UTF-8\" ) ) ) ; ",
  "7434": "String cachedResult = responseCache . get ( key ) ; ",
  "7435": "if ( cachedResult != null ) { ",
  "7436": "response . getWriter ( ) . write ( cachedResult ) ; ",
  "7437": "LOGGER . warn ( e . getMessage ( ) , e ) ; ",
  "7438": "boolean cache = ( key != null ) ; ",
  "7439": "CaptureResponseWriter captureResponseWriter = new CaptureResponseWriter ( ",
  "7440": "response . getWriter ( ) ) ; ",
  "7441": "JsonWriter write = new JsonWriter ( captureResponseWriter ) ; ",
  "7442": "write . beginObject ( ) ; ",
  "7443": "write . name ( \"results\" ) ; ",
  "7444": "write . beginArray ( ) ; ",
  "7445": "for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { ",
  "7446": "JsonObject obj = arr . get ( i ) . getAsJsonObject ( ) ; ",
  "7447": "RequestInfo r = new RequestInfo ( obj ) ; ",
  "7448": "if ( r . isValid ( ) && ( allowModify || r . isSafe ( ) ) ) { ",
  "7449": "cache = doRequest ( request , response , r , write ) && cache ; ",
  "7450": "write ) ; ",
  "7451": "write . endArray ( ) ; ",
  "7452": "write . endObject ( ) ; ",
  "7453": "write . flush ( ) ; ",
  "7454": "if ( cache ) { ",
  "7455": "responseCache . put ( key , captureResponseWriter . toString ( ) ) ; ",
  "7456": "Collection < IndexingHandler > contentIndexHandler = handlers . get ( topic ) ; ",
  "7457": "int ttl = Utils . toInt ( event . getProperty ( TopicIndexer . TTL ) , ",
  "7458": "Integer . MAX_VALUE ) ; ",
  "7459": "if ( indexingHandler instanceof QoSIndexHandler ) { ",
  "7460": "ttl = Math . min ( ttl , Utils . defaultMax ( ( ( QoSIndexHandler ) indexingHandler ) . getTtl ( event ) ) ) ; ",
  "7461": "QueueManager q = null ; ",
  "7462": "if ( ttl < queues [ 0 ] . batchDelay ) { ",
  "7463": "ttl , event ) ; ",
  "7464": "queues [ 0 ] . saveEvent ( event ) ; ",
  "7465": "for ( QueueManager qm : queues ) { ",
  "7466": "if ( ttl < qm . batchDelay ) { ",
  "7467": "q . saveEvent ( event ) ; ",
  "7468": "q = null ; ",
  "7469": "q = qm ; ",
  "7470": "if ( q != null ) { ",
  "7471": "} protected void joinAll ( ) throws InterruptedException { ",
  "7472": "if ( queues != null ) { ",
  "7473": "for ( QueueManager q : queues ) { ",
  "7474": "q . getQueueDispatcher ( ) . join ( ) ; ",
  "7475": "} public void setProperty ( String name , Object value ) { ",
  "7476": "if ( ! readOnly && ! FILTER_PROPERTIES . contains ( name ) ) { ",
  "7477": "Object cv = authorizableMap . get ( name ) ; ",
  "7478": "if ( cv != null && ! ( cv instanceof RemoveProperty ) ) { ",
  "7479": "modifiedMap . put ( name , new RemoveProperty ( ) ) ; ",
  "7480": "} else if ( ! value . equals ( cv ) ) { ",
  "7481": "modifiedMap . put ( name , value ) ; ",
  "7482": "} else if ( modifiedMap . containsKey ( name ) && ! value . equals ( modifiedMap . get ( name ) ) ) { ",
  "7483": "} public void removeProperty ( String key ) { ",
  "7484": "if ( ! readOnly && ( authorizableMap . containsKey ( key ) || modifiedMap . containsKey ( key ) ) ) { ",
  "7485": "modifiedMap . put ( key , new RemoveProperty ( ) ) ; ",
  "7486": "} public void addPrincipal ( String principal ) { ",
  "7487": "if ( ! readOnly && ! principals . contains ( principal ) ) { ",
  "7488": "principals . add ( principal ) ; ",
  "7489": "principalsModified = true ; ",
  "7490": "} public void removePrincipal ( String principal ) { ",
  "7491": "if ( ! readOnly && principals . contains ( principal ) ) { ",
  "7492": "principals . remove ( principal ) ; ",
  "7493": "LOG . debug ( ",
  "7494": "templateParams ) ; ",
  "7495": "if ( templateParams == null || ! tltppp . hostname . equals ( templateParams . get ( \"hostname\" ) ) ",
  "7496": "|| tltppp . port != ( Integer ) templateParams . get ( \"port\" ) ) { ",
  "7497": "response . sendError ( HttpServletResponse . SC_BAD_REQUEST ) ; ",
  "7498": "dpppi . process ( config , templateParams , response , proxyResponse ) ; ",
  "7499": "} public void changePassword ( Authorizable authorizable , String password , String oldPassword ) throws StorageClientException , ",
  "7500": "String id = authorizable . getId ( ) ; ",
  "7501": "if ( thisUser . isAdmin ( ) || currentUserId . equals ( id ) ) { ",
  "7502": "if ( ! thisUser . isAdmin ( ) ) { ",
  "7503": "User u = authenticator . authenticate ( id , oldPassword ) ; ",
  "7504": "putCached ( keySpace , authorizableColumnFamily , id , ImmutableMap . of ( Authorizable . LASTMODIFIED_FIELD , ",
  "7505": "( Object ) System . currentTimeMillis ( ) , Authorizable . ID_FIELD , id , Authorizable . LASTMODIFIED_BY_FIELD , ",
  "7506": "accessControlManager . getCurrentUserId ( ) , Authorizable . PASSWORD_FIELD , ",
  "7507": "StorageClientUtils . secureHash ( password ) ) , false ) ; ",
  "7508": "storeListener . onUpdate ( Security . ZONE_AUTHORIZABLES , id , currentUserId , getType ( authorizable ) , false , null , ",
  "7509": "\"op:change-password\" ) ; ",
  "7510": "throw new AccessDeniedException ( Security . ZONE_ADMIN , id , ",
  "7511": "statsService . apiCall ( AuthorizableManagerImpl . class . getName ( ) , \"changePassword\" , System . currentTimeMillis ( ) - t ) ; ",
  "7512": "} public void copy ( String from , String to , boolean withStreams ) throws StorageClientException , AccessDeniedException , IOException { ",
  "7513": "long ts = System . currentTimeMillis ( ) ; ",
  "7514": "Content f = get ( from ) ; ",
  "7515": "if ( f . getProperty ( UUID_FIELD ) == null ) { ",
  "7516": "Content t = get ( to ) ; ",
  "7517": "delete ( to ) ; ",
  "7518": "Set < String > streams = Sets . newHashSet ( ) ; ",
  "7519": "Map < String , Object > copyProperties = Maps . newHashMap ( ) ; ",
  "7520": "if ( withStreams ) { ",
  "7521": "for ( Entry < String , Object > p : f . getProperties ( ) . entrySet ( ) ) { ",
  "7522": "if ( ! PROTECTED_FIELDS . contains ( p . getKey ( ) ) ) { ",
  "7523": "if ( p . getKey ( ) . startsWith ( BLOCKID_FIELD ) ) { ",
  "7524": "streams . add ( p . getKey ( ) ) ; ",
  "7525": "copyProperties . put ( p . getKey ( ) , p . getValue ( ) ) ; ",
  "7526": "copyProperties . putAll ( f . getProperties ( ) ) ; ",
  "7527": "copyProperties . put ( COPIED_FROM_PATH_FIELD , from ) ; ",
  "7528": "copyProperties . put ( COPIED_FROM_ID_FIELD , f . getProperty ( UUID_FIELD ) ) ; ",
  "7529": "copyProperties . put ( COPIED_DEEP_FIELD , withStreams ) ; ",
  "7530": "t = new Content ( to , copyProperties ) ; ",
  "7531": "update ( t ) ; ",
  "7532": "for ( String stream : streams ) { ",
  "7533": "String streamId = null ; ",
  "7534": "if ( stream . length ( ) > BLOCKID_FIELD . length ( ) ) { ",
  "7535": "streamId = stream . substring ( BLOCKID_FIELD . length ( ) + 1 ) ; ",
  "7536": "InputStream fromStream = getInputStream ( from , streamId ) ; ",
  "7537": "writeBody ( to , fromStream ) ; ",
  "7538": "fromStream . close ( ) ; ",
  "7539": "eventListener . onUpdate ( Security . ZONE_CONTENT , to , accessControlManager . getCurrentUserId ( ) , getResourceType ( f ) , true , ",
  "7540": "null , \"op:copy\" ) ; ",
  "7541": "statsService . apiCall ( ContentManagerImpl . class . getName ( ) , \"copy\" , System . currentTimeMillis ( ) - ts ) ; ",
  "7542": "} public void move ( String from , String to ) throws AccessDeniedException , StorageClientException { ",
  "7543": "accessControlManager . check ( Security . ZONE_CONTENT , from , Permissions . CAN_ANYTHING ) ; ",
  "7544": "accessControlManager . check ( Security . ZONE_CONTENT , to , Permissions . CAN_READ . combine ( Permissions . CAN_WRITE ) ) ; ",
  "7545": "Map < String , Object > fromStructure = Maps . newHashMap ( getCached ( keySpace , contentColumnFamily , from ) ) ; ",
  "7546": "if ( ! exists ( fromStructure ) ) { ",
  "7547": "if ( exists ( fromStructure ) ) { ",
  "7548": "String contentId = ( String ) fromStructure . get ( STRUCTURE_UUID_FIELD ) ; ",
  "7549": "Map < String , Object > content = getCached ( keySpace , contentColumnFamily , contentId ) ; ",
  "7550": "if ( content == null || content . size ( ) == 0 && TRUE . equals ( content . get ( DELETED_FIELD ) ) ) { ",
  "7551": "Map < String , Object > toStructure = getCached ( keySpace , contentColumnFamily , to ) ; ",
  "7552": "if ( exists ( toStructure ) ) { ",
  "7553": "String contentId = ( String ) toStructure . get ( STRUCTURE_UUID_FIELD ) ; ",
  "7554": "if ( exists ( content ) ) { ",
  "7555": "String idStore = ( String ) fromStructure . get ( STRUCTURE_UUID_FIELD ) ; ",
  "7556": "if ( ! StorageClientUtils . isRoot ( to ) ) { ",
  "7557": "String parent = StorageClientUtils . getParentObjectPath ( to ) ; ",
  "7558": "Map < String , Object > parentToStructure = getCached ( keySpace , contentColumnFamily , parent ) ; ",
  "7559": "if ( ! exists ( parentToStructure ) ) { ",
  "7560": "Content content = new Content ( parent , null ) ; ",
  "7561": "update ( content ) ; ",
  "7562": "putCached ( keySpace , contentColumnFamily , idStore , ImmutableMap . of ( PATH_FIELD , ( Object ) to ) , false ) ; ",
  "7563": "fromStructure . put ( PATH_FIELD , to ) ; ",
  "7564": "putCached ( keySpace , contentColumnFamily , to , fromStructure , true ) ; ",
  "7565": "putCached ( keySpace , contentColumnFamily , from , ImmutableMap . of ( DELETED_FIELD , ( Object ) TRUE ) , false ) ; ",
  "7566": "eventListener . onDelete ( Security . ZONE_CONTENT , from , accessControlManager . getCurrentUserId ( ) , null , null , \"op:move\" ) ; ",
  "7567": "eventListener . onUpdate ( Security . ZONE_CONTENT , to , accessControlManager . getCurrentUserId ( ) , null , true , null , \"op:move\" ) ; ",
  "7568": "statsService . apiCall ( ContentManagerImpl . class . getName ( ) , \"move\" , System . currentTimeMillis ( ) - t ) ; ",
  "7569": "} public void link ( String from , String to ) throws AccessDeniedException , StorageClientException { ",
  "7570": "accessControlManager . check ( Security . ZONE_CONTENT , to , Permissions . CAN_READ ) ; ",
  "7571": "accessControlManager . check ( Security . ZONE_CONTENT , from , Permissions . CAN_READ . combine ( Permissions . CAN_WRITE ) ) ; ",
  "7572": "if ( ! exists ( toStructure ) ) { ",
  "7573": "Map < String , Object > fromStructure = getCached ( keySpace , contentColumnFamily , from ) ; ",
  "7574": "if ( StorageClientUtils . isRoot ( from ) ) { ",
  "7575": "Object idStore = toStructure . get ( STRUCTURE_UUID_FIELD ) ; ",
  "7576": "String parent = StorageClientUtils . getParentObjectPath ( from ) ; ",
  "7577": "putCached ( keySpace , contentColumnFamily , from , ImmutableMap . of ( STRUCTURE_UUID_FIELD , idStore , PATH_FIELD , from , ",
  "7578": "LINKED_PATH_FIELD , to , DELETED_FIELD , new RemoveProperty ( ) ) , true ) ; ",
  "7579": "statsService . apiCall ( ContentManagerImpl . class . getName ( ) , \"link\" , System . currentTimeMillis ( ) - t ) ; ",
  "7580": "} public InputStream getVersionInputStream ( String path , String versionId ) throws AccessDeniedException , StorageClientException , ",
  "7581": "return getVersionInputStream ( path , versionId , null ) ; ",
  "7582": "} public InputStream getVersionInputStream ( String path , String versionId , String streamId ) throws AccessDeniedException , ",
  "7583": "StorageClientException , IOException { ",
  "7584": "accessControlManager . check ( Security . ZONE_CONTENT , path , Permissions . CAN_READ ) ; ",
  "7585": "Map < String , Object > structure = getCached ( keySpace , contentColumnFamily , path ) ; ",
  "7586": "if ( exists ( structure ) ) { ",
  "7587": "String contentId = ( String ) structure . get ( STRUCTURE_UUID_FIELD ) ; ",
  "7588": "String versionHistoryId = ( String ) content . get ( VERSION_HISTORY_ID_FIELD ) ; ",
  "7589": "if ( versionHistoryId != null ) { ",
  "7590": "Map < String , Object > versionHistory = getCached ( keySpace , contentColumnFamily , versionHistoryId ) ; ",
  "7591": "if ( versionHistory != null && versionHistory . containsKey ( versionId ) ) { ",
  "7592": "return internalGetInputStream ( versionId , streamId ) ; ",
  "7593": "statsService . apiCall ( ContentManagerImpl . class . getName ( ) , \"egtVersionInputStream\" , System . currentTimeMillis ( ) - t ) ; ",
  "7594": "} public static void loadFromStream ( String key , Map < String , Object > output , InputStream binaryStream , String type ) ",
  "7595": "DataInputStream dis = new DataInputStream ( binaryStream ) ; ",
  "7596": "String ckey = dis . readUTF ( ) ; ",
  "7597": "if ( ! key . equals ( ckey ) ) { ",
  "7598": "readMapFromStream ( output , dis ) ; ",
  "7599": "String cftype = null ; ",
  "7600": "cftype = dis . readUTF ( ) ; ",
  "7601": "if ( cftype != null && ! cftype . equals ( type ) ) { ",
  "7602": "dis . close ( ) ; ",
  "7603": "binaryStream . close ( ) ; ",
  "7604": "} public static InputStream storeMapToStream ( String key , Map < String , Object > m , String type ) ",
  "7605": "DataOutputStream dos = new DataOutputStream ( baos ) ; ",
  "7606": "dos . writeUTF ( key ) ; ",
  "7607": "writeMapToStream ( m , dos ) ; ",
  "7608": "dos . writeUTF ( type ) ; ",
  "7609": "dos . flush ( ) ; ",
  "7610": "baos . flush ( ) ; ",
  "7611": "byte [ ] b = baos . toByteArray ( ) ; ",
  "7612": "return new ByteArrayInputStream ( b ) ; ",
  "7613": "} public static void writeMapToStream ( Map < String , Object > m , ",
  "7614": "DataOutputStream dos ) throws IOException { ",
  "7615": "for ( Entry < String , ? > e : m . entrySet ( ) ) { ",
  "7616": "if ( o != null && ! ( o instanceof RemoveProperty ) ) { ",
  "7617": "dos . writeInt ( size ) ; ",
  "7618": "dos . writeUTF ( k ) ; ",
  "7619": "Type < ? > t = getTypeOfObject ( o ) ; ",
  "7620": "dos . writeInt ( t . getTypeId ( ) ) ; ",
  "7621": "t . save ( dos , o ) ; ",
  "7622": "} private boolean prepareToResearchTMCluster ( ) { ",
  "7623": "int count = tryConnectCount . incrementAndGet ( ) ; ",
  "7624": "int size = txClientConfig . getManagerAddress ( ) . size ( ) ; ",
  "7625": "if ( count == size ) { ",
  "7626": "TMSearcher . search ( ) ; ",
  "7627": "} else if ( count > size ) { ",
  "7628": "return ! TMSearcher . searchedOne ( ) ; ",
  "7629": "} @ GetMapping ( { \"/exceptions/{page}\" , \"/exceptions\" , \"/exceptions/{page}/{limit}\" } ) ",
  "7630": "public ExceptionList exceptionList ( ",
  "7631": "@ RequestParam ( value = \"page\" , required = false ) @ PathVariable ( value = \"page\" , required = false ) Integer page , ",
  "7632": "@ RequestParam ( value = \"limit\" , required = false ) @ PathVariable ( value = \"limit\" , required = false ) Integer limit , ",
  "7633": "@ RequestParam ( value = \"extState\" , required = false ) Integer extState , ",
  "7634": "@ RequestParam ( value = \"registrar\" , required = false ) Integer registrar ) { ",
  "7635": "return txExceptionService . exceptionList ( page , limit , extState , null , registrar ) ; ",
  "7636": "} @ PostMapping ( \"/exceptions\" ) ",
  "7637": "public boolean deleteExceptions ( @ RequestBody DeleteExceptions deleteExceptions ) throws TxManagerException { ",
  "7638": "txExceptionService . deleteExceptions ( deleteExceptions . getId ( ) ) ; ",
  "7639": "} @ GetMapping ( \"/log/transaction-info\" ) ",
  "7640": "public JSONObject transactionInfo ( ",
  "7641": "@ RequestParam ( \"groupId\" ) String groupId , ",
  "7642": "@ RequestParam ( \"unitId\" ) String unitId ) throws TxManagerException { ",
  "7643": "return txExceptionService . getTransactionInfo ( groupId , unitId ) ; ",
  "7644": "} catch ( TransactionStateException e ) { ",
  "7645": "throw new TxManagerException ( e ) ; ",
  "7646": "} @ GetMapping ( { \"/logs/{page}\" , \"/logs/{page}/{limit}\" , \"/logs\" } ) ",
  "7647": "public TxLogList txLogList ( ",
  "7648": "@ RequestParam ( value = \"groupId\" , required = false ) String groupId , ",
  "7649": "@ RequestParam ( value = \"tag\" , required = false ) String tag , ",
  "7650": "@ RequestParam ( value = \"ld\" , required = false ) String lTime , ",
  "7651": "@ RequestParam ( value = \"rd\" , required = false ) String rTime , ",
  "7652": "@ RequestParam ( value = \"timeOrder\" , required = false ) Integer timeOrder ) throws TxManagerException { ",
  "7653": "return adminService . txLogList ( page , limit , groupId , tag , lTime , rTime , timeOrder ) ; ",
  "7654": "} @ DeleteMapping ( \"/logs\" ) ",
  "7655": "public boolean deleteLogs ( @ RequestBody DeleteLogsReq deleteLogsReq ) throws TxManagerException { ",
  "7656": "adminService . deleteLogs ( deleteLogsReq ) ; ",
  "7657": "} @ DeleteMapping ( \"/transaction-info\" ) ",
  "7658": "public boolean deleteTransactionInfo ( ",
  "7659": "@ RequestParam ( \"unitId\" ) String unitId , ",
  "7660": "@ RequestParam ( \"modId\" ) String modId ) throws TxManagerException { ",
  "7661": "txExceptionService . deleteTransactionInfo ( groupId , unitId , modId ) ; ",
  "7662": "} private MessageDto request ( MessageDto messageDto , long timeout , String whenNonManagerMessage ) throws RpcException { ",
  "7663": "for ( int i = 0 ; i < rpcClient . loadAllRemoteKey ( ) . size ( ) + 1 ; i ++ ) { ",
  "7664": "String remoteKey = rpcClient . loadRemoteKey ( ) ; ",
  "7665": "MessageDto result = rpcClient . request ( remoteKey , messageDto , timeout ) ; ",
  "7666": "} catch ( RpcException e ) { ",
  "7667": "if ( e . getCode ( ) == RpcException . NON_TX_MANAGER ) { ",
  "7668": "} public synchronized long nextId ( ) { ",
  "7669": "long currentStamp = getTimeMill ( ) ; ",
  "7670": "if ( currentStamp < lastStamp ) { ",
  "7671": "if ( currentStamp == lastStamp ) { ",
  "7672": "sequence = ( sequence + 1 ) & this . maxSequenceValue ; ",
  "7673": "if ( sequence == 0L ) { ",
  "7674": "lastStamp = tilNextMillis ( ) ; ",
  "7675": "sequence = 0L ; ",
  "7676": "lastStamp = currentStamp ; ",
  "7677": "return ( currentStamp - START_STAMP ) << ",
  "7678": "timestampBitLeftOffset | idcId << idcBitLeftOffset | machineId << machineBitLeftOffset | sequence ; ",
  "7679": "} public static void transmit ( TracingSetter tracingSetter ) { ",
  "7680": "if ( TracingContext . tracing ( ) . hasGroup ( ) ) { ",
  "7681": "tracingSetter . set ( TracingConstants . HEADER_KEY_GROUP_ID , TracingContext . tracing ( ) . groupId ( ) ) ; ",
  "7682": "tracingSetter . set ( TracingConstants . HEADER_KEY_APP_MAP , ",
  "7683": "Base64Utils . encodeToString ( TracingContext . tracing ( ) . appMapString ( ) . getBytes ( StandardCharsets . UTF_8 ) ) ) ; ",
  "7684": "} public static void apply ( TracingGetter tracingGetter ) { ",
  "7685": "String groupId = Optional . ofNullable ( tracingGetter . get ( TracingConstants . HEADER_KEY_GROUP_ID ) ) . orElse ( \"\" ) ; ",
  "7686": "String appList = Optional . ofNullable ( tracingGetter . get ( TracingConstants . HEADER_KEY_APP_MAP ) ) . orElse ( \"\" ) ; ",
  "7687": "TracingContext . init ( Maps . newHashMap ( TracingConstants . GROUP_ID , groupId , TracingConstants . APP_MAP , ",
  "7688": "StringUtils . isEmpty ( appList ) ? appList : new String ( Base64Utils . decodeFromString ( appList ) , StandardCharsets . UTF_8 ) ) ) ; ",
  "7689": "} public static MessageDto createGroup ( String groupId ) { ",
  "7690": "MessageDto msg = new MessageDto ( ) ; ",
  "7691": "msg . setGroupId ( groupId ) ; ",
  "7692": "msg . setAction ( MessageConstants . ACTION_CREATE_GROUP ) ; ",
  "7693": "return msg ; ",
  "7694": "} public static MessageDto joinGroup ( JoinGroupParams joinGroupParams ) { ",
  "7695": "msg . setGroupId ( joinGroupParams . getGroupId ( ) ) ; ",
  "7696": "msg . setAction ( MessageConstants . ACTION_JOIN_GROUP ) ; ",
  "7697": "msg . setData ( joinGroupParams ) ; ",
  "7698": "} public static MessageDto notifyGroup ( NotifyGroupParams notifyGroupParams ) { ",
  "7699": "msg . setGroupId ( notifyGroupParams . getGroupId ( ) ) ; ",
  "7700": "msg . setAction ( MessageConstants . ACTION_NOTIFY_GROUP ) ; ",
  "7701": "msg . setData ( notifyGroupParams ) ; ",
  "7702": "} public static MessageDto acquireLocks ( String groupId , Set < String > locks , int lockType ) { ",
  "7703": "DTXLockParams dtxLockParams = new DTXLockParams ( ) ; ",
  "7704": "dtxLockParams . setGroupId ( groupId ) ; ",
  "7705": "dtxLockParams . setContextId ( Transactions . APPLICATION_ID_WHEN_RUNNING ) ; ",
  "7706": "dtxLockParams . setLocks ( locks ) ; ",
  "7707": "dtxLockParams . setLockType ( lockType ) ; ",
  "7708": "MessageDto messageDto = new MessageDto ( ) ; ",
  "7709": "messageDto . setAction ( MessageConstants . ACTION_ACQUIRE_DTX_LOCK ) ; ",
  "7710": "messageDto . setData ( dtxLockParams ) ; ",
  "7711": "return messageDto ; ",
  "7712": "} public static MessageDto releaseLocks ( Set < String > locks ) { ",
  "7713": "messageDto . setAction ( MessageConstants . ACTION_RELEASE_DTX_LOCK ) ; ",
  "7714": "} public static MessageDto notifyUnitOkResponse ( Serializable message , String action ) { ",
  "7715": "messageDto . setAction ( action ) ; ",
  "7716": "messageDto . setState ( MessageConstants . STATE_OK ) ; ",
  "7717": "messageDto . setData ( message ) ; ",
  "7718": "} public static MessageDto notifyUnitFailResponse ( Serializable message , String action ) { ",
  "7719": "messageDto . setState ( MessageConstants . STATE_EXCEPTION ) ; ",
  "7720": "} public static MessageDto askTransactionState ( String groupId , String unitId ) { ",
  "7721": "messageDto . setGroupId ( groupId ) ; ",
  "7722": "messageDto . setAction ( MessageConstants . ACTION_ASK_TRANSACTION_STATE ) ; ",
  "7723": "messageDto . setData ( new AskTransactionStateParams ( groupId , unitId ) ) ; ",
  "7724": "} public static MessageDto writeTxException ( TxExceptionParams txExceptionParams ) { ",
  "7725": "messageDto . setAction ( MessageConstants . ACTION_WRITE_EXCEPTION ) ; ",
  "7726": "messageDto . setGroupId ( txExceptionParams . getGroupId ( ) ) ; ",
  "7727": "messageDto . setData ( txExceptionParams ) ; ",
  "7728": "} public static MessageDto initClient ( String appName , String labelName ) { ",
  "7729": "InitClientParams initClientParams = new InitClientParams ( ) ; ",
  "7730": "initClientParams . setAppName ( appName ) ; ",
  "7731": "initClientParams . setLabelName ( labelName ) ; ",
  "7732": "messageDto . setData ( initClientParams ) ; ",
  "7733": "messageDto . setAction ( MessageConstants . ACTION_INIT_CLIENT ) ; ",
  "7734": "} public static void applySnowFlakeIdGen ( int machineLen , long machineId ) { ",
  "7735": "SnowFlakeGenerator . Factory factory = new SnowFlakeGenerator . Factory ( machineLen , 0 ) ; ",
  "7736": "SnowFlakeGenerator snowFlakeGenerator = factory . create ( 0 , machineId ) ; ",
  "7737": "RandomUtils . init ( ( ) -> String . valueOf ( snowFlakeGenerator . nextId ( ) ) ) ; ",
  "7738": "public String getSqlWithValues ( ) { ",
  "7739": "if ( namedParameterValues . size ( ) == 0 ) { ",
  "7740": "return super . getSqlWithValues ( ) ; ",
  "7741": "final String statementQuery = getStatementQuery ( ) ; ",
  "7742": "result . append ( statementQuery ) ; ",
  "7743": "StringBuilder parameters = new StringBuilder ( ) ; ",
  "7744": "for ( Map . Entry < Integer , Value > entry : getParameterValues ( ) . entrySet ( ) ) { ",
  "7745": "appendParameter ( parameters , entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; ",
  "7746": "for ( Map . Entry < String , Value > entry : namedParameterValues . entrySet ( ) ) { ",
  "7747": "appendParameter ( parameters , entry . getKey ( ) , entry . getValue ( ) ) ; ",
  "7748": "result . append ( parameters ) ; ",
  "7749": "} public void setParameterValue ( final String name , final Object value ) { ",
  "7750": "namedParameterValues . put ( name , new Value ( value ) ) ; ",
  "7751": "} public void reportTransactionState ( String groupId , String unitId , Short registrar , int state ) { ",
  "7752": "TxExceptionParams txExceptionParams = new TxExceptionParams ( ) ; ",
  "7753": "txExceptionParams . setGroupId ( groupId ) ; ",
  "7754": "txExceptionParams . setRegistrar ( registrar ) ; ",
  "7755": "txExceptionParams . setTransactionState ( state ) ; ",
  "7756": "txExceptionParams . setUnitId ( unitId ) ; ",
  "7757": "report ( txExceptionParams ) ; ",
  "7758": "} public void reportTccCleanException ( String groupId , String unitId , int state ) { ",
  "7759": "txExceptionParams . setRegistrar ( TxExceptionParams . TCC_CLEAN_ERROR ) ; ",
  "7760": "} public void clean ( String groupId , String unitId , String unitType , int state ) throws TransactionClearException { ",
  "7761": "cleanWithoutAspectLog ( groupId , unitId , unitType , state ) ; ",
  "7762": "aspectLogger . clearLog ( groupId , unitId ) ; ",
  "7763": "} catch ( TransactionClearException e ) { ",
  "7764": "if ( ! e . isNeedCompensation ( ) ) { ",
  "7765": "} public void cleanWithoutAspectLog ( String groupId , String unitId , String unitType , int state ) throws TransactionClearException { ",
  "7766": "transactionBeanHelper . loadTransactionCleanService ( unitType ) . clear ( ",
  "7767": "groupId , state , unitId , unitType ",
  "7768": "globalContext . clearGroup ( groupId ) ; ",
  "7769": "dtxChecking . stopDelayChecking ( groupId , unitId ) ; ",
  "7770": "} public static MessageDto newTxManager ( NotifyConnectParams notifyConnectParams ) { ",
  "7771": "msg . setAction ( MessageConstants . ACTION_NEW_TXMANAGER ) ; ",
  "7772": "msg . setData ( notifyConnectParams ) ; ",
  "7773": "} public static MessageDto notifyUnit ( NotifyUnitParams notifyUnitParams ) { ",
  "7774": "msg . setGroupId ( notifyUnitParams . getGroupId ( ) ) ; ",
  "7775": "msg . setAction ( MessageConstants . ACTION_NOTIFY_UNIT ) ; ",
  "7776": "msg . setData ( notifyUnitParams ) ; ",
  "7777": "} public static MessageDto serverException ( String action ) { ",
  "7778": "} public static MessageDto getAspectLog ( String groupId , String unitId ) { ",
  "7779": "GetAspectLogParams getAspectLogParams = new GetAspectLogParams ( ) ; ",
  "7780": "getAspectLogParams . setGroupId ( groupId ) ; ",
  "7781": "getAspectLogParams . setUnitId ( unitId ) ; ",
  "7782": "messageDto . setAction ( MessageConstants . ACTION_GET_ASPECT_LOG ) ; ",
  "7783": "messageDto . setData ( getAspectLogParams ) ; ",
  "7784": "} public static MessageDto deleteAspectLog ( String groupId , String unitId ) { ",
  "7785": "DeleteAspectLogParams deleteAspectLogParams = new DeleteAspectLogParams ( ) ; ",
  "7786": "deleteAspectLogParams . setGroupId ( groupId ) ; ",
  "7787": "deleteAspectLogParams . setUnitId ( unitId ) ; ",
  "7788": "messageDto . setData ( deleteAspectLogParams ) ; ",
  "7789": "messageDto . setAction ( MessageConstants . ACTION_DELETE_ASPECT_LOG ) ; ",
  "7790": "} public synchronized RpcContent addKey ( String key ) { ",
  "7791": "RpcContent rpcContent = createRpcContent ( ) ; ",
  "7792": "map . put ( key , rpcContent ) ; ",
  "7793": "return rpcContent ; ",
  "7794": "} private RpcContent findRpcContent ( ) { ",
  "7795": "synchronized ( freeList ) { ",
  "7796": "RpcContent cacheContent = freeList . getFirst ( ) ; ",
  "7797": "if ( ! cacheContent . isUsed ( ) ) { ",
  "7798": "cacheContent . init ( ) ; ",
  "7799": "freeList . remove ( cacheContent ) ; ",
  "7800": "return cacheContent ; ",
  "7801": "RpcContent rpcContent = new RpcContent ( getWaitTime ( ) ) ; ",
  "7802": "rpcContent . init ( ) ; ",
  "7803": "} public void createGroup ( String groupId , String unitId , TransactionInfo transactionInfo , String transactionType ) ",
  "7804": "throws TransactionException { ",
  "7805": "txLogger . txTrace ( groupId , unitId , ",
  "7806": "reliableMessenger . createGroup ( groupId ) ; ",
  "7807": "aspectLogger . trace ( groupId , unitId , transactionInfo ) ; ",
  "7808": "dtxExceptionHandler . handleCreateGroupMessageException ( groupId , e ) ; ",
  "7809": "} catch ( LcnBusinessException e ) { ",
  "7810": "dtxExceptionHandler . handleCreateGroupBusinessException ( groupId , e . getCause ( ) ) ; ",
  "7811": "} public void joinGroup ( String groupId , String unitId , String transactionType , TransactionInfo transactionInfo ) ",
  "7812": "reliableMessenger . joinGroup ( groupId , unitId , transactionType , DTXLocalContext . transactionState ( globalContext . dtxState ( groupId ) ) ) ; ",
  "7813": "dtxChecking . startDelayCheckingAsync ( groupId , unitId , transactionType ) ; ",
  "7814": "dtxExceptionHandler . handleJoinGroupMessageException ( Arrays . asList ( groupId , unitId , transactionType ) , e ) ; ",
  "7815": "dtxExceptionHandler . handleJoinGroupBusinessException ( Arrays . asList ( groupId , unitId , transactionType ) , e ) ; ",
  "7816": "} public void notifyGroup ( String groupId , String unitId , String transactionType , int state ) { ",
  "7817": "txLogger . txTrace ( ",
  "7818": "if ( globalContext . isDTXTimeout ( ) ) { ",
  "7819": "state = reliableMessenger . notifyGroup ( groupId , state ) ; ",
  "7820": "transactionCleanTemplate . clean ( groupId , unitId , transactionType , state ) ; ",
  "7821": "dtxExceptionHandler . handleNotifyGroupMessageException ( Arrays . asList ( groupId , state , unitId , transactionType ) , e ) ; ",
  "7822": "dtxExceptionHandler . handleNotifyGroupBusinessException ( Arrays . asList ( groupId , state , unitId , transactionType ) , e . getCause ( ) ) ; ",
  "7823": "} public String convertToString ( Object value ) { ",
  "7824": "result = \"NULL\" ; ",
  "7825": "if ( value instanceof Timestamp ) { ",
  "7826": "result = new SimpleDateFormat ( \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" ) . format ( value ) ; ",
  "7827": "} else if ( value instanceof Date ) { ",
  "7828": "} else if ( value instanceof Boolean ) { ",
  "7829": "if ( \"numeric\" . equals ( \"boolean\" ) ) { ",
  "7830": "result = Boolean . FALSE . equals ( value ) ? \"0\" : \"1\" ; ",
  "7831": "result = value . toString ( ) ; ",
  "7832": "} else if ( value instanceof byte [ ] ) { ",
  "7833": "result = toHexString ( ( byte [ ] ) value ) ; ",
  "7834": "result = quoteIfNeeded ( result , value ) ; ",
  "7835": "private String toHexString ( byte [ ] bytes ) { ",
  "7836": "StringBuilder sb = new StringBuilder ( bytes . length * 2 ) ; ",
  "7837": "for ( byte b : bytes ) { ",
  "7838": "int temp = ( int ) b & 0xFF ; ",
  "7839": "sb . append ( HEX_CHARS [ temp / 16 ] ) ; ",
  "7840": "sb . append ( HEX_CHARS [ temp % 16 ] ) ; ",
  "7841": "private String quoteIfNeeded ( String stringValue , Object obj ) { ",
  "7842": "if ( stringValue == null ) { ",
  "7843": "if ( Number . class . isAssignableFrom ( obj . getClass ( ) ) || Boolean . class . isAssignableFrom ( obj . getClass ( ) ) ) { ",
  "7844": "return stringValue ; ",
  "7845": "return \"'\" + escape ( stringValue ) + \"'\" ; ",
  "7846": "private String escape ( String stringValue ) { ",
  "7847": "return stringValue . replaceAll ( \"'\" , \"''\" ) ; ",
  "7848": "} public static String tableName ( String fieldFullyQualifiedName ) { ",
  "7849": "if ( fieldFullyQualifiedName . contains ( \".\" ) ) { ",
  "7850": "return fieldFullyQualifiedName . substring ( 0 , fieldFullyQualifiedName . indexOf ( \".\" ) ) ; ",
  "7851": "} public static void cutSuffix ( String suffix , StringBuilder stringBuilder ) { ",
  "7852": "if ( stringBuilder . substring ( stringBuilder . length ( ) - suffix . length ( ) ) . equals ( suffix ) ) { ",
  "7853": "stringBuilder . delete ( stringBuilder . length ( ) - suffix . length ( ) , stringBuilder . length ( ) ) ; ",
  "7854": "} public static ModifiedRecord recordByColumns ( ResultSet rs , List < String > columns ) throws SQLException { ",
  "7855": "ModifiedRecord record = new ModifiedRecord ( ) ; ",
  "7856": "for ( String column : columns ) { ",
  "7857": "FieldValue fieldValue = new FieldValue ( ) ; ",
  "7858": "fieldValue . setFieldName ( column ) ; ",
  "7859": "fieldValue . setTableName ( SqlUtils . tableName ( column ) ) ; ",
  "7860": "fieldValue . setValue ( rs . getObject ( column ) ) ; ",
  "7861": "fieldValue . setValueType ( Objects . isNull ( fieldValue . getValue ( ) ) ? Void . class : fieldValue . getValue ( ) . getClass ( ) ) ; ",
  "7862": "if ( record . getFieldClusters ( ) . get ( fieldValue . getTableName ( ) ) != null ) { ",
  "7863": "record . getFieldClusters ( ) . get ( fieldValue . getTableName ( ) ) . getFields ( ) . add ( fieldValue ) ; ",
  "7864": "FieldCluster fieldCluster = new FieldCluster ( ) ; ",
  "7865": "fieldCluster . getFields ( ) . add ( fieldValue ) ; ",
  "7866": "record . getFieldClusters ( ) . put ( fieldValue . getTableName ( ) , fieldCluster ) ; ",
  "7867": "} public static byte [ ] objectToBlob ( Object o ) { ",
  "7868": "return SerializerContext . getInstance ( ) . serialize ( o ) ; ",
  "7869": "} catch ( SerializerException e ) { ",
  "7870": "} public static < T > T blobToObject ( byte [ ] blob , Class < T > type ) { ",
  "7871": "return SerializerContext . getInstance ( ) . deSerialize ( blob , type ) ; ",
  "7872": "} public void saveUndoLog ( UndoLogDO undoLogDO ) throws SQLException { ",
  "7873": "h2DbHelper . queryRunner ( ) . update ( sql , undoLogDO . getUnitId ( ) , undoLogDO . getGroupId ( ) , undoLogDO . getSqlType ( ) , ",
  "7874": "undoLogDO . getRollbackInfo ( ) , undoLogDO . getCreateTime ( ) ) ; ",
  "7875": "} public List < UndoLogDO > getUndoLogByGroupAndUnitId ( String groupId , String unitId ) throws SQLException { ",
  "7876": "return h2DbHelper . queryRunner ( ) . query ( sql , rs -> { ",
  "7877": "List < UndoLogDO > undoLogDOList = new ArrayList < > ( ) ; ",
  "7878": "while ( rs . next ( ) ) { ",
  "7879": "UndoLogDO undoLogDO = new UndoLogDO ( ) ; ",
  "7880": "undoLogDO . setSqlType ( rs . getInt ( \"SQL_TYPE\" ) ) ; ",
  "7881": "undoLogDO . setRollbackInfo ( rs . getBytes ( \"ROLLBACK_INFO\" ) ) ; ",
  "7882": "undoLogDO . setUnitId ( rs . getString ( \"UNIT_ID\" ) ) ; ",
  "7883": "undoLogDO . setGroupId ( \"GROUP_ID\" ) ; ",
  "7884": "undoLogDO . setCreateTime ( rs . getString ( \"CREATE_TIME\" ) ) ; ",
  "7885": "undoLogDOList . add ( undoLogDO ) ; ",
  "7886": "return undoLogDOList ; ",
  "7887": "} , groupId , unitId ) ; ",
  "7888": "} public void deleteUndoLog ( String groupId , String unitId ) throws SQLException { ",
  "7889": "h2DbHelper . queryRunner ( ) . update ( sql , groupId , unitId ) ; ",
  "7890": "} private void lockDataLine ( String groupId , String unitId , Set < String > lockIdSet , boolean isXLock ) throws TxcLogicException { ",
  "7891": "if ( ! reliableMessenger . acquireLocks ( groupId , lockIdSet , isXLock ? DTXLocks . X_LOCK : DTXLocks . S_LOCK ) ) { ",
  "7892": "globalContext . addTxcLockId ( groupId , unitId , lockIdSet ) ; ",
  "7893": "} private void saveUndoLog ( String groupId , String unitId , int sqlType , TableRecordList recordList ) throws TxcLogicException { ",
  "7894": "undoLogDO . setRollbackInfo ( SqlUtils . objectToBlob ( recordList ) ) ; ",
  "7895": "undoLogDO . setUnitId ( unitId ) ; ",
  "7896": "undoLogDO . setGroupId ( groupId ) ; ",
  "7897": "undoLogDO . setSqlType ( sqlType ) ; ",
  "7898": "txcLogHelper . saveUndoLog ( undoLogDO ) ; ",
  "7899": "throw new TxcLogicException ( e ) ; ",
  "7900": "} private String hex ( String content ) { ",
  "7901": "return DigestUtils . md5DigestAsHex ( content . getBytes ( StandardCharsets . UTF_8 ) ) ; ",
  "7902": "} private void resolveModifiedRecords ( List < ModifiedRecord > modifiedRecords , int sqlType ) throws TxcLogicException { ",
  "7903": "TableRecordList tableRecords = new TableRecordList ( ) ; ",
  "7904": "Set < String > lockIdSet = new HashSet < > ( ) ; ",
  "7905": "for ( ModifiedRecord modifiedRecord : modifiedRecords ) { ",
  "7906": "for ( Map . Entry < String , FieldCluster > entry : modifiedRecord . getFieldClusters ( ) . entrySet ( ) ) { ",
  "7907": "TableRecord tableRecord = new TableRecord ( ) ; ",
  "7908": "tableRecord . setTableName ( entry . getKey ( ) ) ; ",
  "7909": "tableRecord . setFieldCluster ( entry . getValue ( ) ) ; ",
  "7910": "tableRecords . getTableRecords ( ) . add ( tableRecord ) ; ",
  "7911": "lockIdSet . add ( hex ( tableRecord . getFieldCluster ( ) . getPrimaryKeys ( ) . toString ( ) ) ) ; ",
  "7912": "if ( lockIdSet . isEmpty ( ) ) { ",
  "7913": "String groupId = DTXLocalContext . cur ( ) . getGroupId ( ) ; ",
  "7914": "String unitId = DTXLocalContext . cur ( ) . getUnitId ( ) ; ",
  "7915": "lockDataLine ( groupId , unitId , lockIdSet , true ) ; ",
  "7916": "saveUndoLog ( groupId , unitId , sqlType , tableRecords ) ; ",
  "7917": "@ ConditionalOnClass ( name = \"org.springframework.data.redis.connection.RedisConnectionFactory\" ) ",
  "7918": "public RedisTemplate < String , Object > functionDomainRedisTemplate ( RedisConnectionFactory redisConnectionFactory ) { ",
  "7919": "JdkSerializationRedisSerializer serializationRedisSerializer = new JdkSerializationRedisSerializer ( ) ; ",
  "7920": "StringRedisSerializer stringRedisSerializer = new StringRedisSerializer ( ) ; ",
  "7921": "RedisTemplate < String , Object > redisTemplate = new RedisTemplate < > ( ) ; ",
  "7922": "redisTemplate . setKeySerializer ( stringRedisSerializer ) ; ",
  "7923": "redisTemplate . setHashKeySerializer ( stringRedisSerializer ) ; ",
  "7924": "redisTemplate . setHashValueSerializer ( serializationRedisSerializer ) ; ",
  "7925": "redisTemplate . setValueSerializer ( serializationRedisSerializer ) ; ",
  "7926": "redisTemplate . setConnectionFactory ( redisConnectionFactory ) ; ",
  "7927": "return redisTemplate ; ",
  "7928": "} public static void search ( ) { ",
  "7929": "Objects . requireNonNull ( RPC_CLIENT_INITIALIZER ) ; ",
  "7930": "HashSet < String > cluster = RELIABLE_MESSENGER . queryTMCluster ( ) ; ",
  "7931": "if ( cluster . isEmpty ( ) ) { ",
  "7932": "echoTMClusterSuccessful ( ) ; ",
  "7933": "clusterCountLatch = new CountDownLatch ( cluster . size ( ) - knownTMClusterSize ) ; ",
  "7934": "RPC_CLIENT_INITIALIZER . init ( TxManagerHost . parserList ( new ArrayList < > ( cluster ) ) , true ) ; ",
  "7935": "clusterCountLatch . await ( 10 , TimeUnit . SECONDS ) ; ",
  "7936": "} catch ( RpcException | InterruptedException e ) { ",
  "7937": "} public static boolean searchedOne ( ) { ",
  "7938": "if ( Objects . nonNull ( clusterCountLatch ) ) { ",
  "7939": "if ( clusterCountLatch . getCount ( ) == 0 ) { ",
  "7940": "clusterCountLatch . countDown ( ) ; ",
  "7941": "public String [ ] selectImports ( @ NonNull AnnotationMetadata importingClassMetadata ) { ",
  "7942": "boolean enabledTxc = Boolean . valueOf ( ",
  "7943": "importingClassMetadata . getAnnotationAttributes ( EnableDistributedTransaction . class . getName ( ) ) ) ",
  "7944": ". get ( \"enableTxc\" ) . toString ( ) ) ; ",
  "7945": "List < String > importClasses = new ArrayList < > ( ) ; ",
  "7946": "importClasses . add ( \"com.codingapi.txlcn.txmsg.MessageConfiguration\" ) ; ",
  "7947": "if ( enabledTxc ) { ",
  "7948": "importClasses . add ( TxcConfiguration . class . getName ( ) ) ; ",
  "7949": "return importClasses . toArray ( new String [ 0 ] ) ; ",
  "7950": "} public static String modId ( ConfigurableEnvironment environment , ServerProperties serverProperties ) { ",
  "7951": "String applicationName = environment . getProperty ( \"spring.application.name\" ) ; ",
  "7952": "applicationName = StringUtils . hasText ( applicationName ) ? applicationName : \"application\" ; ",
  "7953": "return applicationName + \":\" + serverPort ( serverProperties ) ; ",
  "7954": "} public static String [ ] splitAddress ( String hostAndPort ) { ",
  "7955": "if ( hostAndPort . indexOf ( ':' ) == - 1 ) { ",
  "7956": "String [ ] result = hostAndPort . split ( \":\" ) ; ",
  "7957": "if ( StringUtils . isEmpty ( result [ 0 ] ) ) { ",
  "7958": "result [ 0 ] = \"0.0.0.0\" ; ",
  "7959": "if ( result [ 0 ] . charAt ( 0 ) == '/' ) { ",
  "7960": "result [ 0 ] = result [ 0 ] . substring ( 1 ) ; ",
  "7961": "} public static int serverPort ( ServerProperties serverProperties ) { ",
  "7962": "return Objects . isNull ( serverProperties ) ? 0 : ( Objects . isNull ( serverProperties . getPort ( ) ) ? 8080 : ",
  "7963": "serverProperties . getPort ( ) ) ; ",
  "7964": "public void destroyTx ( String groupId ) { ",
  "7965": "attachmentCache . remove ( groupId + \".dtx\" ) ; ",
  "7966": "} public Object transactionRunning ( TxTransactionInfo info ) throws Throwable { ",
  "7967": "String transactionType = info . getTransactionType ( ) ; ",
  "7968": "DTXPropagationState propagationState = propagationResolver . resolvePropagationState ( info ) ; ",
  "7969": "if ( propagationState . isIgnored ( ) ) { ",
  "7970": "return info . getBusinessCallback ( ) . call ( ) ; ",
  "7971": "DTXLocalControl dtxLocalControl = txLcnBeanHelper . loadDTXLocalControl ( transactionType , propagationState ) ; ",
  "7972": "Set < String > transactionTypeSet = globalContext . txContext ( info . getGroupId ( ) ) . getTransactionTypes ( ) ; ",
  "7973": "transactionTypeSet . add ( transactionType ) ; ",
  "7974": "dtxLocalControl . preBusinessCode ( info ) ; ",
  "7975": "Object result = dtxLocalControl . doBusinessCode ( info ) ; ",
  "7976": "dtxLocalControl . onBusinessCodeSuccess ( info , result ) ; ",
  "7977": "} catch ( TransactionException e ) { ",
  "7978": "txLogger . error ( info . getGroupId ( ) , info . getUnitId ( ) , Transactions . TAG_TRANSACTION , ",
  "7979": "dtxLocalControl . onBusinessCodeError ( info , e ) ; ",
  "7980": "dtxLocalControl . postBusinessCode ( info ) ; ",
  "7981": "} public List < String > getFullyQualifiedPrimaryKeys ( ) { ",
  "7982": "if ( this . fullyQualifiedPrimaryKeys != null ) { ",
  "7983": "return this . fullyQualifiedPrimaryKeys ; ",
  "7984": "List < String > pks = new ArrayList < > ( ) ; ",
  "7985": "this . getPrimaryKeys ( ) . forEach ( key -> pks . add ( tableName + '.' + key ) ) ; ",
  "7986": "this . fullyQualifiedPrimaryKeys = pks ; ",
  "7987": "} private long total ( String where , Object ... params ) { ",
  "7988": "if ( logDbProperties . isEnabled ( ) ) { ",
  "7989": "} public boolean existsTable ( String tableName ) throws SQLException { ",
  "7990": "DTXLocalContext . makeUnProxy ( ) ; ",
  "7991": "connection = dataSource . getConnection ( ) ; ",
  "7992": "connection . setAutoCommit ( true ) ; ",
  "7993": "return existsTable ( connection , tableName ) ; ",
  "7994": "DbUtils . close ( connection ) ; ",
  "7995": "DTXLocalContext . undoProxyStatus ( ) ; ",
  "7996": "} public List < String > removeKeys ( String moduleName ) { ",
  "7997": "List < String > allKeys = new ArrayList < > ( ) ; ",
  "7998": "for ( Channel channel : channels ) { ",
  "7999": "if ( moduleName . equals ( getModuleName ( channel ) ) ) { ",
  "8000": "allKeys . add ( channel . remoteAddress ( ) . toString ( ) ) ; ",
  "8001": "} public void bindModuleName ( String remoteKey , String appName , String labelName ) throws RpcException { ",
  "8002": "AppInfo appInfo = new AppInfo ( ) ; ",
  "8003": "appInfo . setAppName ( appName ) ; ",
  "8004": "appInfo . setLabelName ( labelName ) ; ",
  "8005": "appInfo . setCreateTime ( new Date ( ) ) ; ",
  "8006": "if ( containsLabelName ( labelName ) ) { ",
  "8007": "appNames . put ( remoteKey , appInfo ) ; ",
  "8008": "} public String getModuleName ( Channel channel ) { ",
  "8009": "String key = channel . remoteAddress ( ) . toString ( ) ; ",
  "8010": "return getModuleName ( key ) ; ",
  "8011": "} public String getModuleName ( String remoteKey ) { ",
  "8012": "AppInfo appInfo = appNames . get ( remoteKey ) ; ",
  "8013": "return appInfo == null ? null : appInfo . getAppName ( ) ; ",
  "8014": "} public boolean hasGroup ( ) { ",
  "8015": "return Objects . nonNull ( fields ) && fields . containsKey ( TracingConstants . GROUP_ID ) && ",
  "8016": "StringUtils . hasText ( fields . get ( TracingConstants . GROUP_ID ) ) ; ",
  "8017": "} public void addApp ( String serviceId , String address ) { ",
  "8018": "if ( hasGroup ( ) ) { ",
  "8019": "JSONObject map = JSON . parseObject ( this . fields . get ( TracingConstants . APP_MAP ) ) ; ",
  "8020": "if ( map . containsKey ( serviceId ) ) { ",
  "8021": "map . put ( serviceId , address ) ; ",
  "8022": "this . fields . put ( TracingConstants . APP_MAP , JSON . toJSONString ( map ) ) ; ",
  "8023": "raiseNonGroupException ( ) ; ",
  "8024": "} public String appMapString ( ) { ",
  "8025": "String appMap = Optional . ofNullable ( this . fields . get ( TracingConstants . APP_MAP ) ) . orElse ( \"\" ) ; ",
  "8026": "return appMap ; ",
  "8027": "return \"{}\" ; ",
  "8028": "} public static URL locateFile ( String file ) { ",
  "8029": "File fp ; ",
  "8030": "fp = new File ( file ) ; ",
  "8031": "if ( fp . exists ( ) ) { ",
  "8032": "result = fp . toURI ( ) . toURL ( ) ; ",
  "8033": "result = locateOnClassPath ( file ) ; ",
  "8034": "} public static URL locateOnClassPath ( String filename ) { ",
  "8035": "URL result ; ",
  "8036": "result = Thread . currentThread ( ) . getContextClassLoader ( ) . getResource ( filename ) ; ",
  "8037": "result = P6Util . class . getClassLoader ( ) . getResource ( filename ) ; ",
  "8038": "result = ClassLoader . getSystemResource ( filename ) ; ",
  "8039": "} public static Class < ? > forName ( String name ) throws ClassNotFoundException { ",
  "8040": "ClassLoader ctxLoader = null ; ",
  "8041": "ctxLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; ",
  "8042": "return Class . forName ( name , true , ctxLoader ) ; ",
  "8043": "} catch ( SecurityException ex ) { ",
  "8044": "return Class . forName ( name ) ; ",
  "8045": "} public static ConnectionInformation fromConnection ( Connection connection ) { ",
  "8046": "final ConnectionInformation connectionInformation = new ConnectionInformation ( ) ; ",
  "8047": "connectionInformation . connection = connection ; ",
  "8048": "return connectionInformation ; ",
  "8049": "} public static DTXLocalContext getOrNew ( ) { ",
  "8050": "if ( currentLocal . get ( ) == null ) { ",
  "8051": "currentLocal . set ( new DTXLocalContext ( ) ) ; ",
  "8052": "return currentLocal . get ( ) ; ",
  "8053": "} public static void makeProxy ( ) { ",
  "8054": "if ( currentLocal . get ( ) != null ) { ",
  "8055": "cur ( ) . proxyTmp = cur ( ) . proxy ; ",
  "8056": "cur ( ) . proxy = true ; ",
  "8057": "} public static void makeUnProxy ( ) { ",
  "8058": "cur ( ) . proxy = false ; ",
  "8059": "} public static void makeNeverAppeared ( ) { ",
  "8060": "currentLocal . set ( null ) ; ",
  "8061": "} public static int transactionState ( int userDtxState ) { ",
  "8062": "return userDtxState == 1 ? dtxLocalContext . sysTransactionState : userDtxState ; ",
  "8063": "public void open ( Solver < Solution_ > solver ) { ",
  "8064": "( ( DefaultSolver < Solution_ > ) solver ) . addPhaseLifecycleListener ( listener ) ; ",
  "8065": "public PooledEntityPlacer buildEntityPlacer ( HeuristicConfigPolicy configPolicy ) { ",
  "8066": "MoveSelectorConfig moveSelectorConfig ; ",
  "8067": "if ( ConfigUtils . isEmptyCollection ( moveSelectorConfigList ) ) { ",
  "8068": "moveSelectorConfig = buildMoveSelectorConfig ( configPolicy ) ; ",
  "8069": "} else if ( moveSelectorConfigList . size ( ) == 1 ) { ",
  "8070": "moveSelectorConfig = moveSelectorConfigList . get ( 0 ) ; ",
  "8071": "MoveSelector moveSelector = moveSelectorConfig . buildMoveSelector ( ",
  "8072": "configPolicy , SelectionCacheType . JUST_IN_TIME , SelectionOrder . ORIGINAL ) ; ",
  "8073": "return new PooledEntityPlacer ( moveSelector ) ; ",
  "8074": "} public double getAngle ( Location location ) { ",
  "8075": "double latitudeDifference = location . latitude - latitude ; ",
  "8076": "double longitudeDifference = location . longitude - longitude ; ",
  "8077": "return Math . atan2 ( latitudeDifference , longitudeDifference ) ; ",
  "8078": "public void solvingStarted ( DefaultSolverScope < Solution_ > solverScope ) { ",
  "8079": "InnerScoreDirector < Solution_ > scoreDirector = solverScope . getScoreDirector ( ) ; ",
  "8080": "Score score = scoreDirector . calculateScore ( ) ; ",
  "8081": "solverScope . setBestScore ( score ) ; ",
  "8082": "solverScope . setBestSolutionTimeMillis ( System . currentTimeMillis ( ) ) ; ",
  "8083": "solverScope . getSolutionDescriptor ( ) . setScore ( solverScope . getBestSolution ( ) , score ) ; ",
  "8084": "if ( score . isSolutionInitialized ( ) ) { ",
  "8085": "solverScope . setStartingInitializedScore ( score ) ; ",
  "8086": "solverScope . setStartingInitializedScore ( null ) ; ",
  "8087": "if ( assertInitialScoreFromScratch ) { ",
  "8088": "if ( assertShadowVariablesAreNotStale ) { ",
  "8089": "} public < E > E lookUpWorkingObject ( E externalObject ) { ",
  "8090": "if ( externalObject == null ) { ",
  "8091": "LookUpStrategy lookUpStrategy = lookUpStrategyResolver . determineLookUpStrategy ( externalObject ) ; ",
  "8092": "return lookUpStrategy . lookUpWorkingObject ( idToWorkingObjectMap , externalObject ) ; ",
  "8093": "} public < E > E lookUpWorkingObjectOrReturnNull ( E externalObject ) { ",
  "8094": "return lookUpStrategy . lookUpWorkingObjectIfExists ( idToWorkingObjectMap , externalObject ) ; ",
  "8095": "public void stepStarted ( ConstructionHeuristicStepScope stepScope ) { ",
  "8096": "super . stepStarted ( stepScope ) ; ",
  "8097": "selectedMoveCount = 0L ; ",
  "8098": "earlyPickedMoveScope = null ; ",
  "8099": "maxScoreMoveScope = null ; ",
  "8100": "} public void addEntityMimicRecorder ( String id , EntityMimicRecorder mimicRecordingEntitySelector ) { ",
  "8101": "EntityMimicRecorder put = entityMimicRecorderMap . put ( id , mimicRecordingEntitySelector ) ; ",
  "8102": "if ( put != null ) { ",
  "8103": "} protected EntityDescriptor deduceEntityDescriptor ( SolutionDescriptor solutionDescriptor , ",
  "8104": "Class < ? > entityClass ) { ",
  "8105": "EntityDescriptor entityDescriptor ; ",
  "8106": "entityDescriptor = solutionDescriptor . getEntityDescriptorStrict ( entityClass ) ; ",
  "8107": "if ( entityDescriptor == null ) { ",
  "8108": "Collection < EntityDescriptor > entityDescriptors = solutionDescriptor . getGenuineEntityDescriptors ( ) ; ",
  "8109": "if ( entityDescriptors . size ( ) != 1 ) { ",
  "8110": "+ solutionDescriptor . getEntityClassSet ( ) ",
  "8111": "entityDescriptor = entityDescriptors . iterator ( ) . next ( ) ; ",
  "8112": "return entityDescriptor ; ",
  "8113": "public void solvingStarted ( DefaultSolverScope solverScope ) { ",
  "8114": "for ( Acceptor acceptor : acceptorList ) { ",
  "8115": "acceptor . solvingStarted ( solverScope ) ; ",
  "8116": "public void constructCache ( DefaultSolverScope solverScope ) { ",
  "8117": "long childSize = childMoveSelector . getSize ( ) ; ",
  "8118": "if ( childSize > ( long ) Integer . MAX_VALUE ) { ",
  "8119": "cachedMoveList = new ArrayList < > ( ( int ) childSize ) ; ",
  "8120": "childMoveSelector . iterator ( ) . forEachRemaining ( cachedMoveList :: add ) ; ",
  "8121": "cachedMoveList . size ( ) , this ) ; ",
  "8122": "public boolean isMoveDoable ( ScoreDirector < Solution_ > scoreDirector ) { ",
  "8123": "Object oldValue = variableDescriptor . getValue ( pillar . get ( 0 ) ) ; ",
  "8124": "if ( Objects . equals ( oldValue , toPlanningValue ) ) { ",
  "8125": "if ( ! variableDescriptor . isValueRangeEntityIndependent ( ) ) { ",
  "8126": "ValueRangeDescriptor < Solution_ > valueRangeDescriptor = variableDescriptor . getValueRangeDescriptor ( ) ; ",
  "8127": "Solution_ workingSolution = scoreDirector . getWorkingSolution ( ) ; ",
  "8128": "for ( Object entity : pillar ) { ",
  "8129": "ValueRange rightValueRange = valueRangeDescriptor . extractValueRange ( workingSolution , entity ) ; ",
  "8130": "if ( ! rightValueRange . contains ( toPlanningValue ) ) { ",
  "8131": "cachedMoveList = moveListFactory . createMoveList ( solverScope . getScoreDirector ( ) . getWorkingSolution ( ) ) ; ",
  "8132": "public LocalSearchPhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "8133": "BestSolutionRecaller bestSolutionRecaller , Termination solverTermination ) { ",
  "8134": "HeuristicConfigPolicy phaseConfigPolicy = solverConfigPolicy . createPhaseConfigPolicy ( ) ; ",
  "8135": "DefaultLocalSearchPhase phase = new DefaultLocalSearchPhase ( ",
  "8136": "phaseIndex , solverConfigPolicy . getLogIndentation ( ) , bestSolutionRecaller , ",
  "8137": "buildPhaseTermination ( phaseConfigPolicy , solverTermination ) ) ; ",
  "8138": "phase . setDecider ( buildDecider ( phaseConfigPolicy , ",
  "8139": "phase . getTermination ( ) ) ) ; ",
  "8140": "EnvironmentMode environmentMode = phaseConfigPolicy . getEnvironmentMode ( ) ; ",
  "8141": "if ( environmentMode . isNonIntrusiveFullAsserted ( ) ) { ",
  "8142": "phase . setAssertStepScoreFromScratch ( true ) ; ",
  "8143": "if ( environmentMode . isIntrusiveFastAsserted ( ) ) { ",
  "8144": "phase . setAssertExpectedStepScore ( true ) ; ",
  "8145": "phase . setAssertShadowVariablesAreNotStaleAfterStep ( true ) ; ",
  "8146": "return phase ; ",
  "8147": "} public static XStream buildXStream ( ) { ",
  "8148": "XStream xStream = new XStream ( ) ; ",
  "8149": "xStream . setMode ( XStream . ID_REFERENCES ) ; ",
  "8150": "xStream . aliasSystemAttribute ( \"xStreamId\" , \"id\" ) ; ",
  "8151": "xStream . aliasSystemAttribute ( \"xStreamRef\" , \"reference\" ) ; ",
  "8152": "xStream . processAnnotations ( SolverConfig . class ) ; ",
  "8153": "XStream . setupDefaultSecurity ( xStream ) ; ",
  "8154": "xStream . allowTypesByRegExp ( new String [ ] { \"org\\\\.optaplanner\\\\.\\\\w+\\\\.config\\\\..*\" } ) ; ",
  "8155": "return xStream ; ",
  "8156": "public int compareTo ( AbstractPersistable other ) { ",
  "8157": "return new CompareToBuilder ( ) ",
  "8158": ". append ( getClass ( ) . getName ( ) , other . getClass ( ) . getName ( ) ) ",
  "8159": ". append ( id , other . id ) ",
  "8160": ". toComparison ( ) ; ",
  "8161": "} public void solvingStarted ( DefaultSolverScope < Solution_ > solverScope ) { ",
  "8162": "solverScope . setWorkingSolutionFromBestSolution ( ) ; ",
  "8163": "bestSolutionRecaller . solvingStarted ( solverScope ) ; ",
  "8164": "termination . solvingStarted ( solverScope ) ; ",
  "8165": "phaseLifecycleSupport . fireSolvingStarted ( solverScope ) ; ",
  "8166": "for ( Phase < Solution_ > phase : phaseList ) { ",
  "8167": "phase . solvingStarted ( solverScope ) ; ",
  "8168": "} public ConstructionHeuristicForager buildForager ( HeuristicConfigPolicy configPolicy ) { ",
  "8169": "ConstructionHeuristicPickEarlyType pickEarlyType_ ; ",
  "8170": "if ( pickEarlyType == null ) { ",
  "8171": "pickEarlyType_ = configPolicy . getScoreDirectorFactory ( ) . getInitializingScoreTrend ( ) . isOnlyDown ( ) ",
  "8172": "? ConstructionHeuristicPickEarlyType . FIRST_NON_DETERIORATING_SCORE : ConstructionHeuristicPickEarlyType . NEVER ; ",
  "8173": "if ( ( pickEarlyType == ConstructionHeuristicPickEarlyType . FIRST_FEASIBLE_SCORE ",
  "8174": "|| pickEarlyType == ConstructionHeuristicPickEarlyType . FIRST_FEASIBLE_SCORE_OR_NON_DETERIORATING_HARD ) ",
  "8175": "&& ! ( configPolicy . getScoreDefinition ( ) instanceof FeasibilityScoreDefinition ) ) { ",
  "8176": "pickEarlyType_ = pickEarlyType ; ",
  "8177": "return new DefaultConstructionHeuristicForager ( pickEarlyType_ ) ; ",
  "8178": "long entitySize = entitySelector . getSize ( ) ; ",
  "8179": "if ( entitySize > ( long ) Integer . MAX_VALUE ) { ",
  "8180": "Map < List < Object > , List < Object > > valueStateToPillarMap = new LinkedHashMap < > ( ( int ) entitySize ) ; ",
  "8181": "for ( Object entity : entitySelector ) { ",
  "8182": "List < Object > valueState = new ArrayList < > ( variableDescriptors . size ( ) ) ; ",
  "8183": "for ( GenuineVariableDescriptor variableDescriptor : variableDescriptors ) { ",
  "8184": "Object value = variableDescriptor . getValue ( entity ) ; ",
  "8185": "valueState . add ( value ) ; ",
  "8186": "List < Object > pillar = valueStateToPillarMap . computeIfAbsent ( valueState , key -> new ArrayList < > ( ) ) ; ",
  "8187": "pillar . add ( entity ) ; ",
  "8188": "cachedBasePillarList = new ArrayList < > ( valueStateToPillarMap . values ( ) ) ; ",
  "8189": "} protected static SingleBenchmarkResult createMerge ( ",
  "8190": "SolverBenchmarkResult solverBenchmarkResult , ProblemBenchmarkResult problemBenchmarkResult , ",
  "8191": "SingleBenchmarkResult oldResult ) { ",
  "8192": "SingleBenchmarkResult newResult = new SingleBenchmarkResult ( solverBenchmarkResult , problemBenchmarkResult ) ; ",
  "8193": "newResult . subSingleBenchmarkResultList = new ArrayList < > ( oldResult . getSubSingleBenchmarkResultList ( ) . size ( ) ) ; ",
  "8194": "int subSingleBenchmarkIndex = 0 ; ",
  "8195": "for ( SubSingleBenchmarkResult oldSubResult : oldResult . subSingleBenchmarkResultList ) { ",
  "8196": "SubSingleBenchmarkResult . createMerge ( newResult , oldSubResult , subSingleBenchmarkIndex ) ; ",
  "8197": "subSingleBenchmarkIndex ++ ; ",
  "8198": "newResult . median = oldResult . median ; ",
  "8199": "newResult . best = oldResult . best ; ",
  "8200": "newResult . worst = oldResult . worst ; ",
  "8201": "solverBenchmarkResult . getSingleBenchmarkResultList ( ) . add ( newResult ) ; ",
  "8202": "problemBenchmarkResult . getSingleBenchmarkResultList ( ) . add ( newResult ) ; ",
  "8203": "return newResult ; ",
  "8204": "public String getSimpleMoveTypeDescription ( ) { ",
  "8205": "StringBuilder moveTypeDescription = new StringBuilder ( 20 * ( variableDescriptorList . size ( ) + 1 ) ) ; ",
  "8206": "moveTypeDescription . append ( getClass ( ) . getSimpleName ( ) ) . append ( \"(\" ) ; ",
  "8207": "String delimiter = \"\" ; ",
  "8208": "for ( GenuineVariableDescriptor < Solution_ > variableDescriptor : variableDescriptorList ) { ",
  "8209": "moveTypeDescription . append ( delimiter ) . append ( variableDescriptor . getSimpleEntityAndVariableName ( ) ) ; ",
  "8210": "moveTypeDescription . append ( \")\" ) ; ",
  "8211": "return moveTypeDescription . toString ( ) ; ",
  "8212": "bestSolutionStepIndex = - 1 ; ",
  "8213": "startingScore = solverScope . calculateScore ( ) ; ",
  "8214": "if ( getLastCompletedStepScope ( ) . getStepIndex ( ) < 0 ) { ",
  "8215": "getLastCompletedStepScope ( ) . setScore ( startingScore ) ; ",
  "8216": "} @ ProblemFactCollectionProperty ",
  "8217": "private List < CourseConflict > calculateCourseConflictList ( ) { ",
  "8218": "List < CourseConflict > courseConflictList = new ArrayList < > ( ) ; ",
  "8219": "for ( Course leftCourse : courseList ) { ",
  "8220": "for ( Course rightCourse : courseList ) { ",
  "8221": "if ( leftCourse . getId ( ) < rightCourse . getId ( ) ) { ",
  "8222": "int conflictCount = 0 ; ",
  "8223": "if ( leftCourse . getTeacher ( ) . equals ( rightCourse . getTeacher ( ) ) ) { ",
  "8224": "conflictCount ++ ; ",
  "8225": "for ( Curriculum curriculum : leftCourse . getCurriculumList ( ) ) { ",
  "8226": "if ( rightCourse . getCurriculumList ( ) . contains ( curriculum ) ) { ",
  "8227": "if ( conflictCount > 0 ) { ",
  "8228": "courseConflictList . add ( new CourseConflict ( leftCourse , rightCourse , conflictCount ) ) ; ",
  "8229": "return courseConflictList ; ",
  "8230": "public V computeIfAbsent ( K key , Function < ? super K , ? extends V > mappingFunction ) { ",
  "8231": "V value = get ( key ) ; ",
  "8232": "return super . computeIfAbsent ( key , mappingFunction ) ; ",
  "8233": "} public ConstraintMatch addConstraintMatch ( List < Object > justificationList , Score score ) { ",
  "8234": "this . score = this . score . add ( score ) ; ",
  "8235": "ConstraintMatch constraintMatch = new ConstraintMatch ( constraintPackage , constraintName , ",
  "8236": "justificationList , score ) ; ",
  "8237": "boolean added = constraintMatchSet . add ( constraintMatch ) ; ",
  "8238": "if ( ! added ) { ",
  "8239": "return constraintMatch ; ",
  "8240": "public double calculateSolverTimeGradient ( DefaultSolverScope solverScope ) { ",
  "8241": "Score startingInitializedScore = solverScope . getStartingInitializedScore ( ) ; ",
  "8242": "Score bestScore = solverScope . getBestScore ( ) ; ",
  "8243": "return calculateTimeGradient ( startingInitializedScore , bestScoreLimit , bestScore ) ; ",
  "8244": "public Termination createChildThreadTermination ( DefaultSolverScope solverScope , ChildThreadType childThreadType ) { ",
  "8245": "} public static BendableLongScore ofHard ( int hardLevelsSize , int softLevelsSize , int hardLevel , long hardScore ) { ",
  "8246": "long [ ] hardScores = new long [ hardLevelsSize ] ; ",
  "8247": "hardScores [ hardLevel ] = hardScore ; ",
  "8248": "return new BendableLongScore ( 0 , hardScores , new long [ softLevelsSize ] ) ; ",
  "8249": "} public static BendableLongScore ofSoft ( int hardLevelsSize , int softLevelsSize , int softLevel , long softScore ) { ",
  "8250": "long [ ] softScores = new long [ softLevelsSize ] ; ",
  "8251": "softScores [ softLevel ] = softScore ; ",
  "8252": "return new BendableLongScore ( 0 , new long [ hardLevelsSize ] , softScores ) ; ",
  "8253": "CloudBalancingGenerator generator = new CloudBalancingGenerator ( ) ; ",
  "8254": "generator . writeCloudBalance ( 2 , 6 ) ; ",
  "8255": "generator . writeCloudBalance ( 3 , 9 ) ; ",
  "8256": "generator . writeCloudBalance ( 4 , 12 ) ; ",
  "8257": "generator . writeCloudBalance ( 100 , 300 ) ; ",
  "8258": "generator . writeCloudBalance ( 200 , 600 ) ; ",
  "8259": "generator . writeCloudBalance ( 400 , 1200 ) ; ",
  "8260": "generator . writeCloudBalance ( 800 , 2400 ) ; ",
  "8261": "generator . writeCloudBalance ( 1600 , 4800 ) ; ",
  "8262": "public boolean isNeverEnding ( ) { ",
  "8263": "if ( randomSelection ) { ",
  "8264": "for ( MoveSelector moveSelector : childMoveSelectorList ) { ",
  "8265": "if ( moveSelector . isNeverEnding ( ) ) { ",
  "8266": "if ( ! childMoveSelectorList . isEmpty ( ) ",
  "8267": "&& childMoveSelectorList . get ( childMoveSelectorList . size ( ) - 1 ) . isNeverEnding ( ) ) { ",
  "8268": "} public Acceptor buildAcceptor ( HeuristicConfigPolicy configPolicy ) { ",
  "8269": "EnvironmentMode environmentMode = configPolicy . getEnvironmentMode ( ) ; ",
  "8270": "List < Acceptor > acceptorList = new ArrayList < > ( ) ; ",
  "8271": "if ( acceptorClassList != null ) { ",
  "8272": "for ( Class < ? extends Acceptor > acceptorClass : acceptorClassList ) { ",
  "8273": "Acceptor acceptor = ConfigUtils . newInstance ( this , \"acceptorClass\" , acceptorClass ) ; ",
  "8274": "acceptorList . add ( acceptor ) ; ",
  "8275": "if ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . HILL_CLIMBING ) ) { ",
  "8276": "HillClimbingAcceptor acceptor = new HillClimbingAcceptor ( ) ; ",
  "8277": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . ENTITY_TABU ) ) ",
  "8278": "|| entityTabuSize != null || entityTabuRatio != null ",
  "8279": "|| fadingEntityTabuSize != null || fadingEntityTabuRatio != null ) { ",
  "8280": "EntityTabuAcceptor acceptor = new EntityTabuAcceptor ( configPolicy . getLogIndentation ( ) ) ; ",
  "8281": "if ( entityTabuSize != null ) { ",
  "8282": "if ( entityTabuRatio != null ) { ",
  "8283": "acceptor . setTabuSizeStrategy ( new FixedTabuSizeStrategy ( entityTabuSize ) ) ; ",
  "8284": "} else if ( entityTabuRatio != null ) { ",
  "8285": "acceptor . setTabuSizeStrategy ( new EntityRatioTabuSizeStrategy ( entityTabuRatio ) ) ; ",
  "8286": "} else if ( fadingEntityTabuSize == null && fadingEntityTabuRatio == null ) { ",
  "8287": "acceptor . setTabuSizeStrategy ( new EntityRatioTabuSizeStrategy ( 0.1 ) ) ; ",
  "8288": "if ( fadingEntityTabuSize != null ) { ",
  "8289": "if ( fadingEntityTabuRatio != null ) { ",
  "8290": "+ fadingEntityTabuRatio + \").\" ) ; ",
  "8291": "acceptor . setFadingTabuSizeStrategy ( new FixedTabuSizeStrategy ( fadingEntityTabuSize ) ) ; ",
  "8292": "} else if ( fadingEntityTabuRatio != null ) { ",
  "8293": "acceptor . setFadingTabuSizeStrategy ( new EntityRatioTabuSizeStrategy ( fadingEntityTabuRatio ) ) ; ",
  "8294": "acceptor . setAssertTabuHashCodeCorrectness ( true ) ; ",
  "8295": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . VALUE_TABU ) ) ",
  "8296": "|| valueTabuSize != null || valueTabuRatio != null ",
  "8297": "|| fadingValueTabuSize != null || fadingValueTabuRatio != null ) { ",
  "8298": "ValueTabuAcceptor acceptor = new ValueTabuAcceptor ( configPolicy . getLogIndentation ( ) ) ; ",
  "8299": "if ( valueTabuSize != null ) { ",
  "8300": "if ( valueTabuRatio != null ) { ",
  "8301": "acceptor . setTabuSizeStrategy ( new FixedTabuSizeStrategy ( valueTabuSize ) ) ; ",
  "8302": "} else if ( valueTabuRatio != null ) { ",
  "8303": "acceptor . setTabuSizeStrategy ( new ValueRatioTabuSizeStrategy ( valueTabuRatio ) ) ; ",
  "8304": "if ( fadingValueTabuSize != null ) { ",
  "8305": "if ( fadingValueTabuRatio != null ) { ",
  "8306": "+ fadingValueTabuRatio + \").\" ) ; ",
  "8307": "acceptor . setFadingTabuSizeStrategy ( new FixedTabuSizeStrategy ( fadingValueTabuSize ) ) ; ",
  "8308": "} else if ( fadingValueTabuRatio != null ) { ",
  "8309": "acceptor . setFadingTabuSizeStrategy ( new ValueRatioTabuSizeStrategy ( fadingValueTabuRatio ) ) ; ",
  "8310": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . MOVE_TABU ) ) ",
  "8311": "|| moveTabuSize != null || fadingMoveTabuSize != null ) { ",
  "8312": "MoveTabuAcceptor acceptor = new MoveTabuAcceptor ( configPolicy . getLogIndentation ( ) ) ; ",
  "8313": "acceptor . setUseUndoMoveAsTabuMove ( false ) ; ",
  "8314": "if ( moveTabuSize != null ) { ",
  "8315": "acceptor . setTabuSizeStrategy ( new FixedTabuSizeStrategy ( moveTabuSize ) ) ; ",
  "8316": "if ( fadingMoveTabuSize != null ) { ",
  "8317": "acceptor . setFadingTabuSizeStrategy ( new FixedTabuSizeStrategy ( fadingMoveTabuSize ) ) ; ",
  "8318": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . UNDO_MOVE_TABU ) ) ",
  "8319": "|| undoMoveTabuSize != null || fadingUndoMoveTabuSize != null ) { ",
  "8320": "acceptor . setUseUndoMoveAsTabuMove ( true ) ; ",
  "8321": "if ( undoMoveTabuSize != null ) { ",
  "8322": "acceptor . setTabuSizeStrategy ( new FixedTabuSizeStrategy ( undoMoveTabuSize ) ) ; ",
  "8323": "if ( fadingUndoMoveTabuSize != null ) { ",
  "8324": "acceptor . setFadingTabuSizeStrategy ( new FixedTabuSizeStrategy ( fadingUndoMoveTabuSize ) ) ; ",
  "8325": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . SOLUTION_TABU ) ) ",
  "8326": "|| solutionTabuSize != null || fadingSolutionTabuSize != null ) { ",
  "8327": "SolutionTabuAcceptor acceptor = new SolutionTabuAcceptor ( configPolicy . getLogIndentation ( ) ) ; ",
  "8328": "if ( solutionTabuSize != null ) { ",
  "8329": "acceptor . setTabuSizeStrategy ( new FixedTabuSizeStrategy ( solutionTabuSize ) ) ; ",
  "8330": "if ( fadingSolutionTabuSize != null ) { ",
  "8331": "acceptor . setFadingTabuSizeStrategy ( new FixedTabuSizeStrategy ( fadingSolutionTabuSize ) ) ; ",
  "8332": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . SIMULATED_ANNEALING ) ) ",
  "8333": "|| simulatedAnnealingStartingTemperature != null ) { ",
  "8334": "SimulatedAnnealingAcceptor acceptor = new SimulatedAnnealingAcceptor ( ) ; ",
  "8335": "if ( simulatedAnnealingStartingTemperature == null ) { ",
  "8336": "+ simulatedAnnealingStartingTemperature + \").\" ) ; ",
  "8337": "acceptor . setStartingTemperature ( configPolicy . getScoreDefinition ( ) ",
  "8338": ". parseScore ( simulatedAnnealingStartingTemperature ) ) ; ",
  "8339": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . LATE_ACCEPTANCE ) ) ",
  "8340": "|| lateAcceptanceSize != null ) { ",
  "8341": "LateAcceptanceAcceptor acceptor = new LateAcceptanceAcceptor ( ) ; ",
  "8342": "acceptor . setLateAcceptanceSize ( defaultIfNull ( lateAcceptanceSize , 400 ) ) ; ",
  "8343": "if ( ( acceptorTypeList != null && acceptorTypeList . contains ( AcceptorType . STEP_COUNTING_HILL_CLIMBING ) ) ",
  "8344": "|| stepCountingHillClimbingSize != null ) { ",
  "8345": "int stepCountingHillClimbingSize_ = defaultIfNull ( stepCountingHillClimbingSize , 400 ) ; ",
  "8346": "StepCountingHillClimbingType stepCountingHillClimbingType_ ",
  "8347": "= defaultIfNull ( stepCountingHillClimbingType , StepCountingHillClimbingType . STEP ) ; ",
  "8348": "StepCountingHillClimbingAcceptor acceptor = new StepCountingHillClimbingAcceptor ( ",
  "8349": "stepCountingHillClimbingSize_ , stepCountingHillClimbingType_ ) ; ",
  "8350": "if ( acceptorList . size ( ) == 1 ) { ",
  "8351": "return acceptorList . get ( 0 ) ; ",
  "8352": "} else if ( acceptorList . size ( ) > 1 ) { ",
  "8353": "return new CompositeAcceptor ( acceptorList ) ; ",
  "8354": "} public void addConstraintMatch ( ConstraintMatch constraintMatch ) { ",
  "8355": "score = score . add ( constraintMatch . getScore ( ) ) ; ",
  "8356": "public int compareTo ( Indictment other ) { ",
  "8357": "if ( ! ( justification instanceof Comparable ) ) { ",
  "8358": "+ other . justification + \").\" ) ; ",
  "8359": "return ( ( Comparable ) justification ) . compareTo ( other . justification ) ; ",
  "8360": "if ( subChain . getEntityList ( ) . contains ( toPlanningValue ) ) { ",
  "8361": "Object oldFirstValue = variableDescriptor . getValue ( subChain . getFirstEntity ( ) ) ; ",
  "8362": "return ! Objects . equals ( oldFirstValue , toPlanningValue ) ; ",
  "8363": "} public static String escapeHtmlId ( String rawHtmlId ) { ",
  "8364": "return rawHtmlId ",
  "8365": ". replaceAll ( \"!\" , \"-0021\" ) ",
  "8366": ". replaceAll ( \"#\" , \"-0023\" ) ",
  "8367": ". replaceAll ( \"\\\\$\" , \"-0024\" ) ",
  "8368": ". replaceAll ( \",\" , \"-002C\" ) ",
  "8369": ". replaceAll ( \"-\" , \"-002D\" ) ",
  "8370": ". replaceAll ( \"\\\\.\" , \"-002E\" ) ",
  "8371": ". replaceAll ( \"\\\\(\" , \"-0028\" ) ",
  "8372": ". replaceAll ( \"\\\\)\" , \"-0029\" ) ",
  "8373": ". replaceAll ( \":\" , \"-003A\" ) ",
  "8374": ". replaceAll ( \";\" , \"-003B\" ) ",
  "8375": ". replaceAll ( \"\\\\?\" , \"-003F\" ) ; ",
  "8376": "} public void accumulateResults ( BenchmarkReport benchmarkReport ) { ",
  "8377": "determineTotalsAndAverages ( ) ; ",
  "8378": "standardDeviationDoubles = StatisticUtils . determineStandardDeviationDoubles ( singleBenchmarkResultList , averageScore , getSuccessCount ( ) ) ; ",
  "8379": "} protected static Map < SolverBenchmarkResult , SolverBenchmarkResult > createMergeMap ( ",
  "8380": "PlannerBenchmarkResult newPlannerBenchmarkResult , List < SingleBenchmarkResult > singleBenchmarkResultList ) { ",
  "8381": "Map < SolverBenchmarkResult , SolverBenchmarkResult > mergeMap ",
  "8382": "= new IdentityHashMap < > ( ) ; ",
  "8383": "Map < String , Integer > nameCountMap = new HashMap < > ( ) ; ",
  "8384": "for ( SingleBenchmarkResult singleBenchmarkResult : singleBenchmarkResultList ) { ",
  "8385": "SolverBenchmarkResult oldResult = singleBenchmarkResult . getSolverBenchmarkResult ( ) ; ",
  "8386": "if ( ! mergeMap . containsKey ( oldResult ) ) { ",
  "8387": "SolverBenchmarkResult newResult = new SolverBenchmarkResult ( newPlannerBenchmarkResult ) ; ",
  "8388": "Integer nameCount = nameCountMap . get ( oldResult . name ) ; ",
  "8389": "if ( nameCount == null ) { ",
  "8390": "nameCount = 1 ; ",
  "8391": "nameCount ++ ; ",
  "8392": "nameCountMap . put ( oldResult . name , nameCount ) ; ",
  "8393": "newResult . subSingleCount = oldResult . subSingleCount ; ",
  "8394": "newResult . solverConfig = oldResult . solverConfig ; ",
  "8395": "newResult . scoreDefinition = oldResult . scoreDefinition ; ",
  "8396": "newResult . singleBenchmarkResultList = new ArrayList < > ( ",
  "8397": "oldResult . singleBenchmarkResultList . size ( ) ) ; ",
  "8398": "mergeMap . put ( oldResult , newResult ) ; ",
  "8399": "newPlannerBenchmarkResult . getSolverBenchmarkResultList ( ) . add ( newResult ) ; ",
  "8400": "for ( Map . Entry < SolverBenchmarkResult , SolverBenchmarkResult > entry : mergeMap . entrySet ( ) ) { ",
  "8401": "SolverBenchmarkResult oldResult = entry . getKey ( ) ; ",
  "8402": "SolverBenchmarkResult newResult = entry . getValue ( ) ; ",
  "8403": "if ( nameCountMap . get ( oldResult . name ) > 1 ) { ",
  "8404": "newResult . name = oldResult . name ; ",
  "8405": "return mergeMap ; ",
  "8406": "public MoveSelector buildBaseMoveSelector ( HeuristicConfigPolicy configPolicy , ",
  "8407": "SelectionCacheType minimumCacheType , boolean randomSelection ) { ",
  "8408": "EntitySelectorConfig entitySelectorConfig_ = entitySelectorConfig == null ? new EntitySelectorConfig ( ) ",
  "8409": ": entitySelectorConfig ; ",
  "8410": "EntitySelector leftEntitySelector = entitySelectorConfig_ . buildEntitySelector ( ",
  "8411": "configPolicy , ",
  "8412": "minimumCacheType , SelectionOrder . fromRandomSelectionBoolean ( randomSelection ) ) ; ",
  "8413": "EntitySelectorConfig rightEntitySelectorConfig = defaultIfNull ( secondaryEntitySelectorConfig , ",
  "8414": "entitySelectorConfig_ ) ; ",
  "8415": "EntitySelector rightEntitySelector = rightEntitySelectorConfig . buildEntitySelector ( ",
  "8416": "List < GenuineVariableDescriptor > variableDescriptorList = deduceVariableDescriptorList ( ",
  "8417": "leftEntitySelector . getEntityDescriptor ( ) , variableNameIncludeList ) ; ",
  "8418": "return new SwapMoveSelector ( leftEntitySelector , rightEntitySelector , variableDescriptorList , ",
  "8419": "randomSelection ) ; ",
  "8420": "EntitySelector entitySelector = entitySelectorConfig_ . buildEntitySelector ( configPolicy , ",
  "8421": "ValueSelectorConfig valueSelectorConfig_ = valueSelectorConfig == null ? new ValueSelectorConfig ( ) ",
  "8422": ": valueSelectorConfig ; ",
  "8423": "ValueSelector [ ] valueSelectors = new ValueSelector [ K - 1 ] ; ",
  "8424": "for ( int i = 0 ; i < valueSelectors . length ; i ++ ) { ",
  "8425": "valueSelectors [ i ] = valueSelectorConfig_ . buildValueSelector ( configPolicy , ",
  "8426": "entitySelector . getEntityDescriptor ( ) , ",
  "8427": "return new KOptMoveSelector ( entitySelector , valueSelectors , randomSelection ) ; ",
  "8428": "} public < Solution_ > void buildProblemBenchmarkList ( SolverConfigContext solverConfigContext , ",
  "8429": "SolverBenchmarkResult solverBenchmarkResult , Solution_ [ ] extraProblems ) { ",
  "8430": "PlannerBenchmarkResult plannerBenchmarkResult = solverBenchmarkResult . getPlannerBenchmarkResult ( ) ; ",
  "8431": "List < ProblemBenchmarkResult > unifiedProblemBenchmarkResultList ",
  "8432": "= plannerBenchmarkResult . getUnifiedProblemBenchmarkResultList ( ) ; ",
  "8433": "for ( ProblemProvider < Solution_ > problemProvider : buildProblemProviderList ( ",
  "8434": "solverConfigContext , solverBenchmarkResult , extraProblems ) ) { ",
  "8435": "ProblemBenchmarkResult < Solution_ > newProblemBenchmarkResult = buildProblemBenchmark ( ",
  "8436": "solverConfigContext , plannerBenchmarkResult , problemProvider ) ; ",
  "8437": "ProblemBenchmarkResult problemBenchmarkResult ; ",
  "8438": "int index = unifiedProblemBenchmarkResultList . indexOf ( newProblemBenchmarkResult ) ; ",
  "8439": "problemBenchmarkResult = newProblemBenchmarkResult ; ",
  "8440": "unifiedProblemBenchmarkResultList . add ( problemBenchmarkResult ) ; ",
  "8441": "problemBenchmarkResult = unifiedProblemBenchmarkResultList . get ( index ) ; ",
  "8442": "buildSingleBenchmark ( solverConfigContext , solverBenchmarkResult , problemBenchmarkResult ) ; ",
  "8443": "public HardSoftScore calculateScore ( CloudBalance cloudBalance ) { ",
  "8444": "int hardScore = 0 ; ",
  "8445": "int softScore = 0 ; ",
  "8446": "for ( CloudComputer computer : cloudBalance . getComputerList ( ) ) { ",
  "8447": "int cpuPowerUsage = 0 ; ",
  "8448": "int memoryUsage = 0 ; ",
  "8449": "int networkBandwidthUsage = 0 ; ",
  "8450": "boolean used = false ; ",
  "8451": "for ( CloudProcess process : cloudBalance . getProcessList ( ) ) { ",
  "8452": "if ( computer . equals ( process . getComputer ( ) ) ) { ",
  "8453": "cpuPowerUsage += process . getRequiredCpuPower ( ) ; ",
  "8454": "memoryUsage += process . getRequiredMemory ( ) ; ",
  "8455": "networkBandwidthUsage += process . getRequiredNetworkBandwidth ( ) ; ",
  "8456": "used = true ; ",
  "8457": "int cpuPowerAvailable = computer . getCpuPower ( ) - cpuPowerUsage ; ",
  "8458": "if ( cpuPowerAvailable < 0 ) { ",
  "8459": "hardScore += cpuPowerAvailable ; ",
  "8460": "int memoryAvailable = computer . getMemory ( ) - memoryUsage ; ",
  "8461": "if ( memoryAvailable < 0 ) { ",
  "8462": "hardScore += memoryAvailable ; ",
  "8463": "int networkBandwidthAvailable = computer . getNetworkBandwidth ( ) - networkBandwidthUsage ; ",
  "8464": "if ( networkBandwidthAvailable < 0 ) { ",
  "8465": "hardScore += networkBandwidthAvailable ; ",
  "8466": "if ( used ) { ",
  "8467": "softScore -= computer . getCost ( ) ; ",
  "8468": "return HardSoftScore . of ( hardScore , softScore ) ; ",
  "8469": "} public void initBenchmarkReportDirectory ( File benchmarkDirectory ) { ",
  "8470": "String timestampString = startingTimestamp . format ( DateTimeFormatter . ofPattern ( \"yyyy-MM-dd_HHmmss\" ) ) ; ",
  "8471": "if ( StringUtils . isEmpty ( name ) ) { ",
  "8472": "name = timestampString ; ",
  "8473": "if ( ! benchmarkDirectory . mkdirs ( ) ) { ",
  "8474": "if ( ! benchmarkDirectory . isDirectory ( ) ) { ",
  "8475": "if ( ! benchmarkDirectory . canWrite ( ) ) { ",
  "8476": "int duplicationIndex = 0 ; ",
  "8477": "String directoryName = timestampString + ( duplicationIndex == 0 ? \"\" : \"_\" + duplicationIndex ) ; ",
  "8478": "duplicationIndex ++ ; ",
  "8479": "benchmarkReportDirectory = new File ( benchmarkDirectory , ",
  "8480": "BooleanUtils . isFalse ( aggregation ) ? directoryName : directoryName + \"_aggregation\" ) ; ",
  "8481": "} while ( ! benchmarkReportDirectory . mkdir ( ) ) ; ",
  "8482": "for ( ProblemBenchmarkResult problemBenchmarkResult : unifiedProblemBenchmarkResultList ) { ",
  "8483": "problemBenchmarkResult . makeDirs ( ) ; ",
  "8484": "} public static PlannerBenchmarkResult createMergedResult ( ",
  "8485": "List < SingleBenchmarkResult > singleBenchmarkResultList ) { ",
  "8486": "PlannerBenchmarkResult mergedResult = createMergeSingleton ( singleBenchmarkResultList ) ; ",
  "8487": "Map < SolverBenchmarkResult , SolverBenchmarkResult > solverMergeMap ",
  "8488": "= SolverBenchmarkResult . createMergeMap ( mergedResult , singleBenchmarkResultList ) ; ",
  "8489": "Map < ProblemBenchmarkResult , ProblemBenchmarkResult > problemMergeMap ",
  "8490": "= ProblemBenchmarkResult . createMergeMap ( mergedResult , singleBenchmarkResultList ) ; ",
  "8491": "SolverBenchmarkResult solverBenchmarkResult = solverMergeMap . get ( ",
  "8492": "singleBenchmarkResult . getSolverBenchmarkResult ( ) ) ; ",
  "8493": "ProblemBenchmarkResult problemBenchmarkResult = problemMergeMap . get ( ",
  "8494": "singleBenchmarkResult . getProblemBenchmarkResult ( ) ) ; ",
  "8495": "SingleBenchmarkResult . createMerge ( ",
  "8496": "solverBenchmarkResult , problemBenchmarkResult , singleBenchmarkResult ) ; ",
  "8497": "return mergedResult ; ",
  "8498": "public QueuedValuePlacer buildEntityPlacer ( HeuristicConfigPolicy configPolicy ) { ",
  "8499": "EntityDescriptor entityDescriptor = deduceEntityDescriptor ( configPolicy . getSolutionDescriptor ( ) , entityClass ) ; ",
  "8500": "boolean reinitializeVariableFilterEnabled = configPolicy . isReinitializeVariableFilterEnabled ( ) ; ",
  "8501": "configPolicy . setReinitializeVariableFilterEnabled ( false ) ; ",
  "8502": "ValueSelectorConfig valueSelectorConfig_ = buildValueSelectorConfig ( configPolicy , entityDescriptor ) ; ",
  "8503": "ValueSelector valueSelector = valueSelectorConfig_ . buildValueSelector ( configPolicy , entityDescriptor , ",
  "8504": "SelectionCacheType . PHASE , SelectionOrder . ORIGINAL ) ; ",
  "8505": "configPolicy . setReinitializeVariableFilterEnabled ( reinitializeVariableFilterEnabled ) ; ",
  "8506": "moveSelectorConfig = buildChangeMoveSelectorConfig ( configPolicy , ",
  "8507": "valueSelectorConfig_ . getId ( ) , valueSelector . getVariableDescriptor ( ) ) ; ",
  "8508": "if ( ! ( valueSelector instanceof EntityIndependentValueSelector ) ) { ",
  "8509": "return new QueuedValuePlacer ( ( EntityIndependentValueSelector ) valueSelector , moveSelector ) ; ",
  "8510": "super . constructCache ( solverScope ) ; ",
  "8511": "sorter . sort ( solverScope . getScoreDirector ( ) , cachedEntityList ) ; ",
  "8512": "cachedEntityList . size ( ) , this ) ; ",
  "8513": "public PartitionedSearchPhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "8514": "ThreadFactory threadFactory ; ",
  "8515": "if ( threadFactoryClass != null ) { ",
  "8516": "threadFactory = ConfigUtils . newInstance ( this , \"threadFactoryClass\" , threadFactoryClass ) ; ",
  "8517": "threadFactory = solverConfigPolicy . buildThreadFactory ( ChildThreadType . PART_THREAD ) ; ",
  "8518": "DefaultPartitionedSearchPhase phase = new DefaultPartitionedSearchPhase ( ",
  "8519": "buildPhaseTermination ( phaseConfigPolicy , solverTermination ) , ",
  "8520": "buildSolutionPartitioner ( ) , threadFactory , resolvedActiveThreadCount ( ) ) ; ",
  "8521": "List < PhaseConfig > phaseConfigList_ = phaseConfigList ; ",
  "8522": "if ( ConfigUtils . isEmptyCollection ( phaseConfigList_ ) ) { ",
  "8523": "phaseConfigList_ = Arrays . asList ( ",
  "8524": "new ConstructionHeuristicPhaseConfig ( ) , ",
  "8525": "new LocalSearchPhaseConfig ( ) ) ; ",
  "8526": "phase . setPhaseConfigList ( phaseConfigList_ ) ; ",
  "8527": "phase . setConfigPolicy ( phaseConfigPolicy . createChildThreadConfigPolicy ( ChildThreadType . PART_THREAD ) ) ; ",
  "8528": "} public void processAnnotations ( DescriptorPolicy descriptorPolicy ) { ",
  "8529": "processEntityAnnotations ( descriptorPolicy ) ; ",
  "8530": "declaredGenuineVariableDescriptorMap = new LinkedHashMap < > ( ) ; ",
  "8531": "declaredShadowVariableDescriptorMap = new LinkedHashMap < > ( ) ; ",
  "8532": "declaredPinEntityFilterList = new ArrayList < > ( 2 ) ; ",
  "8533": "List < Member > memberList = ConfigUtils . getDeclaredMembers ( entityClass ) ; ",
  "8534": "for ( Member member : memberList ) { ",
  "8535": "processValueRangeProviderAnnotation ( descriptorPolicy , member ) ; ",
  "8536": "processPlanningVariableAnnotation ( descriptorPolicy , member ) ; ",
  "8537": "processPlanningPinAnnotation ( descriptorPolicy , member ) ; ",
  "8538": "if ( declaredGenuineVariableDescriptorMap . isEmpty ( ) && declaredShadowVariableDescriptorMap . isEmpty ( ) ) { ",
  "8539": "processVariableAnnotations ( descriptorPolicy ) ; ",
  "8540": "} public void reward ( RuleContext kcontext , long weightMultiplier ) { ",
  "8541": "Rule rule = kcontext . getRule ( ) ; ",
  "8542": "BiConsumer < RuleContext , Long > matchExecutor = matchExecutorByNumberMap . get ( rule ) ; ",
  "8543": "if ( matchExecutor == null ) { ",
  "8544": "matchExecutor . accept ( kcontext , weightMultiplier ) ; ",
  "8545": "} private void addProblemFactsFromClass ( List < Object > factList , Class < ? > instanceClass ) { ",
  "8546": "if ( instanceClass . equals ( AbstractSolution . class ) ) { ",
  "8547": "for ( Field field : instanceClass . getDeclaredFields ( ) ) { ",
  "8548": "if ( isFieldAPlanningEntityPropertyOrPlanningEntityCollectionProperty ( field , instanceClass ) ) { ",
  "8549": "value = field . get ( this ) ; ",
  "8550": "if ( value instanceof Collection ) { ",
  "8551": "factList . addAll ( ( Collection ) value ) ; ",
  "8552": "factList . add ( value ) ; ",
  "8553": "Class < ? > superclass = instanceClass . getSuperclass ( ) ; ",
  "8554": "if ( superclass != null ) { ",
  "8555": "addProblemFactsFromClass ( factList , superclass ) ; ",
  "8556": "public AnchorVariableSupply createExternalizedSupply ( InnerScoreDirector scoreDirector ) { ",
  "8557": "SingletonInverseVariableSupply inverseVariableSupply = scoreDirector . getSupplyManager ( ) ",
  "8558": ". demand ( new SingletonInverseVariableDemand ( sourceVariableDescriptor ) ) ; ",
  "8559": "return new ExternalizedAnchorVariableSupply ( sourceVariableDescriptor , inverseVariableSupply ) ; ",
  "8560": "} public static String getGetterPropertyName ( Member member ) { ",
  "8561": "if ( member instanceof Field ) { ",
  "8562": "return member . getName ( ) ; ",
  "8563": "} else if ( member instanceof Method ) { ",
  "8564": "String methodName = member . getName ( ) ; ",
  "8565": "for ( String prefix : PROPERTY_ACCESSOR_PREFIXES ) { ",
  "8566": "if ( methodName . startsWith ( prefix ) ) { ",
  "8567": "return decapitalizePropertyName ( methodName . substring ( prefix . length ( ) ) ) ; ",
  "8568": "} public static boolean isGetterMethod ( Method method ) { ",
  "8569": "if ( method . getParameterTypes ( ) . length != 0 ) { ",
  "8570": "String methodName = method . getName ( ) ; ",
  "8571": "if ( methodName . startsWith ( PROPERTY_ACCESSOR_PREFIX_GET ) && method . getReturnType ( ) != void . class ) { ",
  "8572": "} else if ( methodName . startsWith ( PROPERTY_ACCESSOR_PREFIX_IS ) && method . getReturnType ( ) == boolean . class ) { ",
  "8573": "return ! childMoveSelectorList . isEmpty ( ) ",
  "8574": "&& childMoveSelectorList . get ( childMoveSelectorList . size ( ) - 1 ) . isNeverEnding ( ) ; ",
  "8575": "Object oldValue = variableDescriptor . getValue ( entity ) ; ",
  "8576": "return ! Objects . equals ( oldValue , toPlanningValue ) ; ",
  "8577": "public void configureConstraintWeight ( Rule rule , HardMediumSoftBigDecimalScore constraintWeight ) { ",
  "8578": "super . configureConstraintWeight ( rule , constraintWeight ) ; ",
  "8579": "BiConsumer < RuleContext , BigDecimal > matchExecutor ; ",
  "8580": "if ( constraintWeight . equals ( HardMediumSoftBigDecimalScore . ZERO ) ) { ",
  "8581": "matchExecutor = ( RuleContext kcontext , BigDecimal matchWeight ) -> { } ; ",
  "8582": "} else if ( constraintWeight . getMediumScore ( ) . equals ( BigDecimal . ZERO ) && constraintWeight . getSoftScore ( ) . equals ( BigDecimal . ZERO ) ) { ",
  "8583": "matchExecutor = ( RuleContext kcontext , BigDecimal matchWeight ) ",
  "8584": "-> addHardConstraintMatch ( kcontext , constraintWeight . getHardScore ( ) . multiply ( matchWeight ) ) ; ",
  "8585": "} else if ( constraintWeight . getHardScore ( ) . equals ( BigDecimal . ZERO ) && constraintWeight . getSoftScore ( ) . equals ( BigDecimal . ZERO ) ) { ",
  "8586": "-> addMediumConstraintMatch ( kcontext , constraintWeight . getMediumScore ( ) . multiply ( matchWeight ) ) ; ",
  "8587": "} else if ( constraintWeight . getHardScore ( ) . equals ( BigDecimal . ZERO ) && constraintWeight . getMediumScore ( ) . equals ( BigDecimal . ZERO ) ) { ",
  "8588": "-> addSoftConstraintMatch ( kcontext , constraintWeight . getSoftScore ( ) . multiply ( matchWeight ) ) ; ",
  "8589": "-> addMultiConstraintMatch ( kcontext , ",
  "8590": "constraintWeight . getHardScore ( ) . multiply ( matchWeight ) , ",
  "8591": "constraintWeight . getMediumScore ( ) . multiply ( matchWeight ) , ",
  "8592": "constraintWeight . getSoftScore ( ) . multiply ( matchWeight ) ) ; ",
  "8593": "matchExecutorByNumberMap . put ( rule , matchExecutor ) ; ",
  "8594": "matchExecutorByScoreMap . put ( rule , ( RuleContext kcontext , ",
  "8595": "HardMediumSoftBigDecimalScore weightMultiplier ) -> addMultiConstraintMatch ( kcontext , ",
  "8596": "constraintWeight . getHardScore ( ) . multiply ( weightMultiplier . getHardScore ( ) ) , ",
  "8597": "constraintWeight . getMediumScore ( ) . multiply ( weightMultiplier . getMediumScore ( ) ) , ",
  "8598": "constraintWeight . getSoftScore ( ) . multiply ( weightMultiplier . getSoftScore ( ) ) ) ) ; ",
  "8599": "} public void penalize ( RuleContext kcontext , BigDecimal hardWeightMultiplier , BigDecimal mediumWeightMultiplier , BigDecimal softWeightMultiplier ) { ",
  "8600": "reward ( kcontext , hardWeightMultiplier . negate ( ) , mediumWeightMultiplier . negate ( ) , softWeightMultiplier . negate ( ) ) ; ",
  "8601": "} public void reward ( RuleContext kcontext , BigDecimal hardWeightMultiplier , BigDecimal mediumWeightMultiplier , BigDecimal softWeightMultiplier ) { ",
  "8602": "BiConsumer < RuleContext , HardMediumSoftBigDecimalScore > matchExecutor = matchExecutorByScoreMap . get ( rule ) ; ",
  "8603": "matchExecutor . accept ( kcontext , HardMediumSoftBigDecimalScore . of ( hardWeightMultiplier , mediumWeightMultiplier , softWeightMultiplier ) ) ; ",
  "8604": "} public void addHardConstraintMatch ( RuleContext kcontext , BigDecimal hardWeight ) { ",
  "8605": "hardScore = hardScore . add ( hardWeight ) ; ",
  "8606": "registerConstraintMatch ( kcontext , ",
  "8607": "( ) -> hardScore = hardScore . subtract ( hardWeight ) , ",
  "8608": "( ) -> HardMediumSoftBigDecimalScore . of ( hardWeight , BigDecimal . ZERO , BigDecimal . ZERO ) ) ; ",
  "8609": "} public void addMediumConstraintMatch ( RuleContext kcontext , BigDecimal mediumWeight ) { ",
  "8610": "mediumScore = mediumScore . add ( mediumWeight ) ; ",
  "8611": "( ) -> mediumScore = mediumScore . subtract ( mediumWeight ) , ",
  "8612": "( ) -> HardMediumSoftBigDecimalScore . of ( BigDecimal . ZERO , mediumWeight , BigDecimal . ZERO ) ) ; ",
  "8613": "} public void addSoftConstraintMatch ( RuleContext kcontext , BigDecimal softWeight ) { ",
  "8614": "softScore = softScore . add ( softWeight ) ; ",
  "8615": "( ) -> softScore = softScore . subtract ( softWeight ) , ",
  "8616": "( ) -> HardMediumSoftBigDecimalScore . of ( BigDecimal . ZERO , BigDecimal . ZERO , softWeight ) ) ; ",
  "8617": "DefaultSolver < Solution_ > defaultSolver = ( DefaultSolver < Solution_ > ) solver ; ",
  "8618": "defaultSolver . getSolverScope ( ) . getScoreDirector ( ) . overwriteConstraintMatchEnabledPreference ( true ) ; ",
  "8619": "defaultSolver . addPhaseLifecycleListener ( listener ) ; ",
  "8620": "for ( Termination termination : terminationList ) { ",
  "8621": "} protected List < Termination > createChildThreadTerminationList ( DefaultSolverScope solverScope , ChildThreadType childThreadType ) { ",
  "8622": "List < Termination > childThreadTerminationList = new ArrayList < > ( terminationList . size ( ) ) ; ",
  "8623": "childThreadTerminationList . add ( termination . createChildThreadTermination ( solverScope , childThreadType ) ) ; ",
  "8624": "return childThreadTerminationList ; ",
  "8625": "List < MoveSelector > moveSelectorList = new ArrayList < > ( moveSelectorConfigList . size ( ) ) ; ",
  "8626": "for ( MoveSelectorConfig moveSelectorConfig : moveSelectorConfigList ) { ",
  "8627": "moveSelectorList . add ( ",
  "8628": "moveSelectorConfig . buildMoveSelector ( configPolicy , ",
  "8629": "minimumCacheType , SelectionOrder . fromRandomSelectionBoolean ( randomSelection ) ) ) ; ",
  "8630": "boolean ignoreEmptyChildIterators_ = defaultIfNull ( ignoreEmptyChildIterators , true ) ; ",
  "8631": "return new CartesianProductMoveSelector ( moveSelectorList , ignoreEmptyChildIterators_ , randomSelection ) ; ",
  "8632": "CommonApp . prepareSwingEnvironment ( ) ; ",
  "8633": "OptaPlannerExamplesApp optaPlannerExamplesApp = new OptaPlannerExamplesApp ( ) ; ",
  "8634": "optaPlannerExamplesApp . pack ( ) ; ",
  "8635": "optaPlannerExamplesApp . setLocationRelativeTo ( null ) ; ",
  "8636": "optaPlannerExamplesApp . setVisible ( true ) ; ",
  "8637": "} public int calculateOverlap ( MeetingAssignment other ) { ",
  "8638": "if ( startingTimeGrain == null || other . getStartingTimeGrain ( ) == null ) { ",
  "8639": "int start = startingTimeGrain . getGrainIndex ( ) ; ",
  "8640": "int end = start + meeting . getDurationInGrains ( ) ; ",
  "8641": "int otherStart = other . startingTimeGrain . getGrainIndex ( ) ; ",
  "8642": "int otherEnd = otherStart + other . meeting . getDurationInGrains ( ) ; ",
  "8643": "if ( end < otherStart ) { ",
  "8644": "} else if ( otherEnd < start ) { ",
  "8645": "return Math . min ( end , otherEnd ) - Math . max ( start , otherStart ) ; ",
  "8646": "for ( Object leftEntity : leftSubChain . getEntityList ( ) ) { ",
  "8647": "if ( rightSubChain . getEntityList ( ) . contains ( leftEntity ) ) { ",
  "8648": "public void writeGraphFiles ( BenchmarkReport benchmarkReport ) { ",
  "8649": "XYPlot plot = createPlot ( benchmarkReport ) ; ",
  "8650": "int seriesIndex = 0 ; ",
  "8651": "for ( SingleBenchmarkResult singleBenchmarkResult : problemBenchmarkResult . getSingleBenchmarkResultList ( ) ) { ",
  "8652": "XYIntervalSeries series = new XYIntervalSeries ( singleBenchmarkResult . getSolverBenchmarkResult ( ) . getNameWithFavoriteSuffix ( ) ) ; ",
  "8653": "XYItemRenderer renderer = new YIntervalRenderer ( ) ; ",
  "8654": "if ( singleBenchmarkResult . hasAllSuccess ( ) ) { ",
  "8655": "BestSolutionMutationSubSingleStatistic subSingleStatistic = ( BestSolutionMutationSubSingleStatistic ) ",
  "8656": "singleBenchmarkResult . getSubSingleStatistic ( problemStatisticType ) ; ",
  "8657": "List < BestSolutionMutationStatisticPoint > points = subSingleStatistic . getPointList ( ) ; ",
  "8658": "for ( BestSolutionMutationStatisticPoint point : points ) { ",
  "8659": "long timeMillisSpent = point . getTimeMillisSpent ( ) ; ",
  "8660": "long mutationCount = point . getMutationCount ( ) ; ",
  "8661": "double yValue = mutationCount ; ",
  "8662": "series . add ( timeMillisSpent , timeMillisSpent , timeMillisSpent , ",
  "8663": "yValue , ( yValue > 0.0 ) ? 0.0 : yValue , ( yValue > 0.0 ) ? yValue : 0.0 ) ; ",
  "8664": "XYIntervalSeriesCollection dataset = new XYIntervalSeriesCollection ( ) ; ",
  "8665": "dataset . addSeries ( series ) ; ",
  "8666": "plot . setDataset ( seriesIndex , dataset ) ; ",
  "8667": "if ( singleBenchmarkResult . getSolverBenchmarkResult ( ) . isFavorite ( ) ) { ",
  "8668": "renderer . setSeriesStroke ( 0 , new BasicStroke ( 2.0f ) ) ; ",
  "8669": "plot . setRenderer ( seriesIndex , renderer ) ; ",
  "8670": "seriesIndex ++ ; ",
  "8671": "JFreeChart . DEFAULT_TITLE_FONT , plot , true ) ; ",
  "8672": "graphFile = writeChartToImageFile ( chart , problemBenchmarkResult . getName ( ) + \"BestSolutionMutationStatistic\" ) ; ",
  "8673": "public AndCompositeTermination createChildThreadTermination ( ",
  "8674": "DefaultSolverScope solverScope , ChildThreadType childThreadType ) { ",
  "8675": "return new AndCompositeTermination ( createChildThreadTerminationList ( solverScope , childThreadType ) ) ; ",
  "8676": "private List < TopicConflict > calculateTopicConflictList ( ) { ",
  "8677": "List < TopicConflict > topicConflictList = new ArrayList < > ( ) ; ",
  "8678": "for ( Topic leftTopic : topicList ) { ",
  "8679": "for ( Topic rightTopic : topicList ) { ",
  "8680": "if ( leftTopic . getId ( ) < rightTopic . getId ( ) ) { ",
  "8681": "int studentSize = 0 ; ",
  "8682": "for ( Student student : leftTopic . getStudentList ( ) ) { ",
  "8683": "if ( rightTopic . getStudentList ( ) . contains ( student ) ) { ",
  "8684": "studentSize ++ ; ",
  "8685": "if ( studentSize > 0 ) { ",
  "8686": "topicConflictList . add ( new TopicConflict ( leftTopic , rightTopic , studentSize ) ) ; ",
  "8687": "return topicConflictList ; ",
  "8688": "} public void addMove ( int partIndex , PartitionChangeMove < Solution_ > move ) { ",
  "8689": "long eventIndex = nextEventIndexMap . get ( partIndex ) . getAndIncrement ( ) ; ",
  "8690": "PartitionChangedEvent < Solution_ > event = new PartitionChangedEvent < > ( ",
  "8691": "partIndex , eventIndex , move ) ; ",
  "8692": "moveEventMap . put ( event . getPartIndex ( ) , event ) ; ",
  "8693": "queue . add ( event ) ; ",
  "8694": "} public void addFinish ( int partIndex , long partCalculationCount ) { ",
  "8695": "partIndex , eventIndex , partCalculationCount ) ; ",
  "8696": "} public void addExceptionThrown ( int partIndex , Throwable throwable ) { ",
  "8697": "partIndex , eventIndex , throwable ) ; ",
  "8698": "public void setWorkingSolution ( Solution_ workingSolution ) { ",
  "8699": "super . setWorkingSolution ( workingSolution ) ; ",
  "8700": "if ( incrementalScoreCalculator instanceof ConstraintMatchAwareIncrementalScoreCalculator ) { ",
  "8701": "( ( ConstraintMatchAwareIncrementalScoreCalculator < Solution_ > ) incrementalScoreCalculator ) ",
  "8702": ". resetWorkingSolution ( workingSolution , constraintMatchEnabledPreference ) ; ",
  "8703": "incrementalScoreCalculator . resetWorkingSolution ( workingSolution ) ; ",
  "8704": "public void beforeEntityAdded ( EntityDescriptor < Solution_ > entityDescriptor , Object entity ) { ",
  "8705": "incrementalScoreCalculator . beforeEntityAdded ( entity ) ; ",
  "8706": "super . beforeEntityAdded ( entityDescriptor , entity ) ; ",
  "8707": "} protected void assertWorkingSolutionInitialized ( AbstractPhaseScope < Solution_ > phaseScope ) { ",
  "8708": "if ( ! phaseScope . getStartingScore ( ) . isSolutionInitialized ( ) ) { ",
  "8709": "InnerScoreDirector < Solution_ > scoreDirector = phaseScope . getScoreDirector ( ) ; ",
  "8710": "SolutionDescriptor < Solution_ > solutionDescriptor = scoreDirector . getSolutionDescriptor ( ) ; ",
  "8711": "for ( Iterator < Object > it = solutionDescriptor . extractAllEntitiesIterator ( workingSolution ) ; it . hasNext ( ) ; ) { ",
  "8712": "Object entity = it . next ( ) ; ",
  "8713": "EntityDescriptor < Solution_ > entityDescriptor = solutionDescriptor . findEntityDescriptorOrFail ( ",
  "8714": "entity . getClass ( ) ) ; ",
  "8715": "if ( ! entityDescriptor . isEntityInitializedOrImmovable ( scoreDirector , entity ) ) { ",
  "8716": "String variableRef = null ; ",
  "8717": "for ( GenuineVariableDescriptor < Solution_ > variableDescriptor : entityDescriptor . getGenuineVariableDescriptors ( ) ) { ",
  "8718": "if ( ! variableDescriptor . isInitialized ( entity ) ) { ",
  "8719": "variableRef = variableDescriptor . getSimpleEntityAndVariableName ( ) ; ",
  "8720": "} public ScoreDefinition buildDeprecatedScoreDefinition ( ) { ",
  "8721": "if ( scoreDefinitionType != ScoreDefinitionType . BENDABLE ",
  "8722": "&& scoreDefinitionType != ScoreDefinitionType . BENDABLE_LONG ",
  "8723": "&& scoreDefinitionType != ScoreDefinitionType . BENDABLE_BIG_DECIMAL ",
  "8724": "&& ( bendableHardLevelsSize != null || bendableSoftLevelsSize != null ) ) { ",
  "8725": "if ( ( scoreDefinitionType == ScoreDefinitionType . BENDABLE ",
  "8726": "|| scoreDefinitionType == ScoreDefinitionType . BENDABLE_LONG ",
  "8727": "|| scoreDefinitionType == ScoreDefinitionType . BENDABLE_BIG_DECIMAL ) ",
  "8728": "&& ( bendableHardLevelsSize == null || bendableSoftLevelsSize == null ) ) { ",
  "8729": "if ( scoreDefinitionClass != null ) { ",
  "8730": "if ( scoreDefinitionType != null ) { ",
  "8731": "return ConfigUtils . newInstance ( this , \"scoreDefinitionClass\" , scoreDefinitionClass ) ; ",
  "8732": "switch ( scoreDefinitionType ) { ",
  "8733": "return new SimpleScoreDefinition ( ) ; ",
  "8734": "case SIMPLE_LONG : ",
  "8735": "return new SimpleLongScoreDefinition ( ) ; ",
  "8736": "case SIMPLE_DOUBLE : ",
  "8737": "return new SimpleDoubleScoreDefinition ( ) ; ",
  "8738": "case SIMPLE_BIG_DECIMAL : ",
  "8739": "return new SimpleBigDecimalScoreDefinition ( ) ; ",
  "8740": "case HARD_SOFT : ",
  "8741": "return new HardSoftScoreDefinition ( ) ; ",
  "8742": "case HARD_SOFT_LONG : ",
  "8743": "return new HardSoftLongScoreDefinition ( ) ; ",
  "8744": "case HARD_SOFT_DOUBLE : ",
  "8745": "return new HardSoftDoubleScoreDefinition ( ) ; ",
  "8746": "case HARD_SOFT_BIG_DECIMAL : ",
  "8747": "return new HardSoftBigDecimalScoreDefinition ( ) ; ",
  "8748": "case HARD_MEDIUM_SOFT : ",
  "8749": "return new HardMediumSoftScoreDefinition ( ) ; ",
  "8750": "case HARD_MEDIUM_SOFT_LONG : ",
  "8751": "return new HardMediumSoftLongScoreDefinition ( ) ; ",
  "8752": "case BENDABLE : ",
  "8753": "return new BendableScoreDefinition ( bendableHardLevelsSize , bendableSoftLevelsSize ) ; ",
  "8754": "case BENDABLE_LONG : ",
  "8755": "return new BendableLongScoreDefinition ( bendableHardLevelsSize , bendableSoftLevelsSize ) ; ",
  "8756": "case BENDABLE_BIG_DECIMAL : ",
  "8757": "return new BendableBigDecimalScoreDefinition ( bendableHardLevelsSize , bendableSoftLevelsSize ) ; ",
  "8758": "} public void buildSolverBenchmark ( SolverConfigContext solverConfigContext , PlannerBenchmarkResult plannerBenchmark , ",
  "8759": "Solution_ [ ] extraProblems ) { ",
  "8760": "SolverBenchmarkResult solverBenchmarkResult = new SolverBenchmarkResult ( plannerBenchmark ) ; ",
  "8761": "solverBenchmarkResult . setName ( name ) ; ",
  "8762": "solverBenchmarkResult . setSubSingleCount ( ConfigUtils . inheritOverwritableProperty ( subSingleCount , 1 ) ) ; ",
  "8763": "solverBenchmarkResult . setSolverConfig ( solverConfig ) ; ",
  "8764": "SolutionDescriptor < Object > solutionDescriptor = solverConfig . buildSolutionDescriptor ( solverConfigContext ) ; ",
  "8765": "for ( Solution_ extraProblem : extraProblems ) { ",
  "8766": "if ( ! solutionDescriptor . getSolutionClass ( ) . isInstance ( extraProblem ) ) { ",
  "8767": "solverBenchmarkResult . setScoreDefinition ( ",
  "8768": "solutionDescriptor . getScoreDefinition ( ) ) ; ",
  "8769": "solverBenchmarkResult . setSingleBenchmarkResultList ( new ArrayList < > ( ) ) ; ",
  "8770": "ProblemBenchmarksConfig problemBenchmarksConfig_ ",
  "8771": "= problemBenchmarksConfig == null ? new ProblemBenchmarksConfig ( ) ",
  "8772": ": problemBenchmarksConfig ; ",
  "8773": "plannerBenchmark . getSolverBenchmarkResultList ( ) . add ( solverBenchmarkResult ) ; ",
  "8774": "problemBenchmarksConfig_ . buildProblemBenchmarkList ( solverConfigContext , solverBenchmarkResult , extraProblems ) ; ",
  "8775": "protected Collection < ? extends Object > findTabu ( LocalSearchMoveScope moveScope ) { ",
  "8776": "return Collections . singletonList ( moveScope . getMove ( ) ) ; ",
  "8777": "} protected Solver < NQueens > createSolverByXml ( ) { ",
  "8778": "SolverFactory < NQueens > solverFactory = SolverFactory . createFromXmlResource ( SOLVER_CONFIG ) ; ",
  "8779": "return solverFactory . buildSolver ( ) ; ",
  "8780": "} protected Solver < NQueens > createSolverByApi ( ) { ",
  "8781": "SolverFactory < NQueens > solverFactory = SolverFactory . createEmpty ( ) ; ",
  "8782": "SolverConfig solverConfig = solverFactory . getSolverConfig ( ) ; ",
  "8783": "solverConfig . setSolutionClass ( NQueens . class ) ; ",
  "8784": "solverConfig . setEntityClassList ( Collections . < Class < ? > > singletonList ( Queen . class ) ) ; ",
  "8785": "ScoreDirectorFactoryConfig scoreDirectorFactoryConfig = new ScoreDirectorFactoryConfig ( ) ; ",
  "8786": "scoreDirectorFactoryConfig . setScoreDrlList ( ",
  "8787": "Arrays . asList ( \"org/optaplanner/examples/nqueens/solver/nQueensScoreRules.drl\" ) ) ; ",
  "8788": "solverConfig . setScoreDirectorFactoryConfig ( scoreDirectorFactoryConfig ) ; ",
  "8789": "solverConfig . setTerminationConfig ( new TerminationConfig ( ) . withBestScoreLimit ( \"0\" ) ) ; ",
  "8790": "List < PhaseConfig > phaseConfigList = new ArrayList < > ( ) ; ",
  "8791": "ConstructionHeuristicPhaseConfig constructionHeuristicPhaseConfig = new ConstructionHeuristicPhaseConfig ( ) ; ",
  "8792": "constructionHeuristicPhaseConfig . setConstructionHeuristicType ( ",
  "8793": "ConstructionHeuristicType . FIRST_FIT_DECREASING ) ; ",
  "8794": "phaseConfigList . add ( constructionHeuristicPhaseConfig ) ; ",
  "8795": "LocalSearchPhaseConfig localSearchPhaseConfig = new LocalSearchPhaseConfig ( ) ; ",
  "8796": "ChangeMoveSelectorConfig changeMoveSelectorConfig = new ChangeMoveSelectorConfig ( ) ; ",
  "8797": "changeMoveSelectorConfig . setSelectionOrder ( SelectionOrder . ORIGINAL ) ; ",
  "8798": "localSearchPhaseConfig . setMoveSelectorConfig ( changeMoveSelectorConfig ) ; ",
  "8799": "localSearchPhaseConfig . setAcceptorConfig ( new AcceptorConfig ( ) . withEntityTabuSize ( 5 ) ) ; ",
  "8800": "phaseConfigList . add ( localSearchPhaseConfig ) ; ",
  "8801": "solverConfig . setPhaseConfigList ( phaseConfigList ) ; ",
  "8802": "moveSelector . solvingStarted ( solverScope ) ; ",
  "8803": "forager . solvingStarted ( solverScope ) ; ",
  "8804": "} public void resetWorkingSolution ( ) { ",
  "8805": "for ( VariableListenerNotifiable notifiable : notifiableList ) { ",
  "8806": "VariableListener variableListener = notifiable . getVariableListener ( ) ; ",
  "8807": "if ( variableListener instanceof StatefulVariableListener ) { ",
  "8808": "( ( StatefulVariableListener ) variableListener ) . resetWorkingSolution ( scoreDirector ) ; ",
  "8809": "public IncrementalScoreDirector < Solution_ > buildScoreDirector ( ",
  "8810": "boolean lookUpEnabled , boolean constraintMatchEnabledPreference ) { ",
  "8811": "IncrementalScoreCalculator < Solution_ > incrementalScoreCalculator = ConfigUtils . newInstance ( this , ",
  "8812": "\"incrementalScoreCalculatorClass\" , incrementalScoreCalculatorClass ) ; ",
  "8813": "ConfigUtils . applyCustomProperties ( incrementalScoreCalculator , \"incrementalScoreCalculatorClass\" , ",
  "8814": "incrementalScoreCalculatorCustomProperties , \"incrementalScoreCalculatorCustomProperties\" ) ; ",
  "8815": "return new IncrementalScoreDirector < > ( this , ",
  "8816": "lookUpEnabled , constraintMatchEnabledPreference , incrementalScoreCalculator ) ; ",
  "8817": "EntityDescriptor entityDescriptor = deduceEntityDescriptor ( ",
  "8818": "configPolicy . getSolutionDescriptor ( ) , entityClass ) ; ",
  "8819": "SubChainSelectorConfig subChainSelectorConfig_ = subChainSelectorConfig == null ? new SubChainSelectorConfig ( ) ",
  "8820": ": subChainSelectorConfig ; ",
  "8821": "SubChainSelector subChainSelector = subChainSelectorConfig_ . buildSubChainSelector ( configPolicy , ",
  "8822": "entityDescriptor , ",
  "8823": "ValueSelector valueSelector = valueSelectorConfig_ . buildValueSelector ( configPolicy , ",
  "8824": "return new SubChainChangeMoveSelector ( subChainSelector , ( EntityIndependentValueSelector ) valueSelector , ",
  "8825": "randomSelection , defaultIfNull ( selectReversingMoveToo , true ) ) ; ",
  "8826": "} protected static SubSingleBenchmarkResult createMerge ( ",
  "8827": "SingleBenchmarkResult singleBenchmarkResult , SubSingleBenchmarkResult oldResult , ",
  "8828": "int subSingleBenchmarkIndex ) { ",
  "8829": "SubSingleBenchmarkResult newResult = new SubSingleBenchmarkResult ( singleBenchmarkResult , subSingleBenchmarkIndex ) ; ",
  "8830": "newResult . pureSubSingleStatisticList = new ArrayList < > ( oldResult . pureSubSingleStatisticList . size ( ) ) ; ",
  "8831": "for ( PureSubSingleStatistic oldSubSingleStatistic : oldResult . pureSubSingleStatisticList ) { ",
  "8832": "newResult . pureSubSingleStatisticList . add ( ",
  "8833": "oldSubSingleStatistic . getStatisticType ( ) . buildPureSubSingleStatistic ( newResult ) ) ; ",
  "8834": "newResult . initSubSingleStatisticMap ( ) ; ",
  "8835": "for ( SubSingleStatistic newSubSingleStatistic : newResult . effectiveSubSingleStatisticMap . values ( ) ) { ",
  "8836": "SubSingleStatistic oldSubSingleStatistic = oldResult . getSubSingleStatistic ( newSubSingleStatistic . getStatisticType ( ) ) ; ",
  "8837": "if ( ! oldSubSingleStatistic . getCsvFile ( ) . exists ( ) ) { ",
  "8838": "if ( oldResult . hasAnyFailure ( ) ) { ",
  "8839": "newSubSingleStatistic . initPointList ( ) ; ",
  "8840": "oldResult , oldSubSingleStatistic ) ; ",
  "8841": "oldSubSingleStatistic . unhibernatePointList ( ) ; ",
  "8842": "newSubSingleStatistic . setPointList ( oldSubSingleStatistic . getPointList ( ) ) ; ",
  "8843": "oldSubSingleStatistic . hibernatePointList ( ) ; ",
  "8844": "newResult . succeeded = oldResult . succeeded ; ",
  "8845": "newResult . score = oldResult . score ; ",
  "8846": "newResult . timeMillisSpent = oldResult . timeMillisSpent ; ",
  "8847": "newResult . scoreCalculationCount = oldResult . scoreCalculationCount ; ",
  "8848": "singleBenchmarkResult . getSubSingleBenchmarkResultList ( ) . add ( newResult ) ; ",
  "8849": "InnerScoreDirectorFactory < Solution_ > scoreDirectorFactory ",
  "8850": "= ( InnerScoreDirectorFactory < Solution_ > ) solver . getScoreDirectorFactory ( ) ; ",
  "8851": "SolutionDescriptor < Solution_ > solutionDescriptor = scoreDirectorFactory . getSolutionDescriptor ( ) ; ",
  "8852": "listener . setMutationCounter ( new MutationCounter < > ( solutionDescriptor ) ) ; ",
  "8853": "solver . addEventListener ( listener ) ; ",
  "8854": "List < XYPlot > plotList = new ArrayList < > ( BenchmarkReport . CHARTED_SCORE_LEVEL_SIZE ) ; ",
  "8855": "List < XYSeries > seriesList = new ArrayList < > ( BenchmarkReport . CHARTED_SCORE_LEVEL_SIZE ) ; ",
  "8856": "XYItemRenderer renderer = new XYStepRenderer ( ) ; ",
  "8857": "BestScoreSubSingleStatistic subSingleStatistic = ( BestScoreSubSingleStatistic ) ",
  "8858": "List < BestScoreStatisticPoint > points = subSingleStatistic . getPointList ( ) ; ",
  "8859": "for ( BestScoreStatisticPoint point : points ) { ",
  "8860": "if ( ! point . getScore ( ) . isSolutionInitialized ( ) ) { ",
  "8861": "double [ ] levelValues = ScoreUtils . extractLevelDoubles ( point . getScore ( ) ) ; ",
  "8862": "for ( int i = 0 ; i < levelValues . length && i < BenchmarkReport . CHARTED_SCORE_LEVEL_SIZE ; i ++ ) { ",
  "8863": "if ( i >= seriesList . size ( ) ) { ",
  "8864": "seriesList . add ( new XYSeries ( ",
  "8865": "singleBenchmarkResult . getSolverBenchmarkResult ( ) . getNameWithFavoriteSuffix ( ) ) ) ; ",
  "8866": "seriesList . get ( i ) . add ( timeMillisSpent , levelValues [ i ] ) ; ",
  "8867": "long timeMillisSpent = singleBenchmarkResult . getTimeMillisSpent ( ) ; ",
  "8868": "double [ ] bestScoreLevels = ScoreUtils . extractLevelDoubles ( singleBenchmarkResult . getMedian ( ) . getScore ( ) ) ; ",
  "8869": "for ( int i = 0 ; i < bestScoreLevels . length && i < BenchmarkReport . CHARTED_SCORE_LEVEL_SIZE ; i ++ ) { ",
  "8870": "seriesList . get ( i ) . add ( timeMillisSpent , bestScoreLevels [ i ] ) ; ",
  "8871": "if ( subSingleStatistic . getPointList ( ) . size ( ) <= 1 ) { ",
  "8872": "renderer = new StandardXYItemRenderer ( StandardXYItemRenderer . SHAPES_AND_LINES ) ; ",
  "8873": "if ( i >= plotList . size ( ) ) { ",
  "8874": "plotList . add ( createPlot ( benchmarkReport , i ) ) ; ",
  "8875": "plotList . get ( i ) . setDataset ( seriesIndex , new XYSeriesCollection ( seriesList . get ( i ) ) ) ; ",
  "8876": "plotList . get ( i ) . setRenderer ( seriesIndex , renderer ) ; ",
  "8877": "graphFileList = new ArrayList < > ( plotList . size ( ) ) ; ",
  "8878": "for ( int scoreLevelIndex = 0 ; scoreLevelIndex < plotList . size ( ) ; scoreLevelIndex ++ ) { ",
  "8879": "String scoreLevelLabel = problemBenchmarkResult . findScoreLevelLabel ( scoreLevelIndex ) ; ",
  "8880": "JFreeChart chart = new JFreeChart ( ",
  "8881": "JFreeChart . DEFAULT_TITLE_FONT , plotList . get ( scoreLevelIndex ) , true ) ; ",
  "8882": "graphFileList . add ( writeChartToImageFile ( chart , ",
  "8883": "problemBenchmarkResult . getName ( ) + \"BestScoreStatisticLevel\" + scoreLevelIndex ) ) ; ",
  "8884": "public Termination createChildThreadTermination ( ",
  "8885": "if ( childThreadType == ChildThreadType . PART_THREAD ) { ",
  "8886": "return solverTermination . createChildThreadTermination ( solverScope , childThreadType ) ; ",
  "8887": "public Score calculateScore ( ) { ",
  "8888": "variableListenerSupport . assertNotificationQueuesAreEmpty ( ) ; ",
  "8889": "Score score = easyScoreCalculator . calculateScore ( workingSolution ) ; ",
  "8890": "if ( score == null ) { ",
  "8891": "if ( workingInitScore != 0 ) { ",
  "8892": "score = score . withInitScore ( workingInitScore ) ; ",
  "8893": "setCalculatedScore ( score ) ; ",
  "8894": "return score ; ",
  "8895": "public Map < Object , Indictment > getIndictmentMap ( ) { ",
  "8896": "throw new IllegalStateException ( ConstraintMatch . class . getSimpleName ( ) ",
  "8897": "List < Map < String , XYIntervalSeries > > moveTypeToSeriesMapList ",
  "8898": "= new ArrayList < > ( BenchmarkReport . CHARTED_SCORE_LEVEL_SIZE ) ; ",
  "8899": "List < PickedMoveTypeStepScoreDiffStatisticPoint > points = getPointList ( ) ; ",
  "8900": "for ( PickedMoveTypeStepScoreDiffStatisticPoint point : points ) { ",
  "8901": "String moveType = point . getMoveType ( ) ; ",
  "8902": "double [ ] levelValues = ScoreUtils . extractLevelDoubles ( point . getStepScoreDiff ( ) ) ; ",
  "8903": "if ( i >= moveTypeToSeriesMapList . size ( ) ) { ",
  "8904": "moveTypeToSeriesMapList . add ( new LinkedHashMap < > ( ) ) ; ",
  "8905": "Map < String , XYIntervalSeries > moveTypeToSeriesMap = moveTypeToSeriesMapList . get ( i ) ; ",
  "8906": "XYIntervalSeries series = moveTypeToSeriesMap . computeIfAbsent ( moveType , ",
  "8907": "k -> new XYIntervalSeries ( moveType ) ) ; ",
  "8908": "double yValue = levelValues [ i ] ; ",
  "8909": "graphFileList = new ArrayList < > ( moveTypeToSeriesMapList . size ( ) ) ; ",
  "8910": "for ( int scoreLevelIndex = 0 ; scoreLevelIndex < moveTypeToSeriesMapList . size ( ) ; scoreLevelIndex ++ ) { ",
  "8911": "XYPlot plot = createPlot ( benchmarkReport , scoreLevelIndex ) ; ",
  "8912": "plot . setRenderer ( renderer ) ; ",
  "8913": "XYIntervalSeriesCollection seriesCollection = new XYIntervalSeriesCollection ( ) ; ",
  "8914": "for ( XYIntervalSeries series : moveTypeToSeriesMapList . get ( scoreLevelIndex ) . values ( ) ) { ",
  "8915": "seriesCollection . addSeries ( series ) ; ",
  "8916": "plot . setDataset ( seriesCollection ) ; ",
  "8917": "String scoreLevelLabel = subSingleBenchmarkResult . getSingleBenchmarkResult ( ) . getProblemBenchmarkResult ( ) ",
  "8918": ". findScoreLevelLabel ( scoreLevelIndex ) ; ",
  "8919": "JFreeChart chart = new JFreeChart ( subSingleBenchmarkResult . getName ( ) ",
  "8920": "\"PickedMoveTypeStepScoreDiffStatisticLevel\" + scoreLevelIndex ) ) ; ",
  "8921": "Locale locale = benchmarkReport . getLocale ( ) ; ",
  "8922": "xAxis . setNumberFormatOverride ( new MillisecondsSpentNumberFormat ( locale ) ) ; ",
  "8923": "yAxis . setNumberFormatOverride ( NumberFormat . getInstance ( locale ) ) ; ",
  "8924": "XYPlot plot = new XYPlot ( null , xAxis , yAxis , null ) ; ",
  "8925": "plot . setOrientation ( PlotOrientation . VERTICAL ) ; ",
  "8926": "XYSeries usedSeries = new XYSeries ( ",
  "8927": "XYItemRenderer renderer = new XYLineAndShapeRenderer ( ) ; ",
  "8928": "MemoryUseSubSingleStatistic subSingleStatistic = ( MemoryUseSubSingleStatistic ) ",
  "8929": "List < MemoryUseStatisticPoint > points = subSingleStatistic . getPointList ( ) ; ",
  "8930": "for ( MemoryUseStatisticPoint point : points ) { ",
  "8931": "MemoryUseMeasurement memoryUseMeasurement = point . getMemoryUseMeasurement ( ) ; ",
  "8932": "usedSeries . add ( timeMillisSpent , memoryUseMeasurement . getUsedMemory ( ) ) ; ",
  "8933": "XYSeriesCollection seriesCollection = new XYSeriesCollection ( ) ; ",
  "8934": "seriesCollection . addSeries ( usedSeries ) ; ",
  "8935": "plot . setDataset ( seriesIndex , seriesCollection ) ; ",
  "8936": "graphFile = writeChartToImageFile ( chart , problemBenchmarkResult . getName ( ) + \"MemoryUseStatistic\" ) ; ",
  "8937": "} public static < Solution_ > SolverFactory < Solution_ > createFromKieContainerXmlResource ( ",
  "8938": "String solverConfigResource ) { ",
  "8939": "KieContainer kieContainer = KieServices . Factory . get ( ) . getKieClasspathContainer ( ) ; ",
  "8940": "return new XStreamXmlSolverFactory < Solution_ > ( new SolverConfigContext ( kieContainer ) ) ",
  "8941": ". configure ( solverConfigResource ) ; ",
  "8942": "} public static < Solution_ > SolverFactory < Solution_ > createFromXmlResource ( String solverConfigResource , ClassLoader classLoader ) { ",
  "8943": "return new XStreamXmlSolverFactory < Solution_ > ( new SolverConfigContext ( classLoader ) ) ",
  "8944": "} public ScoreDifferencePercentage add ( ScoreDifferencePercentage addend ) { ",
  "8945": "if ( percentageLevels . length != addend . getPercentageLevels ( ) . length ) { ",
  "8946": "double [ ] newPercentageLevels = new double [ percentageLevels . length ] ; ",
  "8947": "for ( int i = 0 ; i < percentageLevels . length ; i ++ ) { ",
  "8948": "newPercentageLevels [ i ] = percentageLevels [ i ] + addend . percentageLevels [ i ] ; ",
  "8949": "return new ScoreDifferencePercentage ( newPercentageLevels ) ; ",
  "8950": "} public EnvironmentMode determineEnvironmentMode ( ) { ",
  "8951": "if ( environmentMode == EnvironmentMode . PRODUCTION ) { ",
  "8952": "environmentMode = EnvironmentMode . NON_REPRODUCIBLE ; ",
  "8953": "return defaultIfNull ( environmentMode , EnvironmentMode . REPRODUCIBLE ) ; ",
  "8954": "} public void offerRandomSeedFromSubSingleIndex ( long subSingleIndex ) { ",
  "8955": "if ( environmentMode == null || environmentMode . isReproducible ( ) ) { ",
  "8956": "if ( randomFactoryClass == null && randomSeed == null ) { ",
  "8957": "randomSeed = subSingleIndex ; ",
  "8958": "public void configureConstraintWeight ( Rule rule , BendableScore constraintWeight ) { ",
  "8959": "BiConsumer < RuleContext , Integer > matchExecutor ; ",
  "8960": "if ( constraintWeight . equals ( BendableScore . zero ( hardScores . length , softScores . length ) ) ) { ",
  "8961": "matchExecutor = ( RuleContext kcontext , Integer matchWeight ) -> { } ; ",
  "8962": "Integer singleLevel = null ; ",
  "8963": "Integer singleLevelWeight = null ; ",
  "8964": "for ( int i = 0 ; i < constraintWeight . getLevelsSize ( ) ; i ++ ) { ",
  "8965": "int levelWeight = constraintWeight . getHardOrSoftScore ( i ) ; ",
  "8966": "if ( levelWeight != 0 ) { ",
  "8967": "if ( singleLevel != null ) { ",
  "8968": "singleLevel = null ; ",
  "8969": "singleLevelWeight = null ; ",
  "8970": "singleLevel = i ; ",
  "8971": "singleLevelWeight = levelWeight ; ",
  "8972": "int levelWeight = singleLevelWeight ; ",
  "8973": "if ( singleLevel < constraintWeight . getHardLevelsSize ( ) ) { ",
  "8974": "int level = singleLevel ; ",
  "8975": "matchExecutor = ( RuleContext kcontext , Integer matchWeight ) ",
  "8976": "-> addHardConstraintMatch ( kcontext , level , levelWeight * matchWeight ) ; ",
  "8977": "int level = singleLevel - constraintWeight . getHardLevelsSize ( ) ; ",
  "8978": "-> addSoftConstraintMatch ( kcontext , level , levelWeight * matchWeight ) ; ",
  "8979": "matchExecutor = ( RuleContext kcontext , Integer matchWeight ) -> { ",
  "8980": "int [ ] hardWeights = new int [ hardScores . length ] ; ",
  "8981": "int [ ] softWeights = new int [ softScores . length ] ; ",
  "8982": "for ( int i = 0 ; i < hardWeights . length ; i ++ ) { ",
  "8983": "hardWeights [ i ] = constraintWeight . getHardScore ( i ) * matchWeight ; ",
  "8984": "for ( int i = 0 ; i < softWeights . length ; i ++ ) { ",
  "8985": "softWeights [ i ] = constraintWeight . getSoftScore ( i ) * matchWeight ; ",
  "8986": "addMultiConstraintMatch ( kcontext , hardWeights , softWeights ) ; ",
  "8987": "matchExecutorByScoreMap . put ( rule , ( RuleContext kcontext , BendableScore weightMultiplier ) -> { ",
  "8988": "hardWeights [ i ] = constraintWeight . getHardScore ( i ) * weightMultiplier . getHardScore ( i ) ; ",
  "8989": "softWeights [ i ] = constraintWeight . getSoftScore ( i ) * weightMultiplier . getSoftScore ( i ) ; ",
  "8990": "} public static BendableBigDecimalScore ofUninitialized ( int initScore , BigDecimal [ ] hardScores , BigDecimal [ ] softScores ) { ",
  "8991": "return new BendableBigDecimalScore ( initScore , hardScores , softScores ) ; ",
  "8992": "} public static BendableBigDecimalScore zero ( int hardLevelsSize , int softLevelsSize ) { ",
  "8993": "BigDecimal [ ] hardScores = new BigDecimal [ hardLevelsSize ] ; ",
  "8994": "Arrays . fill ( hardScores , BigDecimal . ZERO ) ; ",
  "8995": "BigDecimal [ ] softScores = new BigDecimal [ softLevelsSize ] ; ",
  "8996": "Arrays . fill ( softScores , BigDecimal . ZERO ) ; ",
  "8997": "return new BendableBigDecimalScore ( 0 , hardScores , softScores ) ; ",
  "8998": "} public static BendableBigDecimalScore ofHard ( int hardLevelsSize , int softLevelsSize , int hardLevel , BigDecimal hardScore ) { ",
  "8999": "} public static BendableBigDecimalScore ofSoft ( int hardLevelsSize , int softLevelsSize , int softLevel , BigDecimal softScore ) { ",
  "9000": "public void solve ( DefaultSolverScope < Solution_ > solverScope ) { ",
  "9001": "SortedSet < ExhaustiveSearchNode > expandableNodeQueue = new TreeSet < > ( nodeComparator ) ; ",
  "9002": "ExhaustiveSearchPhaseScope < Solution_ > phaseScope = new ExhaustiveSearchPhaseScope < > ( solverScope ) ; ",
  "9003": "phaseScope . setExpandableNodeQueue ( expandableNodeQueue ) ; ",
  "9004": "phaseStarted ( phaseScope ) ; ",
  "9005": "while ( ! expandableNodeQueue . isEmpty ( ) && ! termination . isPhaseTerminated ( phaseScope ) ) { ",
  "9006": "ExhaustiveSearchStepScope < Solution_ > stepScope = new ExhaustiveSearchStepScope < > ( phaseScope ) ; ",
  "9007": "ExhaustiveSearchNode node = expandableNodeQueue . last ( ) ; ",
  "9008": "expandableNodeQueue . remove ( node ) ; ",
  "9009": "stepScope . setExpandingNode ( node ) ; ",
  "9010": "stepStarted ( stepScope ) ; ",
  "9011": "restoreWorkingSolution ( stepScope ) ; ",
  "9012": "decider . expandNode ( stepScope ) ; ",
  "9013": "stepEnded ( stepScope ) ; ",
  "9014": "phaseScope . setLastCompletedStepScope ( stepScope ) ; ",
  "9015": "phaseEnded ( phaseScope ) ; ",
  "9016": "} public LocalSearchForager buildForager ( HeuristicConfigPolicy configPolicy ) { ",
  "9017": "if ( foragerClass != null ) { ",
  "9018": "if ( pickEarlyType != null || acceptedCountLimit != null || finalistPodiumType != null ) { ",
  "9019": "return ConfigUtils . newInstance ( this , \"foragerClass\" , foragerClass ) ; ",
  "9020": "LocalSearchPickEarlyType pickEarlyType_ = defaultIfNull ( pickEarlyType , LocalSearchPickEarlyType . NEVER ) ; ",
  "9021": "int acceptedCountLimit_ = defaultIfNull ( acceptedCountLimit , Integer . MAX_VALUE ) ; ",
  "9022": "FinalistPodiumType finalistPodiumType_ = defaultIfNull ( finalistPodiumType , FinalistPodiumType . HIGHEST_SCORE ) ; ",
  "9023": "boolean breakTieRandomly_ = defaultIfNull ( breakTieRandomly , true ) ; ",
  "9024": "return new AcceptedLocalSearchForager ( finalistPodiumType_ . buildFinalistPodium ( ) , pickEarlyType_ , ",
  "9025": "acceptedCountLimit_ , breakTieRandomly_ ) ; ",
  "9026": "} public void penalize ( RuleContext kcontext , long [ ] hardWeightsMultiplier , long [ ] softWeightsMultiplier ) { ",
  "9027": "long [ ] negatedHardWeightsMultiplier = new long [ hardScores . length ] ; ",
  "9028": "long [ ] negatedSoftWeightsMultiplier = new long [ softScores . length ] ; ",
  "9029": "for ( int i = 0 ; i < negatedHardWeightsMultiplier . length ; i ++ ) { ",
  "9030": "negatedHardWeightsMultiplier [ i ] = - hardWeightsMultiplier [ i ] ; ",
  "9031": "for ( int i = 0 ; i < negatedSoftWeightsMultiplier . length ; i ++ ) { ",
  "9032": "negatedSoftWeightsMultiplier [ i ] = - softWeightsMultiplier [ i ] ; ",
  "9033": "reward ( kcontext , negatedHardWeightsMultiplier , negatedSoftWeightsMultiplier ) ; ",
  "9034": "} public void reward ( RuleContext kcontext , long [ ] hardWeightsMultiplier , long [ ] softWeightsMultiplier ) { ",
  "9035": "BiConsumer < RuleContext , BendableLongScore > matchExecutor = matchExecutorByScoreMap . get ( rule ) ; ",
  "9036": "matchExecutor . accept ( kcontext , BendableLongScore . of ( hardWeightsMultiplier , softWeightsMultiplier ) ) ; ",
  "9037": "} public void startNextStep ( int stepIndex ) { ",
  "9038": "if ( filterStepIndex >= stepIndex ) { ",
  "9039": "filterStepIndex = stepIndex ; ",
  "9040": "MoveResult < Solution_ > exceptionResult = innerQueue . stream ( ) . filter ( MoveResult :: hasThrownException ) ",
  "9041": "if ( exceptionResult != null ) { ",
  "9042": "exceptionResult . getThrowable ( ) ) ; ",
  "9043": "innerQueue . clear ( ) ; ",
  "9044": "nextMoveIndex = 0 ; ",
  "9045": "backlog . clear ( ) ; ",
  "9046": "} public void addUndoableMove ( int moveThreadIndex , int stepIndex , int moveIndex , Move < Solution_ > move ) { ",
  "9047": "MoveResult < Solution_ > result = new MoveResult < > ( moveThreadIndex , stepIndex , moveIndex , move , false , null ) ; ",
  "9048": "if ( result . getStepIndex ( ) != filterStepIndex ) { ",
  "9049": "innerQueue . add ( result ) ; ",
  "9050": "} public void addMove ( int moveThreadIndex , int stepIndex , int moveIndex , Move < Solution_ > move , Score score ) { ",
  "9051": "MoveResult < Solution_ > result = new MoveResult < > ( moveThreadIndex , stepIndex , moveIndex , move , true , score ) ; ",
  "9052": "} public void addExceptionThrown ( int moveThreadIndex , Throwable throwable ) { ",
  "9053": "MoveResult < Solution_ > result = new MoveResult < > ( moveThreadIndex , throwable ) ; ",
  "9054": "} public MoveResult < Solution_ > take ( ) throws InterruptedException { ",
  "9055": "int moveIndex = nextMoveIndex ; ",
  "9056": "nextMoveIndex ++ ; ",
  "9057": "if ( ! backlog . isEmpty ( ) ) { ",
  "9058": "MoveResult < Solution_ > result = backlog . remove ( moveIndex ) ; ",
  "9059": "MoveResult < Solution_ > result = innerQueue . take ( ) ; ",
  "9060": "if ( result . hasThrownException ( ) ) { ",
  "9061": "result . getThrowable ( ) ) ; ",
  "9062": "if ( result . getMoveIndex ( ) == moveIndex ) { ",
  "9063": "backlog . put ( result . getMoveIndex ( ) , result ) ; ",
  "9064": "yAxis . setAutoRangeIncludesZero ( false ) ; ",
  "9065": "XYSeries series = new XYSeries ( singleBenchmarkResult . getSolverBenchmarkResult ( ) . getNameWithFavoriteSuffix ( ) ) ; ",
  "9066": "ScoreCalculationSpeedSubSingleStatistic subSingleStatistic = ( ScoreCalculationSpeedSubSingleStatistic ) ",
  "9067": "List < ScoreCalculationSpeedStatisticPoint > points = subSingleStatistic . getPointList ( ) ; ",
  "9068": "for ( ScoreCalculationSpeedStatisticPoint point : points ) { ",
  "9069": "long scoreCalculationSpeed = point . getScoreCalculationSpeed ( ) ; ",
  "9070": "series . add ( timeMillisSpent , scoreCalculationSpeed ) ; ",
  "9071": "plot . setDataset ( seriesIndex , new XYSeriesCollection ( series ) ) ; ",
  "9072": "graphFile = writeChartToImageFile ( chart , problemBenchmarkResult . getName ( ) + \"ScoreCalculationSpeedStatistic\" ) ; ",
  "9073": "public void resetWorkingSolution ( InvestmentSolution solution ) { ",
  "9074": "this . solution = solution ; ",
  "9075": "squaredStandardDeviationFemtosMaximum = solution . getParametrization ( ) ",
  "9076": ". calculateSquaredStandardDeviationFemtosMaximum ( ) ; ",
  "9077": "squaredStandardDeviationFemtos = 0L ; ",
  "9078": "List < Region > regionList = solution . getRegionList ( ) ; ",
  "9079": "regionQuantityTotalMap = new HashMap < > ( ) ; ",
  "9080": "for ( Region region : regionList ) { ",
  "9081": "regionQuantityTotalMap . put ( region , 0L ) ; ",
  "9082": "List < Sector > sectorList = solution . getSectorList ( ) ; ",
  "9083": "sectorQuantityTotalMap = new HashMap < > ( sectorList . size ( ) ) ; ",
  "9084": "for ( Sector sector : sectorList ) { ",
  "9085": "sectorQuantityTotalMap . put ( sector , 0L ) ; ",
  "9086": "hardScore = 0L ; ",
  "9087": "softScore = 0L ; ",
  "9088": "for ( AssetClassAllocation allocation : solution . getAssetClassAllocationList ( ) ) { ",
  "9089": "insertQuantityMillis ( allocation , true ) ; ",
  "9090": "} private void insertQuantityMillis ( AssetClassAllocation allocation , boolean reset ) { ",
  "9091": "if ( squaredStandardDeviationFemtos > squaredStandardDeviationFemtosMaximum ) { ",
  "9092": "hardScore += squaredStandardDeviationFemtos - squaredStandardDeviationFemtosMaximum ; ",
  "9093": "squaredStandardDeviationFemtos += calculateStandardDeviationSquaredFemtosDelta ( allocation , reset ) ; ",
  "9094": "hardScore -= squaredStandardDeviationFemtos - squaredStandardDeviationFemtosMaximum ; ",
  "9095": "Long quantityMillis = allocation . getQuantityMillis ( ) ; ",
  "9096": "if ( quantityMillis != null ) { ",
  "9097": "Region region = allocation . getRegion ( ) ; ",
  "9098": "long regionQuantityMaximum = region . getQuantityMillisMaximum ( ) ; ",
  "9099": "long oldRegionQuantity = regionQuantityTotalMap . get ( region ) ; ",
  "9100": "long oldRegionAvailable = regionQuantityMaximum - oldRegionQuantity ; ",
  "9101": "long newRegionQuantity = oldRegionQuantity + quantityMillis ; ",
  "9102": "long newRegionAvailable = regionQuantityMaximum - newRegionQuantity ; ",
  "9103": "hardScore += Math . min ( newRegionAvailable , 0L ) - Math . min ( oldRegionAvailable , 0L ) ; ",
  "9104": "regionQuantityTotalMap . put ( region , newRegionQuantity ) ; ",
  "9105": "Sector sector = allocation . getSector ( ) ; ",
  "9106": "long sectorQuantityMaximum = sector . getQuantityMillisMaximum ( ) ; ",
  "9107": "long oldSectorQuantity = sectorQuantityTotalMap . get ( sector ) ; ",
  "9108": "long oldSectorAvailable = sectorQuantityMaximum - oldSectorQuantity ; ",
  "9109": "long newSectorQuantity = oldSectorQuantity + quantityMillis ; ",
  "9110": "long newSectorAvailable = sectorQuantityMaximum - newSectorQuantity ; ",
  "9111": "hardScore += Math . min ( newSectorAvailable , 0L ) - Math . min ( oldSectorAvailable , 0L ) ; ",
  "9112": "sectorQuantityTotalMap . put ( sector , newSectorQuantity ) ; ",
  "9113": "softScore += allocation . getQuantifiedExpectedReturnMicros ( ) ; ",
  "9114": "} public synchronized boolean waitForRestartSolverDecision ( ) { ",
  "9115": "if ( ! daemon ) { ",
  "9116": "return ! problemFactChangeQueue . isEmpty ( ) && ! terminatedEarly ; ",
  "9117": "while ( problemFactChangeQueue . isEmpty ( ) && ! terminatedEarly ) { ",
  "9118": "wait ( ) ; ",
  "9119": "return ! terminatedEarly ; ",
  "9120": "} public synchronized < Solution_ > boolean addProblemFactChange ( ProblemFactChange < Solution_ > problemFactChange ) { ",
  "9121": "boolean added = problemFactChangeQueue . add ( problemFactChange ) ; ",
  "9122": "notifyAll ( ) ; ",
  "9123": "} public synchronized < Solution_ > boolean addProblemFactChanges ( List < ProblemFactChange < Solution_ > > problemFactChangeList ) { ",
  "9124": "boolean added = problemFactChangeQueue . addAll ( problemFactChangeList ) ; ",
  "9125": "public synchronized boolean isSolverTerminated ( DefaultSolverScope solverScope ) { ",
  "9126": "if ( Thread . currentThread ( ) . isInterrupted ( ) ",
  "9127": "&& ! terminatedEarly ) { ",
  "9128": "terminatedEarly = true ; ",
  "9129": "return terminatedEarly || ! problemFactChangeQueue . isEmpty ( ) ; ",
  "9130": "public int compareTo ( MrMachineTransientUsage other ) { ",
  "9131": ". append ( machineCapacity , other . machineCapacity ) ",
  "9132": ". append ( usage , other . usage ) ",
  "9133": "public boolean isAccepted ( LocalSearchMoveScope moveScope ) { ",
  "9134": "Score moveScore = moveScope . getScore ( ) ; ",
  "9135": "Score lastStepScore = moveScope . getStepScope ( ) . getPhaseScope ( ) . getLastCompletedStepScope ( ) . getScore ( ) ; ",
  "9136": "return moveScore . compareTo ( lastStepScore ) >= 0 ; ",
  "9137": "} public static BendableScore ofHard ( int hardLevelsSize , int softLevelsSize , int hardLevel , int hardScore ) { ",
  "9138": "int [ ] hardScores = new int [ hardLevelsSize ] ; ",
  "9139": "return new BendableScore ( 0 , hardScores , new int [ softLevelsSize ] ) ; ",
  "9140": "} public static BendableScore ofSoft ( int hardLevelsSize , int softLevelsSize , int softLevel , int softScore ) { ",
  "9141": "int [ ] softScores = new int [ softLevelsSize ] ; ",
  "9142": "return new BendableScore ( 0 , new int [ hardLevelsSize ] , softScores ) ; ",
  "9143": "SelectionProbabilityWeightFactory selectorProbabilityWeightFactory ; ",
  "9144": "if ( selectorProbabilityWeightFactoryClass != null ) { ",
  "9145": "if ( ! randomSelection ) { ",
  "9146": "selectorProbabilityWeightFactory = ConfigUtils . newInstance ( this , ",
  "9147": "\"selectorProbabilityWeightFactoryClass\" , selectorProbabilityWeightFactoryClass ) ; ",
  "9148": "} else if ( randomSelection ) { ",
  "9149": "Map < MoveSelector , Double > fixedProbabilityWeightMap = new HashMap < > ( ",
  "9150": "moveSelectorConfigList . size ( ) ) ; ",
  "9151": "for ( int i = 0 ; i < moveSelectorConfigList . size ( ) ; i ++ ) { ",
  "9152": "MoveSelectorConfig moveSelectorConfig = moveSelectorConfigList . get ( i ) ; ",
  "9153": "MoveSelector moveSelector = moveSelectorList . get ( i ) ; ",
  "9154": "Double fixedProbabilityWeight = moveSelectorConfig . getFixedProbabilityWeight ( ) ; ",
  "9155": "if ( fixedProbabilityWeight == null ) { ",
  "9156": "fixedProbabilityWeight = 1.0 ; ",
  "9157": "fixedProbabilityWeightMap . put ( moveSelector , fixedProbabilityWeight ) ; ",
  "9158": "selectorProbabilityWeightFactory = new FixedSelectorProbabilityWeightFactory ( fixedProbabilityWeightMap ) ; ",
  "9159": "selectorProbabilityWeightFactory = null ; ",
  "9160": "return new UnionMoveSelector ( moveSelectorList , randomSelection , ",
  "9161": "selectorProbabilityWeightFactory ) ; ",
  "9162": "LocalSearchPhaseScope < Solution_ > phaseScope = new LocalSearchPhaseScope < > ( solverScope ) ; ",
  "9163": "while ( ! termination . isPhaseTerminated ( phaseScope ) ) { ",
  "9164": "LocalSearchStepScope < Solution_ > stepScope = new LocalSearchStepScope < > ( phaseScope ) ; ",
  "9165": "stepScope . setTimeGradient ( termination . calculatePhaseTimeGradient ( phaseScope ) ) ; ",
  "9166": "decider . decideNextStep ( stepScope ) ; ",
  "9167": "if ( stepScope . getStep ( ) == null ) { ",
  "9168": "if ( termination . isPhaseTerminated ( phaseScope ) ) { ",
  "9169": "logIndentation , ",
  "9170": "stepScope . getStepIndex ( ) , ",
  "9171": "stepScope . getPhaseScope ( ) . calculateSolverTimeMillisSpentUpToNow ( ) ) ; ",
  "9172": "} else if ( stepScope . getSelectedMoveCount ( ) == 0L ) { ",
  "9173": "+ stepScope . getSelectedMoveCount ( ) ",
  "9174": "doStep ( stepScope ) ; ",
  "9175": "public SubSingleBenchmarkRunner < Solution_ > call ( ) { ",
  "9176": "MDC . put ( NAME_MDC , subSingleBenchmarkResult . getName ( ) ) ; ",
  "9177": "Runtime runtime = Runtime . getRuntime ( ) ; ",
  "9178": "ProblemBenchmarkResult < Solution_ > problemBenchmarkResult = subSingleBenchmarkResult . getSingleBenchmarkResult ( ) . getProblemBenchmarkResult ( ) ; ",
  "9179": "Solution_ problem = problemBenchmarkResult . readProblem ( ) ; ",
  "9180": "if ( ! problemBenchmarkResult . getPlannerBenchmarkResult ( ) . hasMultipleParallelBenchmarks ( ) ) { ",
  "9181": "runtime . gc ( ) ; ",
  "9182": "subSingleBenchmarkResult . setUsedMemoryAfterInputSolution ( runtime . totalMemory ( ) - runtime . freeMemory ( ) ) ; ",
  "9183": "subSingleBenchmarkResult ) ; ",
  "9184": "SolverConfig solverConfig = subSingleBenchmarkResult . getSingleBenchmarkResult ( ) . getSolverBenchmarkResult ( ) . getSolverConfig ( ) ; ",
  "9185": "if ( subSingleBenchmarkResult . getSingleBenchmarkResult ( ) . getSubSingleCount ( ) > 1 ) { ",
  "9186": "solverConfig = new SolverConfig ( solverConfig ) ; ",
  "9187": "solverConfig . offerRandomSeedFromSubSingleIndex ( ( long ) subSingleBenchmarkResult . getSubSingleBenchmarkIndex ( ) ) ; ",
  "9188": "Solver < Solution_ > solver = solverConfig . buildSolver ( solverConfigContext ) ; ",
  "9189": "for ( SubSingleStatistic subSingleStatistic : subSingleBenchmarkResult . getEffectiveSubSingleStatisticMap ( ) . values ( ) ) { ",
  "9190": "subSingleStatistic . open ( solver ) ; ",
  "9191": "subSingleStatistic . initPointList ( ) ; ",
  "9192": "Solution_ solution = solver . solve ( problem ) ; ",
  "9193": "long timeMillisSpent = solver . getTimeMillisSpent ( ) ; ",
  "9194": "DefaultSolverScope < Solution_ > solverScope = ( ( DefaultSolver < Solution_ > ) solver ) . getSolverScope ( ) ; ",
  "9195": "SolutionDescriptor < Solution_ > solutionDescriptor = solverScope . getSolutionDescriptor ( ) ; ",
  "9196": "problemBenchmarkResult . registerScale ( solutionDescriptor . getEntityCount ( solution ) , ",
  "9197": "solutionDescriptor . getGenuineVariableCount ( solution ) , ",
  "9198": "solutionDescriptor . getMaximumValueCount ( solution ) , ",
  "9199": "solutionDescriptor . getProblemScale ( solution ) ) ; ",
  "9200": "subSingleBenchmarkResult . setScore ( solutionDescriptor . getScore ( solution ) ) ; ",
  "9201": "subSingleBenchmarkResult . setTimeMillisSpent ( timeMillisSpent ) ; ",
  "9202": "subSingleBenchmarkResult . setScoreCalculationCount ( solverScope . getScoreCalculationCount ( ) ) ; ",
  "9203": "subSingleStatistic . close ( solver ) ; ",
  "9204": "subSingleStatistic . hibernatePointList ( ) ; ",
  "9205": "if ( ! warmUp ) { ",
  "9206": "problemBenchmarkResult . writeSolution ( subSingleBenchmarkResult , solution ) ; ",
  "9207": "MDC . remove ( NAME_MDC ) ; ",
  "9208": "if ( moveIteratorFactoryClass == null ) { ",
  "9209": "MoveIteratorFactory moveIteratorFactory = ConfigUtils . newInstance ( this , ",
  "9210": "\"moveIteratorFactoryClass\" , moveIteratorFactoryClass ) ; ",
  "9211": "ConfigUtils . applyCustomProperties ( moveIteratorFactory , \"moveIteratorFactoryClass\" , ",
  "9212": "moveIteratorFactoryCustomProperties , \"moveIteratorFactoryCustomProperties\" ) ; ",
  "9213": "return new MoveIteratorFactoryToMoveSelectorBridge ( moveIteratorFactory , randomSelection ) ; ",
  "9214": "public void afterEntityAdded ( EntityDescriptor < Solution_ > entityDescriptor , Object entity ) { ",
  "9215": "if ( ! getSolutionDescriptor ( ) . hasEntityDescriptor ( entity . getClass ( ) ) ) { ",
  "9216": "if ( kieSession . getFactHandle ( entity ) != null ) { ",
  "9217": "kieSession . insert ( entity ) ; ",
  "9218": "super . afterEntityAdded ( entityDescriptor , entity ) ; ",
  "9219": "public void afterVariableChanged ( VariableDescriptor variableDescriptor , Object entity ) { ",
  "9220": "update ( entity , variableDescriptor . getVariableName ( ) ) ; ",
  "9221": "super . afterVariableChanged ( variableDescriptor , entity ) ; ",
  "9222": "public void afterEntityRemoved ( EntityDescriptor < Solution_ > entityDescriptor , Object entity ) { ",
  "9223": "FactHandle factHandle = kieSession . getFactHandle ( entity ) ; ",
  "9224": "if ( factHandle == null ) { ",
  "9225": "+ getSolutionDescriptor ( ) . getEntityMemberAndEntityCollectionMemberNames ( ) + \").\" ) ; ",
  "9226": "kieSession . delete ( factHandle ) ; ",
  "9227": "super . afterEntityRemoved ( entityDescriptor , entity ) ; ",
  "9228": "public void afterProblemFactAdded ( Object problemFact ) { ",
  "9229": "if ( kieSession . getFactHandle ( problemFact ) != null ) { ",
  "9230": "+ getSolutionDescriptor ( ) . getProblemFactMemberAndProblemFactCollectionMemberNames ( ) + \").\\n\" ",
  "9231": "kieSession . insert ( problemFact ) ; ",
  "9232": "super . afterProblemFactAdded ( problemFact ) ; ",
  "9233": "public void afterProblemPropertyChanged ( Object problemFactOrEntity ) { ",
  "9234": "FactHandle factHandle = kieSession . getFactHandle ( problemFactOrEntity ) ; ",
  "9235": "kieSession . update ( factHandle , problemFactOrEntity ) ; ",
  "9236": "super . afterProblemPropertyChanged ( problemFactOrEntity ) ; ",
  "9237": "public void afterProblemFactRemoved ( Object problemFact ) { ",
  "9238": "FactHandle factHandle = kieSession . getFactHandle ( problemFact ) ; ",
  "9239": "super . afterProblemFactRemoved ( problemFact ) ; ",
  "9240": "} public static PlannerBenchmarkFactory createFromXmlResource ( String benchmarkConfigResource , ClassLoader classLoader ) { ",
  "9241": "return new XStreamXmlPlannerBenchmarkFactory ( new SolverConfigContext ( classLoader ) ) ",
  "9242": ". configure ( benchmarkConfigResource ) ; ",
  "9243": "} public BenchmarkReport buildBenchmarkReport ( PlannerBenchmarkResult plannerBenchmark ) { ",
  "9244": "BenchmarkReport benchmarkReport = new BenchmarkReport ( plannerBenchmark ) ; ",
  "9245": "benchmarkReport . setLocale ( determineLocale ( ) ) ; ",
  "9246": "benchmarkReport . setTimezoneId ( ZoneId . systemDefault ( ) ) ; ",
  "9247": "supplySolverRanking ( benchmarkReport ) ; ",
  "9248": "return benchmarkReport ; ",
  "9249": "public ExhaustiveSearchPhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "9250": "phaseConfigPolicy . setReinitializeVariableFilterEnabled ( true ) ; ",
  "9251": "phaseConfigPolicy . setInitializedChainedValueFilterEnabled ( true ) ; ",
  "9252": "ExhaustiveSearchType exhaustiveSearchType_ = exhaustiveSearchType == null ",
  "9253": "? ExhaustiveSearchType . BRANCH_AND_BOUND : exhaustiveSearchType ; ",
  "9254": "phaseConfigPolicy . setEntitySorterManner ( entitySorterManner != null ? entitySorterManner ",
  "9255": ": exhaustiveSearchType_ . getDefaultEntitySorterManner ( ) ) ; ",
  "9256": "phaseConfigPolicy . setValueSorterManner ( valueSorterManner != null ? valueSorterManner ",
  "9257": ": exhaustiveSearchType_ . getDefaultValueSorterManner ( ) ) ; ",
  "9258": "DefaultExhaustiveSearchPhase phase = new DefaultExhaustiveSearchPhase ( ",
  "9259": "boolean scoreBounderEnabled = exhaustiveSearchType_ . isScoreBounderEnabled ( ) ; ",
  "9260": "NodeExplorationType nodeExplorationType_ ; ",
  "9261": "if ( exhaustiveSearchType_ == ExhaustiveSearchType . BRUTE_FORCE ) { ",
  "9262": "nodeExplorationType_ = defaultIfNull ( nodeExplorationType , NodeExplorationType . ORIGINAL_ORDER ) ; ",
  "9263": "if ( nodeExplorationType_ != NodeExplorationType . ORIGINAL_ORDER ) { ",
  "9264": "+ \").\" ) ; ",
  "9265": "nodeExplorationType_ = defaultIfNull ( nodeExplorationType , NodeExplorationType . DEPTH_FIRST ) ; ",
  "9266": "phase . setNodeComparator ( nodeExplorationType_ . buildNodeComparator ( scoreBounderEnabled ) ) ; ",
  "9267": "EntitySelectorConfig entitySelectorConfig_ = buildEntitySelectorConfig ( phaseConfigPolicy ) ; ",
  "9268": "EntitySelector entitySelector = entitySelectorConfig_ . buildEntitySelector ( phaseConfigPolicy , ",
  "9269": "phase . setEntitySelector ( entitySelector ) ; ",
  "9270": "phase . setDecider ( buildDecider ( phaseConfigPolicy , entitySelector , bestSolutionRecaller , phase . getTermination ( ) , ",
  "9271": "scoreBounderEnabled ) ) ; ",
  "9272": "phase . setAssertWorkingSolutionScoreFromScratch ( true ) ; ",
  "9273": "phase . setAssertExpectedWorkingSolutionScore ( true ) ; ",
  "9274": "} public void processAnnotations ( DescriptorPolicy descriptorPolicy , ScoreDefinition scoreDefinition ) { ",
  "9275": "processPackAnnotation ( descriptorPolicy ) ; ",
  "9276": "ArrayList < Method > potentiallyOverwritingMethodList = new ArrayList < > ( ) ; ",
  "9277": "for ( Class < ? > lineageClass : ConfigUtils . getAllAnnotatedLineageClasses ( constraintConfigurationClass , ConstraintConfiguration . class ) ) { ",
  "9278": "List < Member > memberList = ConfigUtils . getDeclaredMembers ( lineageClass ) ; ",
  "9279": "if ( member instanceof Method && potentiallyOverwritingMethodList . stream ( ) . anyMatch ( ",
  "9280": "m -> member . getName ( ) . equals ( m . getName ( ) ) ",
  "9281": "&& ReflectionHelper . isMethodOverwritten ( ( Method ) member , m . getDeclaringClass ( ) ) ) ) { ",
  "9282": "processParameterAnnotation ( descriptorPolicy , member , scoreDefinition ) ; ",
  "9283": "potentiallyOverwritingMethodList . ensureCapacity ( potentiallyOverwritingMethodList . size ( ) + memberList . size ( ) ) ; ",
  "9284": "memberList . stream ( ) . filter ( member -> member instanceof Method ) ",
  "9285": ". forEach ( member -> potentiallyOverwritingMethodList . add ( ( Method ) member ) ) ; ",
  "9286": "if ( constraintWeightDescriptorMap . isEmpty ( ) ) { ",
  "9287": "singleBenchmarkResult . accumulateResults ( benchmarkReport ) ; ",
  "9288": "determineTotalsAndAveragesAndRanking ( ) ; ",
  "9289": "determineWinningScoreDifference ( ) ; ",
  "9290": "for ( ProblemStatistic problemStatistic : problemStatisticList ) { ",
  "9291": "problemStatistic . accumulateResults ( benchmarkReport ) ; ",
  "9292": "} public void registerScale ( long registeringEntityCount , long registeringVariableCount , ",
  "9293": "long registeringMaximumValueCount , long registeringProblemScale ) { ",
  "9294": "if ( entityCount == null ) { ",
  "9295": "entityCount = registeringEntityCount ; ",
  "9296": "} else if ( entityCount . longValue ( ) != registeringEntityCount ) { ",
  "9297": "getName ( ) , entityCount , registeringEntityCount ) ; ",
  "9298": "entityCount = - 1L ; ",
  "9299": "if ( variableCount == null ) { ",
  "9300": "variableCount = registeringVariableCount ; ",
  "9301": "} else if ( variableCount . longValue ( ) != registeringVariableCount ) { ",
  "9302": "getName ( ) , variableCount , registeringVariableCount ) ; ",
  "9303": "variableCount = - 1L ; ",
  "9304": "if ( maximumValueCount == null ) { ",
  "9305": "maximumValueCount = registeringMaximumValueCount ; ",
  "9306": "} else if ( maximumValueCount . longValue ( ) != registeringMaximumValueCount ) { ",
  "9307": "getName ( ) , maximumValueCount , registeringMaximumValueCount ) ; ",
  "9308": "maximumValueCount = - 1L ; ",
  "9309": "if ( problemScale == null ) { ",
  "9310": "problemScale = registeringProblemScale ; ",
  "9311": "} else if ( problemScale . longValue ( ) != registeringProblemScale ) { ",
  "9312": "getName ( ) , problemScale , registeringProblemScale ) ; ",
  "9313": "problemScale = - 1L ; ",
  "9314": "} protected static < Solution_ > Map < ProblemBenchmarkResult , ProblemBenchmarkResult > createMergeMap ( ",
  "9315": "Map < ProblemBenchmarkResult , ProblemBenchmarkResult > mergeMap ",
  "9316": "Map < ProblemProvider < Solution_ > , ProblemBenchmarkResult > problemProviderToNewResultMap = new HashMap < > ( ) ; ",
  "9317": "ProblemBenchmarkResult < Solution_ > oldResult = singleBenchmarkResult . getProblemBenchmarkResult ( ) ; ",
  "9318": "ProblemBenchmarkResult < Solution_ > newResult ; ",
  "9319": "if ( ! problemProviderToNewResultMap . containsKey ( oldResult . problemProvider ) ) { ",
  "9320": "newResult = new ProblemBenchmarkResult < > ( newPlannerBenchmarkResult ) ; ",
  "9321": "newResult . problemProvider = oldResult . problemProvider ; ",
  "9322": "newResult . problemStatisticList = new ArrayList < > ( oldResult . problemStatisticList . size ( ) ) ; ",
  "9323": "for ( ProblemStatistic oldProblemStatistic : oldResult . problemStatisticList ) { ",
  "9324": "newResult . problemStatisticList . add ( ",
  "9325": "oldProblemStatistic . getProblemStatisticType ( ) . buildProblemStatistic ( newResult ) ) ; ",
  "9326": "newResult . entityCount = oldResult . entityCount ; ",
  "9327": "newResult . variableCount = oldResult . variableCount ; ",
  "9328": "newResult . maximumValueCount = oldResult . maximumValueCount ; ",
  "9329": "newResult . problemScale = oldResult . problemScale ; ",
  "9330": "problemProviderToNewResultMap . put ( oldResult . problemProvider , newResult ) ; ",
  "9331": "newPlannerBenchmarkResult . getUnifiedProblemBenchmarkResultList ( ) . add ( newResult ) ; ",
  "9332": "newResult = problemProviderToNewResultMap . get ( oldResult . problemProvider ) ; ",
  "9333": "if ( ! Objects . equals ( oldResult . name , newResult . name ) ) { ",
  "9334": "+ oldResult . problemProvider + \").\" ) ; ",
  "9335": "newResult . problemStatisticList . removeIf ( ",
  "9336": "newStatistic -> ! oldResult . hasProblemStatisticType ( newStatistic . getProblemStatisticType ( ) ) ) ; ",
  "9337": "newResult . entityCount = ConfigUtils . meldProperty ( oldResult . entityCount , newResult . entityCount ) ; ",
  "9338": "newResult . variableCount = ConfigUtils . meldProperty ( oldResult . variableCount , newResult . variableCount ) ; ",
  "9339": "newResult . maximumValueCount = ConfigUtils . meldProperty ( oldResult . maximumValueCount , newResult . maximumValueCount ) ; ",
  "9340": "newResult . problemScale = ConfigUtils . meldProperty ( oldResult . problemScale , newResult . problemScale ) ; ",
  "9341": "} public static CountableValueRange < Integer > createIntValueRange ( int from , int to , int incrementUnit ) { ",
  "9342": "return new IntValueRange ( from , to , incrementUnit ) ; ",
  "9343": "} public static CountableValueRange < Long > createLongValueRange ( long from , long to , long incrementUnit ) { ",
  "9344": "return new LongValueRange ( from , to , incrementUnit ) ; ",
  "9345": "} public static CountableValueRange < BigInteger > createBigIntegerValueRange ( BigInteger from , BigInteger to ) { ",
  "9346": "return new BigIntegerValueRange ( from , to ) ; ",
  "9347": "} public static CountableValueRange < BigDecimal > createBigDecimalValueRange ( BigDecimal from , BigDecimal to ) { ",
  "9348": "return new BigDecimalValueRange ( from , to ) ; ",
  "9349": "} public static CountableValueRange < LocalDate > createLocalDateValueRange ( ",
  "9350": "LocalDate from , LocalDate to , long incrementUnitAmount , TemporalUnit incrementUnitType ) { ",
  "9351": "return createTemporalValueRange ( from , to , incrementUnitAmount , incrementUnitType ) ; ",
  "9352": "} public static CountableValueRange < LocalTime > createLocalTimeValueRange ( ",
  "9353": "LocalTime from , LocalTime to , long incrementUnitAmount , TemporalUnit incrementUnitType ) { ",
  "9354": "} public static CountableValueRange < LocalDateTime > createLocalDateTimeValueRange ( ",
  "9355": "LocalDateTime from , LocalDateTime to , long incrementUnitAmount , TemporalUnit incrementUnitType ) { ",
  "9356": "} public static < Temporal_ extends Temporal & Comparable < ? super Temporal_ > > CountableValueRange < Temporal_ > createTemporalValueRange ( ",
  "9357": "Temporal_ from , Temporal_ to , long incrementUnitAmount , TemporalUnit incrementUnitType ) { ",
  "9358": "return new TemporalValueRange < > ( from , to , incrementUnitAmount , incrementUnitType ) ; ",
  "9359": "CustomPhaseScope < Solution_ > phaseScope = new CustomPhaseScope < > ( solverScope ) ; ",
  "9360": "CustomStepScope < Solution_ > stepScope = new CustomStepScope < > ( phaseScope ) ; ",
  "9361": "for ( CustomPhaseCommand < Solution_ > customPhaseCommand : customPhaseCommandList ) { ",
  "9362": "solverScope . checkYielding ( ) ; ",
  "9363": "doStep ( stepScope , customPhaseCommand ) ; ",
  "9364": "stepScope = new CustomStepScope < > ( phaseScope ) ; ",
  "9365": "DrawingSupplier drawingSupplier = new DefaultDrawingSupplier ( ) ; ",
  "9366": "XYSeries acceptedSeries = new XYSeries ( ",
  "9367": "XYSeries selectedSeries = new XYSeries ( ",
  "9368": "XYItemRenderer renderer = new XYLineAndShapeRenderer ( true , false ) ; ",
  "9369": "MoveCountPerStepSubSingleStatistic subSingleStatistic = ( MoveCountPerStepSubSingleStatistic ) ",
  "9370": "List < MoveCountPerStepStatisticPoint > list = subSingleStatistic . getPointList ( ) ; ",
  "9371": "for ( MoveCountPerStepStatisticPoint point : list ) { ",
  "9372": "long acceptedMoveCount = point . getMoveCountPerStepMeasurement ( ) . getAcceptedMoveCount ( ) ; ",
  "9373": "long selectedMoveCount = point . getMoveCountPerStepMeasurement ( ) . getSelectedMoveCount ( ) ; ",
  "9374": "acceptedSeries . add ( timeMillisSpent , acceptedMoveCount ) ; ",
  "9375": "selectedSeries . add ( timeMillisSpent , selectedMoveCount ) ; ",
  "9376": "seriesCollection . addSeries ( acceptedSeries ) ; ",
  "9377": "seriesCollection . addSeries ( selectedSeries ) ; ",
  "9378": "renderer . setSeriesStroke ( 1 , new BasicStroke ( ",
  "9379": "2.0f , BasicStroke . CAP_ROUND , BasicStroke . JOIN_ROUND , 1.0f , new float [ ] { 2.0f , 6.0f } , 0.0f ) ) ; ",
  "9380": "1.0f , BasicStroke . CAP_ROUND , BasicStroke . JOIN_ROUND , 1.0f , new float [ ] { 2.0f , 6.0f } , 0.0f ) ) ; ",
  "9381": "Paint linePaint = drawingSupplier . getNextPaint ( ) ; ",
  "9382": "renderer . setSeriesPaint ( 0 , linePaint ) ; ",
  "9383": "renderer . setSeriesPaint ( 1 , linePaint ) ; ",
  "9384": "graphFile = writeChartToImageFile ( chart , problemBenchmarkResult . getName ( ) + \"MoveCountPerStepStatistic\" ) ; ",
  "9385": "public boolean mightContainEntity ( ) { ",
  "9386": "SolutionDescriptor < Solution_ > solutionDescriptor ",
  "9387": "= variableDescriptor . getEntityDescriptor ( ) . getSolutionDescriptor ( ) ; ",
  "9388": "Class < ? > variablePropertyType = variableDescriptor . getVariablePropertyType ( ) ; ",
  "9389": "for ( Class < ? > entityClass : solutionDescriptor . getEntityClassSet ( ) ) { ",
  "9390": "if ( variablePropertyType . isAssignableFrom ( entityClass ) ) { ",
  "9391": "public int compareTo ( MrServiceMovedProcessesCount other ) { ",
  "9392": ". append ( service , other . service ) ",
  "9393": ". append ( movedProcessesCount , other . movedProcessesCount ) ",
  "9394": "} protected static < E > List < E > rebaseList ( List < E > externalObjectList , ScoreDirector < ? > destinationScoreDirector ) { ",
  "9395": "List < E > rebasedObjectList = new ArrayList < > ( externalObjectList . size ( ) ) ; ",
  "9396": "for ( E entity : externalObjectList ) { ",
  "9397": "rebasedObjectList . add ( destinationScoreDirector . lookUpWorkingObject ( entity ) ) ; ",
  "9398": "return rebasedObjectList ; ",
  "9399": "PartitionedSearchPhaseScope < Solution_ > phaseScope = new PartitionedSearchPhaseScope < > ( solverScope ) ; ",
  "9400": "List < Solution_ > partList = solutionPartitioner . splitWorkingSolution ( ",
  "9401": "solverScope . getScoreDirector ( ) , runnablePartThreadLimit ) ; ",
  "9402": "int partCount = partList . size ( ) ; ",
  "9403": "phaseScope . setPartCount ( partCount ) ; ",
  "9404": "ExecutorService executor = createThreadPoolExecutor ( partCount ) ; ",
  "9405": "ChildThreadPlumbingTermination childThreadPlumbingTermination = new ChildThreadPlumbingTermination ( ) ; ",
  "9406": "PartitionQueue < Solution_ > partitionQueue = new PartitionQueue < > ( partCount ) ; ",
  "9407": "Semaphore runnablePartThreadSemaphore ",
  "9408": "= runnablePartThreadLimit == null ? null : new Semaphore ( runnablePartThreadLimit , true ) ; ",
  "9409": "for ( ListIterator < Solution_ > it = partList . listIterator ( ) ; it . hasNext ( ) ; ) { ",
  "9410": "int partIndex = it . nextIndex ( ) ; ",
  "9411": "Solution_ part = it . next ( ) ; ",
  "9412": "PartitionSolver < Solution_ > partitionSolver = buildPartitionSolver ( ",
  "9413": "childThreadPlumbingTermination , runnablePartThreadSemaphore , solverScope ) ; ",
  "9414": "partitionSolver . addEventListener ( event -> { ",
  "9415": "InnerScoreDirector < Solution_ > childScoreDirector = partitionSolver . solverScope . getScoreDirector ( ) ; ",
  "9416": "PartitionChangeMove < Solution_ > move = PartitionChangeMove . createMove ( childScoreDirector , partIndex ) ; ",
  "9417": "InnerScoreDirector < Solution_ > parentScoreDirector = solverScope . getScoreDirector ( ) ; ",
  "9418": "move = move . rebase ( parentScoreDirector ) ; ",
  "9419": "partitionQueue . addMove ( partIndex , move ) ; ",
  "9420": "executor . submit ( ( ) -> { ",
  "9421": "partitionSolver . solve ( part ) ; ",
  "9422": "long partCalculationCount = partitionSolver . getScoreCalculationCount ( ) ; ",
  "9423": "partitionQueue . addFinish ( partIndex , partCalculationCount ) ; ",
  "9424": "logIndentation , partIndex , throwable ) ; ",
  "9425": "partitionQueue . addExceptionThrown ( partIndex , throwable ) ; ",
  "9426": "for ( PartitionChangeMove < Solution_ > step : partitionQueue ) { ",
  "9427": "PartitionedSearchStepScope < Solution_ > stepScope = new PartitionedSearchStepScope < > ( phaseScope ) ; ",
  "9428": "stepScope . setStep ( step ) ; ",
  "9429": "stepScope . setStepString ( step . toString ( ) ) ; ",
  "9430": "phaseScope . addChildThreadsScoreCalculationCount ( partitionQueue . getPartsCalculationCount ( ) ) ; ",
  "9431": "childThreadPlumbingTermination . terminateChildren ( ) ; ",
  "9432": "} public void checkYielding ( ) { ",
  "9433": "if ( runnableThreadSemaphore != null ) { ",
  "9434": "runnableThreadSemaphore . release ( ) ; ",
  "9435": "runnableThreadSemaphore . acquire ( ) ; ",
  "9436": "PillarSelectorConfig pillarSelectorConfig_ = pillarSelectorConfig == null ? new PillarSelectorConfig ( ) ",
  "9437": ": pillarSelectorConfig ; ",
  "9438": "List < String > variableNameIncludeList = valueSelectorConfig == null ? null ",
  "9439": ": valueSelectorConfig . getVariableName ( ) == null ? null ",
  "9440": ": Collections . singletonList ( valueSelectorConfig . getVariableName ( ) ) ; ",
  "9441": "PillarSelector pillarSelector = pillarSelectorConfig_ . buildPillarSelector ( configPolicy , ",
  "9442": "minimumCacheType , SelectionOrder . fromRandomSelectionBoolean ( randomSelection ) , variableNameIncludeList ) ; ",
  "9443": "pillarSelector . getEntityDescriptor ( ) , ",
  "9444": "return new PillarChangeMoveSelector ( pillarSelector , valueSelector , randomSelection ) ; ",
  "9445": "} public boolean isInitialized ( Object entity ) { ",
  "9446": "if ( nullable ) { ",
  "9447": "Object variable = getValue ( entity ) ; ",
  "9448": "return variable != null ; ",
  "9449": "} public boolean overlaps ( Flight other ) { ",
  "9450": "return departureUTCDateTime . compareTo ( other . arrivalUTCDateTime ) < 0 ",
  "9451": "&& other . departureUTCDateTime . compareTo ( arrivalUTCDateTime ) < 0 ; ",
  "9452": "cachedEntityMap = new TreeMap < > ( ) ; ",
  "9453": "ScoreDirector scoreDirector = solverScope . getScoreDirector ( ) ; ",
  "9454": "double probabilityWeightOffset = 0L ; ",
  "9455": "for ( Object entity : childEntitySelector ) { ",
  "9456": "double probabilityWeight = probabilityWeightFactory . createProbabilityWeight ( ",
  "9457": "scoreDirector , entity ) ; ",
  "9458": "cachedEntityMap . put ( probabilityWeightOffset , entity ) ; ",
  "9459": "probabilityWeightOffset += probabilityWeight ; ",
  "9460": "probabilityWeightTotal = probabilityWeightOffset ; ",
  "9461": "} public void defineColumnHeaderByKey ( HeaderColumnKey xObject ) { ",
  "9462": "int x = layout . addColumn ( ) ; ",
  "9463": "xMap . put ( xObject , x ) ; ",
  "9464": "} public void addCornerHeader ( HeaderColumnKey xObject , HeaderRowKey yObject , JComponent component ) { ",
  "9465": "int x = xMap . get ( xObject ) ; ",
  "9466": "int y = yMap . get ( yObject ) ; ",
  "9467": "add ( component , new TimeTableLayoutConstraints ( x , y , true ) ) ; ",
  "9468": "} public int getMissingSkillCount ( ) { ",
  "9469": "if ( employee == null ) { ",
  "9470": "for ( Skill skill : taskType . getRequiredSkillList ( ) ) { ",
  "9471": "if ( ! employee . getSkillSet ( ) . contains ( skill ) ) { ",
  "9472": "ConstructionHeuristicPhaseScope < Solution_ > phaseScope = new ConstructionHeuristicPhaseScope < > ( solverScope ) ; ",
  "9473": "for ( Placement placement : entityPlacer ) { ",
  "9474": "ConstructionHeuristicStepScope < Solution_ > stepScope = new ConstructionHeuristicStepScope < > ( phaseScope ) ; ",
  "9475": "decider . decideNextStep ( stepScope , placement ) ; ",
  "9476": "public CustomPhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "9477": "DefaultCustomPhase phase = new DefaultCustomPhase ( ",
  "9478": "if ( ConfigUtils . isEmptyCollection ( customPhaseCommandClassList ) ) { ",
  "9479": "List < CustomPhaseCommand > customPhaseCommandList = new ArrayList < > ( customPhaseCommandClassList . size ( ) ) ; ",
  "9480": "for ( Class < ? extends CustomPhaseCommand > customPhaseCommandClass : customPhaseCommandClassList ) { ",
  "9481": "CustomPhaseCommand customPhaseCommand = ConfigUtils . newInstance ( this , ",
  "9482": "\"customPhaseCommandClass\" , customPhaseCommandClass ) ; ",
  "9483": "ConfigUtils . applyCustomProperties ( customPhaseCommand , \"customPhaseCommandClass\" , ",
  "9484": "customProperties , \"customProperties\" ) ; ",
  "9485": "customPhaseCommandList . add ( customPhaseCommand ) ; ",
  "9486": "phase . setCustomPhaseCommandList ( customPhaseCommandList ) ; ",
  "9487": "phase . setForceUpdateBestSolution ( forceUpdateBestSolution == null ? false : forceUpdateBestSolution ) ; ",
  "9488": "public void configureConstraintWeight ( Rule rule , HardSoftScore constraintWeight ) { ",
  "9489": "if ( constraintWeight . equals ( HardSoftScore . ZERO ) ) { ",
  "9490": "} else if ( constraintWeight . getSoftScore ( ) == 0 ) { ",
  "9491": "-> addHardConstraintMatch ( kcontext , constraintWeight . getHardScore ( ) * matchWeight ) ; ",
  "9492": "} else if ( constraintWeight . getHardScore ( ) == 0 ) { ",
  "9493": "-> addSoftConstraintMatch ( kcontext , constraintWeight . getSoftScore ( ) * matchWeight ) ; ",
  "9494": "constraintWeight . getHardScore ( ) * matchWeight , ",
  "9495": "constraintWeight . getSoftScore ( ) * matchWeight ) ; ",
  "9496": "HardSoftScore weightMultiplier ) -> addMultiConstraintMatch ( kcontext , ",
  "9497": "constraintWeight . getHardScore ( ) * weightMultiplier . getHardScore ( ) , ",
  "9498": "constraintWeight . getSoftScore ( ) * weightMultiplier . getSoftScore ( ) ) ) ; ",
  "9499": "} public LookUpStrategy determineLookUpStrategy ( Object object ) { ",
  "9500": "Class < ? > objectClass = object . getClass ( ) ; ",
  "9501": "return decisionCache . computeIfAbsent ( objectClass , key -> { ",
  "9502": "if ( object . getClass ( ) . isEnum ( ) ) { ",
  "9503": "return new ImmutableLookUpStrategy ( ) ; ",
  "9504": "switch ( lookUpStrategyType ) { ",
  "9505": "case PLANNING_ID_OR_NONE : ",
  "9506": "MemberAccessor memberAccessor1 = ConfigUtils . findPlanningIdMemberAccessor ( objectClass ) ; ",
  "9507": "if ( memberAccessor1 == null ) { ",
  "9508": "return new NoneLookUpStrategy ( ) ; ",
  "9509": "return new PlanningIdLookUpStrategy ( memberAccessor1 ) ; ",
  "9510": "case PLANNING_ID_OR_FAIL_FAST : ",
  "9511": "MemberAccessor memberAccessor2 = ConfigUtils . findPlanningIdMemberAccessor ( objectClass ) ; ",
  "9512": "if ( memberAccessor2 == null ) { ",
  "9513": "+ LookUpStrategyType . class . getSimpleName ( ) + \".\" ) ; ",
  "9514": "return new PlanningIdLookUpStrategy ( memberAccessor2 ) ; ",
  "9515": "case EQUALITY : ",
  "9516": "Method equalsMethod ; ",
  "9517": "Method hashCodeMethod ; ",
  "9518": "equalsMethod = object . getClass ( ) . getMethod ( \"equals\" , Object . class ) ; ",
  "9519": "hashCodeMethod = object . getClass ( ) . getMethod ( \"hashCode\" ) ; ",
  "9520": "if ( equalsMethod . getDeclaringClass ( ) . equals ( Object . class ) ) { ",
  "9521": "if ( hashCodeMethod . getDeclaringClass ( ) . equals ( Object . class ) ) { ",
  "9522": "return new EqualsLookUpStrategy ( ) ; ",
  "9523": "public void phaseStarted ( AbstractPhaseScope phaseScope ) { ",
  "9524": "super . phaseStarted ( phaseScope ) ; ",
  "9525": "InnerScoreDirector scoreDirector = phaseScope . getScoreDirector ( ) ; ",
  "9526": "cachedEntityList = entityDescriptor . extractEntities ( scoreDirector . getWorkingSolution ( ) ) ; ",
  "9527": "cachedEntityListRevision = scoreDirector . getWorkingEntityListRevision ( ) ; ",
  "9528": "cachedEntityListIsDirty = false ; ",
  "9529": "this . workingSolution = workingSolution ; ",
  "9530": "SolutionDescriptor < Solution_ > solutionDescriptor = getSolutionDescriptor ( ) ; ",
  "9531": "workingInitScore = - solutionDescriptor . countUninitializedVariables ( workingSolution ) ; ",
  "9532": "if ( lookUpEnabled ) { ",
  "9533": "lookUpManager . resetWorkingObjects ( solutionDescriptor . getAllFacts ( workingSolution ) ) ; ",
  "9534": "variableListenerSupport . resetWorkingSolution ( ) ; ",
  "9535": "setWorkingEntityListDirty ( ) ; ",
  "9536": "public final void beforeEntityAdded ( Object entity ) { ",
  "9537": "beforeEntityAdded ( getSolutionDescriptor ( ) . findEntityDescriptorOrFail ( entity . getClass ( ) ) , entity ) ; ",
  "9538": "public void assertExpectedWorkingScore ( Score expectedWorkingScore , Object completedAction ) { ",
  "9539": "Score workingScore = calculateScore ( ) ; ",
  "9540": "if ( ! expectedWorkingScore . equals ( workingScore ) ) { ",
  "9541": "SubChainSelector leftSubChainSelector = subChainSelectorConfig_ . buildSubChainSelector ( configPolicy , ",
  "9542": "SubChainSelectorConfig rightSubChainSelectorConfig = defaultIfNull ( secondarySubChainSelectorConfig , ",
  "9543": "subChainSelectorConfig_ ) ; ",
  "9544": "SubChainSelector rightSubChainSelector = rightSubChainSelectorConfig . buildSubChainSelector ( configPolicy , ",
  "9545": "return new SubChainSwapMoveSelector ( leftSubChainSelector , rightSubChainSelector , randomSelection , ",
  "9546": "defaultIfNull ( selectReversingMoveToo , true ) ) ; ",
  "9547": "public boolean isCountable ( ) { ",
  "9548": "if ( ! entitySelector . isCountable ( ) ) { ",
  "9549": "for ( ValueSelector valueSelector : valueSelectors ) { ",
  "9550": "if ( ! valueSelector . isCountable ( ) ) { ",
  "9551": "public void phaseStarted ( LocalSearchPhaseScope phaseScope ) { ",
  "9552": "thresholdScore = phaseScope . getBestScore ( ) ; ",
  "9553": "return super . isMoveDoable ( scoreDirector ) ",
  "9554": "&& ! Objects . equals ( entity , toPlanningValue ) ; ",
  "9555": "} protected void validateCacheTypeVersusSelectionOrder ( ",
  "9556": "SelectionCacheType resolvedCacheType , SelectionOrder resolvedSelectionOrder ) { ",
  "9557": "switch ( resolvedSelectionOrder ) { ",
  "9558": "case INHERIT : ",
  "9559": "case ORIGINAL : ",
  "9560": "case RANDOM : ",
  "9561": "case SORTED : ",
  "9562": "case SHUFFLED : ",
  "9563": "case PROBABILISTIC : ",
  "9564": "if ( resolvedCacheType . isNotCached ( ) ) { ",
  "9565": "if ( entitySelectorConfig == null ) { ",
  "9566": "EntitySelector entitySelector = entitySelectorConfig . buildEntitySelector ( configPolicy , ",
  "9567": "if ( valueSelectorConfig == null ) { ",
  "9568": "ValueSelector valueSelector = valueSelectorConfig . buildValueSelector ( configPolicy , ",
  "9569": "return new ChangeMoveSelector ( entitySelector , valueSelector , randomSelection ) ; ",
  "9570": "if ( Objects . equals ( leftValue , rightValue ) ",
  "9571": "|| Objects . equals ( leftEntity , rightValue ) || Objects . equals ( rightEntity , leftValue ) ) { ",
  "9572": "if ( rightEntity == null ) { ",
  "9573": "if ( leftAnchor == rightAnchor ) { ",
  "9574": "if ( rightEntity != null ) { ",
  "9575": "ValueRange rightValueRange = valueRangeDescriptor . extractValueRange ( workingSolution , rightEntity ) ; ",
  "9576": "if ( ! rightValueRange . contains ( leftValue ) ) { ",
  "9577": "ValueRange leftValueRange = valueRangeDescriptor . extractValueRange ( workingSolution , leftEntity ) ; ",
  "9578": "if ( ! leftValueRange . contains ( rightValue ) ) { ",
  "9579": "InnerScoreDirector scoreDirector = solverScope . getScoreDirector ( ) ; ",
  "9580": "GenuineVariableDescriptor variableDescriptor = valueSelector . getVariableDescriptor ( ) ; ",
  "9581": "long valueSize = valueSelector . getSize ( ) ; ",
  "9582": "if ( valueSize > ( long ) Integer . MAX_VALUE ) { ",
  "9583": "List < Object > anchorList = new ArrayList < > ( ) ; ",
  "9584": "for ( Object value : valueSelector ) { ",
  "9585": "if ( variableDescriptor . isValuePotentialAnchor ( value ) ) { ",
  "9586": "anchorList . add ( value ) ; ",
  "9587": "int anchorListSize = Math . max ( anchorList . size ( ) , 1 ) ; ",
  "9588": "anchorTrailingChainList = new ArrayList < > ( anchorListSize ) ; ",
  "9589": "int anchorChainInitialCapacity = ( ( int ) valueSize / anchorListSize ) + 1 ; ",
  "9590": "for ( Object anchor : anchorList ) { ",
  "9591": "List < Object > anchorChain = new ArrayList < > ( anchorChainInitialCapacity ) ; ",
  "9592": "Object trailingEntity = inverseVariableSupply . getInverseSingleton ( anchor ) ; ",
  "9593": "while ( trailingEntity != null ) { ",
  "9594": "anchorChain . add ( trailingEntity ) ; ",
  "9595": "trailingEntity = inverseVariableSupply . getInverseSingleton ( trailingEntity ) ; ",
  "9596": "if ( anchorChain . size ( ) >= minimumSubChainSize ) { ",
  "9597": "anchorTrailingChainList . add ( new SubChain ( anchorChain ) ) ; ",
  "9598": "for ( double startingTemperatureLevel : ScoreUtils . extractLevelDoubles ( startingTemperature ) ) { ",
  "9599": "if ( startingTemperatureLevel < 0.0 ) { ",
  "9600": "startingTemperatureLevels = ScoreUtils . extractLevelDoubles ( startingTemperature ) ; ",
  "9601": "temperatureLevels = startingTemperatureLevels ; ",
  "9602": "levelsLength = startingTemperatureLevels . length ; ",
  "9603": "cachedValueRange = ( ValueRange < Object > ) ",
  "9604": "valueRangeDescriptor . extractValueRange ( scoreDirector . getWorkingSolution ( ) ) ; ",
  "9605": "if ( valueRangeMightContainEntity ) { ",
  "9606": "} public static double [ ] determineStandardDeviationDoubles ( ",
  "9607": "List < ? extends BenchmarkResult > benchmarkResultList , Score averageScore , int successCount ) { ",
  "9608": "if ( successCount <= 0 ) { ",
  "9609": "if ( averageScore == null ) { ",
  "9610": "double [ ] differenceSquaredTotalDoubles = null ; ",
  "9611": "for ( BenchmarkResult benchmarkResult : benchmarkResultList ) { ",
  "9612": "if ( benchmarkResult . hasAllSuccess ( ) ) { ",
  "9613": "Score difference = benchmarkResult . getAverageScore ( ) . subtract ( averageScore ) ; ",
  "9614": "double [ ] differenceDoubles = ScoreUtils . extractLevelDoubles ( difference ) ; ",
  "9615": "if ( differenceSquaredTotalDoubles == null ) { ",
  "9616": "differenceSquaredTotalDoubles = new double [ differenceDoubles . length ] ; ",
  "9617": "for ( int i = 0 ; i < differenceDoubles . length ; i ++ ) { ",
  "9618": "differenceSquaredTotalDoubles [ i ] += Math . pow ( differenceDoubles [ i ] , 2.0 ) ; ",
  "9619": "double [ ] standardDeviationDoubles = new double [ differenceSquaredTotalDoubles . length ] ; ",
  "9620": "for ( int i = 0 ; i < differenceSquaredTotalDoubles . length ; i ++ ) { ",
  "9621": "standardDeviationDoubles [ i ] = Math . pow ( differenceSquaredTotalDoubles [ i ] / successCount , 0.5 ) ; ",
  "9622": "return standardDeviationDoubles ; ",
  "9623": "} public static String getStandardDeviationString ( double [ ] standardDeviationDoubles ) { ",
  "9624": "if ( standardDeviationDoubles == null ) { ",
  "9625": "StringBuilder standardDeviationString = new StringBuilder ( standardDeviationDoubles . length * 9 ) ; ",
  "9626": "DecimalFormatSymbols decimalFormatSymbols = new DecimalFormatSymbols ( Locale . US ) ; ",
  "9627": "DecimalFormat exponentialFormat = new DecimalFormat ( \"0.0#E0\" , decimalFormatSymbols ) ; ",
  "9628": "DecimalFormat decimalFormat = new DecimalFormat ( \"0.0#\" , decimalFormatSymbols ) ; ",
  "9629": "for ( double standardDeviationDouble : standardDeviationDoubles ) { ",
  "9630": "standardDeviationString . append ( \"/\" ) ; ",
  "9631": "String abbreviated ; ",
  "9632": "if ( 0.001 <= standardDeviationDouble && standardDeviationDouble <= 10000000.0 ) { ",
  "9633": "abbreviated = decimalFormat . format ( standardDeviationDouble ) ; ",
  "9634": "abbreviated = exponentialFormat . format ( standardDeviationDouble ) ; ",
  "9635": "standardDeviationString . append ( abbreviated ) ; ",
  "9636": "return standardDeviationString . toString ( ) ; ",
  "9637": "public EasyScoreDirector < Solution_ > buildScoreDirector ( ",
  "9638": "return new EasyScoreDirector < > ( this , lookUpEnabled , constraintMatchEnabledPreference , easyScoreCalculator ) ; ",
  "9639": "private List < MrServiceDependency > getServiceDependencyList ( ) { ",
  "9640": "List < MrServiceDependency > serviceDependencyList = new ArrayList < > ( serviceList . size ( ) * 5 ) ; ",
  "9641": "for ( MrService service : serviceList ) { ",
  "9642": "for ( MrService toService : service . getToDependencyServiceList ( ) ) { ",
  "9643": "MrServiceDependency serviceDependency = new MrServiceDependency ( ) ; ",
  "9644": "serviceDependency . setFromService ( service ) ; ",
  "9645": "serviceDependency . setToService ( toService ) ; ",
  "9646": "serviceDependencyList . add ( serviceDependency ) ; ",
  "9647": "return serviceDependencyList ; ",
  "9648": "} public Termination buildTermination ( HeuristicConfigPolicy configPolicy , Termination chainedTermination ) { ",
  "9649": "Termination termination = buildTermination ( configPolicy ) ; ",
  "9650": "if ( termination == null ) { ",
  "9651": "return chainedTermination ; ",
  "9652": "return new OrCompositeTermination ( chainedTermination , termination ) ; ",
  "9653": "} public boolean solutionEquals ( Object o ) { ",
  "9654": "if ( this == o ) { ",
  "9655": "} else if ( o instanceof Match ) { ",
  "9656": "Match other = ( Match ) o ; ",
  "9657": "return new EqualsBuilder ( ) ",
  "9658": ". append ( homeTeam , other . homeTeam ) ",
  "9659": ". append ( awayTeam , other . awayTeam ) ",
  "9660": ". append ( day , other . day ) ",
  "9661": ". isEquals ( ) ; ",
  "9662": "} public int solutionHashCode ( ) { ",
  "9663": "return new HashCodeBuilder ( ) ",
  "9664": ". append ( id ) ",
  "9665": ". append ( homeTeam ) ",
  "9666": ". append ( awayTeam ) ",
  "9667": ". append ( day ) ",
  "9668": ". toHashCode ( ) ; ",
  "9669": "public QueuedEntityPlacer buildEntityPlacer ( HeuristicConfigPolicy configPolicy ) { ",
  "9670": "EntitySelectorConfig entitySelectorConfig_ = buildEntitySelectorConfig ( configPolicy ) ; ",
  "9671": "List < MoveSelectorConfig > moveSelectorConfigList_ ; ",
  "9672": "EntityDescriptor entityDescriptor = entitySelector . getEntityDescriptor ( ) ; ",
  "9673": "Collection < GenuineVariableDescriptor > variableDescriptors = entityDescriptor . getGenuineVariableDescriptors ( ) ; ",
  "9674": "List < MoveSelectorConfig > subMoveSelectorConfigList = new ArrayList < > ( ",
  "9675": "variableDescriptors . size ( ) ) ; ",
  "9676": "subMoveSelectorConfigList . add ( buildChangeMoveSelectorConfig ( ",
  "9677": "configPolicy , entitySelectorConfig_ . getId ( ) , variableDescriptor ) ) ; ",
  "9678": "MoveSelectorConfig subMoveSelectorConfig ; ",
  "9679": "if ( subMoveSelectorConfigList . size ( ) > 1 ) { ",
  "9680": "subMoveSelectorConfig = new CartesianProductMoveSelectorConfig ( subMoveSelectorConfigList ) ; ",
  "9681": "subMoveSelectorConfig = subMoveSelectorConfigList . get ( 0 ) ; ",
  "9682": "moveSelectorConfigList_ = Collections . singletonList ( subMoveSelectorConfig ) ; ",
  "9683": "moveSelectorConfigList_ = moveSelectorConfigList ; ",
  "9684": "List < MoveSelector > moveSelectorList = new ArrayList < > ( moveSelectorConfigList_ . size ( ) ) ; ",
  "9685": "for ( MoveSelectorConfig moveSelectorConfig : moveSelectorConfigList_ ) { ",
  "9686": "moveSelectorList . add ( moveSelectorConfig . buildMoveSelector ( ",
  "9687": "configPolicy , SelectionCacheType . JUST_IN_TIME , SelectionOrder . ORIGINAL ) ) ; ",
  "9688": "return new QueuedEntityPlacer ( entitySelector , moveSelectorList ) ; ",
  "9689": "} public String getRelativePathToBenchmarkReportDirectory ( File file ) { ",
  "9690": "String benchmarkReportDirectoryPath = plannerBenchmarkResult . getBenchmarkReportDirectory ( ) . getAbsoluteFile ( ) . toURI ( ) . getPath ( ) ; ",
  "9691": "String filePath = file . getAbsoluteFile ( ) . toURI ( ) . getPath ( ) ; ",
  "9692": "if ( ! filePath . startsWith ( benchmarkReportDirectoryPath ) ) { ",
  "9693": "String relativePath = filePath . substring ( benchmarkReportDirectoryPath . length ( ) ) ; ",
  "9694": "if ( relativePath . startsWith ( \"/\" ) ) { ",
  "9695": "relativePath = relativePath . substring ( 1 ) ; ",
  "9696": "return relativePath ; ",
  "9697": "} public void writeReport ( ) { ",
  "9698": "summaryDirectory = new File ( plannerBenchmarkResult . getBenchmarkReportDirectory ( ) , \"summary\" ) ; ",
  "9699": "summaryDirectory . mkdir ( ) ; ",
  "9700": "plannerBenchmarkResult . accumulateResults ( this ) ; ",
  "9701": "fillWarningList ( ) ; ",
  "9702": "writeBestScoreSummaryChart ( ) ; ",
  "9703": "writeBestScoreScalabilitySummaryChart ( ) ; ",
  "9704": "writeWinningScoreDifferenceSummaryChart ( ) ; ",
  "9705": "writeWorstScoreDifferencePercentageSummaryChart ( ) ; ",
  "9706": "writeBestScoreDistributionSummaryChart ( ) ; ",
  "9707": "writeScoreCalculationSpeedSummaryChart ( ) ; ",
  "9708": "writeWorstScoreCalculationSpeedDifferencePercentageSummaryChart ( ) ; ",
  "9709": "writeTimeSpentSummaryChart ( ) ; ",
  "9710": "writeTimeSpentScalabilitySummaryChart ( ) ; ",
  "9711": "writeBestScorePerTimeSpentSummaryChart ( ) ; ",
  "9712": "for ( ProblemBenchmarkResult < Object > problemBenchmarkResult : plannerBenchmarkResult . getUnifiedProblemBenchmarkResultList ( ) ) { ",
  "9713": "for ( SubSingleBenchmarkResult subSingleBenchmarkResult : singleBenchmarkResult . getSubSingleBenchmarkResultList ( ) ) { ",
  "9714": "if ( ! subSingleBenchmarkResult . hasAllSuccess ( ) ) { ",
  "9715": "subSingleStatistic . unhibernatePointList ( ) ; ",
  "9716": "if ( ! plannerBenchmarkResult . getAggregation ( ) ) { ",
  "9717": "if ( problemBenchmarkResult . hasAnySuccess ( ) ) { ",
  "9718": "for ( ProblemStatistic problemStatistic : problemBenchmarkResult . getProblemStatisticList ( ) ) { ",
  "9719": "problemStatistic . writeGraphFiles ( this ) ; ",
  "9720": "for ( PureSubSingleStatistic pureSubSingleStatistic : singleBenchmarkResult . getMedian ( ) . getPureSubSingleStatisticList ( ) ) { ",
  "9721": "pureSubSingleStatistic . writeGraphFiles ( this ) ; ",
  "9722": "if ( plannerBenchmarkResult . getAggregation ( ) ) { ",
  "9723": "subSingleStatistic . setPointList ( null ) ; ",
  "9724": "determineDefaultShownScoreLevelIndex ( ) ; ",
  "9725": "writeHtmlOverviewFile ( ) ; ",
  "9726": "} private CategoryPlot createBarChartPlot ( DefaultCategoryDataset dataset , ",
  "9727": "String yAxisLabel , NumberFormat yAxisNumberFormat ) { ",
  "9728": "CategoryAxis xAxis = new CategoryAxis ( \"Data\" ) ; ",
  "9729": "xAxis . setCategoryMargin ( 0.40 ) ; ",
  "9730": "NumberAxis yAxis = new NumberAxis ( yAxisLabel ) ; ",
  "9731": "yAxis . setNumberFormatOverride ( yAxisNumberFormat ) ; ",
  "9732": "BarRenderer renderer = createBarChartRenderer ( yAxisNumberFormat ) ; ",
  "9733": "CategoryPlot plot = new CategoryPlot ( dataset , xAxis , yAxis , renderer ) ; ",
  "9734": "return plot ; ",
  "9735": "public ChainedSwapMove < Solution_ > createUndoMove ( ScoreDirector < Solution_ > scoreDirector ) { ",
  "9736": "return new ChainedSwapMove < > ( variableDescriptorList , rightEntity , leftEntity , oldLeftTrailingEntityList , oldRightTrailingEntityList ) ; ",
  "9737": "double timeGradient = 0.0 ; ",
  "9738": "double nextTimeGradient = termination . calculateSolverTimeGradient ( solverScope ) ; ",
  "9739": "if ( nextTimeGradient >= 0.0 ) { ",
  "9740": "timeGradient = Math . max ( timeGradient , nextTimeGradient ) ; ",
  "9741": "return timeGradient ; ",
  "9742": "public double calculatePhaseTimeGradient ( AbstractPhaseScope phaseScope ) { ",
  "9743": "double nextTimeGradient = termination . calculatePhaseTimeGradient ( phaseScope ) ; ",
  "9744": "public OrCompositeTermination createChildThreadTermination ( ",
  "9745": "return new OrCompositeTermination ( createChildThreadTerminationList ( solverScope , childThreadType ) ) ; ",
  "9746": "public void configureConstraintWeight ( Rule rule , HardMediumSoftScore constraintWeight ) { ",
  "9747": "if ( constraintWeight . equals ( HardMediumSoftScore . ZERO ) ) { ",
  "9748": "matchExecutor = ( RuleContext kcontext , Integer weightMultiplier ) -> { } ; ",
  "9749": "} else if ( constraintWeight . getMediumScore ( ) == 0 && constraintWeight . getSoftScore ( ) == 0 ) { ",
  "9750": "matchExecutor = ( RuleContext kcontext , Integer weightMultiplier ) ",
  "9751": "-> addHardConstraintMatch ( kcontext , constraintWeight . getHardScore ( ) * weightMultiplier ) ; ",
  "9752": "} else if ( constraintWeight . getHardScore ( ) == 0 && constraintWeight . getSoftScore ( ) == 0 ) { ",
  "9753": "-> addMediumConstraintMatch ( kcontext , constraintWeight . getMediumScore ( ) * weightMultiplier ) ; ",
  "9754": "} else if ( constraintWeight . getHardScore ( ) == 0 && constraintWeight . getMediumScore ( ) == 0 ) { ",
  "9755": "-> addSoftConstraintMatch ( kcontext , constraintWeight . getSoftScore ( ) * weightMultiplier ) ; ",
  "9756": "constraintWeight . getHardScore ( ) * weightMultiplier , ",
  "9757": "constraintWeight . getMediumScore ( ) * weightMultiplier , ",
  "9758": "constraintWeight . getSoftScore ( ) * weightMultiplier ) ; ",
  "9759": "HardMediumSoftScore weightMultiplier ) -> addMultiConstraintMatch ( kcontext , ",
  "9760": "constraintWeight . getMediumScore ( ) * weightMultiplier . getMediumScore ( ) , ",
  "9761": "} public void penalize ( RuleContext kcontext , int hardWeightMultiplier , int mediumWeightMultiplier , int softWeightMultiplier ) { ",
  "9762": "reward ( kcontext , - hardWeightMultiplier , - mediumWeightMultiplier , - softWeightMultiplier ) ; ",
  "9763": "} @ ValueRangeProvider ( id = \"startPeriodRange\" ) ",
  "9764": "public CountableValueRange < Integer > getStartPeriodRange ( ) { ",
  "9765": "return ValueRangeFactory . createIntValueRange ( task . getStartPeriodRangeFrom ( ) , task . getStartPeriodRangeTo ( ) ) ; ",
  "9766": "public void resetWorkingSolution ( CheapTimeSolution solution ) { ",
  "9767": "this . cheapTimeSolution = solution ; ",
  "9768": "mediumScore = 0L ; ",
  "9769": "if ( solution . getGlobalPeriodRangeFrom ( ) != 0 ) { ",
  "9770": "resourceListSize = solution . getResourceList ( ) . size ( ) ; ",
  "9771": "globalPeriodRangeTo = solution . getGlobalPeriodRangeTo ( ) ; ",
  "9772": "List < Machine > machineList = solution . getMachineList ( ) ; ",
  "9773": "List < PeriodPowerPrice > periodPowerPriceList = solution . getPeriodPowerPriceList ( ) ; ",
  "9774": "machineToMachinePeriodListMap = new MachinePeriodPart [ machineList . size ( ) ] [ ] ; ",
  "9775": "for ( Machine machine : machineList ) { ",
  "9776": "MachinePeriodPart [ ] machinePeriodList = new MachinePeriodPart [ globalPeriodRangeTo ] ; ",
  "9777": "for ( int period = 0 ; period < globalPeriodRangeTo ; period ++ ) { ",
  "9778": "machinePeriodList [ period ] = new MachinePeriodPart ( machine , periodPowerPriceList . get ( period ) ) ; ",
  "9779": "machineToMachinePeriodListMap [ machine . getIndex ( ) ] = machinePeriodList ; ",
  "9780": "unassignedMachinePeriodList = new MachinePeriodPart [ globalPeriodRangeTo ] ; ",
  "9781": "unassignedMachinePeriodList [ period ] = new MachinePeriodPart ( null , periodPowerPriceList . get ( period ) ) ; ",
  "9782": "for ( TaskAssignment taskAssignment : solution . getTaskAssignmentList ( ) ) { ",
  "9783": "modifyStartPeriod ( taskAssignment , null , taskAssignment . getStartPeriod ( ) ) ; ",
  "9784": "} private void modifyMachine ( TaskAssignment taskAssignment , Machine oldMachine , Machine newMachine ) { ",
  "9785": "if ( Objects . equals ( oldMachine , newMachine ) ) { ",
  "9786": "Integer startPeriod = taskAssignment . getStartPeriod ( ) ; ",
  "9787": "if ( startPeriod == null ) { ",
  "9788": "Integer endPeriod = taskAssignment . getEndPeriod ( ) ; ",
  "9789": "if ( oldMachine != null ) { ",
  "9790": "MachinePeriodPart [ ] machinePeriodList = machineToMachinePeriodListMap [ oldMachine . getIndex ( ) ] ; ",
  "9791": "retractRange ( taskAssignment , machinePeriodList , startPeriod , endPeriod , false ) ; ",
  "9792": "if ( newMachine != null ) { ",
  "9793": "MachinePeriodPart [ ] machinePeriodList = machineToMachinePeriodListMap [ newMachine . getIndex ( ) ] ; ",
  "9794": "insertRange ( taskAssignment , machinePeriodList , startPeriod , endPeriod , false ) ; ",
  "9795": "LocalSearchStepScope lastCompletedStepScope = phaseScope . getLastCompletedStepScope ( ) ; ",
  "9796": "workingTabuSize = tabuSizeStrategy == null ? 0 : tabuSizeStrategy . determineTabuSize ( lastCompletedStepScope ) ; ",
  "9797": "workingFadingTabuSize = fadingTabuSizeStrategy == null ? 0 : fadingTabuSizeStrategy . determineTabuSize ( lastCompletedStepScope ) ; ",
  "9798": "int totalTabuListSize = workingTabuSize + workingFadingTabuSize ; ",
  "9799": "tabuToStepIndexMap = new HashMap < > ( totalTabuListSize ) ; ",
  "9800": "tabuSequenceDeque = new ArrayDeque < > ( ) ; ",
  "9801": "return new TailChainSwapMoveSelector ( entitySelector , valueSelector , randomSelection ) ; ",
  "9802": "} public GenuineVariableDescriptor extractVariableDescriptor ( HeuristicConfigPolicy configPolicy , ",
  "9803": "EntityDescriptor entityDescriptor ) { ",
  "9804": "entityDescriptor = downcastEntityDescriptor ( configPolicy , entityDescriptor ) ; ",
  "9805": "if ( variableName != null ) { ",
  "9806": "GenuineVariableDescriptor variableDescriptor = entityDescriptor . getGenuineVariableDescriptor ( variableName ) ; ",
  "9807": "if ( variableDescriptor == null ) { ",
  "9808": "+ entityDescriptor . getEntityClass ( ) + \").\\n\" ",
  "9809": "+ entityDescriptor . buildInvalidVariableNameExceptionMessage ( variableName ) ) ; ",
  "9810": "return variableDescriptor ; ",
  "9811": "} else if ( mimicSelectorRef != null ) { ",
  "9812": "return configPolicy . getValueMimicRecorder ( mimicSelectorRef ) . getVariableDescriptor ( ) ; ",
  "9813": "} public < Solution_ > BestSolutionRecaller < Solution_ > buildBestSolutionRecaller ( EnvironmentMode environmentMode ) { ",
  "9814": "BestSolutionRecaller < Solution_ > bestSolutionRecaller = new BestSolutionRecaller < > ( ) ; ",
  "9815": "bestSolutionRecaller . setAssertInitialScoreFromScratch ( true ) ; ",
  "9816": "bestSolutionRecaller . setAssertShadowVariablesAreNotStale ( true ) ; ",
  "9817": "bestSolutionRecaller . setAssertBestScoreIsUnmodified ( true ) ; ",
  "9818": "return bestSolutionRecaller ; ",
  "9819": "protected < C > Constructor < C > retrieveCachedConstructor ( Class < C > clazz ) { ",
  "9820": "return ( Constructor < C > ) constructorMemoization . computeIfAbsent ( clazz , key -> { ",
  "9821": "Constructor < C > constructor ; ",
  "9822": "constructor = clazz . getDeclaredConstructor ( ) ; ",
  "9823": "} catch ( ReflectiveOperationException e ) { ",
  "9824": "} protected < C > List < Field > retrieveCachedFields ( Class < C > clazz ) { ",
  "9825": "return fieldListMemoization . computeIfAbsent ( clazz , key -> { ",
  "9826": "Field [ ] fields = clazz . getDeclaredFields ( ) ; ",
  "9827": "List < Field > fieldList = new ArrayList < > ( fields . length ) ; ",
  "9828": "for ( Field field : fields ) { ",
  "9829": "if ( ! Modifier . isStatic ( field . getModifiers ( ) ) ) { ",
  "9830": "fieldList . add ( field ) ; ",
  "9831": "return fieldList ; ",
  "9832": "} protected boolean retrieveDeepCloneDecision ( Field field , Class < ? > fieldInstanceClass , Class < ? > actualValueClass ) { ",
  "9833": "Pair < Field , Class < ? > > pair = Pair . of ( field , fieldInstanceClass ) ; ",
  "9834": "Boolean deepCloneDecision = fieldDeepClonedMemoization . computeIfAbsent ( pair , ",
  "9835": "key -> isFieldDeepCloned ( field , fieldInstanceClass ) ) ; ",
  "9836": "return deepCloneDecision || retrieveDeepCloneDecisionForActualValueClass ( actualValueClass ) ; ",
  "9837": "} public static ClassLoader [ ] classLoaders ( ClassLoader ... classLoaders ) { ",
  "9838": "if ( classLoaders != null && classLoaders . length != 0 ) { ",
  "9839": "return classLoaders ; ",
  "9840": "ClassLoader contextClassLoader = contextClassLoader ( ) , staticClassLoader = staticClassLoader ( ) ; ",
  "9841": "return contextClassLoader != null ? ",
  "9842": "staticClassLoader != null && contextClassLoader != staticClassLoader ? ",
  "9843": "new ClassLoader [ ] { contextClassLoader , staticClassLoader } : ",
  "9844": "new ClassLoader [ ] { contextClassLoader } : ",
  "9845": "new ClassLoader [ ] { } ; ",
  "9846": "} public static Collection < URL > forPackage ( String name , ClassLoader ... classLoaders ) { ",
  "9847": "return forResource ( resourceName ( name ) , classLoaders ) ; ",
  "9848": "} public static Collection < URL > forResource ( String resourceName , ClassLoader ... classLoaders ) { ",
  "9849": "final List < URL > result = new ArrayList < > ( ) ; ",
  "9850": "final ClassLoader [ ] loaders = classLoaders ( classLoaders ) ; ",
  "9851": "for ( ClassLoader classLoader : loaders ) { ",
  "9852": "final Enumeration < URL > urls = classLoader . getResources ( resourceName ) ; ",
  "9853": "while ( urls . hasMoreElements ( ) ) { ",
  "9854": "final URL url = urls . nextElement ( ) ; ",
  "9855": "int index = url . toExternalForm ( ) . lastIndexOf ( resourceName ) ; ",
  "9856": "String newUrlString = url . toExternalForm ( ) . substring ( 0 , index ) ; ",
  "9857": "result . add ( new URL ( url , newUrlString ) ) ; ",
  "9858": "result . add ( url ) ; ",
  "9859": "if ( Reflections . log != null ) { ",
  "9860": "return distinctUrls ( result ) ; ",
  "9861": "} public static String cleanPath ( final URL url ) { ",
  "9862": "String path = url . getPath ( ) ; ",
  "9863": "path = URLDecoder . decode ( path , \"UTF-8\" ) ; ",
  "9864": "} catch ( UnsupportedEncodingException e ) { } ",
  "9865": "if ( path . startsWith ( \"jar:\" ) ) { ",
  "9866": "path = path . substring ( \"jar:\" . length ( ) ) ; ",
  "9867": "if ( path . startsWith ( \"file:\" ) ) { ",
  "9868": "path = path . substring ( \"file:\" . length ( ) ) ; ",
  "9869": "if ( path . endsWith ( \"!/\" ) ) { ",
  "9870": "path = path . substring ( 0 , path . lastIndexOf ( \"!/\" ) ) + \"/\" ; ",
  "9871": "} private static Collection < URL > distinctUrls ( Collection < URL > urls ) { ",
  "9872": "Map < String , URL > distinct = new HashMap < > ( urls . size ( ) ) ; ",
  "9873": "for ( URL url : urls ) { ",
  "9874": "distinct . put ( url . toExternalForm ( ) , url ) ; ",
  "9875": "return distinct . values ( ) ; ",
  "9876": "public void configureConstraintWeight ( Rule rule , Score_ constraintWeight ) { ",
  "9877": "if ( constraintWeight . getInitScore ( ) != 0 ) { ",
  "9878": "if ( constraintMatchEnabled ) { ",
  "9879": "String constraintPackage = rule . getPackageName ( ) ; ",
  "9880": "String constraintName = rule . getName ( ) ; ",
  "9881": "String constraintId = constraintPackage + \"/\" + constraintName ; ",
  "9882": "constraintMatchTotalMap . put ( constraintId , ",
  "9883": "new ConstraintMatchTotal ( constraintPackage , constraintName , constraintWeight , zeroScore ) ) ; ",
  "9884": "public Solution_ solve ( Solution_ problem ) { ",
  "9885": "solverScope . initializeYielding ( ) ; ",
  "9886": "solverScope . setBestSolution ( problem ) ; ",
  "9887": "solvingStarted ( solverScope ) ; ",
  "9888": "runPhases ( solverScope ) ; ",
  "9889": "solvingEnded ( solverScope ) ; ",
  "9890": "return solverScope . getBestSolution ( ) ; ",
  "9891": "solverScope . destroyYielding ( ) ; ",
  "9892": "} public EntityDescriptor extractEntityDescriptor ( HeuristicConfigPolicy configPolicy ) { ",
  "9893": "SolutionDescriptor solutionDescriptor = configPolicy . getSolutionDescriptor ( ) ; ",
  "9894": "EntityDescriptor entityDescriptor = solutionDescriptor . getEntityDescriptorStrict ( entityClass ) ; ",
  "9895": "return configPolicy . getEntityMimicRecorder ( mimicSelectorRef ) . getEntityDescriptor ( ) ; ",
  "9896": "} public static < T > T meldProperty ( T a , T b ) { ",
  "9897": "if ( a == null && b == null ) { ",
  "9898": "} else if ( a == null && b != null ) { ",
  "9899": "} else if ( a != null && b == null ) { ",
  "9900": "return ConfigUtils . mergeProperty ( a , b ) ; ",
  "9901": "} public static int ceilDivide ( int dividend , int divisor ) { ",
  "9902": "if ( divisor == 0 ) { ",
  "9903": "int correction ; ",
  "9904": "if ( dividend % divisor == 0 ) { ",
  "9905": "correction = 0 ; ",
  "9906": "} else if ( Integer . signum ( dividend ) * Integer . signum ( divisor ) < 0 ) { ",
  "9907": "correction = 1 ; ",
  "9908": "return ( dividend / divisor ) + correction ; ",
  "9909": "} public static List < Class < ? > > getAllAnnotatedLineageClasses ( Class < ? > bottomClass , ",
  "9910": "Class < ? extends Annotation > annotation ) { ",
  "9911": "if ( ! bottomClass . isAnnotationPresent ( annotation ) ) { ",
  "9912": "List < Class < ? > > lineageClassList = new ArrayList < > ( ) ; ",
  "9913": "lineageClassList . add ( bottomClass ) ; ",
  "9914": "Class < ? > superclass = bottomClass . getSuperclass ( ) ; ",
  "9915": "lineageClassList . addAll ( getAllAnnotatedLineageClasses ( superclass , annotation ) ) ; ",
  "9916": "for ( Class < ? > superInterface : bottomClass . getInterfaces ( ) ) { ",
  "9917": "lineageClassList . addAll ( getAllAnnotatedLineageClasses ( superInterface , annotation ) ) ; ",
  "9918": "return lineageClassList ; ",
  "9919": "previousScores = new Score [ lateAcceptanceSize ] ; ",
  "9920": "Score initialScore = phaseScope . getBestScore ( ) ; ",
  "9921": "for ( int i = 0 ; i < previousScores . length ; i ++ ) { ",
  "9922": "previousScores [ i ] = initialScore ; ",
  "9923": "lateScoreIndex = 0 ; ",
  "9924": "} public SolutionDescriptor buildSolutionDescriptor ( SolverConfigContext configContext , ScoreDefinition deprecatedScoreDefinition ) { ",
  "9925": "ClassLoader [ ] classLoaders ; ",
  "9926": "if ( configContext . getClassLoader ( ) != null ) { ",
  "9927": "classLoaders = new ClassLoader [ ] { configContext . getClassLoader ( ) } ; ",
  "9928": "} else if ( configContext . getKieContainer ( ) != null ) { ",
  "9929": "classLoaders = new ClassLoader [ ] { configContext . getKieContainer ( ) . getClassLoader ( ) } ; ",
  "9930": "ReflectionsKieVfsUrlType . register ( configContext . getKieContainer ( ) ) ; ",
  "9931": "classLoaders = new ClassLoader [ 0 ] ; ",
  "9932": "ConfigurationBuilder builder = new ConfigurationBuilder ( ) ; ",
  "9933": "if ( ! ConfigUtils . isEmptyCollection ( packageIncludeList ) ) { ",
  "9934": "FilterBuilder filterBuilder = new FilterBuilder ( ) ; ",
  "9935": "for ( String packageInclude : packageIncludeList ) { ",
  "9936": "if ( StringUtils . isEmpty ( packageInclude ) ) { ",
  "9937": "builder . addUrls ( ReflectionsWorkaroundClasspathHelper . forPackage ( packageInclude , classLoaders ) ) ; ",
  "9938": "filterBuilder . includePackage ( packageInclude ) ; ",
  "9939": "builder . filterInputsBy ( filterBuilder ) ; ",
  "9940": "builder . addUrls ( ReflectionsWorkaroundClasspathHelper . forPackage ( \"\" , classLoaders ) ) ; ",
  "9941": "builder . setClassLoaders ( classLoaders ) ; ",
  "9942": "Reflections reflections = new Reflections ( builder ) ; ",
  "9943": "Class < ? > solutionClass = loadSolutionClass ( reflections ) ; ",
  "9944": "List < Class < ? > > entityClassList = loadEntityClassList ( reflections ) ; ",
  "9945": "return SolutionDescriptor . buildSolutionDescriptor ( solutionClass , entityClassList , deprecatedScoreDefinition ) ; ",
  "9946": "} private void retainOnlyClassesWithDeclaredAnnotation ( Set < Class < ? > > classSet , Class < ? extends Annotation > annotation ) { ",
  "9947": "classSet . removeIf ( clazz -> ! clazz . isAnnotationPresent ( annotation ) ) ; ",
  "9948": "} public static long nextLong ( Random random , long n ) { ",
  "9949": "if ( n <= 0L ) { ",
  "9950": "if ( n < Integer . MAX_VALUE ) { ",
  "9951": "return ( long ) random . nextInt ( ( int ) n ) ; ",
  "9952": "long bits ; ",
  "9953": "long val ; ",
  "9954": "bits = ( random . nextLong ( ) << 1 ) > > > 1 ; ",
  "9955": "val = bits % n ; ",
  "9956": "} while ( bits - val + ( n - 1L ) < 0L ) ; ",
  "9957": "public final Solution_ solve ( Solution_ problem ) { ",
  "9958": "if ( problem == null ) { ",
  "9959": "outerSolvingStarted ( solverScope ) ; ",
  "9960": "boolean restartSolver = true ; ",
  "9961": "while ( restartSolver ) { ",
  "9962": "restartSolver = checkProblemFactChanges ( ) ; ",
  "9963": "outerSolvingEnded ( solverScope ) ; ",
  "9964": "long childSize = childEntitySelector . getSize ( ) ; ",
  "9965": "cachedEntityList = new ArrayList < > ( ( int ) childSize ) ; ",
  "9966": "childEntitySelector . iterator ( ) . forEachRemaining ( cachedEntityList :: add ) ; ",
  "9967": "public ScoreCalculationCountTermination createChildThreadTermination ( ",
  "9968": "return new ScoreCalculationCountTermination ( scoreCalculationCountLimit ) ; ",
  "9969": "} public long calculateStandardDeviationSquaredFemtos ( ) { ",
  "9970": "long totalFemtos = 0L ; ",
  "9971": "for ( AssetClassAllocation a : assetClassAllocationList ) { ",
  "9972": "for ( AssetClassAllocation b : assetClassAllocationList ) { ",
  "9973": "if ( a == b ) { ",
  "9974": "totalFemtos += a . getQuantifiedStandardDeviationRiskMicros ( ) * b . getQuantifiedStandardDeviationRiskMicros ( ) ",
  "9975": "* 1000L ; ",
  "9976": "long correlationMillis = a . getAssetClass ( ) . getCorrelationMillisMap ( ) . get ( b . getAssetClass ( ) ) ; ",
  "9977": "* correlationMillis ; ",
  "9978": "return totalFemtos ; ",
  "9979": "hasRecordingCreated = false ; ",
  "9980": "recordingCreated = false ; ",
  "9981": "public void configureConstraintWeight ( Rule rule , SimpleScore constraintWeight ) { ",
  "9982": "if ( constraintWeight . equals ( SimpleScore . ZERO ) ) { ",
  "9983": "-> addConstraintMatch ( kcontext , constraintWeight . getScore ( ) * matchWeight ) ; ",
  "9984": "public UnimprovedTimeMillisSpentScoreDifferenceThresholdTermination createChildThreadTermination ( ",
  "9985": "return new UnimprovedTimeMillisSpentScoreDifferenceThresholdTermination ( ",
  "9986": "unimprovedTimeMillisSpentLimit , unimprovedScoreDifferenceThreshold ) ; ",
  "9987": "List < Map < String , XYSeries > > constraintIdToWeightSeriesMapList ",
  "9988": "for ( ConstraintMatchTotalBestScoreStatisticPoint point : getPointList ( ) ) { ",
  "9989": "double [ ] levelValues = ScoreUtils . extractLevelDoubles ( point . getScoreTotal ( ) ) ; ",
  "9990": "if ( i >= constraintIdToWeightSeriesMapList . size ( ) ) { ",
  "9991": "constraintIdToWeightSeriesMapList . add ( new LinkedHashMap < > ( ) ) ; ",
  "9992": "Map < String , XYSeries > constraintIdToWeightSeriesMap = constraintIdToWeightSeriesMapList . get ( i ) ; ",
  "9993": "XYSeries weightSeries = constraintIdToWeightSeriesMap . computeIfAbsent ( point . getConstraintId ( ) , ",
  "9994": "if ( levelValues [ i ] != ( ( weightSeries . getItemCount ( ) == 0 ) ? 0.0 ",
  "9995": ": weightSeries . getY ( weightSeries . getItemCount ( ) - 1 ) . doubleValue ( ) ) ) { ",
  "9996": "weightSeries . add ( timeMillisSpent , levelValues [ i ] ) ; ",
  "9997": "long timeMillisSpent = subSingleBenchmarkResult . getTimeMillisSpent ( ) ; ",
  "9998": "for ( Map < String , XYSeries > constraintIdToWeightSeriesMap : constraintIdToWeightSeriesMapList ) { ",
  "9999": "for ( Iterator < Map . Entry < String , XYSeries > > it = constraintIdToWeightSeriesMap . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { ",
  "10000": "XYSeries weightSeries = it . next ( ) . getValue ( ) ; ",
  "10001": "if ( weightSeries . getItemCount ( ) == 0 ) { ",
  "10002": "weightSeries . add ( timeMillisSpent , weightSeries . getY ( weightSeries . getItemCount ( ) - 1 ) . doubleValue ( ) ) ; ",
  "10003": "graphFileList = new ArrayList < > ( constraintIdToWeightSeriesMapList . size ( ) ) ; ",
  "10004": "for ( int scoreLevelIndex = 0 ; scoreLevelIndex < constraintIdToWeightSeriesMapList . size ( ) ; scoreLevelIndex ++ ) { ",
  "10005": "for ( XYSeries series : constraintIdToWeightSeriesMapList . get ( scoreLevelIndex ) . values ( ) ) { ",
  "10006": "\"ConstraintMatchTotalBestScoreStatisticLevel\" + scoreLevelIndex ) ) ; ",
  "10007": "terminateChildren = true ; ",
  "10008": "return terminateChildren ; ",
  "10009": "} public ClassLoader determineActualClassLoader ( ) { ",
  "10010": "if ( classLoader != null ) { ",
  "10011": "return classLoader ; ",
  "10012": "} else if ( kieContainer != null ) { ",
  "10013": "return kieContainer . getClassLoader ( ) ; ",
  "10014": "return getClass ( ) . getClassLoader ( ) ; ",
  "10015": "cachedMoveMap = new TreeMap < > ( ) ; ",
  "10016": "for ( Move entity : childMoveSelector ) { ",
  "10017": "cachedMoveMap . put ( probabilityWeightOffset , entity ) ; ",
  "10018": "Set < String > childMoveTypeDescriptionSet = new TreeSet < > ( ) ; ",
  "10019": "for ( Move < Solution_ > move : moves ) { ",
  "10020": "childMoveTypeDescriptionSet . add ( move . getSimpleMoveTypeDescription ( ) ) ; ",
  "10021": "StringBuilder moveTypeDescription = new StringBuilder ( 20 * ( moves . length + 1 ) ) ; ",
  "10022": "for ( String childMoveTypeDescription : childMoveTypeDescriptionSet ) { ",
  "10023": "PillarSelector leftPillarSelector = pillarSelectorConfig_ . buildPillarSelector ( configPolicy , ",
  "10024": "PillarSelectorConfig rightPillarSelectorConfig = defaultIfNull ( secondaryPillarSelectorConfig , pillarSelectorConfig_ ) ; ",
  "10025": "PillarSelector rightPillarSelector = rightPillarSelectorConfig . buildPillarSelector ( configPolicy , ",
  "10026": "leftPillarSelector . getEntityDescriptor ( ) , variableNameIncludeList ) ; ",
  "10027": "return new PillarSwapMoveSelector ( leftPillarSelector , rightPillarSelector , variableDescriptorList , ",
  "10028": "public NoChangePhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "10029": "return new NoChangePhase ( ",
  "10030": "long childSize = childValueSelector . getSize ( ) ; ",
  "10031": "cachedValueList = new ArrayList < > ( ( int ) childSize ) ; ",
  "10032": "childValueSelector . iterator ( ) . forEachRemaining ( cachedValueList :: add ) ; ",
  "10033": "cachedValueList . size ( ) , this ) ; ",
  "10034": "public ConstructionHeuristicPhase buildPhase ( int phaseIndex , HeuristicConfigPolicy solverConfigPolicy , ",
  "10035": "DefaultConstructionHeuristicPhase phase = new DefaultConstructionHeuristicPhase ( ",
  "10036": "phase . setDecider ( buildDecider ( phaseConfigPolicy , phase . getTermination ( ) ) ) ; ",
  "10037": "ConstructionHeuristicType constructionHeuristicType_ = defaultIfNull ( ",
  "10038": "constructionHeuristicType , ConstructionHeuristicType . ALLOCATE_ENTITY_FROM_QUEUE ) ; ",
  "10039": ": constructionHeuristicType_ . getDefaultEntitySorterManner ( ) ) ; ",
  "10040": ": constructionHeuristicType_ . getDefaultValueSorterManner ( ) ) ; ",
  "10041": "EntityPlacerConfig entityPlacerConfig ; ",
  "10042": "if ( ConfigUtils . isEmptyCollection ( entityPlacerConfigList ) ) { ",
  "10043": "entityPlacerConfig = buildUnfoldedEntityPlacerConfig ( phaseConfigPolicy , constructionHeuristicType_ ) ; ",
  "10044": "} else if ( entityPlacerConfigList . size ( ) == 1 ) { ",
  "10045": "entityPlacerConfig = entityPlacerConfigList . get ( 0 ) ; ",
  "10046": "if ( constructionHeuristicType != null ) { ",
  "10047": "if ( moveSelectorConfigList != null ) { ",
  "10048": "EntityPlacer entityPlacer = entityPlacerConfig . buildEntityPlacer ( phaseConfigPolicy ) ; ",
  "10049": "phase . setEntityPlacer ( entityPlacer ) ; ",
  "10050": "public void configureConstraintWeight ( Rule rule , SimpleBigDecimalScore constraintWeight ) { ",
  "10051": "if ( constraintWeight . equals ( SimpleBigDecimalScore . ZERO ) ) { ",
  "10052": "-> addConstraintMatch ( kcontext , constraintWeight . getScore ( ) . multiply ( matchWeight ) ) ; ",
  "10053": "} public void checkIfProblemFactsExist ( ) { ",
  "10054": "if ( problemFactCollectionMemberAccessorMap . isEmpty ( ) && problemFactMemberAccessorMap . isEmpty ( ) ) { ",
  "10055": "} public Collection < Object > getAllFacts ( Solution_ solution ) { ",
  "10056": "Collection < Object > facts = new ArrayList < > ( ) ; ",
  "10057": "Arrays . asList ( entityMemberAccessorMap , problemFactMemberAccessorMap ) ",
  "10058": ". forEach ( map -> map . forEach ( ( key , memberAccessor ) -> { ",
  "10059": "Object object = extractMemberObject ( memberAccessor , solution ) ; ",
  "10060": "facts . add ( object ) ; ",
  "10061": "} ) ) ; ",
  "10062": "entityCollectionMemberAccessorMap . forEach ( ",
  "10063": "( key , memberAccessor ) -> facts . addAll ( extractMemberCollectionOrArray ( memberAccessor , solution , false ) ) ) ; ",
  "10064": "problemFactCollectionMemberAccessorMap . forEach ( ",
  "10065": "( key , memberAccessor ) -> facts . addAll ( extractMemberCollectionOrArray ( memberAccessor , solution , true ) ) ) ; ",
  "10066": "return facts ; ",
  "10067": "} public long getProblemScale ( Solution_ solution ) { ",
  "10068": "long problemScale = 0L ; ",
  "10069": "for ( Iterator < Object > it = extractAllEntitiesIterator ( solution ) ; it . hasNext ( ) ; ) { ",
  "10070": "EntityDescriptor < Solution_ > entityDescriptor = findEntityDescriptorOrFail ( entity . getClass ( ) ) ; ",
  "10071": "problemScale += entityDescriptor . getProblemScale ( solution , entity ) ; ",
  "10072": "return problemScale ; ",
  "10073": "boolean movable = false ; ",
  "10074": "Object leftValue = variableDescriptor . getValue ( leftPillar . get ( 0 ) ) ; ",
  "10075": "Object rightValue = variableDescriptor . getValue ( rightPillar . get ( 0 ) ) ; ",
  "10076": "if ( ! Objects . equals ( leftValue , rightValue ) ) { ",
  "10077": "movable = true ; ",
  "10078": "for ( Object rightEntity : rightPillar ) { ",
  "10079": "for ( Object leftEntity : leftPillar ) { ",
  "10080": "return movable ; ",
  "10081": "} public Object createDBRef ( final String ns , final ObjectId id ) { ",
  "10082": "return new BasicBSONObject ( \"$ns\" , ns ) . append ( \"$id\" , id ) ; ",
  "10083": "public static Class < ? extends BsonValue > getClassForBsonType ( final BsonType bsonType ) { ",
  "10084": "return ( Class < ? extends BsonValue > ) DEFAULT_BSON_TYPE_CLASS_MAP . get ( bsonType ) ; ",
  "10085": "} public DBCursor getFileList ( final DBObject query , final DBObject sort ) { ",
  "10086": "return filesCollection . find ( query ) . sort ( sort ) ; ",
  "10087": "} public List < GridFSDBFile > find ( final String filename , final DBObject sort ) { ",
  "10088": "return find ( new BasicDBObject ( \"filename\" , filename ) , sort ) ; ",
  "10089": "} public List < GridFSDBFile > find ( final DBObject query , final DBObject sort ) { ",
  "10090": "List < GridFSDBFile > files = new ArrayList < GridFSDBFile > ( ) ; ",
  "10091": "DBCursor cursor = filesCollection . find ( query ) ; ",
  "10092": "if ( sort != null ) { ",
  "10093": "cursor . sort ( sort ) ; ",
  "10094": "while ( cursor . hasNext ( ) ) { ",
  "10095": "files . add ( injectGridFSInstance ( cursor . next ( ) ) ) ; ",
  "10096": "cursor . close ( ) ; ",
  "10097": "return Collections . unmodifiableList ( files ) ; ",
  "10098": "} public void remove ( final ObjectId id ) { ",
  "10099": "filesCollection . remove ( new BasicDBObject ( \"_id\" , id ) ) ; ",
  "10100": "chunksCollection . remove ( new BasicDBObject ( \"files_id\" , id ) ) ; ",
  "10101": "} public void remove ( final DBObject query ) { ",
  "10102": "for ( final GridFSDBFile f : find ( query ) ) { ",
  "10103": "f . remove ( ) ; ",
  "10104": "} public GridFSInputFile createFile ( final File file ) throws IOException { ",
  "10105": "return createFile ( new FileInputStream ( file ) , file . getName ( ) , true ) ; ",
  "10106": "} public GridFSInputFile createFile ( final InputStream in , final String filename , final boolean closeStreamOnPersist ) { ",
  "10107": "return new GridFSInputFile ( this , in , filename , closeStreamOnPersist ) ; ",
  "10108": "} public static MongoClient create ( final MongoClientSettings settings , @ Nullable final MongoDriverInformation mongoDriverInformation ) { ",
  "10109": "MongoDriverInformation . Builder builder = mongoDriverInformation == null ? MongoDriverInformation . builder ( ) ",
  "10110": ": MongoDriverInformation . builder ( mongoDriverInformation ) ; ",
  "10111": "return new MongoClientImpl ( settings , builder . driverName ( \"sync\" ) . build ( ) ) ; ",
  "10112": "public Object put ( final String key , final Object v ) { ",
  "10113": "return put ( _getInt ( key ) , v ) ; ",
  "10114": "} public Object put ( final int key , final Object value ) { ",
  "10115": "while ( key >= size ( ) ) { ",
  "10116": "add ( null ) ; ",
  "10117": "set ( key , value ) ; ",
  "10118": "} public Object get ( final String key ) { ",
  "10119": "int i = _getInt ( key ) ; ",
  "10120": "if ( i < 0 ) { ",
  "10121": "if ( i >= size ( ) ) { ",
  "10122": "return get ( i ) ; ",
  "10123": "} public static < T > Builder < T > builder ( final Class < T > type ) { ",
  "10124": "return new Builder < T > ( notNull ( \"type\" , type ) ) ; ",
  "10125": "MongoClient mongoClient ; ",
  "10126": "mongoClient = MongoClients . create ( ) ; ",
  "10127": "mongoClient = MongoClients . create ( args [ 0 ] ) ; ",
  "10128": "MongoDatabase database = mongoClient . getDatabase ( \"mydb\" ) ; ",
  "10129": "database . drop ( ) ; ",
  "10130": "MongoCollection < Document > collection = database . getCollection ( \"test\" ) ; ",
  "10131": "collection . drop ( ) ; ",
  "10132": "for ( String name : mongoClient . listDatabaseNames ( ) ) { ",
  "10133": "System . out . println ( name ) ; ",
  "10134": "mongoClient . getDatabase ( \"databaseToBeDropped\" ) . drop ( ) ; ",
  "10135": "database . createCollection ( \"cappedCollection\" , new CreateCollectionOptions ( ) . capped ( true ) . sizeInBytes ( 0x100000 ) ) ; ",
  "10136": "for ( String name : database . listCollectionNames ( ) ) { ",
  "10137": "collection . createIndex ( Indexes . ascending ( \"i\" ) ) ; ",
  "10138": "for ( final Document index : collection . listIndexes ( ) ) { ",
  "10139": "System . out . println ( index . toJson ( ) ) ; ",
  "10140": "collection . createIndex ( Indexes . text ( \"content\" ) ) ; ",
  "10141": "matchCount = collection . countDocuments ( textSearch ) ; ",
  "10142": "Document projection = new Document ( \"score\" , new Document ( \"$meta\" , \"textScore\" ) ) ; ",
  "10143": "Document myDoc = collection . find ( textSearch ) . projection ( projection ) . first ( ) ; ",
  "10144": "Document buildInfo = database . runCommand ( new Document ( \"buildInfo\" , 1 ) ) ; ",
  "10145": "System . out . println ( buildInfo ) ; ",
  "10146": "mongoClient . close ( ) ; ",
  "10147": "} public static void reverseByteArray ( final byte [ ] data , final int start , final int length ) { ",
  "10148": "for ( int left = start , right = start + length - 1 ; left < right ; left ++ , right -- ) { ",
  "10149": "byte temp = data [ left ] ; ",
  "10150": "data [ left ] = data [ right ] ; ",
  "10151": "data [ right ] = temp ; ",
  "10152": "} public long getMaxTime ( final TimeUnit timeUnit ) { ",
  "10153": "notNull ( \"timeUnit\" , timeUnit ) ; ",
  "10154": "return timeUnit . convert ( maxTimeMS , TimeUnit . MILLISECONDS ) ; ",
  "10155": "public < T > T getProperty ( final String key , final T defaultValue ) { ",
  "10156": "notNull ( \"key\" , key ) ; ",
  "10157": "T value = ( T ) properties . get ( key . toLowerCase ( ) ) ; ",
  "10158": "return ( value == null && ! properties . containsKey ( key ) ) ? defaultValue : value ; ",
  "10159": "} public < T > T getPropertyNonNull ( final String key , final T defaultValue ) { ",
  "10160": "T value = getProperty ( key , defaultValue ) ; ",
  "10161": "} public < T > MongoCompressor withProperty ( final String key , final T value ) { ",
  "10162": "return new MongoCompressor ( this , key , value ) ; ",
  "10163": "List < ServerDescription > any = getClusterDescription ( ) . getAnyPrimaryOrSecondary ( ) ; ",
  "10164": "return any . isEmpty ( ) ? null : any . get ( 0 ) . getSetName ( ) ; ",
  "10165": "public ServerAddress getMaster ( ) { ",
  "10166": "List < ServerDescription > primaries = getClusterDescription ( ) . getPrimaries ( ) ; ",
  "10167": "return primaries . isEmpty ( ) ? null : primaries . get ( 0 ) . getAddress ( ) ; ",
  "10168": "} public boolean isMaster ( final ServerAddress serverAddress ) { ",
  "10169": "ServerAddress masterServerAddress = getMaster ( ) ; ",
  "10170": "return masterServerAddress != null && masterServerAddress . equals ( serverAddress ) ; ",
  "10171": "public int getMaxBsonObjectSize ( ) { ",
  "10172": "return primaries . isEmpty ( ) ? ServerDescription . getDefaultMaxDocumentSize ( ) : primaries . get ( 0 ) . getMaxDocumentSize ( ) ; ",
  "10173": "} public QueryBuilder put ( final String key ) { ",
  "10174": "_currentKey = key ; ",
  "10175": "if ( _query . get ( key ) == null ) { ",
  "10176": "_query . put ( _currentKey , new NullObject ( ) ) ; ",
  "10177": "} public QueryBuilder withinCenter ( final double x , final double y , final double radius ) { ",
  "10178": "addOperand ( QueryOperators . WITHIN , ",
  "10179": "new BasicDBObject ( QueryOperators . CENTER , asList ( asList ( x , y ) , radius ) ) ) ; ",
  "10180": "} public QueryBuilder near ( final double x , final double y ) { ",
  "10181": "addOperand ( QueryOperators . NEAR , ",
  "10182": "asList ( x , y ) ) ; ",
  "10183": "} public QueryBuilder near ( final double x , final double y , final double maxDistance ) { ",
  "10184": "addOperand ( QueryOperators . MAX_DISTANCE , ",
  "10185": "maxDistance ) ; ",
  "10186": "} public QueryBuilder nearSphere ( final double longitude , final double latitude ) { ",
  "10187": "addOperand ( QueryOperators . NEAR_SPHERE , ",
  "10188": "asList ( longitude , latitude ) ) ; ",
  "10189": "} public QueryBuilder nearSphere ( final double longitude , final double latitude , final double maxDistance ) { ",
  "10190": "} public QueryBuilder withinCenterSphere ( final double longitude , final double latitude , final double maxDistance ) { ",
  "10191": "new BasicDBObject ( QueryOperators . CENTER_SPHERE , ",
  "10192": "asList ( asList ( longitude , latitude ) , maxDistance ) ) ) ; ",
  "10193": "public QueryBuilder withinBox ( final double x , final double y , final double x2 , final double y2 ) { ",
  "10194": "new BasicDBObject ( QueryOperators . BOX , new Object [ ] { new Double [ ] { x , y } , new Double [ ] { x2 , y2 } } ) ) ; ",
  "10195": "} public QueryBuilder withinPolygon ( final List < Double [ ] > points ) { ",
  "10196": "notNull ( \"points\" , points ) ; ",
  "10197": "if ( points . isEmpty ( ) || points . size ( ) < 3 ) { ",
  "10198": "new BasicDBObject ( QueryOperators . POLYGON , convertToListOfLists ( points ) ) ) ; ",
  "10199": "} public QueryBuilder text ( final String search , @ Nullable final String language ) { ",
  "10200": "if ( _currentKey != null ) { ",
  "10201": "put ( QueryOperators . TEXT ) ; ",
  "10202": "addOperand ( QueryOperators . SEARCH , search ) ; ",
  "10203": "if ( language != null ) { ",
  "10204": "addOperand ( QueryOperators . LANGUAGE , language ) ; ",
  "10205": "public QueryBuilder or ( final DBObject ... ors ) { ",
  "10206": "List l = ( List ) _query . get ( QueryOperators . OR ) ; ",
  "10207": "l = new ArrayList ( ) ; ",
  "10208": "_query . put ( QueryOperators . OR , l ) ; ",
  "10209": "Collections . addAll ( l , ors ) ; ",
  "10210": "public QueryBuilder and ( final DBObject ... ands ) { ",
  "10211": "List l = ( List ) _query . get ( QueryOperators . AND ) ; ",
  "10212": "_query . put ( QueryOperators . AND , l ) ; ",
  "10213": "Collections . addAll ( l , ands ) ; ",
  "10214": "} public DBObject get ( ) { ",
  "10215": "for ( final String key : _query . keySet ( ) ) { ",
  "10216": "if ( _query . get ( key ) instanceof NullObject ) { ",
  "10217": "return _query ; ",
  "10218": "} public static Logger getLogger ( final String suffix ) { ",
  "10219": "notNull ( \"suffix\" , suffix ) ; ",
  "10220": "if ( suffix . startsWith ( \".\" ) || suffix . endsWith ( \".\" ) ) { ",
  "10221": "String name = PREFIX + \".\" + suffix ; ",
  "10222": "if ( USE_SLF4J ) { ",
  "10223": "return new SLF4JLogger ( name ) ; ",
  "10224": "return new JULLogger ( name ) ; ",
  "10225": "} private void applyMajorityWriteConcernToTransactionOptions ( ) { ",
  "10226": "if ( transactionOptions != null ) { ",
  "10227": "WriteConcern writeConcern = transactionOptions . getWriteConcern ( ) ; ",
  "10228": "if ( writeConcern != null ) { ",
  "10229": "transactionOptions = TransactionOptions . merge ( TransactionOptions . builder ( ) ",
  "10230": ". writeConcern ( writeConcern . withW ( \"majority\" ) ) . build ( ) , transactionOptions ) ; ",
  "10231": ". writeConcern ( WriteConcern . MAJORITY ) . build ( ) , transactionOptions ) ; ",
  "10232": "transactionOptions = TransactionOptions . builder ( ) . writeConcern ( WriteConcern . MAJORITY ) . build ( ) ; ",
  "10233": "Document doc = new Document ( \"name\" , \"MongoDB\" ) ",
  "10234": ". append ( \"amount1\" , Decimal128 . parse ( \".10\" ) ) ",
  "10235": ". append ( \"amount2\" , new Decimal128 ( 42L ) ) ",
  "10236": ". append ( \"amount3\" , new Decimal128 ( new BigDecimal ( \".200\" ) ) ) ; ",
  "10237": "collection . insertOne ( doc ) ; ",
  "10238": "Document first = collection . find ( ) . filter ( Filters . eq ( \"amount1\" , new Decimal128 ( new BigDecimal ( \".10\" ) ) ) ) . first ( ) ; ",
  "10239": "Decimal128 amount3 = ( Decimal128 ) first . get ( \"amount3\" ) ; ",
  "10240": "BigDecimal amount2AsBigDecimal = amount3 . bigDecimalValue ( ) ; ",
  "10241": "System . out . println ( amount3 . toString ( ) ) ; ",
  "10242": "System . out . println ( amount2AsBigDecimal . toString ( ) ) ; ",
  "10243": "} public boolean ok ( ) { ",
  "10244": "Object okValue = get ( \"ok\" ) ; ",
  "10245": "if ( okValue instanceof Boolean ) { ",
  "10246": "return ( Boolean ) okValue ; ",
  "10247": "} else if ( okValue instanceof Number ) { ",
  "10248": "return ( ( Number ) okValue ) . intValue ( ) == 1 ; ",
  "10249": "public String getErrorMessage ( ) { ",
  "10250": "Object foo = get ( \"errmsg\" ) ; ",
  "10251": "if ( foo == null ) { ",
  "10252": "return foo . toString ( ) ; ",
  "10253": "} public PropertyModelBuilder < T > readAnnotations ( final List < Annotation > annotations ) { ",
  "10254": "this . readAnnotations = unmodifiableList ( notNull ( \"annotations\" , annotations ) ) ; ",
  "10255": "public PropertyModel < T > build ( ) { ",
  "10256": "if ( ! isReadable ( ) && ! isWritable ( ) ) { ",
  "10257": "return new PropertyModel ( ",
  "10258": "stateNotNull ( \"propertyName\" , name ) , ",
  "10259": "readName , ",
  "10260": "writeName , ",
  "10261": "stateNotNull ( \"typeData\" , typeData ) , ",
  "10262": "codec , ",
  "10263": "stateNotNull ( \"propertySerialization\" , propertySerialization ) , ",
  "10264": "discriminatorEnabled , ",
  "10265": "stateNotNull ( \"propertyAccessor\" , propertyAccessor ) ) ; ",
  "10266": "public void encode ( final BsonWriter writer , final Instant value , final EncoderContext encoderContext ) { ",
  "10267": "writer . writeDateTime ( value . toEpochMilli ( ) ) ; ",
  "10268": "} catch ( ArithmeticException e ) { ",
  "10269": "value , e . getMessage ( ) ) , e ) ; ",
  "10270": "public void encode ( final BsonWriter writer , final LocalDate value , final EncoderContext encoderContext ) { ",
  "10271": "writer . writeDateTime ( value . atStartOfDay ( ZoneOffset . UTC ) . toInstant ( ) . toEpochMilli ( ) ) ; ",
  "10272": "} public static List < String > getIndexNames ( final List < IndexModel > indexes , final CodecRegistry codecRegistry ) { ",
  "10273": "List < String > indexNames = new ArrayList < String > ( indexes . size ( ) ) ; ",
  "10274": "for ( IndexModel index : indexes ) { ",
  "10275": "String name = index . getOptions ( ) . getName ( ) ; ",
  "10276": "indexNames . add ( name ) ; ",
  "10277": "indexNames . add ( IndexHelper . generateIndexName ( index . getKeys ( ) . toBsonDocument ( BsonDocument . class , codecRegistry ) ) ) ; ",
  "10278": "return indexNames ; ",
  "10279": "} public static String generateIndexName ( final BsonDocument index ) { ",
  "10280": "StringBuilder indexName = new StringBuilder ( ) ; ",
  "10281": "for ( final String keyNames : index . keySet ( ) ) { ",
  "10282": "if ( indexName . length ( ) != 0 ) { ",
  "10283": "indexName . append ( '_' ) ; ",
  "10284": "indexName . append ( keyNames ) . append ( '_' ) ; ",
  "10285": "BsonValue ascOrDescValue = index . get ( keyNames ) ; ",
  "10286": "if ( ascOrDescValue instanceof BsonNumber ) { ",
  "10287": "indexName . append ( ( ( BsonNumber ) ascOrDescValue ) . intValue ( ) ) ; ",
  "10288": "} else if ( ascOrDescValue instanceof BsonString ) { ",
  "10289": "return indexName . toString ( ) ; ",
  "10290": "public void validate ( ) { ",
  "10291": "if ( md5 == null ) { ",
  "10292": "DBObject cmd = new BasicDBObject ( \"filemd5\" , id ) ; ",
  "10293": "cmd . put ( \"root\" , fs . getBucketName ( ) ) ; ",
  "10294": "DBObject res = fs . getDB ( ) . command ( cmd ) ; ",
  "10295": "if ( res != null && res . containsField ( \"md5\" ) ) { ",
  "10296": "String m = res . get ( \"md5\" ) . toString ( ) ; ",
  "10297": "if ( m . equals ( md5 ) ) { ",
  "10298": "} public Codec < ? > get ( final BsonType bsonType ) { ",
  "10299": "Codec < ? > codec = codecs [ bsonType . getValue ( ) ] ; ",
  "10300": "if ( codec == null ) { ",
  "10301": "Class < ? > clazz = bsonTypeClassMap . get ( bsonType ) ; ",
  "10302": "return codec ; ",
  "10303": "} private int calculateBatchSize ( ) { ",
  "10304": "Integer batchSize = mongoIterable . getBatchSize ( ) ; ",
  "10305": "if ( batchSize != null ) { ",
  "10306": "return batchSize ; ",
  "10307": "long requested = getRequested ( ) ; ",
  "10308": "if ( requested <= 1 ) { ",
  "10309": "} else if ( requested < Integer . MAX_VALUE ) { ",
  "10310": "return ( int ) requested ; ",
  "10311": "} public CreateIndexOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "10312": "this . maxTimeMS = TimeUnit . MILLISECONDS . convert ( maxTime , timeUnit ) ; ",
  "10313": "} public static int compare ( final long first , final long second ) { ",
  "10314": "return compareLongs ( first + Long . MIN_VALUE , second + Long . MIN_VALUE ) ; ",
  "10315": "} public static long parse ( final String string ) { ",
  "10316": "if ( string . length ( ) == 0 ) { ",
  "10317": "int radix = 10 ; ",
  "10318": "int maxSafePos = MAX_SAFE_DIGITS [ radix ] - 1 ; ",
  "10319": "long value = 0 ; ",
  "10320": "for ( int pos = 0 ; pos < string . length ( ) ; pos ++ ) { ",
  "10321": "int digit = Character . digit ( string . charAt ( pos ) , radix ) ; ",
  "10322": "if ( digit == - 1 ) { ",
  "10323": "throw new NumberFormatException ( string ) ; ",
  "10324": "if ( pos > maxSafePos && overflowInParse ( value , digit , radix ) ) { ",
  "10325": "value = ( value * radix ) + digit ; ",
  "10326": "} private static boolean overflowInParse ( final long current , final int digit , final int radix ) { ",
  "10327": "if ( current >= 0 ) { ",
  "10328": "if ( current < MAX_VALUE_DIVS [ radix ] ) { ",
  "10329": "if ( current > MAX_VALUE_DIVS [ radix ] ) { ",
  "10330": "return ( digit > MAX_VALUE_MODS [ radix ] ) ; ",
  "10331": "} private static long divide ( final long dividend , final long divisor ) { ",
  "10332": "if ( divisor < 0 ) { ",
  "10333": "if ( compare ( dividend , divisor ) < 0 ) { ",
  "10334": "if ( dividend >= 0 ) { ",
  "10335": "return dividend / divisor ; ",
  "10336": "long quotient = ( ( dividend > > > 1 ) / divisor ) << 1 ; ",
  "10337": "long rem = dividend - quotient * divisor ; ",
  "10338": "return quotient + ( compare ( rem , divisor ) >= 0 ? 1 : 0 ) ; ",
  "10339": "} private static long remainder ( final long dividend , final long divisor ) { ",
  "10340": "return dividend ; ",
  "10341": "return dividend - divisor ; ",
  "10342": "return dividend % divisor ; ",
  "10343": "return rem - ( compare ( rem , divisor ) >= 0 ? divisor : 0 ) ; ",
  "10344": "} public < T > T decodeWithChildContext ( final Decoder < T > decoder , final BsonReader reader ) { ",
  "10345": "return decoder . decode ( reader , DEFAULT_CONTEXT ) ; ",
  "10346": "} public AggregateToCollectionOperation maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "10347": "} public ReadOperation < BsonDocument > asExplainableOperation ( final ExplainVerbosity explainVerbosity ) { ",
  "10348": "return new AggregateExplainOperation ( namespace , pipeline ) ",
  "10349": ". allowDiskUse ( allowDiskUse ) ",
  "10350": ". maxTime ( maxTimeMS , TimeUnit . MILLISECONDS ) ",
  "10351": ". hint ( hint ) ; ",
  "10352": "} protected State getNextState ( ) { ",
  "10353": "if ( getContext ( ) . getContextType ( ) == BsonContextType . ARRAY ) { ",
  "10354": "return State . VALUE ; ",
  "10355": "return State . NAME ; ",
  "10356": "} protected boolean checkState ( final State [ ] validStates ) { ",
  "10357": "for ( final State cur : validStates ) { ",
  "10358": "if ( cur == getState ( ) ) { ",
  "10359": "} protected void checkPreconditions ( final String methodName , final State ... validStates ) { ",
  "10360": "if ( isClosed ( ) ) { ",
  "10361": "if ( ! checkState ( validStates ) ) { ",
  "10362": "throwInvalidState ( methodName , validStates ) ; ",
  "10363": "} protected void throwInvalidState ( final String methodName , final State ... validStates ) { ",
  "10364": "if ( state == State . INITIAL || state == State . SCOPE_DOCUMENT || state == State . DONE ) { ",
  "10365": "if ( ! methodName . startsWith ( \"end\" ) && ! methodName . equals ( \"writeName\" ) ) { ",
  "10366": "String typeName = methodName . substring ( 5 ) ; ",
  "10367": "if ( typeName . startsWith ( \"start\" ) ) { ",
  "10368": "typeName = typeName . substring ( 5 ) ; ",
  "10369": "String article = \"A\" ; ",
  "10370": "if ( Arrays . asList ( 'A' , 'E' , 'I' , 'O' , 'U' ) . contains ( typeName . charAt ( 0 ) ) ) { ",
  "10371": "article = \"An\" ; ",
  "10372": "article , typeName ) ) ; ",
  "10373": "methodName , validStatesString , state ) ) ; ",
  "10374": "} public void pipe ( final BsonReader reader , final List < BsonElement > extraElements ) { ",
  "10375": "notNull ( \"reader\" , reader ) ; ",
  "10376": "notNull ( \"extraElements\" , extraElements ) ; ",
  "10377": "pipeDocument ( reader , extraElements ) ; ",
  "10378": "} protected void pipeExtraElements ( final List < BsonElement > extraElements ) { ",
  "10379": "for ( BsonElement cur : extraElements ) { ",
  "10380": "writeName ( cur . getName ( ) ) ; ",
  "10381": "pipeValue ( cur . getValue ( ) ) ; ",
  "10382": "} public static String toHex ( final byte [ ] bytes ) { ",
  "10383": "for ( final byte b : bytes ) { ",
  "10384": "String s = Integer . toHexString ( 0xff & b ) ; ",
  "10385": "if ( s . length ( ) < 2 ) { ",
  "10386": "sb . append ( \"0\" ) ; ",
  "10387": "sb . append ( s ) ; ",
  "10388": "} public static String hexMD5 ( final byte [ ] data ) { ",
  "10389": "md5 . reset ( ) ; ",
  "10390": "md5 . update ( data ) ; ",
  "10391": "byte [ ] digest = md5 . digest ( ) ; ",
  "10392": "return toHex ( digest ) ; ",
  "10393": "} public static String hexMD5 ( final ByteBuffer buf , final int offset , final int len ) { ",
  "10394": "b [ i ] = buf . get ( offset + i ) ; ",
  "10395": "return hexMD5 ( b ) ; ",
  "10396": "} public static boolean isValid ( final String hexString ) { ",
  "10397": "if ( hexString == null ) { ",
  "10398": "int len = hexString . length ( ) ; ",
  "10399": "if ( len != 24 ) { ",
  "10400": "char c = hexString . charAt ( i ) ; ",
  "10401": "if ( c >= '0' && c <= '9' ) { ",
  "10402": "if ( c >= 'a' && c <= 'f' ) { ",
  "10403": "if ( c >= 'A' && c <= 'F' ) { ",
  "10404": "} public byte [ ] toByteArray ( ) { ",
  "10405": "ByteBuffer buffer = ByteBuffer . allocate ( OBJECT_ID_LENGTH ) ; ",
  "10406": "putToByteBuffer ( buffer ) ; ",
  "10407": "} public void putToByteBuffer ( final ByteBuffer buffer ) { ",
  "10408": "notNull ( \"buffer\" , buffer ) ; ",
  "10409": "buffer . put ( int3 ( timestamp ) ) ; ",
  "10410": "buffer . put ( int2 ( timestamp ) ) ; ",
  "10411": "buffer . put ( int1 ( timestamp ) ) ; ",
  "10412": "buffer . put ( int0 ( timestamp ) ) ; ",
  "10413": "buffer . put ( int2 ( randomValue1 ) ) ; ",
  "10414": "buffer . put ( int1 ( randomValue1 ) ) ; ",
  "10415": "buffer . put ( int0 ( randomValue1 ) ) ; ",
  "10416": "buffer . put ( short1 ( randomValue2 ) ) ; ",
  "10417": "buffer . put ( short0 ( randomValue2 ) ) ; ",
  "10418": "buffer . put ( int2 ( counter ) ) ; ",
  "10419": "buffer . put ( int1 ( counter ) ) ; ",
  "10420": "buffer . put ( int0 ( counter ) ) ; ",
  "10421": "} public String toHexString ( ) { ",
  "10422": "char [ ] chars = new char [ OBJECT_ID_LENGTH * 2 ] ; ",
  "10423": "for ( byte b : toByteArray ( ) ) { ",
  "10424": "chars [ i ++ ] = HEX_CHARS [ b > > 4 & 0xF ] ; ",
  "10425": "chars [ i ++ ] = HEX_CHARS [ b & 0xF ] ; ",
  "10426": "public static ObjectId createFromLegacyFormat ( final int time , final int machine , final int inc ) { ",
  "10427": "return new ObjectId ( time , machine , inc ) ; ",
  "10428": "} protected BsonValue readValue ( final BsonReader reader , final DecoderContext decoderContext ) { ",
  "10429": "return ( BsonValue ) bsonTypeCodecMap . get ( reader . getCurrentBsonType ( ) ) . decode ( reader , decoderContext ) ; ",
  "10430": "} public boolean hasTags ( final TagSet desiredTags ) { ",
  "10431": "if ( type == STANDALONE || type == SHARD_ROUTER ) { ",
  "10432": "return tagSet . containsAll ( desiredTags ) ; ",
  "10433": "} public String getShortDescription ( ) { ",
  "10434": "return \"{\" ",
  "10435": "+ \"address=\" + address ",
  "10436": "+ '}' ; ",
  "10437": "} public static BasicDBObjectBuilder start ( final String key , final Object val ) { ",
  "10438": "return ( new BasicDBObjectBuilder ( ) ) . add ( key , val ) ; ",
  "10439": "public static BasicDBObjectBuilder start ( final Map documentAsMap ) { ",
  "10440": "BasicDBObjectBuilder builder = new BasicDBObjectBuilder ( ) ; ",
  "10441": "Iterator < Map . Entry > i = documentAsMap . entrySet ( ) . iterator ( ) ; ",
  "10442": "while ( i . hasNext ( ) ) { ",
  "10443": "Map . Entry entry = i . next ( ) ; ",
  "10444": "builder . add ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; ",
  "10445": "} public BasicDBObjectBuilder append ( final String key , final Object val ) { ",
  "10446": "_cur ( ) . put ( key , val ) ; ",
  "10447": "} public BasicDBObjectBuilder push ( final String key ) { ",
  "10448": "BasicDBObject o = new BasicDBObject ( ) ; ",
  "10449": "_cur ( ) . put ( key , o ) ; ",
  "10450": "_stack . addLast ( o ) ; ",
  "10451": "} public void addResult ( final BulkWriteResult result , final IndexMap indexMap ) { ",
  "10452": "insertedCount += result . getInsertedCount ( ) ; ",
  "10453": "matchedCount += result . getMatchedCount ( ) ; ",
  "10454": "deletedCount += result . getDeletedCount ( ) ; ",
  "10455": "modifiedCount += result . getModifiedCount ( ) ; ",
  "10456": "mergeUpserts ( result . getUpserts ( ) , indexMap ) ; ",
  "10457": "} public void addErrorResult ( final MongoBulkWriteException exception , final IndexMap indexMap ) { ",
  "10458": "addResult ( exception . getWriteResult ( ) , indexMap ) ; ",
  "10459": "mergeWriteErrors ( exception . getWriteErrors ( ) , indexMap ) ; ",
  "10460": "mergeWriteConcernError ( exception . getWriteConcernError ( ) ) ; ",
  "10461": "} public void addWriteErrorResult ( final BulkWriteError writeError , final IndexMap indexMap ) { ",
  "10462": "notNull ( \"writeError\" , writeError ) ; ",
  "10463": "mergeWriteErrors ( asList ( writeError ) , indexMap ) ; ",
  "10464": "} public void addErrorResult ( final List < BulkWriteError > writeErrors , ",
  "10465": "final WriteConcernError writeConcernError , final IndexMap indexMap ) { ",
  "10466": "mergeWriteErrors ( writeErrors , indexMap ) ; ",
  "10467": "mergeWriteConcernError ( writeConcernError ) ; ",
  "10468": "} public MongoBulkWriteException getError ( ) { ",
  "10469": "return hasErrors ( ) ? new MongoBulkWriteException ( createResult ( ) , ",
  "10470": "new ArrayList < BulkWriteError > ( writeErrors ) , ",
  "10471": "writeConcernErrors . isEmpty ( ) ? null ",
  "10472": ": writeConcernErrors . get ( writeConcernErrors . size ( ) - 1 ) , ",
  "10473": "serverAddress ) : null ; ",
  "10474": "} private boolean casNext ( Node < E > cmp , Node < E > val ) { ",
  "10475": "return compareAndSet ( cmp , val ) ; ",
  "10476": "} private Node < E > nextNonmarker ( ) { ",
  "10477": "Node < E > f = getNext ( ) ; ",
  "10478": "return ( f == null || ! f . isMarker ( ) ) ? f : f . getNext ( ) ; ",
  "10479": "} Node < E > successor ( ) { ",
  "10480": "Node < E > f = nextNonmarker ( ) ; ",
  "10481": "if ( f == null ) ",
  "10482": "if ( ! f . isDeleted ( ) ) { ",
  "10483": "if ( f . getPrev ( ) != this && ! isDeleted ( ) ) ",
  "10484": "f . setPrev ( this ) ; ",
  "10485": "Node < E > s = f . nextNonmarker ( ) ; ",
  "10486": "if ( f == getNext ( ) ) ",
  "10487": "casNext ( f , s ) ; ",
  "10488": "f = s ; ",
  "10489": "} private Node < E > findPredecessorOf ( Node < E > target ) { ",
  "10490": "Node < E > n = this ; ",
  "10491": "Node < E > f = n . successor ( ) ; ",
  "10492": "if ( f == target ) ",
  "10493": "n = f ; ",
  "10494": "} Node < E > predecessor ( ) { ",
  "10495": "Node < E > b = n . getPrev ( ) ; ",
  "10496": "if ( b == null ) ",
  "10497": "return n . findPredecessorOf ( this ) ; ",
  "10498": "Node < E > s = b . getNext ( ) ; ",
  "10499": "if ( s == this ) ",
  "10500": "if ( s == null || ! s . isMarker ( ) ) { ",
  "10501": "Node < E > p = b . findPredecessorOf ( this ) ; ",
  "10502": "if ( p != null ) ",
  "10503": "n = b ; ",
  "10504": "} Node < E > forward ( ) { ",
  "10505": "Node < E > f = successor ( ) ; ",
  "10506": "return ( f == null || f . isSpecial ( ) ) ? null : f ; ",
  "10507": "} Node < E > back ( ) { ",
  "10508": "Node < E > f = predecessor ( ) ; ",
  "10509": "} Node < E > append ( E element ) { ",
  "10510": "if ( f == null || f . isMarker ( ) ) ",
  "10511": "Node < E > x = new Node < E > ( element , f , this ) ; ",
  "10512": "if ( casNext ( f , x ) ) { ",
  "10513": "f . setPrev ( x ) ; ",
  "10514": "} Node < E > prepend ( E element ) { ",
  "10515": "Node < E > b = predecessor ( ) ; ",
  "10516": "Node < E > x = new Node < E > ( element , this , b ) ; ",
  "10517": "if ( b . casNext ( this , x ) ) { ",
  "10518": "setPrev ( x ) ; ",
  "10519": "} boolean delete ( ) { ",
  "10520": "Node < E > b = getPrev ( ) ; ",
  "10521": "if ( b != null && f != null && ! f . isMarker ( ) && ",
  "10522": "casNext ( f , new Node < E > ( f ) ) ) { ",
  "10523": "if ( b . casNext ( this , f ) ) ",
  "10524": "f . setPrev ( b ) ; ",
  "10525": "} Node < E > replace ( E newElement ) { ",
  "10526": "if ( b == null || f == null || f . isMarker ( ) ) ",
  "10527": "Node < E > x = new Node < E > ( newElement , f , b ) ; ",
  "10528": "if ( casNext ( f , new Node < E > ( x ) ) ) { ",
  "10529": "b . successor ( ) ; ",
  "10530": "x . successor ( ) ; ",
  "10531": "} public JsonToken nextToken ( ) { ",
  "10532": "int c = buffer . read ( ) ; ",
  "10533": "while ( c != - 1 && Character . isWhitespace ( c ) ) { ",
  "10534": "c = buffer . read ( ) ; ",
  "10535": "return new JsonToken ( JsonTokenType . END_OF_FILE , \"<eof>\" ) ; ",
  "10536": "case '{' : ",
  "10537": "return new JsonToken ( JsonTokenType . BEGIN_OBJECT , \"{\" ) ; ",
  "10538": "case '}' : ",
  "10539": "return new JsonToken ( JsonTokenType . END_OBJECT , \"}\" ) ; ",
  "10540": "return new JsonToken ( JsonTokenType . BEGIN_ARRAY , \"[\" ) ; ",
  "10541": "case ']' : ",
  "10542": "return new JsonToken ( JsonTokenType . END_ARRAY , \"]\" ) ; ",
  "10543": "return new JsonToken ( JsonTokenType . LEFT_PAREN , \"(\" ) ; ",
  "10544": "case ')' : ",
  "10545": "return new JsonToken ( JsonTokenType . RIGHT_PAREN , \")\" ) ; ",
  "10546": "return new JsonToken ( JsonTokenType . COLON , \":\" ) ; ",
  "10547": "return new JsonToken ( JsonTokenType . COMMA , \",\" ) ; ",
  "10548": "return scanString ( ( char ) c ) ; ",
  "10549": "return scanRegularExpression ( ) ; ",
  "10550": "if ( c == '-' || Character . isDigit ( c ) ) { ",
  "10551": "return scanNumber ( ( char ) c ) ; ",
  "10552": "} else if ( c == '$' || c == '_' || Character . isLetter ( c ) ) { ",
  "10553": "return scanUnquotedString ( ( char ) c ) ; ",
  "10554": "int position = buffer . getPosition ( ) ; ",
  "10555": "buffer . unread ( c ) ; ",
  "10556": "} private JsonToken scanRegularExpression ( ) { ",
  "10557": "StringBuilder patternBuilder = new StringBuilder ( ) ; ",
  "10558": "StringBuilder optionsBuilder = new StringBuilder ( ) ; ",
  "10559": "RegularExpressionState state = RegularExpressionState . IN_PATTERN ; ",
  "10560": "case IN_PATTERN : ",
  "10561": "state = RegularExpressionState . INVALID ; ",
  "10562": "state = RegularExpressionState . IN_OPTIONS ; ",
  "10563": "state = RegularExpressionState . IN_ESCAPE_SEQUENCE ; ",
  "10564": "state = RegularExpressionState . IN_PATTERN ; ",
  "10565": "case IN_ESCAPE_SEQUENCE : ",
  "10566": "case IN_OPTIONS : ",
  "10567": "case 'm' : ",
  "10568": "state = RegularExpressionState . DONE ; ",
  "10569": "BsonRegularExpression regex ",
  "10570": "= new BsonRegularExpression ( patternBuilder . toString ( ) , optionsBuilder . toString ( ) ) ; ",
  "10571": "return new JsonToken ( JsonTokenType . REGULAR_EXPRESSION , regex ) ; ",
  "10572": "case INVALID : ",
  "10573": "if ( c != '/' ) { ",
  "10574": "optionsBuilder . append ( ( char ) c ) ; ",
  "10575": "patternBuilder . append ( ( char ) c ) ; ",
  "10576": "} private JsonToken scanUnquotedString ( final char firstChar ) { ",
  "10577": "sb . append ( firstChar ) ; ",
  "10578": "while ( c == '$' || c == '_' || Character . isLetterOrDigit ( c ) ) { ",
  "10579": "sb . append ( ( char ) c ) ; ",
  "10580": "String lexeme = sb . toString ( ) ; ",
  "10581": "return new JsonToken ( JsonTokenType . UNQUOTED_STRING , lexeme ) ; ",
  "10582": "} private JsonToken scanNumber ( final char firstChar ) { ",
  "10583": "int c = firstChar ; ",
  "10584": "NumberState state ; ",
  "10585": "state = NumberState . SAW_LEADING_MINUS ; ",
  "10586": "case '0' : ",
  "10587": "state = NumberState . SAW_LEADING_ZERO ; ",
  "10588": "state = NumberState . SAW_INTEGER_DIGITS ; ",
  "10589": "JsonTokenType type = JsonTokenType . INT64 ; ",
  "10590": "case SAW_LEADING_MINUS : ",
  "10591": "state = NumberState . SAW_MINUS_I ; ",
  "10592": "if ( Character . isDigit ( c ) ) { ",
  "10593": "state = NumberState . INVALID ; ",
  "10594": "case SAW_LEADING_ZERO : ",
  "10595": "case '.' : ",
  "10596": "state = NumberState . SAW_DECIMAL_POINT ; ",
  "10597": "case 'E' : ",
  "10598": "state = NumberState . SAW_EXPONENT_LETTER ; ",
  "10599": "state = NumberState . DONE ; ",
  "10600": "} else if ( Character . isWhitespace ( c ) ) { ",
  "10601": "case SAW_INTEGER_DIGITS : ",
  "10602": "case SAW_DECIMAL_POINT : ",
  "10603": "type = JsonTokenType . DOUBLE ; ",
  "10604": "state = NumberState . SAW_FRACTION_DIGITS ; ",
  "10605": "case SAW_FRACTION_DIGITS : ",
  "10606": "case SAW_EXPONENT_LETTER : ",
  "10607": "case '+' : ",
  "10608": "state = NumberState . SAW_EXPONENT_SIGN ; ",
  "10609": "state = NumberState . SAW_EXPONENT_DIGITS ; ",
  "10610": "case SAW_EXPONENT_SIGN : ",
  "10611": "case SAW_EXPONENT_DIGITS : ",
  "10612": "case SAW_MINUS_I : ",
  "10613": "boolean sawMinusInfinity = true ; ",
  "10614": "char [ ] nfinity = new char [ ] { 'n' , 'f' , 'i' , 'n' , 'i' , 't' , 'y' } ; ",
  "10615": "for ( int i = 0 ; i < nfinity . length ; i ++ ) { ",
  "10616": "if ( c != nfinity [ i ] ) { ",
  "10617": "sawMinusInfinity = false ; ",
  "10618": "if ( sawMinusInfinity ) { ",
  "10619": "if ( type == JsonTokenType . DOUBLE ) { ",
  "10620": "return new JsonToken ( JsonTokenType . DOUBLE , Double . parseDouble ( lexeme ) ) ; ",
  "10621": "long value = Long . parseLong ( lexeme ) ; ",
  "10622": "if ( value < Integer . MIN_VALUE || value > Integer . MAX_VALUE ) { ",
  "10623": "return new JsonToken ( JsonTokenType . INT64 , value ) ; ",
  "10624": "return new JsonToken ( JsonTokenType . INT32 , ( int ) value ) ; ",
  "10625": "} private JsonToken scanString ( final char quoteCharacter ) { ",
  "10626": "sb . append ( '\\'' ) ; ",
  "10627": "sb . append ( '\"' ) ; ",
  "10628": "sb . append ( '\\\\' ) ; ",
  "10629": "sb . append ( '/' ) ; ",
  "10630": "sb . append ( '\\b' ) ; ",
  "10631": "sb . append ( '\\f' ) ; ",
  "10632": "sb . append ( '\\r' ) ; ",
  "10633": "sb . append ( '\\t' ) ; ",
  "10634": "int u1 = buffer . read ( ) ; ",
  "10635": "int u2 = buffer . read ( ) ; ",
  "10636": "int u3 = buffer . read ( ) ; ",
  "10637": "int u4 = buffer . read ( ) ; ",
  "10638": "if ( u4 != - 1 ) { ",
  "10639": "String hex = new String ( new char [ ] { ( char ) u1 , ( char ) u2 , ( char ) u3 , ( char ) u4 } ) ; ",
  "10640": "sb . append ( ( char ) Integer . parseInt ( hex , 16 ) ) ; ",
  "10641": "if ( c == quoteCharacter ) { ",
  "10642": "return new JsonToken ( JsonTokenType . STRING , sb . toString ( ) ) ; ",
  "10643": "if ( c != - 1 ) { ",
  "10644": "public BsonDocument execute ( final WriteBinding binding ) { ",
  "10645": "return withConnection ( binding , new CallableWithConnection < BsonDocument > ( ) { ",
  "10646": "public BsonDocument call ( final Connection connection ) { ",
  "10647": "if ( serverIsAtLeastVersionThreeDotTwo ( connection . getDescription ( ) ) ) { ",
  "10648": "return executeCommand ( binding , \"admin\" , FSYNC_UNLOCK_COMMAND , connection ) ; ",
  "10649": "return queryUnlock ( connection ) ; ",
  "10650": "} public static void main ( final String [ ] args ) throws InterruptedException { ",
  "10651": "final CountDownLatch dropLatch = new CountDownLatch ( 1 ) ; ",
  "10652": "collection . drop ( new SingleResultCallback < Void > ( ) { ",
  "10653": "public void onResult ( final Void result , final Throwable t ) { ",
  "10654": "dropLatch . countDown ( ) ; ",
  "10655": "dropLatch . await ( ) ; ",
  "10656": "SingleResultCallback < Void > callbackWhenFinished = new SingleResultCallback < Void > ( ) { ",
  "10657": "mongoClient . listDatabaseNames ( ) . forEach ( new Block < String > ( ) { ",
  "10658": "public void apply ( final String s ) { ",
  "10659": "} , callbackWhenFinished ) ; ",
  "10660": "mongoClient . getDatabase ( \"databaseToBeDropped\" ) . drop ( callbackWhenFinished ) ; ",
  "10661": "database . createCollection ( \"cappedCollection\" , new CreateCollectionOptions ( ) . capped ( true ) . sizeInBytes ( 0x100000 ) , ",
  "10662": "callbackWhenFinished ) ; ",
  "10663": "database . listCollectionNames ( ) . forEach ( new Block < String > ( ) { ",
  "10664": "public void apply ( final String databaseName ) { ",
  "10665": "System . out . println ( databaseName ) ; ",
  "10666": "collection . drop ( callbackWhenFinished ) ; ",
  "10667": "collection . createIndex ( Indexes . ascending ( \"i\" ) , new SingleResultCallback < String > ( ) { ",
  "10668": "public void onResult ( final String result , final Throwable t ) { ",
  "10669": "Block < Document > printDocumentBlock = new Block < Document > ( ) { ",
  "10670": "public void apply ( final Document document ) { ",
  "10671": "System . out . println ( document . toJson ( ) ) ; ",
  "10672": "collection . listIndexes ( ) . forEach ( printDocumentBlock , callbackWhenFinished ) ; ",
  "10673": "collection . createIndex ( Indexes . text ( \"content\" ) , new SingleResultCallback < String > ( ) { ",
  "10674": "public void onResult ( final Long matchCount , final Throwable t ) { ",
  "10675": "collection . countDocuments ( textSearch , new SingleResultCallback < Long > ( ) { ",
  "10676": "collection . find ( textSearch ) . projection ( projection ) . first ( new SingleResultCallback < Document > ( ) { ",
  "10677": "public void onResult ( final Document highest , final Throwable t ) { ",
  "10678": "database . runCommand ( new Document ( \"buildInfo\" , 1 ) , new SingleResultCallback < Document > ( ) { ",
  "10679": "public void onResult ( final Document buildInfo , final Throwable t ) { ",
  "10680": "database . drop ( callbackWhenFinished ) ; ",
  "10681": "} public final List < ServerDescription > choose ( final ClusterDescription clusterDescription ) { ",
  "10682": "switch ( clusterDescription . getType ( ) ) { ",
  "10683": "case REPLICA_SET : ",
  "10684": "return chooseForReplicaSet ( clusterDescription ) ; ",
  "10685": "case SHARDED : ",
  "10686": "case STANDALONE : ",
  "10687": "return chooseForNonReplicaSet ( clusterDescription ) ; ",
  "10688": "case UNKNOWN : ",
  "10689": "} public static ReadPreference primaryPreferred ( final long maxStaleness , final TimeUnit timeUnit ) { ",
  "10690": "return new PrimaryPreferredReadPreference ( Collections . < TagSet > emptyList ( ) , maxStaleness , timeUnit ) ; ",
  "10691": "} public static ReadPreference secondary ( final long maxStaleness , final TimeUnit timeUnit ) { ",
  "10692": "return new SecondaryReadPreference ( Collections . < TagSet > emptyList ( ) , maxStaleness , timeUnit ) ; ",
  "10693": "} public static ReadPreference secondaryPreferred ( final long maxStaleness , final TimeUnit timeUnit ) { ",
  "10694": "return new SecondaryPreferredReadPreference ( Collections . < TagSet > emptyList ( ) , maxStaleness , timeUnit ) ; ",
  "10695": "} public static ReadPreference nearest ( final long maxStaleness , final TimeUnit timeUnit ) { ",
  "10696": "return new NearestReadPreference ( Collections . < TagSet > emptyList ( ) , maxStaleness , timeUnit ) ; ",
  "10697": "} public static TaggableReadPreference primaryPreferred ( final TagSet tagSet , ",
  "10698": "final long maxStaleness , final TimeUnit timeUnit ) { ",
  "10699": "return new PrimaryPreferredReadPreference ( singletonList ( tagSet ) , maxStaleness , timeUnit ) ; ",
  "10700": "} public static TaggableReadPreference secondary ( final TagSet tagSet , ",
  "10701": "return new SecondaryReadPreference ( singletonList ( tagSet ) , maxStaleness , timeUnit ) ; ",
  "10702": "} public static TaggableReadPreference secondaryPreferred ( final TagSet tagSet , ",
  "10703": "return new SecondaryPreferredReadPreference ( singletonList ( tagSet ) , maxStaleness , timeUnit ) ; ",
  "10704": "} public static TaggableReadPreference nearest ( final TagSet tagSet , ",
  "10705": "return new NearestReadPreference ( singletonList ( tagSet ) , maxStaleness , timeUnit ) ; ",
  "10706": "} public static TaggableReadPreference primaryPreferred ( final List < TagSet > tagSetList , ",
  "10707": "return new PrimaryPreferredReadPreference ( tagSetList , maxStaleness , timeUnit ) ; ",
  "10708": "} public static TaggableReadPreference secondary ( final List < TagSet > tagSetList , ",
  "10709": "return new SecondaryReadPreference ( tagSetList , maxStaleness , timeUnit ) ; ",
  "10710": "} public static TaggableReadPreference secondaryPreferred ( final List < TagSet > tagSetList , ",
  "10711": "return new SecondaryPreferredReadPreference ( tagSetList , maxStaleness , timeUnit ) ; ",
  "10712": "} public static TaggableReadPreference nearest ( final List < TagSet > tagSetList , ",
  "10713": "return new NearestReadPreference ( tagSetList , maxStaleness , timeUnit ) ; ",
  "10714": "} public static ReadPreference valueOf ( final String name ) { ",
  "10715": "notNull ( \"name\" , name ) ; ",
  "10716": "String nameToCheck = name . toLowerCase ( ) ; ",
  "10717": "if ( nameToCheck . equals ( PRIMARY . getName ( ) . toLowerCase ( ) ) ) { ",
  "10718": "return PRIMARY ; ",
  "10719": "if ( nameToCheck . equals ( SECONDARY . getName ( ) . toLowerCase ( ) ) ) { ",
  "10720": "return SECONDARY ; ",
  "10721": "if ( nameToCheck . equals ( SECONDARY_PREFERRED . getName ( ) . toLowerCase ( ) ) ) { ",
  "10722": "return SECONDARY_PREFERRED ; ",
  "10723": "if ( nameToCheck . equals ( PRIMARY_PREFERRED . getName ( ) . toLowerCase ( ) ) ) { ",
  "10724": "return PRIMARY_PREFERRED ; ",
  "10725": "if ( nameToCheck . equals ( NEAREST . getName ( ) . toLowerCase ( ) ) ) { ",
  "10726": "return NEAREST ; ",
  "10727": "} public static TaggableReadPreference valueOf ( final String name , final List < TagSet > tagSetList ) { ",
  "10728": "return valueOf ( name , tagSetList , null , MILLISECONDS ) ; ",
  "10729": "} public static TaggableReadPreference valueOf ( final String name , final List < TagSet > tagSetList , final long maxStaleness , ",
  "10730": "final TimeUnit timeUnit ) { ",
  "10731": "return valueOf ( name , tagSetList , ( Long ) maxStaleness , timeUnit ) ; ",
  "10732": "} public void zeroRemaining ( ) { ",
  "10733": "( ( Buffer ) buffer ) . mark ( ) ; ",
  "10734": "buffer . put ( ZEROS , 0 , buffer . remaining ( ) ) ; ",
  "10735": "( ( Buffer ) buffer ) . reset ( ) ; ",
  "10736": "} public void zero ( ) { ",
  "10737": "( ( Buffer ) buffer ) . position ( 0 ) ; ",
  "10738": "} public static void readFully ( final InputStream inputStream , final byte [ ] buffer ) ",
  "10739": "readFully ( inputStream , buffer , buffer . length ) ; ",
  "10740": "} public static void readFully ( final InputStream inputStream , final byte [ ] buffer , final int offset , final int length ) ",
  "10741": "if ( buffer . length < length + offset ) { ",
  "10742": "int arrayOffset = offset ; ",
  "10743": "int bytesToRead = length ; ",
  "10744": "while ( bytesToRead > 0 ) { ",
  "10745": "int bytesRead = inputStream . read ( buffer , arrayOffset , bytesToRead ) ; ",
  "10746": "if ( bytesRead < 0 ) { ",
  "10747": "bytesToRead -= bytesRead ; ",
  "10748": "arrayOffset += bytesRead ; ",
  "10749": "} public static int readInt ( final InputStream inputStream , final byte [ ] buffer ) throws IOException { ",
  "10750": "readFully ( inputStream , buffer , 4 ) ; ",
  "10751": "return readInt ( buffer ) ; ",
  "10752": "} public static int readInt ( final byte [ ] buffer , final int offset ) { ",
  "10753": "int x = 0 ; ",
  "10754": "x |= ( 0xFF & buffer [ offset + 0 ] ) << 0 ; ",
  "10755": "x |= ( 0xFF & buffer [ offset + 1 ] ) << 8 ; ",
  "10756": "x |= ( 0xFF & buffer [ offset + 2 ] ) << 16 ; ",
  "10757": "x |= ( 0xFF & buffer [ offset + 3 ] ) << 24 ; ",
  "10758": "} public static int readIntBE ( final byte [ ] buffer , final int offset ) { ",
  "10759": "x |= ( 0xFF & buffer [ offset + 0 ] ) << 24 ; ",
  "10760": "x |= ( 0xFF & buffer [ offset + 1 ] ) << 16 ; ",
  "10761": "x |= ( 0xFF & buffer [ offset + 2 ] ) << 8 ; ",
  "10762": "x |= ( 0xFF & buffer [ offset + 3 ] ) << 0 ; ",
  "10763": "} public static long readLong ( final InputStream inputStream , final byte [ ] buffer ) throws IOException { ",
  "10764": "readFully ( inputStream , buffer , 8 ) ; ",
  "10765": "return readLong ( buffer ) ; ",
  "10766": "} private Map < String , List < String > > combineOptionsMaps ( final Map < String , List < String > > txtRecordsOptionsMap , ",
  "10767": "final Map < String , List < String > > connectionStringOptionsMap ) { ",
  "10768": "Map < String , List < String > > combinedOptionsMaps = new HashMap < String , List < String > > ( txtRecordsOptionsMap ) ; ",
  "10769": "for ( Map . Entry < String , List < String > > entry : connectionStringOptionsMap . entrySet ( ) ) { ",
  "10770": "combinedOptionsMaps . put ( entry . getKey ( ) , entry . getValue ( ) ) ; ",
  "10771": "return combinedOptionsMaps ; ",
  "10772": "public List < MongoCredential > getCredentialList ( ) { ",
  "10773": "return credential != null ? singletonList ( credential ) : Collections . < MongoCredential > emptyList ( ) ; ",
  "10774": "} private ClusterableServer getRandomServer ( final List < ServerDescription > serverDescriptions ) { ",
  "10775": "while ( ! serverDescriptions . isEmpty ( ) ) { ",
  "10776": "int serverPos = getRandom ( ) . nextInt ( serverDescriptions . size ( ) ) ; ",
  "10777": "ClusterableServer server = getServer ( serverDescriptions . get ( serverPos ) . getAddress ( ) ) ; ",
  "10778": "return server ; ",
  "10779": "serverDescriptions . remove ( serverPos ) ; ",
  "10780": "} private Random getRandom ( ) { ",
  "10781": "Random result = random . get ( ) ; ",
  "10782": "result = new Random ( ) ; ",
  "10783": "random . set ( result ) ; ",
  "10784": "public static MongoClient create ( final MongoClientSettings settings , @ Nullable final MongoDriverInformation mongoDriverInformation ) { ",
  "10785": "return create ( settings , mongoDriverInformation , null ) ; ",
  "10786": "} public static MongoClient create ( final ConnectionString connectionString , ",
  "10787": "@ Nullable final MongoDriverInformation mongoDriverInformation ) { ",
  "10788": "return create ( MongoClientSettings . builder ( ) . applyConnectionString ( connectionString ) . build ( ) , ",
  "10789": "mongoDriverInformation , connectionString . getStreamType ( ) ) ; ",
  "10790": "} public static MongoClient create ( final com . mongodb . MongoClientSettings settings , ",
  "10791": "return create ( MongoClientSettings . createFromClientSettings ( settings ) , mongoDriverInformation , null ) ; ",
  "10792": "} public Object copy ( ) { ",
  "10793": "BasicDBList newobj = new BasicDBList ( ) ; ",
  "10794": "for ( int i = 0 ; i < size ( ) ; ++ i ) { ",
  "10795": "Object val = get ( i ) ; ",
  "10796": "if ( val instanceof BasicDBObject ) { ",
  "10797": "val = ( ( BasicDBObject ) val ) . copy ( ) ; ",
  "10798": "} else if ( val instanceof BasicDBList ) { ",
  "10799": "val = ( ( BasicDBList ) val ) . copy ( ) ; ",
  "10800": "newobj . add ( val ) ; ",
  "10801": "return newobj ; ",
  "10802": "} public static < S > ClassModelBuilder < S > builder ( final Class < S > type ) { ",
  "10803": "return new ClassModelBuilder < S > ( type ) ; ",
  "10804": "} public PropertyModel < ? > getPropertyModel ( final String propertyName ) { ",
  "10805": "for ( PropertyModel < ? > propertyModel : propertyModels ) { ",
  "10806": "if ( propertyModel . getName ( ) . equals ( propertyName ) ) { ",
  "10807": "return propertyModel ; ",
  "10808": "} public FindOneAndReplaceOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "10809": "this . maxTimeMS = MILLISECONDS . convert ( maxTime , timeUnit ) ; ",
  "10810": "public Object getObjectInstance ( final Object obj , final Name name , final Context nameCtx , final Hashtable < ? , ? > environment ) ",
  "10811": "String connectionString = null ; ",
  "10812": "if ( environment . get ( CONNECTION_STRING ) instanceof String ) { ",
  "10813": "connectionString = ( String ) environment . get ( CONNECTION_STRING ) ; ",
  "10814": "if ( connectionString == null || connectionString . isEmpty ( ) ) { ",
  "10815": "if ( obj instanceof Reference ) { ",
  "10816": "Enumeration < RefAddr > props = ( ( Reference ) obj ) . getAll ( ) ; ",
  "10817": "while ( props . hasMoreElements ( ) ) { ",
  "10818": "RefAddr addr = props . nextElement ( ) ; ",
  "10819": "if ( addr != null ) { ",
  "10820": "if ( CONNECTION_STRING . equals ( addr . getType ( ) ) ) { ",
  "10821": "if ( addr . getContent ( ) instanceof String ) { ",
  "10822": "connectionString = ( String ) addr . getContent ( ) ; ",
  "10823": "MongoClientURI uri = new MongoClientURI ( connectionString ) ; ",
  "10824": "return new MongoClient ( uri ) ; ",
  "10825": "} public DBCollection getCollection ( final String name ) { ",
  "10826": "DBCollection collection = collectionCache . get ( name ) ; ",
  "10827": "collection = new DBCollection ( name , this , executor ) ; ",
  "10828": "if ( mongo . getMongoClientOptions ( ) . getDbDecoderFactory ( ) != DefaultDBDecoder . FACTORY ) { ",
  "10829": "collection . setDBDecoderFactory ( mongo . getMongoClientOptions ( ) . getDbDecoderFactory ( ) ) ; ",
  "10830": "if ( mongo . getMongoClientOptions ( ) . getDbEncoderFactory ( ) != DefaultDBEncoder . FACTORY ) { ",
  "10831": "collection . setDBEncoderFactory ( mongo . getMongoClientOptions ( ) . getDbEncoderFactory ( ) ) ; ",
  "10832": "DBCollection old = collectionCache . putIfAbsent ( name , collection ) ; ",
  "10833": "return old != null ? old : collection ; ",
  "10834": "} public void dropDatabase ( ) { ",
  "10835": "getExecutor ( ) . execute ( new DropDatabaseOperation ( getName ( ) , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "10836": "} catch ( MongoWriteConcernException e ) { ",
  "10837": "throw createWriteConcernException ( e ) ; ",
  "10838": "} public Set < String > getCollectionNames ( ) { ",
  "10839": "List < String > collectionNames = ",
  "10840": "new MongoIterableImpl < DBObject > ( null , executor , ReadConcern . DEFAULT , primary ( ) , ",
  "10841": "mongo . getMongoClientOptions ( ) . getRetryReads ( ) ) { ",
  "10842": "public ReadOperation < BatchCursor < DBObject > > asReadOperation ( ) { ",
  "10843": "return new ListCollectionsOperation < DBObject > ( name , commandCodec ) ",
  "10844": ". nameOnly ( true ) ; ",
  "10845": "} . map ( new Function < DBObject , String > ( ) { ",
  "10846": "public String apply ( final DBObject result ) { ",
  "10847": "return ( String ) result . get ( \"name\" ) ; ",
  "10848": "} ) . into ( new ArrayList < String > ( ) ) ; ",
  "10849": "Collections . sort ( collectionNames ) ; ",
  "10850": "return new LinkedHashSet < String > ( collectionNames ) ; ",
  "10851": "} public DBCollection createCollection ( final String collectionName , @ Nullable final DBObject options ) { ",
  "10852": "if ( options != null ) { ",
  "10853": "executor . execute ( getCreateCollectionOperation ( collectionName , options ) , getReadConcern ( ) ) ; ",
  "10854": "return getCollection ( collectionName ) ; ",
  "10855": "} public DBCollection createView ( final String viewName , final String viewOn , final List < ? extends DBObject > pipeline ) { ",
  "10856": "return createView ( viewName , viewOn , pipeline , new DBCreateViewOptions ( ) ) ; ",
  "10857": "} public DBCollection createView ( final String viewName , final String viewOn , final List < ? extends DBObject > pipeline , ",
  "10858": "final DBCreateViewOptions options ) { ",
  "10859": "notNull ( \"options\" , options ) ; ",
  "10860": "DBCollection view = getCollection ( viewName ) ; ",
  "10861": "executor . execute ( new CreateViewOperation ( name , viewName , viewOn , view . preparePipeline ( pipeline ) , writeConcern ) ",
  "10862": ". collation ( options . getCollation ( ) ) , getReadConcern ( ) ) ; ",
  "10863": "} public CommandResult command ( final String command ) { ",
  "10864": "return command ( new BasicDBObject ( command , Boolean . TRUE ) , getReadPreference ( ) ) ; ",
  "10865": "} public CommandResult command ( final DBObject command , final DBEncoder encoder ) { ",
  "10866": "return command ( command , getReadPreference ( ) , encoder ) ; ",
  "10867": "} public CommandResult command ( final DBObject command , final ReadPreference readPreference , @ Nullable final DBEncoder encoder ) { ",
  "10868": "return executeCommand ( wrap ( command , encoder ) , getCommandReadPreference ( command , readPreference ) ) ; ",
  "10869": "} catch ( MongoCommandException ex ) { ",
  "10870": "return new CommandResult ( ex . getResponse ( ) , ex . getServerAddress ( ) ) ; ",
  "10871": "} public CommandResult command ( final DBObject command , final ReadPreference readPreference ) { ",
  "10872": "return command ( command , readPreference , null ) ; ",
  "10873": "} public CommandResult command ( final String command , final ReadPreference readPreference ) { ",
  "10874": "return command ( new BasicDBObject ( command , true ) , readPreference ) ; ",
  "10875": "} public boolean collectionExists ( final String collectionName ) { ",
  "10876": "Set < String > collectionNames = getCollectionNames ( ) ; ",
  "10877": "for ( final String name : collectionNames ) { ",
  "10878": "if ( name . equalsIgnoreCase ( collectionName ) ) { ",
  "10879": "public CommandResult doEval ( final String code , final Object ... args ) { ",
  "10880": "DBObject commandDocument = new BasicDBObject ( \"$eval\" , code ) . append ( \"args\" , asList ( args ) ) ; ",
  "10881": "return executeCommand ( wrap ( commandDocument ) ) ; ",
  "10882": "public Object eval ( final String code , final Object ... args ) { ",
  "10883": "CommandResult result = doEval ( code , args ) ; ",
  "10884": "result . throwOnError ( ) ; ",
  "10885": "return result . get ( \"retval\" ) ; ",
  "10886": "public CommandResult getStats ( ) { ",
  "10887": "BsonDocument commandDocument = new BsonDocument ( \"dbStats\" , new BsonInt32 ( 1 ) ) . append ( \"scale\" , new BsonInt32 ( 1 ) ) ; ",
  "10888": "return executeCommand ( commandDocument ) ; ",
  "10889": "public WriteResult addUser ( final String userName , final char [ ] password ) { ",
  "10890": "return addUser ( userName , password , false ) ; ",
  "10891": "public WriteResult addUser ( final String userName , final char [ ] password , final boolean readOnly ) { ",
  "10892": "MongoCredential credential = createCredential ( userName , getName ( ) , password ) ; ",
  "10893": "boolean userExists = false ; ",
  "10894": "userExists = executor . execute ( new com . mongodb . operation . UserExistsOperation ( getName ( ) , userName ) , primary ( ) , getReadConcern ( ) ) ; ",
  "10895": "} catch ( MongoCommandException e ) { ",
  "10896": "if ( e . getCode ( ) != 13 ) { ",
  "10897": "if ( userExists ) { ",
  "10898": "executor . execute ( new com . mongodb . operation . UpdateUserOperation ( credential , readOnly , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "10899": "return new WriteResult ( 1 , true , null ) ; ",
  "10900": "executor . execute ( new com . mongodb . operation . CreateUserOperation ( credential , readOnly , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "10901": "return new WriteResult ( 1 , false , null ) ; ",
  "10902": "public WriteResult removeUser ( final String userName ) { ",
  "10903": "executor . execute ( new com . mongodb . operation . DropUserOperation ( getName ( ) , userName , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "10904": "} ReadPreference getCommandReadPreference ( final DBObject command , @ Nullable final ReadPreference requestedPreference ) { ",
  "10905": "String comString = command . keySet ( ) . iterator ( ) . next ( ) . toLowerCase ( ) ; ",
  "10906": "boolean primaryRequired = ! OBEDIENT_COMMANDS . contains ( comString ) ; ",
  "10907": "if ( primaryRequired ) { ",
  "10908": "return ReadPreference . primary ( ) ; ",
  "10909": "} else if ( requestedPreference == null ) { ",
  "10910": "return requestedPreference ; ",
  "10911": "} public static void main ( final String [ ] args ) throws FileNotFoundException , IOException { ",
  "10912": "GridFSBucket gridFSBucket = GridFSBuckets . create ( database ) ; ",
  "10913": "GridFSUploadOptions options = new GridFSUploadOptions ( ) ",
  "10914": ". chunkSizeBytes ( 1024 ) ",
  "10915": ". metadata ( new Document ( \"type\" , \"presentation\" ) ) ; ",
  "10916": "ObjectId fileId = gridFSBucket . uploadFromStream ( \"mongodb-tutorial\" , streamToUploadFrom , options ) ; ",
  "10917": "streamToUploadFrom . close ( ) ; ",
  "10918": "GridFSUploadStream uploadStream = gridFSBucket . openUploadStream ( \"sampleData\" ) ; ",
  "10919": "uploadStream . write ( data ) ; ",
  "10920": "uploadStream . close ( ) ; ",
  "10921": "gridFSBucket . find ( ) . forEach ( new Block < GridFSFile > ( ) { ",
  "10922": "public void apply ( final GridFSFile gridFSFile ) { ",
  "10923": "System . out . println ( gridFSFile . getFilename ( ) ) ; ",
  "10924": "gridFSBucket . find ( eq ( \"metadata.contentType\" , \"image/png\" ) ) . forEach ( ",
  "10925": "new Block < GridFSFile > ( ) { ",
  "10926": "FileOutputStream streamToDownloadTo = new FileOutputStream ( \"/tmp/mongodb-tutorial.txt\" ) ; ",
  "10927": "gridFSBucket . downloadToStream ( fileId , streamToDownloadTo ) ; ",
  "10928": "streamToDownloadTo . close ( ) ; ",
  "10929": "streamToDownloadTo = new FileOutputStream ( \"/tmp/mongodb-tutorial.txt\" ) ; ",
  "10930": "GridFSDownloadOptions downloadOptions = new GridFSDownloadOptions ( ) . revision ( 0 ) ; ",
  "10931": "gridFSBucket . downloadToStream ( \"mongodb-tutorial\" , streamToDownloadTo , downloadOptions ) ; ",
  "10932": "GridFSDownloadStream downloadStream = gridFSBucket . openDownloadStream ( fileId ) ; ",
  "10933": "int fileLength = ( int ) downloadStream . getGridFSFile ( ) . getLength ( ) ; ",
  "10934": "byte [ ] bytesToWriteTo = new byte [ fileLength ] ; ",
  "10935": "downloadStream . read ( bytesToWriteTo ) ; ",
  "10936": "downloadStream . close ( ) ; ",
  "10937": "System . out . println ( new String ( bytesToWriteTo , StandardCharsets . UTF_8 ) ) ; ",
  "10938": "downloadStream = gridFSBucket . openDownloadStream ( \"sampleData\" ) ; ",
  "10939": "fileLength = ( int ) downloadStream . getGridFSFile ( ) . getLength ( ) ; ",
  "10940": "bytesToWriteTo = new byte [ fileLength ] ; ",
  "10941": "gridFSBucket . rename ( fileId , \"mongodbTutorial\" ) ; ",
  "10942": "gridFSBucket . delete ( fileId ) ; ",
  "10943": "} public static CodecRegistry fromRegistries ( final List < ? extends CodecRegistry > registries ) { ",
  "10944": "List < CodecProvider > providers = new ArrayList < CodecProvider > ( ) ; ",
  "10945": "for ( CodecRegistry registry : registries ) { ",
  "10946": "providers . add ( providerFromRegistry ( registry ) ) ; ",
  "10947": "return new ProvidersCodecRegistry ( providers ) ; ",
  "10948": "} public < U > Codec < U > get ( final Class < U > clazz ) { ",
  "10949": "if ( hasCycles ( clazz ) ) { ",
  "10950": "return new LazyCodec < U > ( registry , clazz ) ; ",
  "10951": "return registry . get ( new ChildCodecRegistry < U > ( this , clazz ) ) ; ",
  "10952": "} public WriteResult insert ( final DBObject document , final WriteConcern writeConcern ) { ",
  "10953": "return insert ( asList ( document ) , writeConcern ) ; ",
  "10954": "} public WriteResult insert ( final DBObject [ ] documents , final WriteConcern writeConcern ) { ",
  "10955": "return insert ( asList ( documents ) , writeConcern ) ; ",
  "10956": "} public WriteResult insert ( final List < ? extends DBObject > documents , final WriteConcern aWriteConcern ) { ",
  "10957": "return insert ( documents , aWriteConcern , null ) ; ",
  "10958": "} public WriteResult insert ( final DBObject [ ] documents , final WriteConcern aWriteConcern , final DBEncoder encoder ) { ",
  "10959": "return insert ( asList ( documents ) , aWriteConcern , encoder ) ; ",
  "10960": "} public WriteResult insert ( final List < ? extends DBObject > documents , final WriteConcern aWriteConcern , ",
  "10961": "@ Nullable final DBEncoder dbEncoder ) { ",
  "10962": "return insert ( documents , new InsertOptions ( ) . writeConcern ( aWriteConcern ) . dbEncoder ( dbEncoder ) ) ; ",
  "10963": "} public WriteResult insert ( final List < ? extends DBObject > documents , final InsertOptions insertOptions ) { ",
  "10964": "WriteConcern writeConcern = insertOptions . getWriteConcern ( ) != null ? insertOptions . getWriteConcern ( ) : getWriteConcern ( ) ; ",
  "10965": "Encoder < DBObject > encoder = toEncoder ( insertOptions . getDbEncoder ( ) ) ; ",
  "10966": "List < InsertRequest > insertRequestList = new ArrayList < InsertRequest > ( documents . size ( ) ) ; ",
  "10967": "for ( DBObject cur : documents ) { ",
  "10968": "if ( cur . get ( ID_FIELD_NAME ) == null ) { ",
  "10969": "cur . put ( ID_FIELD_NAME , new ObjectId ( ) ) ; ",
  "10970": "insertRequestList . add ( new InsertRequest ( new BsonDocumentWrapper < DBObject > ( cur , encoder ) ) ) ; ",
  "10971": "return insert ( insertRequestList , writeConcern , insertOptions . isContinueOnError ( ) , insertOptions . getBypassDocumentValidation ( ) ) ; ",
  "10972": "} public WriteResult save ( final DBObject document , final WriteConcern writeConcern ) { ",
  "10973": "Object id = document . get ( ID_FIELD_NAME ) ; ",
  "10974": "return insert ( document , writeConcern ) ; ",
  "10975": "return replaceOrInsert ( document , id , writeConcern ) ; ",
  "10976": "} public WriteResult update ( final DBObject query , final DBObject update , final boolean upsert , final boolean multi , ",
  "10977": "final WriteConcern aWriteConcern ) { ",
  "10978": "return update ( query , update , upsert , multi , aWriteConcern , null ) ; ",
  "10979": "final WriteConcern concern , @ Nullable final DBEncoder encoder ) { ",
  "10980": "return update ( query , update , upsert , multi , concern , null , encoder ) ; ",
  "10981": "final WriteConcern concern , @ Nullable final Boolean bypassDocumentValidation , ",
  "10982": "@ Nullable final DBEncoder encoder ) { ",
  "10983": "return update ( query , update , new DBCollectionUpdateOptions ( ) . upsert ( upsert ) . multi ( multi ) ",
  "10984": ". writeConcern ( concern ) . bypassDocumentValidation ( bypassDocumentValidation ) . encoder ( encoder ) ) ; ",
  "10985": "} public WriteResult update ( final DBObject query , final DBObject update , final boolean upsert , final boolean multi ) { ",
  "10986": "return update ( query , update , upsert , multi , getWriteConcern ( ) ) ; ",
  "10987": "} public WriteResult update ( final DBObject query , final DBObject update ) { ",
  "10988": "return update ( query , update , false , false ) ; ",
  "10989": "} public WriteResult updateMulti ( final DBObject query , final DBObject update ) { ",
  "10990": "return update ( query , update , false , true ) ; ",
  "10991": "} public WriteResult update ( final DBObject query , final DBObject update , final DBCollectionUpdateOptions options ) { ",
  "10992": "notNull ( \"query\" , query ) ; ",
  "10993": "notNull ( \"update\" , update ) ; ",
  "10994": "WriteConcern writeConcern = options . getWriteConcern ( ) != null ? options . getWriteConcern ( ) : getWriteConcern ( ) ; ",
  "10995": "com . mongodb . bulk . WriteRequest . Type updateType = ! update . keySet ( ) . isEmpty ( ) && update . keySet ( ) . iterator ( ) . next ( ) . startsWith ( \"$\" ) ",
  "10996": "? com . mongodb . bulk . WriteRequest . Type . UPDATE ",
  "10997": ": com . mongodb . bulk . WriteRequest . Type . REPLACE ; ",
  "10998": "UpdateRequest updateRequest = new UpdateRequest ( wrap ( query ) , wrap ( update , options . getEncoder ( ) ) , updateType ) ",
  "10999": ". upsert ( options . isUpsert ( ) ) . multi ( options . isMulti ( ) ) ",
  "11000": ". collation ( options . getCollation ( ) ) ",
  "11001": ". arrayFilters ( wrapAllowNull ( options . getArrayFilters ( ) , options . getEncoder ( ) ) ) ; ",
  "11002": "return executeWriteOperation ( new UpdateOperation ( getNamespace ( ) , true , writeConcern , retryWrites , ",
  "11003": "singletonList ( updateRequest ) ) . bypassDocumentValidation ( options . getBypassDocumentValidation ( ) ) ) ; ",
  "11004": "} public WriteResult remove ( final DBObject query , final WriteConcern writeConcern ) { ",
  "11005": "return remove ( query , new DBCollectionRemoveOptions ( ) . writeConcern ( writeConcern ) ) ; ",
  "11006": "} public WriteResult remove ( final DBObject query , final WriteConcern writeConcern , final DBEncoder encoder ) { ",
  "11007": "return remove ( query , new DBCollectionRemoveOptions ( ) . writeConcern ( writeConcern ) . encoder ( encoder ) ) ; ",
  "11008": "} public WriteResult remove ( final DBObject query , final DBCollectionRemoveOptions options ) { ",
  "11009": "DeleteRequest deleteRequest = new DeleteRequest ( wrap ( query , options . getEncoder ( ) ) ) . collation ( options . getCollation ( ) ) ; ",
  "11010": "return executeWriteOperation ( new DeleteOperation ( getNamespace ( ) , false , writeConcern , retryWrites , ",
  "11011": "singletonList ( deleteRequest ) ) ) ; ",
  "11012": "public DBCursor find ( final DBObject query , final DBObject projection , final int numToSkip , final int batchSize ) { ",
  "11013": "return new DBCursor ( this , query , projection , getReadPreference ( ) ) . batchSize ( batchSize ) . skip ( numToSkip ) ; ",
  "11014": "} public DBCursor find ( final DBObject query , final DBObject projection ) { ",
  "11015": "return new DBCursor ( this , query , projection , getReadPreference ( ) ) ; ",
  "11016": "} public DBCursor find ( @ Nullable final DBObject query , final DBCollectionFindOptions options ) { ",
  "11017": "return new DBCursor ( this , query , options ) ; ",
  "11018": "public DBObject findOne ( final DBObject query ) { ",
  "11019": "return findOne ( query , null , null , getReadPreference ( ) ) ; ",
  "11020": "public DBObject findOne ( final DBObject query , final DBObject projection ) { ",
  "11021": "return findOne ( query , projection , null , getReadPreference ( ) ) ; ",
  "11022": "public DBObject findOne ( final DBObject query , final DBObject projection , final DBObject sort ) { ",
  "11023": "return findOne ( query , projection , sort , getReadPreference ( ) ) ; ",
  "11024": "public DBObject findOne ( final DBObject query , final DBObject projection , final ReadPreference readPreference ) { ",
  "11025": "return findOne ( query , projection , null , readPreference ) ; ",
  "11026": "public DBObject findOne ( @ Nullable final DBObject query , @ Nullable final DBObject projection , @ Nullable final DBObject sort , ",
  "11027": "final ReadPreference readPreference ) { ",
  "11028": "return findOne ( query != null ? query : new BasicDBObject ( ) , ",
  "11029": "new DBCollectionFindOptions ( ) . projection ( projection ) . sort ( sort ) . readPreference ( readPreference ) ) ; ",
  "11030": "public DBObject findOne ( final Object id , final DBObject projection ) { ",
  "11031": "return findOne ( new BasicDBObject ( \"_id\" , id ) , new DBCollectionFindOptions ( ) . projection ( projection ) ) ; ",
  "11032": "public DBObject findOne ( @ Nullable final DBObject query , final DBCollectionFindOptions findOptions ) { ",
  "11033": "return find ( query , findOptions ) . one ( ) ; ",
  "11034": "} public long count ( @ Nullable final DBObject query , final ReadPreference readPreference ) { ",
  "11035": "return getCount ( query , null , readPreference ) ; ",
  "11036": "public long getCount ( @ Nullable final DBObject query , final DBObject projection ) { ",
  "11037": "return getCount ( query , projection , 0 , 0 ) ; ",
  "11038": "public long getCount ( @ Nullable final DBObject query , @ Nullable final DBObject projection , final ReadPreference readPreference ) { ",
  "11039": "return getCount ( query , projection , 0 , 0 , readPreference ) ; ",
  "11040": "public long getCount ( @ Nullable final DBObject query , @ Nullable final DBObject projection , final long limit , final long skip ) { ",
  "11041": "return getCount ( query , projection , limit , skip , getReadPreference ( ) ) ; ",
  "11042": "public long getCount ( @ Nullable final DBObject query , @ Nullable final DBObject projection , final long limit , final long skip , ",
  "11043": "return getCount ( query , new DBCollectionCountOptions ( ) . limit ( limit ) . skip ( skip ) . readPreference ( readPreference ) ) ; ",
  "11044": "} public long getCount ( @ Nullable final DBObject query , final DBCollectionCountOptions options ) { ",
  "11045": "notNull ( \"countOptions\" , options ) ; ",
  "11046": "CountOperation operation = new CountOperation ( getNamespace ( ) ) ",
  "11047": ". skip ( options . getSkip ( ) ) ",
  "11048": ". limit ( options . getLimit ( ) ) ",
  "11049": ". maxTime ( options . getMaxTime ( MILLISECONDS ) , MILLISECONDS ) ",
  "11050": ". retryReads ( retryReads ) ; ",
  "11051": "operation . filter ( wrap ( query ) ) ; ",
  "11052": "DBObject hint = options . getHint ( ) ; ",
  "11053": "if ( hint != null ) { ",
  "11054": "operation . hint ( wrap ( hint ) ) ; ",
  "11055": "String hintString = options . getHintString ( ) ; ",
  "11056": "if ( hintString != null ) { ",
  "11057": "operation . hint ( new BsonString ( hintString ) ) ; ",
  "11058": "ReadPreference optionsReadPreference = options . getReadPreference ( ) ; ",
  "11059": "ReadConcern optionsReadConcern = options . getReadConcern ( ) ; ",
  "11060": "return executor . execute ( operation , optionsReadPreference != null ? optionsReadPreference : getReadPreference ( ) , ",
  "11061": "optionsReadConcern != null ? optionsReadConcern : getReadConcern ( ) ) ; ",
  "11062": "} public DBCollection rename ( final String newName , final boolean dropTarget ) { ",
  "11063": "executor . execute ( new RenameCollectionOperation ( getNamespace ( ) , ",
  "11064": "new MongoNamespace ( getNamespace ( ) . getDatabaseName ( ) , newName ) , getWriteConcern ( ) ) ",
  "11065": ". dropTarget ( dropTarget ) , getReadConcern ( ) ) ; ",
  "11066": "return getDB ( ) . getCollection ( newName ) ; ",
  "11067": "public DBObject group ( final DBObject key , final DBObject cond , final DBObject initial , final String reduce ) { ",
  "11068": "return group ( key , cond , initial , reduce , null ) ; ",
  "11069": "public DBObject group ( final DBObject key , final DBObject cond , final DBObject initial , final String reduce , ",
  "11070": "@ Nullable final String finalize ) { ",
  "11071": "return group ( key , cond , initial , reduce , finalize , getReadPreference ( ) ) ; ",
  "11072": "@ Nullable final String finalize , final ReadPreference readPreference ) { ",
  "11073": "return group ( new GroupCommand ( this , key , cond , initial , reduce , finalize ) , readPreference ) ; ",
  "11074": "public DBObject group ( final GroupCommand cmd , final ReadPreference readPreference ) { ",
  "11075": "return toDBList ( executor . execute ( cmd . toOperation ( getNamespace ( ) , getDefaultDBObjectCodec ( ) , retryReads ) , readPreference , ",
  "11076": "getReadConcern ( ) ) ) ; ",
  "11077": "} public List distinct ( final String fieldName , final ReadPreference readPreference ) { ",
  "11078": "return distinct ( fieldName , new BasicDBObject ( ) , readPreference ) ; ",
  "11079": "} public List distinct ( final String fieldName , final DBObject query ) { ",
  "11080": "return distinct ( fieldName , query , getReadPreference ( ) ) ; ",
  "11081": "} public List distinct ( final String fieldName , final DBObject query , final ReadPreference readPreference ) { ",
  "11082": "return distinct ( fieldName , new DBCollectionDistinctOptions ( ) . filter ( query ) . readPreference ( readPreference ) ) ; ",
  "11083": "public List distinct ( final String fieldName , final DBCollectionDistinctOptions options ) { ",
  "11084": "notNull ( \"fieldName\" , fieldName ) ; ",
  "11085": "return new MongoIterableImpl < BsonValue > ( null , executor , ",
  "11086": "options . getReadConcern ( ) != null ? options . getReadConcern ( ) : getReadConcern ( ) , ",
  "11087": "options . getReadPreference ( ) != null ? options . getReadPreference ( ) : getReadPreference ( ) , ",
  "11088": "retryReads ) { ",
  "11089": "public ReadOperation < BatchCursor < BsonValue > > asReadOperation ( ) { ",
  "11090": "return new DistinctOperation < BsonValue > ( getNamespace ( ) , fieldName , new BsonValueCodec ( ) ) ",
  "11091": ". filter ( wrapAllowNull ( options . getFilter ( ) ) ) ",
  "11092": "} . map ( new Function < BsonValue , Object > ( ) { ",
  "11093": "public Object apply ( final BsonValue bsonValue ) { ",
  "11094": "if ( bsonValue == null ) { ",
  "11095": "BsonDocument document = new BsonDocument ( \"value\" , bsonValue ) ; ",
  "11096": "DBObject obj = getDefaultDBObjectCodec ( ) . decode ( new BsonDocumentReader ( document ) , DecoderContext . builder ( ) . build ( ) ) ; ",
  "11097": "return obj . get ( \"value\" ) ; ",
  "11098": "} ) . into ( new ArrayList < Object > ( ) ) ; ",
  "11099": "} public MapReduceOutput mapReduce ( final String map , final String reduce , final String outputTarget , ",
  "11100": "final MapReduceCommand . OutputType outputType , final DBObject query , ",
  "11101": "MapReduceCommand command = new MapReduceCommand ( this , map , reduce , outputTarget , outputType , query ) ; ",
  "11102": "command . setReadPreference ( readPreference ) ; ",
  "11103": "return mapReduce ( command ) ; ",
  "11104": "} public MapReduceOutput mapReduce ( final MapReduceCommand command ) { ",
  "11105": "ReadPreference readPreference = command . getReadPreference ( ) == null ? getReadPreference ( ) : command . getReadPreference ( ) ; ",
  "11106": "Map < String , Object > scope = command . getScope ( ) ; ",
  "11107": "Boolean jsMode = command . getJsMode ( ) ; ",
  "11108": "if ( command . getOutputType ( ) == MapReduceCommand . OutputType . INLINE ) { ",
  "11109": "MapReduceWithInlineResultsOperation < DBObject > operation = ",
  "11110": "new MapReduceWithInlineResultsOperation < DBObject > ( getNamespace ( ) , new BsonJavaScript ( command . getMap ( ) ) , ",
  "11111": "new BsonJavaScript ( command . getReduce ( ) ) , getDefaultDBObjectCodec ( ) ) ",
  "11112": ". filter ( wrapAllowNull ( command . getQuery ( ) ) ) ",
  "11113": ". limit ( command . getLimit ( ) ) ",
  "11114": ". maxTime ( command . getMaxTime ( MILLISECONDS ) , MILLISECONDS ) ",
  "11115": ". jsMode ( jsMode == null ? false : jsMode ) ",
  "11116": ". sort ( wrapAllowNull ( command . getSort ( ) ) ) ",
  "11117": ". verbose ( command . isVerbose ( ) ) ",
  "11118": ". collation ( command . getCollation ( ) ) ; ",
  "11119": "if ( scope != null ) { ",
  "11120": "operation . scope ( wrap ( new BasicDBObject ( scope ) ) ) ; ",
  "11121": "if ( command . getFinalize ( ) != null ) { ",
  "11122": "operation . finalizeFunction ( new BsonJavaScript ( command . getFinalize ( ) ) ) ; ",
  "11123": "MapReduceBatchCursor < DBObject > executionResult = executor . execute ( operation , readPreference , getReadConcern ( ) ) ; ",
  "11124": "return new MapReduceOutput ( command . toDBObject ( ) , executionResult ) ; ",
  "11125": "String action ; ",
  "11126": "switch ( command . getOutputType ( ) ) { ",
  "11127": "case REPLACE : ",
  "11128": "action = \"replace\" ; ",
  "11129": "case MERGE : ",
  "11130": "action = \"merge\" ; ",
  "11131": "case REDUCE : ",
  "11132": "action = \"reduce\" ; ",
  "11133": "MapReduceToCollectionOperation operation = ",
  "11134": "new MapReduceToCollectionOperation ( getNamespace ( ) , ",
  "11135": "new BsonJavaScript ( command . getMap ( ) ) , ",
  "11136": "new BsonJavaScript ( command . getReduce ( ) ) , ",
  "11137": "command . getOutputTarget ( ) , ",
  "11138": "getWriteConcern ( ) ) ",
  "11139": ". action ( action ) ",
  "11140": ". databaseName ( command . getOutputDB ( ) ) ",
  "11141": ". bypassDocumentValidation ( command . getBypassDocumentValidation ( ) ) ",
  "11142": "MapReduceStatistics mapReduceStatistics = executor . execute ( operation , getReadConcern ( ) ) ; ",
  "11143": "DBCollection mapReduceOutputCollection = getMapReduceOutputCollection ( command ) ; ",
  "11144": "DBCursor executionResult = mapReduceOutputCollection . find ( ) ; ",
  "11145": "return new MapReduceOutput ( command . toDBObject ( ) , executionResult , mapReduceStatistics , mapReduceOutputCollection ) ; ",
  "11146": "public AggregationOutput aggregate ( final DBObject firstOp , final DBObject ... additionalOps ) { ",
  "11147": "List < DBObject > pipeline = new ArrayList < DBObject > ( ) ; ",
  "11148": "pipeline . add ( firstOp ) ; ",
  "11149": "Collections . addAll ( pipeline , additionalOps ) ; ",
  "11150": "return aggregate ( pipeline ) ; ",
  "11151": "public AggregationOutput aggregate ( final List < ? extends DBObject > pipeline , final ReadPreference readPreference ) { ",
  "11152": "Cursor cursor = aggregate ( pipeline , AggregationOptions . builder ( ) . build ( ) , readPreference , false ) ; ",
  "11153": "if ( cursor == null ) { ",
  "11154": "return new AggregationOutput ( Collections . < DBObject > emptyList ( ) ) ; ",
  "11155": "List < DBObject > results = new ArrayList < DBObject > ( ) ; ",
  "11156": "results . add ( cursor . next ( ) ) ; ",
  "11157": "return new AggregationOutput ( results ) ; ",
  "11158": "} public Cursor aggregate ( final List < ? extends DBObject > pipeline , final AggregationOptions options ) { ",
  "11159": "return aggregate ( pipeline , options , getReadPreference ( ) ) ; ",
  "11160": "} public Cursor aggregate ( final List < ? extends DBObject > pipeline , final AggregationOptions options , ",
  "11161": "Cursor cursor = aggregate ( pipeline , options , readPreference , true ) ; ",
  "11162": "} public CommandResult explainAggregate ( final List < ? extends DBObject > pipeline , final AggregationOptions options ) { ",
  "11163": "AggregateOperation < BsonDocument > operation = new AggregateOperation < BsonDocument > ( getNamespace ( ) , preparePipeline ( pipeline ) , ",
  "11164": "new BsonDocumentCodec ( ) ) ",
  "11165": ". allowDiskUse ( options . getAllowDiskUse ( ) ) ",
  "11166": "return new CommandResult ( executor . execute ( operation . asExplainableOperation ( ExplainVerbosity . QUERY_PLANNER ) , primaryPreferred ( ) , ",
  "11167": "public List < Cursor > parallelScan ( final ParallelScanOptions options ) { ",
  "11168": "List < Cursor > cursors = new ArrayList < Cursor > ( ) ; ",
  "11169": "ParallelCollectionScanOperation < DBObject > operation = new ParallelCollectionScanOperation < DBObject > ( getNamespace ( ) , ",
  "11170": "options . getNumCursors ( ) , ",
  "11171": "objectCodec ) ",
  "11172": ". batchSize ( options . getBatchSize ( ) ) . retryReads ( retryReads ) ; ",
  "11173": "ReadPreference readPreferenceFromOptions = options . getReadPreference ( ) ; ",
  "11174": "List < BatchCursor < DBObject > > mongoCursors = executor . execute ( operation , ",
  "11175": "readPreferenceFromOptions != null ? readPreferenceFromOptions ",
  "11176": ": getReadPreference ( ) , ",
  "11177": "getReadConcern ( ) ) ; ",
  "11178": "for ( BatchCursor < DBObject > mongoCursor : mongoCursors ) { ",
  "11179": "cursors . add ( new MongoCursorAdapter ( new MongoBatchCursorAdapter < DBObject > ( mongoCursor ) ) ) ; ",
  "11180": "return cursors ; ",
  "11181": "} public void createIndex ( final DBObject keys , @ Nullable final String name , final boolean unique ) { ",
  "11182": "DBObject options = new BasicDBObject ( ) ; ",
  "11183": "if ( name != null && name . length ( ) > 0 ) { ",
  "11184": "options . put ( \"name\" , name ) ; ",
  "11185": "if ( unique ) { ",
  "11186": "options . put ( \"unique\" , Boolean . TRUE ) ; ",
  "11187": "createIndex ( keys , options ) ; ",
  "11188": "} public void createIndex ( final DBObject keys , final DBObject options ) { ",
  "11189": "executor . execute ( createIndexOperation ( keys , options ) , getReadConcern ( ) ) ; ",
  "11190": "public DBObject findAndModify ( @ Nullable final DBObject query , @ Nullable final DBObject sort , final DBObject update ) { ",
  "11191": "return findAndModify ( query , null , sort , false , update , false , false ) ; ",
  "11192": "public DBObject findAndRemove ( @ Nullable final DBObject query ) { ",
  "11193": "return findAndModify ( query , null , null , true , null , false , false ) ; ",
  "11194": "public DBObject findAndModify ( @ Nullable final DBObject query , @ Nullable final DBObject fields , @ Nullable final DBObject sort , ",
  "11195": "final boolean remove , @ Nullable final DBObject update , ",
  "11196": "final boolean returnNew , final boolean upsert ) { ",
  "11197": "return findAndModify ( query , fields , sort , remove , update , returnNew , upsert , 0L , MILLISECONDS ) ; ",
  "11198": "final boolean returnNew , final boolean upsert , ",
  "11199": "final long maxTime , final TimeUnit maxTimeUnit ) { ",
  "11200": "return findAndModify ( query , fields , sort , remove , update , returnNew , upsert , maxTime , maxTimeUnit , getWriteConcern ( ) ) ; ",
  "11201": "final long maxTime , final TimeUnit maxTimeUnit , ",
  "11202": "final WriteConcern writeConcern ) { ",
  "11203": "return findAndModify ( query != null ? query : new BasicDBObject ( ) , new DBCollectionFindAndModifyOptions ( ) ",
  "11204": ". projection ( fields ) ",
  "11205": ". sort ( sort ) ",
  "11206": ". remove ( remove ) ",
  "11207": ". update ( update ) ",
  "11208": ". returnNew ( returnNew ) ",
  "11209": ". upsert ( upsert ) ",
  "11210": ". maxTime ( maxTime , maxTimeUnit ) ",
  "11211": ". writeConcern ( writeConcern ) ) ; ",
  "11212": "} public DBObject findAndModify ( final DBObject query , final DBCollectionFindAndModifyOptions options ) { ",
  "11213": "WriteConcern optionsWriteConcern = options . getWriteConcern ( ) ; ",
  "11214": "WriteConcern writeConcern = optionsWriteConcern != null ? optionsWriteConcern : getWriteConcern ( ) ; ",
  "11215": "WriteOperation < DBObject > operation ; ",
  "11216": "if ( options . isRemove ( ) ) { ",
  "11217": "operation = new FindAndDeleteOperation < DBObject > ( getNamespace ( ) , writeConcern , retryWrites , objectCodec ) ",
  "11218": ". filter ( wrapAllowNull ( query ) ) ",
  "11219": ". projection ( wrapAllowNull ( options . getProjection ( ) ) ) ",
  "11220": ". sort ( wrapAllowNull ( options . getSort ( ) ) ) ",
  "11221": ". collation ( options . getCollation ( ) ) ; ",
  "11222": "DBObject update = options . getUpdate ( ) ; ",
  "11223": "if ( update == null ) { ",
  "11224": "if ( ! update . keySet ( ) . isEmpty ( ) && update . keySet ( ) . iterator ( ) . next ( ) . charAt ( 0 ) == '$' ) { ",
  "11225": "operation = new FindAndUpdateOperation < DBObject > ( getNamespace ( ) , writeConcern , retryWrites , objectCodec , ",
  "11226": "wrap ( update ) ) ",
  "11227": ". filter ( wrap ( query ) ) ",
  "11228": ". returnOriginal ( ! options . returnNew ( ) ) ",
  "11229": ". upsert ( options . isUpsert ( ) ) ",
  "11230": ". bypassDocumentValidation ( options . getBypassDocumentValidation ( ) ) ",
  "11231": ". arrayFilters ( wrapAllowNull ( options . getArrayFilters ( ) , ( Encoder < DBObject > ) null ) ) ; ",
  "11232": "operation = new FindAndReplaceOperation < DBObject > ( getNamespace ( ) , writeConcern , retryWrites , objectCodec , ",
  "11233": "return executor . execute ( operation , getReadConcern ( ) ) ; ",
  "11234": "} public void drop ( ) { ",
  "11235": "executor . execute ( new DropCollectionOperation ( getNamespace ( ) , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "11236": "} public synchronized void setDBDecoderFactory ( @ Nullable final DBDecoderFactory factory ) { ",
  "11237": "this . decoderFactory = factory ; ",
  "11238": "Decoder < DBObject > decoder = ( factory == null || factory == DefaultDBDecoder . FACTORY ) ",
  "11239": "? getDefaultDBObjectCodec ( ) ",
  "11240": ": new DBDecoderAdapter ( factory . create ( ) , this , getBufferPool ( ) ) ; ",
  "11241": "this . objectCodec = new CompoundDBObjectCodec ( objectCodec . getEncoder ( ) , decoder ) ; ",
  "11242": "} public synchronized void setDBEncoderFactory ( @ Nullable final DBEncoderFactory factory ) { ",
  "11243": "this . encoderFactory = factory ; ",
  "11244": "Encoder < DBObject > encoder = ( factory == null || factory == DefaultDBEncoder . FACTORY ) ",
  "11245": ": new DBEncoderFactoryAdapter ( encoderFactory ) ; ",
  "11246": "this . objectCodec = new CompoundDBObjectCodec ( encoder , objectCodec . getDecoder ( ) ) ; ",
  "11247": "} public List < DBObject > getIndexInfo ( ) { ",
  "11248": "return new MongoIterableImpl < DBObject > ( null , executor , ReadConcern . DEFAULT , primary ( ) , retryReads ) { ",
  "11249": "return new ListIndexesOperation < DBObject > ( getNamespace ( ) , getDefaultDBObjectCodec ( ) ) . retryReads ( retryReads ) ; ",
  "11250": "} . into ( new ArrayList < DBObject > ( ) ) ; ",
  "11251": "} public void dropIndex ( final DBObject index ) { ",
  "11252": "executor . execute ( new DropIndexOperation ( getNamespace ( ) , wrap ( index ) , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "11253": "executor . execute ( new DropIndexOperation ( getNamespace ( ) , indexName , getWriteConcern ( ) ) , getReadConcern ( ) ) ; ",
  "11254": "} public boolean isCapped ( ) { ",
  "11255": "CommandResult commandResult = getStats ( ) ; ",
  "11256": "Object cappedField = commandResult . get ( \"capped\" ) ; ",
  "11257": "return cappedField != null && ( cappedField . equals ( 1 ) || cappedField . equals ( true ) ) ; ",
  "11258": "} public void setInternalClass ( final String path , final Class < ? extends DBObject > aClass ) { ",
  "11259": "setObjectFactory ( objectFactory . update ( aClass , asList ( path . split ( \"\\\\.\" ) ) ) ) ; ",
  "11260": "} protected Class < ? extends DBObject > getInternalClass ( final String path ) { ",
  "11261": "return objectFactory . getClassForPath ( asList ( path . split ( \"\\\\.\" ) ) ) ; ",
  "11262": "} public static AsyncInputStream toAsyncInputStream ( final ByteBuffer srcByteBuffer ) { ",
  "11263": "notNull ( \"srcByteBuffer\" , srcByteBuffer ) ; ",
  "11264": "return new AsyncInputStream ( ) { ",
  "11265": "public void read ( final ByteBuffer dstByteBuffer , final SingleResultCallback < Integer > callback ) { ",
  "11266": "transferDataFromByteBuffers ( srcByteBuffer , dstByteBuffer , callback ) ; ",
  "11267": "public void skip ( final long bytesToSkip , final SingleResultCallback < Long > callback ) { ",
  "11268": "notNull ( \"callback\" , callback ) ; ",
  "11269": "callback . onResult ( 0L , null ) ; ",
  "11270": "public void close ( final SingleResultCallback < Void > callback ) { ",
  "11271": "callback . onResult ( null , null ) ; ",
  "11272": "} public static AsyncOutputStream toAsyncOutputStream ( final ByteBuffer dstByteBuffer ) { ",
  "11273": "notNull ( \"dstByteBuffer\" , dstByteBuffer ) ; ",
  "11274": "return new AsyncOutputStream ( ) { ",
  "11275": "public void write ( final ByteBuffer srcByteBuffer , final SingleResultCallback < Integer > callback ) { ",
  "11276": "} public static AsyncInputStream toAsyncInputStream ( final InputStream inputStream ) { ",
  "11277": "notNull ( \"inputStream\" , inputStream ) ; ",
  "11278": "notNull ( \"dst\" , dstByteBuffer ) ; ",
  "11279": "if ( ! dstByteBuffer . hasRemaining ( ) ) { ",
  "11280": "callback . onResult ( - 1 , null ) ; ",
  "11281": "int maxAmount = dstByteBuffer . remaining ( ) ; ",
  "11282": "byte [ ] bytes = new byte [ maxAmount ] ; ",
  "11283": "int amountRead ; ",
  "11284": "amountRead = inputStream . read ( bytes ) ; ",
  "11285": "if ( amountRead > 0 ) { ",
  "11286": "if ( amountRead < maxAmount ) { ",
  "11287": "byte [ ] dataRead = new byte [ amountRead ] ; ",
  "11288": "System . arraycopy ( bytes , 0 , dataRead , 0 , amountRead ) ; ",
  "11289": "dstByteBuffer . put ( dataRead ) ; ",
  "11290": "dstByteBuffer . put ( bytes ) ; ",
  "11291": "callback . onResult ( amountRead , null ) ; ",
  "11292": "long skipped = inputStream . skip ( bytesToSkip ) ; ",
  "11293": "callback . onResult ( skipped , null ) ; ",
  "11294": "callback . onResult ( null , t ) ; ",
  "11295": "} public static AsyncOutputStream toAsyncOutputStream ( final OutputStream outputStream ) { ",
  "11296": "notNull ( \"outputStream\" , outputStream ) ; ",
  "11297": "notNull ( \"src\" , srcByteBuffer ) ; ",
  "11298": "if ( ! srcByteBuffer . hasRemaining ( ) ) { ",
  "11299": "int amount = srcByteBuffer . remaining ( ) ; ",
  "11300": "byte [ ] bytes = new byte [ amount ] ; ",
  "11301": "srcByteBuffer . get ( bytes ) ; ",
  "11302": "outputStream . write ( bytes ) ; ",
  "11303": "callback . onResult ( amount , null ) ; ",
  "11304": "outputStream . close ( ) ; ",
  "11305": "CodecRegistry pojoCodecRegistry = fromRegistries ( MongoClients . getDefaultCodecRegistry ( ) , ",
  "11306": "fromProviders ( PojoCodecProvider . builder ( ) . automatic ( true ) . build ( ) ) ) ; ",
  "11307": "MongoDatabase database = mongoClient . getDatabase ( \"mydb\" ) . withCodecRegistry ( pojoCodecRegistry ) ; ",
  "11308": "final MongoCollection < Person > collection = database . getCollection ( \"people\" , Person . class ) ; ",
  "11309": "collection . insertOne ( ada , new SingleResultCallback < Void > ( ) { ",
  "11310": "System . out . println ( \"Inserted!\" ) ; ",
  "11311": "SingleResultCallback < Person > printCallback = new SingleResultCallback < Person > ( ) { ",
  "11312": "public void onResult ( final Person person , final Throwable t ) { ",
  "11313": "System . out . println ( person ) ; ",
  "11314": "collection . find ( ) . first ( printCallback ) ; ",
  "11315": "List < Person > people = asList ( ",
  "11316": "final CountDownLatch countLatch = new CountDownLatch ( 1 ) ; ",
  "11317": "collection . insertMany ( people , new SingleResultCallback < Void > ( ) { ",
  "11318": "collection . countDocuments ( new SingleResultCallback < Long > ( ) { ",
  "11319": "public void onResult ( final Long count , final Throwable t ) { ",
  "11320": "countLatch . countDown ( ) ; ",
  "11321": "countLatch . await ( ) ; ",
  "11322": "Block < Person > printBlock = new Block < Person > ( ) { ",
  "11323": "public void apply ( final Person person ) { ",
  "11324": "collection . find ( ) . forEach ( printBlock , callbackWhenFinished ) ; ",
  "11325": "collection . find ( eq ( \"address.city\" , \"Wimborne\" ) ) . first ( printCallback ) ; ",
  "11326": "collection . find ( gt ( \"age\" , 30 ) ) . forEach ( printBlock , callbackWhenFinished ) ; ",
  "11327": "SingleResultCallback < UpdateResult > printModifiedCount = new SingleResultCallback < UpdateResult > ( ) { ",
  "11328": "public void onResult ( final UpdateResult result , final Throwable t ) { ",
  "11329": "System . out . println ( result . getModifiedCount ( ) ) ; ",
  "11330": "printModifiedCount ) ; ",
  "11331": "collection . updateMany ( not ( eq ( \"zip\" , null ) ) , set ( \"zip\" , null ) , ",
  "11332": "SingleResultCallback < DeleteResult > printDeletedCount = new SingleResultCallback < DeleteResult > ( ) { ",
  "11333": "public void onResult ( final DeleteResult result , final Throwable t ) { ",
  "11334": "System . out . println ( result . getDeletedCount ( ) ) ; ",
  "11335": "collection . deleteOne ( eq ( \"address.city\" , \"Wimborne\" ) , printDeletedCount ) ; ",
  "11336": "collection . deleteMany ( eq ( \"address.city\" , \"London\" ) , printDeletedCount ) ; ",
  "11337": "final CountDownLatch deleteLatch = new CountDownLatch ( 1 ) ; ",
  "11338": "database . drop ( new SingleResultCallback < Void > ( ) { ",
  "11339": "deleteLatch . countDown ( ) ; ",
  "11340": "deleteLatch . await ( ) ; ",
  "11341": "} public static < TItem > Bson set ( final String fieldName , @ Nullable final TItem value ) { ",
  "11342": "return new SimpleUpdate < TItem > ( fieldName , value , \"$set\" ) ; ",
  "11343": "} public static < TItem > Bson setOnInsert ( final String fieldName , @ Nullable final TItem value ) { ",
  "11344": "return new SimpleUpdate < TItem > ( fieldName , value , \"$setOnInsert\" ) ; ",
  "11345": "} public static Bson rename ( final String fieldName , final String newFieldName ) { ",
  "11346": "notNull ( \"newFieldName\" , newFieldName ) ; ",
  "11347": "return new SimpleUpdate < String > ( fieldName , newFieldName , \"$rename\" ) ; ",
  "11348": "} public static Bson inc ( final String fieldName , final Number number ) { ",
  "11349": "notNull ( \"number\" , number ) ; ",
  "11350": "return new SimpleUpdate < Number > ( fieldName , number , \"$inc\" ) ; ",
  "11351": "} public static Bson mul ( final String fieldName , final Number number ) { ",
  "11352": "return new SimpleUpdate < Number > ( fieldName , number , \"$mul\" ) ; ",
  "11353": "} public static < TItem > Bson min ( final String fieldName , final TItem value ) { ",
  "11354": "return new SimpleUpdate < TItem > ( fieldName , value , \"$min\" ) ; ",
  "11355": "} public static < TItem > Bson max ( final String fieldName , final TItem value ) { ",
  "11356": "return new SimpleUpdate < TItem > ( fieldName , value , \"$max\" ) ; ",
  "11357": "} public static < TItem > Bson addToSet ( final String fieldName , @ Nullable final TItem value ) { ",
  "11358": "return new SimpleUpdate < TItem > ( fieldName , value , \"$addToSet\" ) ; ",
  "11359": "} public static < TItem > Bson addEachToSet ( final String fieldName , final List < TItem > values ) { ",
  "11360": "return new WithEachUpdate < TItem > ( fieldName , values , \"$addToSet\" ) ; ",
  "11361": "} public static < TItem > Bson push ( final String fieldName , @ Nullable final TItem value ) { ",
  "11362": "return new SimpleUpdate < TItem > ( fieldName , value , \"$push\" ) ; ",
  "11363": "} public static < TItem > Bson pushEach ( final String fieldName , final List < TItem > values ) { ",
  "11364": "return new PushUpdate < TItem > ( fieldName , values , new PushOptions ( ) ) ; ",
  "11365": "} public static < TItem > Bson pull ( final String fieldName , @ Nullable final TItem value ) { ",
  "11366": "return new SimpleUpdate < TItem > ( fieldName , value , \"$pull\" ) ; ",
  "11367": "} public static Bson pullByFilter ( final Bson filter ) { ",
  "11368": "return new Bson ( ) { ",
  "11369": "public < TDocument > BsonDocument toBsonDocument ( final Class < TDocument > tDocumentClass , final CodecRegistry codecRegistry ) { ",
  "11370": "BsonDocumentWriter writer = new BsonDocumentWriter ( new BsonDocument ( ) ) ; ",
  "11371": "writer . writeStartDocument ( ) ; ",
  "11372": "writer . writeName ( \"$pull\" ) ; ",
  "11373": "encodeValue ( writer , filter , codecRegistry ) ; ",
  "11374": "writer . writeEndDocument ( ) ; ",
  "11375": "return writer . getDocument ( ) ; ",
  "11376": "} public static < TItem > Bson pullAll ( final String fieldName , final List < TItem > values ) { ",
  "11377": "return new PullAllUpdate < TItem > ( fieldName , values ) ; ",
  "11378": "} protected void writeQueryPrologue ( final BsonOutput bsonOutput ) { ",
  "11379": "bsonOutput . writeInt32 ( getCursorFlag ( ) ) ; ",
  "11380": "bsonOutput . writeCString ( getCollectionName ( ) ) ; ",
  "11381": "bsonOutput . writeInt32 ( skip ) ; ",
  "11382": "bsonOutput . writeInt32 ( numberToReturn ) ; ",
  "11383": "} public static void checkDatabaseNameValidity ( final String databaseName ) { ",
  "11384": "notNull ( \"databaseName\" , databaseName ) ; ",
  "11385": "for ( int i = 0 ; i < databaseName . length ( ) ; i ++ ) { ",
  "11386": "! PROHIBITED_CHARACTERS_IN_DATABASE_NAME . contains ( databaseName . charAt ( i ) ) ) ; ",
  "11387": "} private void incrementGenerationOnSocketException ( final InternalConnection connection , final Throwable t ) { ",
  "11388": "if ( t instanceof MongoSocketException && ! ( t instanceof MongoSocketReadTimeoutException ) ) { ",
  "11389": "if ( LOGGER . isWarnEnabled ( ) ) { ",
  "11390": "getId ( connection ) , serverId . getAddress ( ) , serverId . getAddress ( ) ) ) ; ",
  "11391": "mongoClient = new MongoClient ( ) ; ",
  "11392": "mongoClient = new MongoClient ( new MongoClientURI ( args [ 0 ] ) ) ; ",
  "11393": "DB database = mongoClient . getDB ( \"mydb\" ) ; ",
  "11394": "DBCollection collection = database . getCollection ( \"test\" ) ; ",
  "11395": "BasicDBObject doc = new BasicDBObject ( \"name\" , \"MongoDB\" ) ",
  "11396": "collection . insert ( doc ) ; ",
  "11397": "DBObject first = collection . findOne ( QueryBuilder . start ( \"amount1\" ) . is ( new Decimal128 ( new BigDecimal ( \".10\" ) ) ) . get ( ) ) ; ",
  "11398": "} public FindAndUpdateOperation < T > maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "11399": "} public static < T > List < Class < ? > > getAncestry ( final Class < T > clazz ) { ",
  "11400": "return ClassAncestry . getAncestry ( clazz ) ; ",
  "11401": "} public T put ( final Class < ? > key , final T value ) { ",
  "11402": "return map . put ( key , value ) ; ",
  "11403": "} public static < TExpression > Bson computed ( final String fieldName , final TExpression expression ) { ",
  "11404": "return new SimpleExpression < TExpression > ( fieldName , expression ) ; ",
  "11405": "} public static Bson slice ( final String fieldName , final int limit ) { ",
  "11406": "return new BsonDocument ( fieldName , new BsonDocument ( \"$slice\" , new BsonInt32 ( limit ) ) ) ; ",
  "11407": "} public static Bson slice ( final String fieldName , final int skip , final int limit ) { ",
  "11408": "return new BsonDocument ( fieldName , new BsonDocument ( \"$slice\" , new BsonArray ( asList ( new BsonInt32 ( skip ) , new BsonInt32 ( limit ) ) ) ) ) ; ",
  "11409": "public List < String > resolveHostFromSrvRecords ( final String srvHost ) { ",
  "11410": "String srvHostDomain = srvHost . substring ( srvHost . indexOf ( '.' ) + 1 ) ; ",
  "11411": "List < String > srvHostDomainParts = asList ( srvHostDomain . split ( \"\\\\.\" ) ) ; ",
  "11412": "List < String > hosts = new ArrayList < String > ( ) ; ",
  "11413": "InitialDirContext dirContext = createDnsDirContext ( ) ; ",
  "11414": "Attributes attributes = dirContext . getAttributes ( \"_mongodb._tcp.\" + srvHost , new String [ ] { \"SRV\" } ) ; ",
  "11415": "Attribute attribute = attributes . get ( \"SRV\" ) ; ",
  "11416": "if ( attribute == null ) { ",
  "11417": "NamingEnumeration < ? > srvRecordEnumeration = attribute . getAll ( ) ; ",
  "11418": "while ( srvRecordEnumeration . hasMore ( ) ) { ",
  "11419": "String srvRecord = ( String ) srvRecordEnumeration . next ( ) ; ",
  "11420": "String resolvedHost = split [ 3 ] . endsWith ( \".\" ) ? split [ 3 ] . substring ( 0 , split [ 3 ] . length ( ) - 1 ) : split [ 3 ] ; ",
  "11421": "String resolvedHostDomain = resolvedHost . substring ( resolvedHost . indexOf ( '.' ) + 1 ) ; ",
  "11422": "if ( ! sameParentDomain ( srvHostDomainParts , resolvedHostDomain ) ) { ",
  "11423": "throw new MongoConfigurationException ( ",
  "11424": "srvHost , resolvedHost ) ) ; ",
  "11425": "hosts . add ( resolvedHost + \":\" + split [ 2 ] ) ; ",
  "11426": "if ( hosts . isEmpty ( ) ) { ",
  "11427": "} catch ( NamingException e ) { ",
  "11428": "dirContext . close ( ) ; ",
  "11429": "return hosts ; ",
  "11430": "public String resolveAdditionalQueryParametersFromTxtRecords ( final String host ) { ",
  "11431": "String additionalQueryParameters = \"\" ; ",
  "11432": "Attributes attributes = dirContext . getAttributes ( host , new String [ ] { \"TXT\" } ) ; ",
  "11433": "Attribute attribute = attributes . get ( \"TXT\" ) ; ",
  "11434": "NamingEnumeration < ? > txtRecordEnumeration = attribute . getAll ( ) ; ",
  "11435": "if ( txtRecordEnumeration . hasMore ( ) ) { ",
  "11436": "additionalQueryParameters = ( ( String ) txtRecordEnumeration . next ( ) ) . replaceAll ( \"\\\\s\" , \"\" ) ; ",
  "11437": "host ) ) ; ",
  "11438": "return additionalQueryParameters ; ",
  "11439": "} private static InitialDirContext createDnsDirContext ( ) { ",
  "11440": "Hashtable < String , String > envProps = new Hashtable < String , String > ( ) ; ",
  "11441": "envProps . put ( Context . INITIAL_CONTEXT_FACTORY , \"com.sun.jndi.dns.DnsContextFactory\" ) ; ",
  "11442": "return new InitialDirContext ( envProps ) ; ",
  "11443": "} public DBCollectionCountOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "11444": "public static ReplaceOptions createReplaceOptions ( final UpdateOptions updateOptions ) { ",
  "11445": "notNull ( \"updateOptions\" , updateOptions ) ; ",
  "11446": "List < ? extends Bson > arrayFilters = updateOptions . getArrayFilters ( ) ; ",
  "11447": "return new ReplaceOptions ( ) ",
  "11448": ". bypassDocumentValidation ( updateOptions . getBypassDocumentValidation ( ) ) ",
  "11449": ". collation ( updateOptions . getCollation ( ) ) ",
  "11450": ". upsert ( updateOptions . isUpsert ( ) ) ; ",
  "11451": "} public static byte [ ] decode ( final String s ) { ",
  "11452": "int delta = s . endsWith ( \"==\" ) ? 2 : s . endsWith ( \"=\" ) ? 1 : 0 ; ",
  "11453": "byte [ ] buffer = new byte [ s . length ( ) * BYTES_PER_UNENCODED_BLOCK / BYTES_PER_ENCODED_BLOCK - delta ] ; ",
  "11454": "int mask = 0xFF ; ",
  "11455": "for ( int i = 0 ; i < s . length ( ) ; i += BYTES_PER_ENCODED_BLOCK ) { ",
  "11456": "int c0 = DECODE_TABLE [ s . charAt ( i ) ] ; ",
  "11457": "int c1 = DECODE_TABLE [ s . charAt ( i + 1 ) ] ; ",
  "11458": "buffer [ pos ++ ] = ( byte ) ( ( ( c0 << 2 ) | ( c1 > > 4 ) ) & mask ) ; ",
  "11459": "if ( pos >= buffer . length ) { ",
  "11460": "int c2 = DECODE_TABLE [ s . charAt ( i + 2 ) ] ; ",
  "11461": "buffer [ pos ++ ] = ( byte ) ( ( ( c1 << 4 ) | ( c2 > > 2 ) ) & mask ) ; ",
  "11462": "int c3 = DECODE_TABLE [ s . charAt ( i + 3 ) ] ; ",
  "11463": "buffer [ pos ++ ] = ( byte ) ( ( ( c2 << 6 ) | c3 ) & mask ) ; ",
  "11464": "} public static String encode ( final byte [ ] in ) { ",
  "11465": "int modulus = 0 ; ",
  "11466": "int bitWorkArea = 0 ; ",
  "11467": "int numEncodedBytes = ( in . length / BYTES_PER_UNENCODED_BLOCK ) * BYTES_PER_ENCODED_BLOCK ",
  "11468": "+ ( ( in . length % BYTES_PER_UNENCODED_BLOCK == 0 ) ? 0 : 4 ) ; ",
  "11469": "byte [ ] buffer = new byte [ numEncodedBytes ] ; ",
  "11470": "for ( int b : in ) { ",
  "11471": "modulus = ( modulus + 1 ) % BYTES_PER_UNENCODED_BLOCK ; ",
  "11472": "if ( b < 0 ) { ",
  "11473": "b += 256 ; ",
  "11474": "bitWorkArea = ( bitWorkArea << 8 ) + b ; ",
  "11475": "if ( 0 == modulus ) { ",
  "11476": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 18 ) & SIX_BIT_MASK ] ; ",
  "11477": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 12 ) & SIX_BIT_MASK ] ; ",
  "11478": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 6 ) & SIX_BIT_MASK ] ; ",
  "11479": "buffer [ pos ++ ] = ENCODE_TABLE [ bitWorkArea & SIX_BIT_MASK ] ; ",
  "11480": "switch ( modulus ) { ",
  "11481": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 2 ) & SIX_BIT_MASK ] ; ",
  "11482": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea << 4 ) & SIX_BIT_MASK ] ; ",
  "11483": "buffer [ pos ++ ] = PAD ; ",
  "11484": "buffer [ pos ] = PAD ; ",
  "11485": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 10 ) & SIX_BIT_MASK ] ; ",
  "11486": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea > > 4 ) & SIX_BIT_MASK ] ; ",
  "11487": "buffer [ pos ++ ] = ENCODE_TABLE [ ( bitWorkArea << 2 ) & SIX_BIT_MASK ] ; ",
  "11488": "return byteArrayToString ( buffer ) ; ",
  "11489": "public ServerAddress getAddress ( ) { ",
  "11490": "ClusterDescription description = getClusterDescription ( ) ; ",
  "11491": "if ( description . getPrimaries ( ) . isEmpty ( ) ) { ",
  "11492": "return description . getPrimaries ( ) . get ( 0 ) . getAddress ( ) ; ",
  "11493": "public ReplicaSetStatus getReplicaSetStatus ( ) { ",
  "11494": "ClusterDescription clusterDescription = getClusterDescription ( ) ; ",
  "11495": "return clusterDescription . getType ( ) == REPLICA_SET && clusterDescription . getConnectionMode ( ) == MULTIPLE ",
  "11496": "? new ReplicaSetStatus ( delegate . getCluster ( ) ) : null ; ",
  "11497": "public List < String > getDatabaseNames ( ) { ",
  "11498": "return new MongoIterableImpl < DBObject > ( null , createOperationExecutor ( ) , ReadConcern . DEFAULT , primary ( ) , ",
  "11499": "options . getRetryReads ( ) ) { ",
  "11500": "return new ListDatabasesOperation < DBObject > ( MongoClient . getCommandCodec ( ) ) ; ",
  "11501": "public DB getDB ( final String dbName ) { ",
  "11502": "DB db = dbCache . get ( dbName ) ; ",
  "11503": "db = new DB ( this , dbName , createOperationExecutor ( ) ) ; ",
  "11504": "DB temp = dbCache . putIfAbsent ( dbName , db ) ; ",
  "11505": "public CommandResult fsync ( final boolean async ) { ",
  "11506": "DBObject command = new BasicDBObject ( \"fsync\" , 1 ) ; ",
  "11507": "if ( async ) { ",
  "11508": "command . put ( \"async\" , 1 ) ; ",
  "11509": "return getDB ( ADMIN_DATABASE_NAME ) . command ( command ) ; ",
  "11510": "public CommandResult fsyncAndLock ( ) { ",
  "11511": "command . put ( \"lock\" , 1 ) ; ",
  "11512": "public DBObject unlock ( ) { ",
  "11513": "return DBObjects . toDBObject ( createOperationExecutor ( ) . execute ( new FsyncUnlockOperation ( ) , readPreference , readConcern ) ) ; ",
  "11514": "public boolean isLocked ( ) { ",
  "11515": "return createOperationExecutor ( ) . execute ( new CurrentOpOperation ( ) , ReadPreference . primary ( ) , readConcern ) ",
  "11516": ". getBoolean ( \"fsyncLock\" , BsonBoolean . FALSE ) . getValue ( ) ; ",
  "11517": "public String getConnectPoint ( ) { ",
  "11518": "ServerAddress master = getAddress ( ) ; ",
  "11519": "return master != null ? String . format ( \"%s:%d\" , master . getHost ( ) , master . getPort ( ) ) : null ; ",
  "11520": "if ( transactionState == TransactionState . IN ) { ",
  "11521": "abortTransaction ( new SingleResultCallback < Void > ( ) { ",
  "11522": "ClientSessionImpl . super . close ( ) ; ",
  "11523": "} public BsonNumber asNumber ( ) { ",
  "11524": "if ( getBsonType ( ) != BsonType . INT32 && getBsonType ( ) != BsonType . INT64 && getBsonType ( ) != BsonType . DOUBLE ) { ",
  "11525": "getBsonType ( ) ) ) ; ",
  "11526": "return ( BsonNumber ) this ; ",
  "11527": "} public ConnectionId withServerValue ( final int serverValue ) { ",
  "11528": "return new ConnectionId ( serverId , localValue , serverValue ) ; ",
  "11529": "} public static < T > List < Class < ? > > getAncestry ( final Class < T > c ) { ",
  "11530": "ConcurrentMap < Class < ? > , List < Class < ? > > > cache = getClassAncestryCache ( ) ; ",
  "11531": "List < Class < ? > > cachedResult = cache . get ( c ) ; ",
  "11532": "return cachedResult ; ",
  "11533": "cache . putIfAbsent ( c , computeAncestry ( c ) ) ; ",
  "11534": "} private static List < Class < ? > > computeAncestry ( final Class < ? > c ) { ",
  "11535": "List < Class < ? > > result = new ArrayList < Class < ? > > ( ) ; ",
  "11536": "result . add ( Object . class ) ; ",
  "11537": "computeAncestry ( c , result ) ; ",
  "11538": "Collections . reverse ( result ) ; ",
  "11539": "return unmodifiableList ( new ArrayList < Class < ? > > ( result ) ) ; ",
  "11540": "} @ SuppressWarnings ( { \"unchecked\" , \"rawtypes\" , \"deprecation\" } ) ",
  "11541": "public String toJson ( ) { ",
  "11542": "StringWriter stringWriter = new StringWriter ( ) ; ",
  "11543": "JsonWriter writer = new JsonWriter ( stringWriter , new JsonWriterSettings ( ) ) ; ",
  "11544": "Codec codec = getRegistry ( ) . get ( getClass ( ) ) ; ",
  "11545": "codec . encode ( writer , this , EncoderContext . builder ( ) . build ( ) ) ; ",
  "11546": "return stringWriter . toString ( ) ; ",
  "11547": "public MapReduceBatchCursor < T > execute ( final ReadBinding binding ) { ",
  "11548": "return executeCommand ( binding , namespace . getDatabaseName ( ) , getCommandCreator ( binding . getSessionContext ( ) ) , ",
  "11549": "CommandResultDocumentCodec . create ( decoder , \"results\" ) , transformer ( ) , false ) ; ",
  "11550": "public Long getExpireAfter ( final TimeUnit timeUnit ) { ",
  "11551": "if ( expireAfterSeconds == null ) { ",
  "11552": "return timeUnit . convert ( expireAfterSeconds , TimeUnit . SECONDS ) ; ",
  "11553": "} public IndexOptions expireAfter ( @ Nullable final Long expireAfter , final TimeUnit timeUnit ) { ",
  "11554": "if ( expireAfter == null ) { ",
  "11555": "this . expireAfterSeconds = null ; ",
  "11556": "this . expireAfterSeconds = TimeUnit . SECONDS . convert ( expireAfter , timeUnit ) ; ",
  "11557": "} public DBObject toDBObject ( ) { ",
  "11558": "DBObject args = new BasicDBObject ( \"ns\" , collectionName ) . append ( \"cond\" , condition ) ",
  "11559": ". append ( \"$reduce\" , reduce ) ",
  "11560": ". append ( \"initial\" , initial ) ; ",
  "11561": "if ( keys != null ) { ",
  "11562": "args . put ( \"key\" , keys ) ; ",
  "11563": "if ( keyf != null ) { ",
  "11564": "args . put ( \"$keyf\" , keyf ) ; ",
  "11565": "if ( finalize != null ) { ",
  "11566": "args . put ( \"finalize\" , finalize ) ; ",
  "11567": "return new BasicDBObject ( \"group\" , args ) ; ",
  "11568": "} public Integer getLogicalSessionTimeoutMinutes ( ) { ",
  "11569": "Integer retVal = null ; ",
  "11570": "for ( ServerDescription cur : getServersByPredicate ( new Predicate ( ) { ",
  "11571": "public boolean apply ( final ServerDescription serverDescription ) { ",
  "11572": "return serverDescription . isPrimary ( ) || serverDescription . isSecondary ( ) ; ",
  "11573": "if ( cur . getLogicalSessionTimeoutMinutes ( ) == null ) { ",
  "11574": "retVal = cur . getLogicalSessionTimeoutMinutes ( ) ; ",
  "11575": "retVal = Math . min ( retVal , cur . getLogicalSessionTimeoutMinutes ( ) ) ; ",
  "11576": "public Set < ServerDescription > getAll ( ) { ",
  "11577": "Set < ServerDescription > serverDescriptionSet = new TreeSet < ServerDescription > ( new Comparator < ServerDescription > ( ) { ",
  "11578": "public int compare ( final ServerDescription o1 , final ServerDescription o2 ) { ",
  "11579": "int val = o1 . getAddress ( ) . getHost ( ) . compareTo ( o2 . getAddress ( ) . getHost ( ) ) ; ",
  "11580": "if ( val != 0 ) { ",
  "11581": "return integerCompare ( o1 . getAddress ( ) . getPort ( ) , o2 . getAddress ( ) . getPort ( ) ) ; ",
  "11582": "private int integerCompare ( final int p1 , final int p2 ) { ",
  "11583": "return ( p1 < p2 ) ? - 1 : ( ( p1 == p2 ) ? 0 : 1 ) ; ",
  "11584": "serverDescriptionSet . addAll ( serverDescriptions ) ; ",
  "11585": "return Collections . unmodifiableSet ( serverDescriptionSet ) ; ",
  "11586": "public ServerDescription getByServerAddress ( final ServerAddress serverAddress ) { ",
  "11587": "for ( final ServerDescription cur : serverDescriptions ) { ",
  "11588": "if ( cur . isOk ( ) && cur . getAddress ( ) . equals ( serverAddress ) ) { ",
  "11589": "return cur ; ",
  "11590": "public List < ServerDescription > getPrimaries ( ) { ",
  "11591": "return getServersByPredicate ( new Predicate ( ) { ",
  "11592": "return serverDescription . isPrimary ( ) ; ",
  "11593": "public List < ServerDescription > getSecondaries ( ) { ",
  "11594": "return serverDescription . isSecondary ( ) ; ",
  "11595": "public List < ServerDescription > getSecondaries ( final TagSet tagSet ) { ",
  "11596": "return serverDescription . isSecondary ( ) && serverDescription . hasTags ( tagSet ) ; ",
  "11597": "public List < ServerDescription > getAny ( ) { ",
  "11598": "return serverDescription . isOk ( ) ; ",
  "11599": "public List < ServerDescription > getAnyPrimaryOrSecondary ( ) { ",
  "11600": "public List < ServerDescription > getAnyPrimaryOrSecondary ( final TagSet tagSet ) { ",
  "11601": "return ( serverDescription . isPrimary ( ) || serverDescription . isSecondary ( ) ) && serverDescription . hasTags ( tagSet ) ; ",
  "11602": "StringBuilder serverDescriptions = new StringBuilder ( ) ; ",
  "11603": "for ( final ServerDescription cur : this . serverDescriptions ) { ",
  "11604": "serverDescriptions . append ( delimiter ) . append ( cur . getShortDescription ( ) ) ; ",
  "11605": "if ( srvResolutionException == null ) { ",
  "11606": "} public static MongoCredential createCredential ( final String userName , final String database , final char [ ] password ) { ",
  "11607": "return new MongoCredential ( null , userName , database , password ) ; ",
  "11608": "} public static MongoCredential createScramSha1Credential ( final String userName , final String source , final char [ ] password ) { ",
  "11609": "return new MongoCredential ( SCRAM_SHA_1 , userName , source , password ) ; ",
  "11610": "} public static MongoCredential createScramSha256Credential ( final String userName , final String source , final char [ ] password ) { ",
  "11611": "return new MongoCredential ( SCRAM_SHA_256 , userName , source , password ) ; ",
  "11612": "public static MongoCredential createMongoCRCredential ( final String userName , final String database , final char [ ] password ) { ",
  "11613": "return new MongoCredential ( MONGODB_CR , userName , database , password ) ; ",
  "11614": "} public static MongoCredential createPlainCredential ( final String userName , final String source , final char [ ] password ) { ",
  "11615": "return new MongoCredential ( PLAIN , userName , source , password ) ; ",
  "11616": "} public < T > MongoCredential withMechanismProperty ( final String key , final T value ) { ",
  "11617": "return new MongoCredential ( this , key , value ) ; ",
  "11618": "} public MongoCredential withMechanism ( final AuthenticationMechanism mechanism ) { ",
  "11619": "if ( this . mechanism != null ) { ",
  "11620": "return new MongoCredential ( mechanism , userName , source , password , mechanismProperties ) ; ",
  "11621": "public < T > T getMechanismProperty ( final String key , @ Nullable final T defaultValue ) { ",
  "11622": "T value = ( T ) mechanismProperties . get ( key . toLowerCase ( ) ) ; ",
  "11623": "return ( value == null ) ? defaultValue : value ; ",
  "11624": "ByteArrayOutputStream bout = new ByteArrayOutputStream ( size ( ) ) ; ",
  "11625": "pipe ( bout ) ; ",
  "11626": "} public static BsonArray parse ( final String json ) { ",
  "11627": "return new BsonArrayCodec ( ) . decode ( new JsonReader ( json ) , DecoderContext . builder ( ) . build ( ) ) ; ",
  "11628": "void addObjectSerializer ( final Class c , final ObjectSerializer serializer ) { ",
  "11629": "_serializers . put ( c , serializer ) ; ",
  "11630": "public Cluster create ( final ClusterSettings settings , final ServerSettings serverSettings , ",
  "11631": "final ConnectionPoolSettings connectionPoolSettings , final StreamFactory streamFactory , ",
  "11632": "final StreamFactory heartbeatStreamFactory , ",
  "11633": "final List < MongoCredential > credentialList , ",
  "11634": "final ClusterListener clusterListener , ",
  "11635": "final ConnectionPoolListener connectionPoolListener , ",
  "11636": "final com . mongodb . event . ConnectionListener connectionListener , ",
  "11637": "final CommandListener commandListener ) { ",
  "11638": "return createCluster ( getClusterSettings ( settings , clusterListener ) , serverSettings , ",
  "11639": "getConnectionPoolSettings ( connectionPoolSettings , connectionPoolListener ) , streamFactory , heartbeatStreamFactory , ",
  "11640": "credentialList , commandListener , null , null , Collections . < MongoCompressor > emptyList ( ) ) ; ",
  "11641": "public Cluster createCluster ( final ClusterSettings clusterSettings , final ServerSettings serverSettings , ",
  "11642": "final StreamFactory heartbeatStreamFactory , final List < MongoCredential > credentialList , ",
  "11643": "final CommandListener commandListener , final String applicationName , ",
  "11644": "final MongoDriverInformation mongoDriverInformation ) { ",
  "11645": "return createCluster ( clusterSettings , serverSettings , connectionPoolSettings , streamFactory , heartbeatStreamFactory , credentialList , ",
  "11646": "commandListener , applicationName , mongoDriverInformation , Collections . < MongoCompressor > emptyList ( ) ) ; ",
  "11647": "} public Cluster createCluster ( final ClusterSettings clusterSettings , final ServerSettings serverSettings , ",
  "11648": "final MongoDriverInformation mongoDriverInformation , ",
  "11649": "final List < MongoCompressor > compressorList ) { ",
  "11650": "ClusterId clusterId = new ClusterId ( clusterSettings . getDescription ( ) ) ; ",
  "11651": "ClusterableServerFactory serverFactory = new DefaultClusterableServerFactory ( clusterId , clusterSettings , serverSettings , ",
  "11652": "connectionPoolSettings , streamFactory , heartbeatStreamFactory , credentialList , commandListener , applicationName , ",
  "11653": "mongoDriverInformation != null ? mongoDriverInformation : MongoDriverInformation . builder ( ) . build ( ) , compressorList ) ; ",
  "11654": "DnsSrvRecordMonitorFactory dnsSrvRecordMonitorFactory = new DefaultDnsSrvRecordMonitorFactory ( clusterId , serverSettings ) ; ",
  "11655": "if ( clusterSettings . getMode ( ) == ClusterConnectionMode . SINGLE ) { ",
  "11656": "return new SingleServerCluster ( clusterId , clusterSettings , serverFactory ) ; ",
  "11657": "} else if ( clusterSettings . getMode ( ) == ClusterConnectionMode . MULTIPLE ) { ",
  "11658": "if ( clusterSettings . getSrvHost ( ) == null ) { ",
  "11659": "return new MultiServerCluster ( clusterId , clusterSettings , serverFactory ) ; ",
  "11660": "return new DnsMultiServerCluster ( clusterId , clusterSettings , serverFactory , dnsSrvRecordMonitorFactory ) ; ",
  "11661": "} public UpdateRequest multi ( final boolean isMulti ) { ",
  "11662": "if ( isMulti && updateType == Type . REPLACE ) { ",
  "11663": "this . isMulti = isMulti ; ",
  "11664": "} public void encode ( final BsonOutput bsonOutput , final SessionContext sessionContext ) { ",
  "11665": "notNull ( \"sessionContext\" , sessionContext ) ; ",
  "11666": "int messageStartPosition = bsonOutput . getPosition ( ) ; ",
  "11667": "writeMessagePrologue ( bsonOutput ) ; ",
  "11668": "EncodingMetadata encodingMetadata = encodeMessageBodyWithMetadata ( bsonOutput , sessionContext ) ; ",
  "11669": "backpatchMessageLength ( messageStartPosition , bsonOutput ) ; ",
  "11670": "this . encodingMetadata = encodingMetadata ; ",
  "11671": "} protected void writeMessagePrologue ( final BsonOutput bsonOutput ) { ",
  "11672": "bsonOutput . writeInt32 ( 0 ) ; ",
  "11673": "bsonOutput . writeInt32 ( id ) ; ",
  "11674": "bsonOutput . writeInt32 ( opCode . getValue ( ) ) ; ",
  "11675": "} protected void addDocument ( final BsonDocument document , final BsonOutput bsonOutput , ",
  "11676": "final FieldNameValidator validator ) { ",
  "11677": "addDocument ( document , getCodec ( document ) , EncoderContext . builder ( ) . build ( ) , bsonOutput , validator , ",
  "11678": "settings . getMaxDocumentSize ( ) + DOCUMENT_HEADROOM , null ) ; ",
  "11679": "} protected void addCollectibleDocument ( final BsonDocument document , final BsonOutput bsonOutput , final FieldNameValidator validator ) { ",
  "11680": "addDocument ( document , getCodec ( document ) , EncoderContext . builder ( ) . isEncodingCollectibleDocument ( true ) . build ( ) , bsonOutput , ",
  "11681": "validator , settings . getMaxDocumentSize ( ) , null ) ; ",
  "11682": "} protected void backpatchMessageLength ( final int startPosition , final BsonOutput bsonOutput ) { ",
  "11683": "int messageLength = bsonOutput . getPosition ( ) - startPosition ; ",
  "11684": "bsonOutput . writeInt32 ( bsonOutput . getPosition ( ) - messageLength , messageLength ) ; ",
  "11685": "} static BsonDocument executeCommand ( final ReadBinding binding , final String database , final CommandCreator commandCreator , ",
  "11686": "final boolean retryReads ) { ",
  "11687": "return executeCommand ( binding , database , commandCreator , new BsonDocumentCodec ( ) , retryReads ) ; ",
  "11688": "} static BsonDocument executeCommand ( final WriteBinding binding , final String database , final BsonDocument command ) { ",
  "11689": "return executeCommand ( binding , database , command , new IdentityWriteTransformer < BsonDocument > ( ) ) ; ",
  "11690": "} private static < T > T executeCommand ( final String database , final BsonDocument command , ",
  "11691": "final FieldNameValidator fieldNameValidator , final Decoder < T > decoder , ",
  "11692": "final ConnectionSource source , final Connection connection , ",
  "11693": "return executeCommand ( database , command , fieldNameValidator , decoder , source , connection , ",
  "11694": "readPreference , new IdentityReadTransformer < T > ( ) , source . getSessionContext ( ) ) ; ",
  "11695": "} private static < D , T > T executeCommand ( final String database , final BsonDocument command , ",
  "11696": "final Decoder < D > decoder , final ConnectionSource source , final Connection connection , ",
  "11697": "final ReadPreference readPreference , ",
  "11698": "final CommandReadTransformer < D , T > transformer , final SessionContext sessionContext ) { ",
  "11699": "return executeCommand ( database , command , new NoOpFieldNameValidator ( ) , decoder , source , connection , ",
  "11700": "readPreference , transformer , sessionContext ) ; ",
  "11701": "} private static < T > T executeWriteCommand ( final String database , final BsonDocument command , ",
  "11702": "final Decoder < T > decoder , final Connection connection , ",
  "11703": "final ReadPreference readPreference , final SessionContext sessionContext ) { ",
  "11704": "return executeWriteCommand ( database , command , new NoOpFieldNameValidator ( ) , decoder , connection , ",
  "11705": "readPreference , new IdentityWriteTransformer < T > ( ) , sessionContext ) ; ",
  "11706": "} static void executeCommandAsync ( final AsyncReadBinding binding , ",
  "11707": "final String database , ",
  "11708": "final CommandCreator commandCreator , ",
  "11709": "final boolean retryReads , ",
  "11710": "final SingleResultCallback < BsonDocument > callback ) { ",
  "11711": "executeCommandAsync ( binding , database , commandCreator , new BsonDocumentCodec ( ) , retryReads , callback ) ; ",
  "11712": "} static void executeCommandAsync ( final AsyncWriteBinding binding , ",
  "11713": "final BsonDocument command , ",
  "11714": "executeCommandAsync ( binding , database , command , new BsonDocumentCodec ( ) , callback ) ; ",
  "11715": "} private static < D , T > void executeCommandAsync ( final String database , final BsonDocument command , ",
  "11716": "final Decoder < D > decoder , final AsyncConnection connection , ",
  "11717": "final CommandWriteTransformerAsync < D , T > transformer , ",
  "11718": "final SessionContext sessionContext , ",
  "11719": "final SingleResultCallback < T > callback ) { ",
  "11720": "connection . commandAsync ( database , command , new NoOpFieldNameValidator ( ) , readPreference , decoder , sessionContext , ",
  "11721": "new SingleResultCallback < D > ( ) { ",
  "11722": "public void onResult ( final D result , final Throwable t ) { ",
  "11723": "T transformedResult = transformer . apply ( result , connection ) ; ",
  "11724": "callback . onResult ( transformedResult , null ) ; ",
  "11725": "callback . onResult ( null , e ) ; ",
  "11726": "} static < T , R > R executeRetryableCommand ( final WriteBinding binding , final String database , final ReadPreference readPreference , ",
  "11727": "final FieldNameValidator fieldNameValidator , final Decoder < T > commandResultDecoder , ",
  "11728": "final CommandCreator commandCreator , final CommandWriteTransformer < T , R > transformer ) { ",
  "11729": "return executeRetryableCommand ( binding , database , readPreference , fieldNameValidator , commandResultDecoder , commandCreator , ",
  "11730": "transformer , noOpRetryCommandModifier ( ) ) ; ",
  "11731": "} public void save ( final long chunkSize ) { ",
  "11732": "if ( outputStream != null ) { ",
  "11733": "if ( ! savedChunks ) { ",
  "11734": "saveChunks ( chunkSize ) ; ",
  "11735": "super . save ( ) ; ",
  "11736": "} public int saveChunks ( final long chunkSize ) throws IOException { ",
  "11737": "if ( savedChunks ) { ",
  "11738": "if ( chunkSize <= 0 ) { ",
  "11739": "if ( this . chunkSize != chunkSize ) { ",
  "11740": "this . chunkSize = chunkSize ; ",
  "11741": "buffer = new byte [ ( int ) this . chunkSize ] ; ",
  "11742": "while ( bytesRead >= 0 ) { ",
  "11743": "currentBufferPosition = 0 ; ",
  "11744": "bytesRead = _readStream2Buffer ( ) ; ",
  "11745": "dumpBuffer ( true ) ; ",
  "11746": "finishData ( ) ; ",
  "11747": "return currentChunkNumber ; ",
  "11748": "} private void dumpBuffer ( final boolean writePartial ) { ",
  "11749": "if ( ( currentBufferPosition < chunkSize ) && ! writePartial ) { ",
  "11750": "if ( currentBufferPosition == 0 ) { ",
  "11751": "byte [ ] writeBuffer = buffer ; ",
  "11752": "if ( currentBufferPosition != chunkSize ) { ",
  "11753": "writeBuffer = new byte [ currentBufferPosition ] ; ",
  "11754": "System . arraycopy ( buffer , 0 , writeBuffer , 0 , currentBufferPosition ) ; ",
  "11755": "DBObject chunk = createChunk ( id , currentChunkNumber , writeBuffer ) ; ",
  "11756": "fs . getChunksCollection ( ) . save ( chunk ) ; ",
  "11757": "currentChunkNumber ++ ; ",
  "11758": "totalBytes += writeBuffer . length ; ",
  "11759": "messageDigester . update ( writeBuffer ) ; ",
  "11760": "} protected DBObject createChunk ( final Object id , final int currentChunkNumber , final byte [ ] writeBuffer ) { ",
  "11761": "return new BasicDBObject ( \"files_id\" , id ) ",
  "11762": ". append ( \"n\" , currentChunkNumber ) ",
  "11763": ". append ( \"data\" , writeBuffer ) ; ",
  "11764": "} private int _readStream2Buffer ( ) throws IOException { ",
  "11765": "while ( currentBufferPosition < chunkSize && bytesRead >= 0 ) { ",
  "11766": "bytesRead = inputStream . read ( buffer , currentBufferPosition , ( int ) chunkSize - currentBufferPosition ) ; ",
  "11767": "if ( bytesRead > 0 ) { ",
  "11768": "currentBufferPosition += bytesRead ; ",
  "11769": "} else if ( bytesRead == 0 ) { ",
  "11770": "return bytesRead ; ",
  "11771": "} private void finishData ( ) { ",
  "11772": "md5 = Util . toHex ( messageDigester . digest ( ) ) ; ",
  "11773": "messageDigester = null ; ",
  "11774": "length = totalBytes ; ",
  "11775": "savedChunks = true ; ",
  "11776": "if ( inputStream != null && closeStreamOnPersist ) { ",
  "11777": "} public DBCursor copy ( ) { ",
  "11778": "return new DBCursor ( collection , filter , findOptions , executor , decoderFactory , decoder , retryReads ) ; ",
  "11779": "if ( closed ) { ",
  "11780": "FindOperation < DBObject > operation = getQueryOperation ( decoder ) ; ",
  "11781": "if ( operation . getCursorType ( ) == CursorType . Tailable ) { ",
  "11782": "operation . cursorType ( CursorType . TailableAwait ) ; ",
  "11783": "initializeCursor ( operation ) ; ",
  "11784": "boolean hasNext = cursor . hasNext ( ) ; ",
  "11785": "setServerCursorOnFinalizer ( cursor . getServerCursor ( ) ) ; ",
  "11786": "return hasNext ; ",
  "11787": "public DBObject tryNext ( ) { ",
  "11788": "if ( ! operation . getCursorType ( ) . isTailable ( ) ) { ",
  "11789": "DBObject next = cursor . tryNext ( ) ; ",
  "11790": "return currentObject ( next ) ; ",
  "11791": "public DBCursor setOptions ( final int options ) { ",
  "11792": "if ( ( options & Bytes . QUERYOPTION_EXHAUST ) != 0 ) { ",
  "11793": "this . options = options ; ",
  "11794": "public DBCursor addSpecial ( @ Nullable final String name , @ Nullable final Object value ) { ",
  "11795": "if ( name == null || value == null ) { ",
  "11796": "if ( \"$comment\" . equals ( name ) ) { ",
  "11797": "comment ( value . toString ( ) ) ; ",
  "11798": "} else if ( \"$explain\" . equals ( name ) ) { ",
  "11799": "findOptions . getModifiers ( ) . put ( \"$explain\" , true ) ; ",
  "11800": "} else if ( \"$hint\" . equals ( name ) ) { ",
  "11801": "hint ( ( String ) value ) ; ",
  "11802": "hint ( ( DBObject ) value ) ; ",
  "11803": "} else if ( \"$maxScan\" . equals ( name ) ) { ",
  "11804": "maxScan ( ( ( Number ) value ) . intValue ( ) ) ; ",
  "11805": "} else if ( \"$maxTimeMS\" . equals ( name ) ) { ",
  "11806": "maxTime ( ( ( Number ) value ) . longValue ( ) , MILLISECONDS ) ; ",
  "11807": "} else if ( \"$max\" . equals ( name ) ) { ",
  "11808": "max ( ( DBObject ) value ) ; ",
  "11809": "} else if ( \"$min\" . equals ( name ) ) { ",
  "11810": "min ( ( DBObject ) value ) ; ",
  "11811": "} else if ( \"$orderby\" . equals ( name ) ) { ",
  "11812": "sort ( ( DBObject ) value ) ; ",
  "11813": "} else if ( \"$returnKey\" . equals ( name ) ) { ",
  "11814": "returnKey ( ) ; ",
  "11815": "} else if ( \"$showDiskLoc\" . equals ( name ) ) { ",
  "11816": "showDiskLoc ( ) ; ",
  "11817": "} else if ( \"$snapshot\" . equals ( name ) ) { ",
  "11818": "snapshot ( ) ; ",
  "11819": "} else if ( \"$natural\" . equals ( name ) ) { ",
  "11820": "sort ( new BasicDBObject ( \"$natural\" , ( ( Number ) value ) . intValue ( ) ) ) ; ",
  "11821": "} public DBObject explain ( ) { ",
  "11822": "return toDBObject ( executor . execute ( getQueryOperation ( collection . getObjectCodec ( ) ) ",
  "11823": ". asExplainableOperation ( ExplainVerbosity . QUERY_PLANNER ) , ",
  "11824": "getReadPreference ( ) , getReadConcern ( ) ) ) ; ",
  "11825": "} public List < DBObject > toArray ( final int max ) { ",
  "11826": "checkIteratorOrArray ( IteratorOrArray . ARRAY ) ; ",
  "11827": "fillArray ( max - 1 ) ; ",
  "11828": "public DBObject one ( ) { ",
  "11829": "DBCursor findOneCursor = copy ( ) . limit ( - 1 ) ; ",
  "11830": "return findOneCursor . hasNext ( ) ? findOneCursor . next ( ) : null ; ",
  "11831": "findOneCursor . close ( ) ; ",
  "11832": "DBCollectionCountOptions countOptions = getDbCollectionCountOptions ( ) . skip ( findOptions . getSkip ( ) ) . limit ( findOptions . getLimit ( ) ) ; ",
  "11833": "return ( int ) collection . getCount ( getQuery ( ) , countOptions ) ; ",
  "11834": "} public ReadPreference getReadPreference ( ) { ",
  "11835": "ReadPreference readPreference = findOptions . getReadPreference ( ) ; ",
  "11836": "if ( readPreference != null ) { ",
  "11837": "return readPreference ; ",
  "11838": "return collection . getReadPreference ( ) ; ",
  "11839": "} ReadConcern getReadConcern ( ) { ",
  "11840": "ReadConcern readConcern = findOptions . getReadConcern ( ) ; ",
  "11841": "if ( readConcern != null ) { ",
  "11842": "return readConcern ; ",
  "11843": "return collection . getReadConcern ( ) ; ",
  "11844": "} public DBCursor setDecoderFactory ( final DBDecoderFactory factory ) { ",
  "11845": "this . decoder = new DBDecoderAdapter ( factory . create ( ) , collection , getCollection ( ) . getBufferPool ( ) ) ; ",
  "11846": "} protected void _put ( final String name , final Object value ) { ",
  "11847": "cur ( ) . put ( name , ! BSON . hasDecodeHooks ( ) ? value : BSON . applyDecodingHooks ( value ) ) ; ",
  "11848": "} protected void putDBRef ( final String name , final DBRef ref ) { ",
  "11849": "BasicDBObject dbRefDocument = new BasicDBObject ( \"$ref\" , ref . getCollectionName ( ) ) . append ( \"$id\" , ref . getId ( ) ) ; ",
  "11850": "if ( ref . getDatabaseName ( ) != null ) { ",
  "11851": "dbRefDocument . put ( \"$db\" , ref . getDatabaseName ( ) ) ; ",
  "11852": "putObject ( name , dbRefDocument ) ; ",
  "11853": "CodecRegistry pojoCodecRegistry = fromRegistries ( MongoClientSettings . getDefaultCodecRegistry ( ) , ",
  "11854": "MongoCollection < Person > collection = database . getCollection ( \"people\" , Person . class ) ; ",
  "11855": "collection . insertOne ( ada ) ; ",
  "11856": "Person somebody = collection . find ( ) . first ( ) ; ",
  "11857": "System . out . println ( somebody ) ; ",
  "11858": "collection . insertMany ( people ) ; ",
  "11859": "collection . find ( ) . forEach ( printBlock ) ; ",
  "11860": "somebody = collection . find ( eq ( \"address.city\" , \"Wimborne\" ) ) . first ( ) ; ",
  "11861": "collection . find ( gt ( \"age\" , 30 ) ) . forEach ( printBlock ) ; ",
  "11862": "UpdateResult updateResult = collection . updateMany ( not ( eq ( \"zip\" , null ) ) , set ( \"zip\" , null ) ) ; ",
  "11863": "System . out . println ( updateResult . getModifiedCount ( ) ) ; ",
  "11864": "collection . deleteOne ( eq ( \"address.city\" , \"Wimborne\" ) ) ; ",
  "11865": "DeleteResult deleteResult = collection . deleteMany ( eq ( \"address.city\" , \"London\" ) ) ; ",
  "11866": "System . out . println ( deleteResult . getDeletedCount ( ) ) ; ",
  "11867": "} public static BulkWriteResult acknowledged ( final WriteRequest . Type type , final int count , final List < BulkWriteUpsert > upserts ) { ",
  "11868": "return acknowledged ( type , count , 0 , upserts ) ; ",
  "11869": "} public static BulkWriteResult acknowledged ( final WriteRequest . Type type , final int count , final Integer modifiedCount , ",
  "11870": "final List < BulkWriteUpsert > upserts ) { ",
  "11871": "return acknowledged ( type == WriteRequest . Type . INSERT ? count : 0 , ",
  "11872": "( type == WriteRequest . Type . UPDATE || type == WriteRequest . Type . REPLACE ) ? count : 0 , ",
  "11873": "type == WriteRequest . Type . DELETE ? count : 0 , ",
  "11874": "modifiedCount , upserts ) ; ",
  "11875": "} public static BulkWriteResult acknowledged ( final int insertedCount , final int matchedCount , final int removedCount , ",
  "11876": "final Integer modifiedCount , final List < BulkWriteUpsert > upserts ) { ",
  "11877": "return new BulkWriteResult ( ) { ",
  "11878": "public boolean wasAcknowledged ( ) { ",
  "11879": "public int getInsertedCount ( ) { ",
  "11880": "return insertedCount ; ",
  "11881": "public int getMatchedCount ( ) { ",
  "11882": "return matchedCount ; ",
  "11883": "public int getDeletedCount ( ) { ",
  "11884": "return removedCount ; ",
  "11885": "public boolean isModifiedCountAvailable ( ) { ",
  "11886": "public int getModifiedCount ( ) { ",
  "11887": "return modifiedCount ; ",
  "11888": "public List < BulkWriteUpsert > getUpserts ( ) { ",
  "11889": "return upserts ; ",
  "11890": "public boolean equals ( final Object o ) { ",
  "11891": "if ( o == null || getClass ( ) != o . getClass ( ) ) { ",
  "11892": "BulkWriteResult that = ( BulkWriteResult ) o ; ",
  "11893": "if ( ! that . wasAcknowledged ( ) ) { ",
  "11894": "if ( insertedCount != that . getInsertedCount ( ) ) { ",
  "11895": "if ( modifiedCount != null && ! modifiedCount . equals ( that . getModifiedCount ( ) ) ) { ",
  "11896": "if ( removedCount != that . getDeletedCount ( ) ) { ",
  "11897": "if ( matchedCount != that . getMatchedCount ( ) ) { ",
  "11898": "if ( ! upserts . equals ( that . getUpserts ( ) ) ) { ",
  "11899": "int result = upserts . hashCode ( ) ; ",
  "11900": "result = 31 * result + insertedCount ; ",
  "11901": "result = 31 * result + matchedCount ; ",
  "11902": "result = 31 * result + removedCount ; ",
  "11903": "result = 31 * result + ( modifiedCount != null ? modifiedCount . hashCode ( ) : 0 ) ; ",
  "11904": "return \"AcknowledgedBulkWriteResult{\" ",
  "11905": "+ \"insertedCount=\" + insertedCount ",
  "11906": "} public static BulkWriteResult unacknowledged ( ) { ",
  "11907": "throw getUnacknowledgedWriteException ( ) ; ",
  "11908": "return ! that . wasAcknowledged ( ) ; ",
  "11909": "return \"UnacknowledgedBulkWriteResult{}\" ; ",
  "11910": "private UnsupportedOperationException getUnacknowledgedWriteException ( ) { ",
  "11911": "} public AggregateOperation < T > maxAwaitTime ( final long maxAwaitTime , final TimeUnit timeUnit ) { ",
  "11912": "wrapped . maxAwaitTime ( maxAwaitTime , timeUnit ) ; ",
  "11913": "} public AggregateOperation < T > maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "11914": "wrapped . maxTime ( maxTime , timeUnit ) ; ",
  "11915": "} public BsonDocument getHint ( ) { ",
  "11916": "BsonValue hint = wrapped . getHint ( ) ; ",
  "11917": "if ( hint == null ) { ",
  "11918": "if ( ! hint . isDocument ( ) ) { ",
  "11919": "return hint . asDocument ( ) ; ",
  "11920": "return new AggregateExplainOperation ( getNamespace ( ) , getPipeline ( ) ) ",
  "11921": ". allowDiskUse ( getAllowDiskUse ( ) ) ",
  "11922": ". maxTime ( getMaxAwaitTime ( TimeUnit . MILLISECONDS ) , TimeUnit . MILLISECONDS ) ",
  "11923": ". hint ( wrapped . getHint ( ) ) ",
  "11924": ". retryReads ( getRetryReads ( ) ) ; ",
  "11925": "} public InetSocketAddress getSocketAddress ( ) { ",
  "11926": "return new InetSocketAddress ( InetAddress . getByName ( host ) , port ) ; ",
  "11927": "throw new MongoSocketException ( e . getMessage ( ) , this , e ) ; ",
  "11928": "} public List < InetSocketAddress > getSocketAddresses ( ) { ",
  "11929": "InetAddress [ ] inetAddresses = InetAddress . getAllByName ( host ) ; ",
  "11930": "List < InetSocketAddress > inetSocketAddressList = new ArrayList < InetSocketAddress > ( ) ; ",
  "11931": "for ( InetAddress inetAddress : inetAddresses ) { ",
  "11932": "inetSocketAddressList . add ( new InetSocketAddress ( inetAddress , port ) ) ; ",
  "11933": "return inetSocketAddressList ; ",
  "11934": "} public FindOneAndDeleteOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "11935": "} public static < TItem > Bson eq ( final String fieldName , @ Nullable final TItem value ) { ",
  "11936": "return new SimpleEncodingFilter < TItem > ( fieldName , value ) ; ",
  "11937": "} public static < TItem > Bson ne ( final String fieldName , @ Nullable final TItem value ) { ",
  "11938": "return new OperatorFilter < TItem > ( \"$ne\" , fieldName , value ) ; ",
  "11939": "} public static < TItem > Bson gt ( final String fieldName , final TItem value ) { ",
  "11940": "return new OperatorFilter < TItem > ( \"$gt\" , fieldName , value ) ; ",
  "11941": "} public static < TItem > Bson lt ( final String fieldName , final TItem value ) { ",
  "11942": "return new OperatorFilter < TItem > ( \"$lt\" , fieldName , value ) ; ",
  "11943": "} public static < TItem > Bson gte ( final String fieldName , final TItem value ) { ",
  "11944": "return new OperatorFilter < TItem > ( \"$gte\" , fieldName , value ) ; ",
  "11945": "} public static < TItem > Bson lte ( final String fieldName , final TItem value ) { ",
  "11946": "return new OperatorFilter < TItem > ( \"$lte\" , fieldName , value ) ; ",
  "11947": "} public static < TItem > Bson in ( final String fieldName , final TItem ... values ) { ",
  "11948": "return in ( fieldName , asList ( values ) ) ; ",
  "11949": "} public static < TItem > Bson in ( final String fieldName , final Iterable < TItem > values ) { ",
  "11950": "return new IterableOperatorFilter < TItem > ( fieldName , \"$in\" , values ) ; ",
  "11951": "} public static < TItem > Bson nin ( final String fieldName , final TItem ... values ) { ",
  "11952": "return nin ( fieldName , asList ( values ) ) ; ",
  "11953": "} public static < TItem > Bson nin ( final String fieldName , final Iterable < TItem > values ) { ",
  "11954": "return new IterableOperatorFilter < TItem > ( fieldName , \"$nin\" , values ) ; ",
  "11955": "} public static Bson or ( final Iterable < Bson > filters ) { ",
  "11956": "return new OrNorFilter ( OrNorFilter . Operator . OR , filters ) ; ",
  "11957": "} public static Bson nor ( final Iterable < Bson > filters ) { ",
  "11958": "return new OrNorFilter ( OrNorFilter . Operator . NOR , filters ) ; ",
  "11959": "} public static Bson exists ( final String fieldName , final boolean exists ) { ",
  "11960": "return new OperatorFilter < BsonBoolean > ( \"$exists\" , fieldName , BsonBoolean . valueOf ( exists ) ) ; ",
  "11961": "} public static Bson type ( final String fieldName , final BsonType type ) { ",
  "11962": "return new OperatorFilter < BsonInt32 > ( \"$type\" , fieldName , new BsonInt32 ( type . getValue ( ) ) ) ; ",
  "11963": "} public static Bson type ( final String fieldName , final String type ) { ",
  "11964": "return new OperatorFilter < BsonString > ( \"$type\" , fieldName , new BsonString ( type ) ) ; ",
  "11965": "} public static Bson mod ( final String fieldName , final long divisor , final long remainder ) { ",
  "11966": "return new OperatorFilter < BsonArray > ( \"$mod\" , fieldName , new BsonArray ( asList ( new BsonInt64 ( divisor ) , new BsonInt64 ( remainder ) ) ) ) ; ",
  "11967": "} public static Bson regex ( final String fieldName , final String pattern ) { ",
  "11968": "return regex ( fieldName , pattern , null ) ; ",
  "11969": "} public static Bson regex ( final String fieldName , final String pattern , @ Nullable final String options ) { ",
  "11970": "notNull ( \"pattern\" , pattern ) ; ",
  "11971": "return new SimpleFilter ( fieldName , new BsonRegularExpression ( pattern , options ) ) ; ",
  "11972": "} public static Bson regex ( final String fieldName , final Pattern pattern ) { ",
  "11973": "return new SimpleEncodingFilter < Pattern > ( fieldName , pattern ) ; ",
  "11974": "public static Bson text ( final String search , final String language ) { ",
  "11975": "notNull ( \"search\" , search ) ; ",
  "11976": "return text ( search , new TextSearchOptions ( ) . language ( language ) ) ; ",
  "11977": "} public static Bson text ( final String search , final TextSearchOptions textSearchOptions ) { ",
  "11978": "notNull ( \"textSearchOptions\" , textSearchOptions ) ; ",
  "11979": "return new TextFilter ( search , textSearchOptions ) ; ",
  "11980": "} public static < TItem > Bson all ( final String fieldName , final TItem ... values ) { ",
  "11981": "return all ( fieldName , asList ( values ) ) ; ",
  "11982": "} public static < TItem > Bson all ( final String fieldName , final Iterable < TItem > values ) { ",
  "11983": "return new IterableOperatorFilter < TItem > ( fieldName , \"$all\" , values ) ; ",
  "11984": "} public static Bson elemMatch ( final String fieldName , final Bson filter ) { ",
  "11985": "public < TDocument > BsonDocument toBsonDocument ( final Class < TDocument > documentClass , final CodecRegistry codecRegistry ) { ",
  "11986": "return new BsonDocument ( fieldName , new BsonDocument ( \"$elemMatch\" , filter . toBsonDocument ( documentClass , codecRegistry ) ) ) ; ",
  "11987": "} public static Bson geoWithin ( final String fieldName , final Geometry geometry ) { ",
  "11988": "return new GeometryOperatorFilter < Geometry > ( \"$geoWithin\" , fieldName , geometry ) ; ",
  "11989": "} public static Bson geoWithin ( final String fieldName , final Bson geometry ) { ",
  "11990": "return new GeometryOperatorFilter < Bson > ( \"$geoWithin\" , fieldName , geometry ) ; ",
  "11991": "} public static Bson geoWithinBox ( final String fieldName , final double lowerLeftX , final double lowerLeftY , final double upperRightX , ",
  "11992": "final double upperRightY ) { ",
  "11993": "BsonDocument box = new BsonDocument ( \"$box\" , ",
  "11994": "new BsonArray ( asList ( new BsonArray ( asList ( new BsonDouble ( lowerLeftX ) , ",
  "11995": "new BsonDouble ( lowerLeftY ) ) ) , ",
  "11996": "new BsonArray ( asList ( new BsonDouble ( upperRightX ) , ",
  "11997": "new BsonDouble ( upperRightY ) ) ) ) ) ) ; ",
  "11998": "return new OperatorFilter < BsonDocument > ( \"$geoWithin\" , fieldName , box ) ; ",
  "11999": "} public static Bson geoWithinPolygon ( final String fieldName , final List < List < Double > > points ) { ",
  "12000": "BsonArray pointsArray = new BsonArray ( ) ; ",
  "12001": "for ( List < Double > point : points ) { ",
  "12002": "pointsArray . add ( new BsonArray ( asList ( new BsonDouble ( point . get ( 0 ) ) , new BsonDouble ( point . get ( 1 ) ) ) ) ) ; ",
  "12003": "BsonDocument polygon = new BsonDocument ( \"$polygon\" , pointsArray ) ; ",
  "12004": "return new OperatorFilter < BsonDocument > ( \"$geoWithin\" , fieldName , polygon ) ; ",
  "12005": "} public static Bson geoWithinCenter ( final String fieldName , final double x , final double y , final double radius ) { ",
  "12006": "BsonDocument center = new BsonDocument ( \"$center\" , ",
  "12007": "new BsonArray ( Arrays . < BsonValue > asList ( new BsonArray ( asList ( new BsonDouble ( x ) , ",
  "12008": "new BsonDouble ( y ) ) ) , ",
  "12009": "new BsonDouble ( radius ) ) ) ) ; ",
  "12010": "return new OperatorFilter < BsonDocument > ( \"$geoWithin\" , fieldName , center ) ; ",
  "12011": "} public static Bson geoWithinCenterSphere ( final String fieldName , final double x , final double y , final double radius ) { ",
  "12012": "BsonDocument centerSphere = new BsonDocument ( \"$centerSphere\" , ",
  "12013": "return new OperatorFilter < BsonDocument > ( \"$geoWithin\" , fieldName , centerSphere ) ; ",
  "12014": "} public static Bson geoIntersects ( final String fieldName , final Bson geometry ) { ",
  "12015": "return new GeometryOperatorFilter < Bson > ( \"$geoIntersects\" , fieldName , geometry ) ; ",
  "12016": "} public static Bson geoIntersects ( final String fieldName , final Geometry geometry ) { ",
  "12017": "return new GeometryOperatorFilter < Geometry > ( \"$geoIntersects\" , fieldName , geometry ) ; ",
  "12018": "} public static Bson near ( final String fieldName , final Point geometry , @ Nullable final Double maxDistance , ",
  "12019": "@ Nullable final Double minDistance ) { ",
  "12020": "return new GeometryOperatorFilter < Point > ( \"$near\" , fieldName , geometry , maxDistance , minDistance ) ; ",
  "12021": "} public static Bson near ( final String fieldName , final double x , final double y , @ Nullable final Double maxDistance , ",
  "12022": "return createNearFilterDocument ( fieldName , x , y , maxDistance , minDistance , \"$near\" ) ; ",
  "12023": "public SocketFactory getSocketFactory ( ) { ",
  "12024": "if ( socketFactory != null ) { ",
  "12025": "} else if ( getSslSettings ( ) . isEnabled ( ) ) { ",
  "12026": "return sslContext == null ? DEFAULT_SSL_SOCKET_FACTORY : sslContext . getSocketFactory ( ) ; ",
  "12027": "return DEFAULT_SOCKET_FACTORY ; ",
  "12028": "} public CountOperation maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12029": "if ( countStrategy . equals ( CountStrategy . COMMAND ) ) { ",
  "12030": "return createExplainableOperation ( explainVerbosity ) ; ",
  "12031": "return getAggregateOperation ( ) . asExplainableOperation ( explainVerbosity ) ; ",
  "12032": "} public AsyncReadOperation < BsonDocument > asExplainableOperationAsync ( final ExplainVerbosity explainVerbosity ) { ",
  "12033": "return getAggregateOperation ( ) . asExplainableOperationAsync ( explainVerbosity ) ; ",
  "12034": "return codecRegistry . get ( BsonValueCodecProvider . getClassForBsonType ( reader . getCurrentBsonType ( ) ) ) . decode ( reader , decoderContext ) ; ",
  "12035": "} public static void addEncodingHook ( final Class < ? > clazz , final Transformer transformer ) { ",
  "12036": "encodeHooks = true ; ",
  "12037": "List < Transformer > transformersForClass = encodingHooks . get ( clazz ) ; ",
  "12038": "if ( transformersForClass == null ) { ",
  "12039": "transformersForClass = new CopyOnWriteArrayList < Transformer > ( ) ; ",
  "12040": "encodingHooks . put ( clazz , transformersForClass ) ; ",
  "12041": "transformersForClass . add ( transformer ) ; ",
  "12042": "} public static void addDecodingHook ( final Class < ? > clazz , final Transformer transformer ) { ",
  "12043": "decodeHooks = true ; ",
  "12044": "List < Transformer > transformersForClass = decodingHooks . get ( clazz ) ; ",
  "12045": "decodingHooks . put ( clazz , transformersForClass ) ; ",
  "12046": "} public static Object applyEncodingHooks ( final Object objectToEncode ) { ",
  "12047": "Object transformedObject = objectToEncode ; ",
  "12048": "if ( ! hasEncodeHooks ( ) || objectToEncode == null || encodingHooks . size ( ) == 0 ) { ",
  "12049": "return transformedObject ; ",
  "12050": "List < Transformer > transformersForObject = encodingHooks . get ( objectToEncode . getClass ( ) ) ; ",
  "12051": "if ( transformersForObject != null ) { ",
  "12052": "for ( final Transformer transformer : transformersForObject ) { ",
  "12053": "transformedObject = transformer . transform ( objectToEncode ) ; ",
  "12054": "} public static Object applyDecodingHooks ( final Object objectToDecode ) { ",
  "12055": "Object transformedObject = objectToDecode ; ",
  "12056": "if ( ! hasDecodeHooks ( ) || objectToDecode == null || decodingHooks . size ( ) == 0 ) { ",
  "12057": "List < Transformer > transformersForObject = decodingHooks . get ( objectToDecode . getClass ( ) ) ; ",
  "12058": "transformedObject = transformer . transform ( objectToDecode ) ; ",
  "12059": "} public static int regexFlags ( final String s ) { ",
  "12060": "int flags = 0 ; ",
  "12061": "return flags ; ",
  "12062": "for ( final char f : s . toLowerCase ( ) . toCharArray ( ) ) { ",
  "12063": "flags |= regexFlag ( f ) ; ",
  "12064": "} public static int regexFlag ( final char c ) { ",
  "12065": "int flag = FLAG_LOOKUP [ c ] ; ",
  "12066": "if ( flag == 0 ) { ",
  "12067": "} public static String regexFlags ( final int flags ) { ",
  "12068": "int processedFlags = flags ; ",
  "12069": "for ( int i = 0 ; i < FLAG_LOOKUP . length ; i ++ ) { ",
  "12070": "if ( ( processedFlags & FLAG_LOOKUP [ i ] ) > 0 ) { ",
  "12071": "buf . append ( ( char ) i ) ; ",
  "12072": "processedFlags -= FLAG_LOOKUP [ i ] ; ",
  "12073": "if ( processedFlags > 0 ) { ",
  "12074": "} public static int toInt ( final Object number ) { ",
  "12075": "if ( number == null ) { ",
  "12076": "if ( number instanceof Number ) { ",
  "12077": "return ( ( Number ) number ) . intValue ( ) ; ",
  "12078": "if ( number instanceof Boolean ) { ",
  "12079": "return ( ( Boolean ) number ) ? 1 : 0 ; ",
  "12080": "} public IndexRequest expireAfter ( final Long expireAfter , final TimeUnit timeUnit ) { ",
  "12081": "} public IndexRequest textVersion ( final Integer textVersion ) { ",
  "12082": "if ( textVersion != null ) { ",
  "12083": "this . textVersion = textVersion ; ",
  "12084": "} public IndexRequest sphereVersion ( final Integer sphereVersion ) { ",
  "12085": "if ( sphereVersion != null ) { ",
  "12086": "this . sphereVersion = sphereVersion ; ",
  "12087": "} public DBCollectionFindOptions copy ( ) { ",
  "12088": "DBCollectionFindOptions copiedOptions = new DBCollectionFindOptions ( ) ; ",
  "12089": "copiedOptions . batchSize ( batchSize ) ; ",
  "12090": "copiedOptions . limit ( limit ) ; ",
  "12091": "copiedOptions . modifiers ( modifiers ) ; ",
  "12092": "copiedOptions . projection ( projection ) ; ",
  "12093": "copiedOptions . maxTime ( maxTimeMS , TimeUnit . MILLISECONDS ) ; ",
  "12094": "copiedOptions . maxAwaitTime ( maxAwaitTimeMS , TimeUnit . MILLISECONDS ) ; ",
  "12095": "copiedOptions . skip ( skip ) ; ",
  "12096": "copiedOptions . sort ( sort ) ; ",
  "12097": "copiedOptions . cursorType ( cursorType ) ; ",
  "12098": "copiedOptions . noCursorTimeout ( noCursorTimeout ) ; ",
  "12099": "copiedOptions . oplogReplay ( oplogReplay ) ; ",
  "12100": "copiedOptions . partial ( partial ) ; ",
  "12101": "copiedOptions . readPreference ( readPreference ) ; ",
  "12102": "copiedOptions . readConcern ( readConcern ) ; ",
  "12103": "copiedOptions . collation ( collation ) ; ",
  "12104": "copiedOptions . comment ( comment ) ; ",
  "12105": "copiedOptions . hint ( hint ) ; ",
  "12106": "copiedOptions . max ( max ) ; ",
  "12107": "copiedOptions . min ( min ) ; ",
  "12108": "copiedOptions . returnKey ( returnKey ) ; ",
  "12109": "copiedOptions . showRecordId ( showRecordId ) ; ",
  "12110": "return copiedOptions ; ",
  "12111": "} public DBCollectionFindOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12112": "return HexUtils . hexMD5 ( buf , offset , len ) ; ",
  "12113": "} public static < T > T isTrueArgument ( final String name , final T value , final boolean condition ) { ",
  "12114": "if ( ! condition ) { ",
  "12115": "public static < T > T convertToType ( final Class < T > clazz , final Object value , final String errorMessage ) { ",
  "12116": "if ( ! clazz . isAssignableFrom ( value . getClass ( ) ) ) { ",
  "12117": "throw new IllegalArgumentException ( errorMessage ) ; ",
  "12118": "} public static < TExpression > BsonField sum ( final String fieldName , final TExpression expression ) { ",
  "12119": "return accumulator ( \"$sum\" , fieldName , expression ) ; ",
  "12120": "} public static < TExpression > BsonField avg ( final String fieldName , final TExpression expression ) { ",
  "12121": "return accumulator ( \"$avg\" , fieldName , expression ) ; ",
  "12122": "} public static < TExpression > BsonField first ( final String fieldName , final TExpression expression ) { ",
  "12123": "return accumulator ( \"$first\" , fieldName , expression ) ; ",
  "12124": "} public static < TExpression > BsonField last ( final String fieldName , final TExpression expression ) { ",
  "12125": "return accumulator ( \"$last\" , fieldName , expression ) ; ",
  "12126": "} public static < TExpression > BsonField max ( final String fieldName , final TExpression expression ) { ",
  "12127": "return accumulator ( \"$max\" , fieldName , expression ) ; ",
  "12128": "} public static < TExpression > BsonField min ( final String fieldName , final TExpression expression ) { ",
  "12129": "return accumulator ( \"$min\" , fieldName , expression ) ; ",
  "12130": "} public static < TExpression > BsonField push ( final String fieldName , final TExpression expression ) { ",
  "12131": "return accumulator ( \"$push\" , fieldName , expression ) ; ",
  "12132": "} public static < TExpression > BsonField addToSet ( final String fieldName , final TExpression expression ) { ",
  "12133": "return accumulator ( \"$addToSet\" , fieldName , expression ) ; ",
  "12134": "} public static < TExpression > BsonField stdDevPop ( final String fieldName , final TExpression expression ) { ",
  "12135": "return accumulator ( \"$stdDevPop\" , fieldName , expression ) ; ",
  "12136": "} public static < TExpression > BsonField stdDevSamp ( final String fieldName , final TExpression expression ) { ",
  "12137": "return accumulator ( \"$stdDevSamp\" , fieldName , expression ) ; ",
  "12138": "public void encode ( final BsonWriter writer , final DBObject document , final EncoderContext encoderContext ) { ",
  "12139": "BasicOutputBuffer buffer = new BasicOutputBuffer ( ) ; ",
  "12140": "encoder . writeObject ( buffer , document ) ; ",
  "12141": "BsonBinaryReader reader = new BsonBinaryReader ( new ByteBufferBsonInput ( new ByteBufNIO ( wrap ( buffer . toByteArray ( ) ) ) ) ) ; ",
  "12142": "writer . pipe ( reader ) ; ",
  "12143": "buffer . close ( ) ; ",
  "12144": "public BulkWriteResult execute ( final WriteBinding binding ) { ",
  "12145": "return withReleasableConnection ( binding , new CallableWithConnectionAndSource < BulkWriteResult > ( ) { ",
  "12146": "public BulkWriteResult call ( final ConnectionSource connectionSource , final Connection connection ) { ",
  "12147": "validateWriteRequestsAndReleaseConnectionIfError ( connection ) ; ",
  "12148": "if ( getWriteConcern ( ) . isAcknowledged ( ) || serverIsAtLeastVersionThreeDotSix ( connection . getDescription ( ) ) ) { ",
  "12149": "BulkWriteBatch bulkWriteBatch = BulkWriteBatch . createBulkWriteBatch ( namespace , connectionSource . getServerDescription ( ) , ",
  "12150": "connection . getDescription ( ) , ordered , writeConcern , bypassDocumentValidation , retryWrites , writeRequests , ",
  "12151": "binding . getSessionContext ( ) ) ; ",
  "12152": "return executeBulkWriteBatch ( binding , connection , bulkWriteBatch ) ; ",
  "12153": "return executeLegacyBatches ( connection ) ; ",
  "12154": "setupDatabase ( ) ; ",
  "12155": "MongoClient client = MongoClients . create ( ) ; ",
  "12156": "ClientSession session1 = client . startSession ( ClientSessionOptions . builder ( ) . causallyConsistent ( true ) . build ( ) ) ; ",
  "12157": "Date currentDate = new Date ( ) ; ",
  "12158": "MongoCollection < Document > items = client . getDatabase ( \"test\" ) ",
  "12159": ". withReadConcern ( ReadConcern . MAJORITY ) ",
  "12160": ". withWriteConcern ( WriteConcern . MAJORITY . withWTimeout ( 1000 , TimeUnit . MILLISECONDS ) ) ",
  "12161": ". getCollection ( \"test\" ) ; ",
  "12162": "items . updateOne ( session1 , eq ( \"sku\" , \"111\" ) , set ( \"end\" , currentDate ) ) ; ",
  "12163": "Document document = new Document ( \"sku\" , \"nuts-111\" ) ",
  "12164": ". append ( \"name\" , \"Pecans\" ) ",
  "12165": ". append ( \"start\" , currentDate ) ; ",
  "12166": "items . insertOne ( session1 , document ) ; ",
  "12167": "ClientSession session2 = client . startSession ( ClientSessionOptions . builder ( ) . causallyConsistent ( true ) . build ( ) ) ; ",
  "12168": "session2 . advanceClusterTime ( session1 . getClusterTime ( ) ) ; ",
  "12169": "session2 . advanceOperationTime ( session1 . getOperationTime ( ) ) ; ",
  "12170": "items = client . getDatabase ( \"test\" ) ",
  "12171": ". withReadPreference ( ReadPreference . secondary ( ) ) ",
  "12172": ". getCollection ( \"items\" ) ; ",
  "12173": "for ( Document item : items . find ( session2 , eq ( \"end\" , BsonNull . VALUE ) ) ) { ",
  "12174": "System . out . println ( item ) ; ",
  "12175": "} public void replaceOne ( final DBObject document ) { ",
  "12176": "new BulkUpdateRequestBuilder ( bulkWriteOperation , query , false , codec , replacementCodec , collation , null ) . replaceOne ( document ) ; ",
  "12177": "} public void update ( final DBObject update ) { ",
  "12178": "new BulkUpdateRequestBuilder ( bulkWriteOperation , query , false , codec , replacementCodec , collation , null ) . update ( update ) ; ",
  "12179": "} public BulkUpdateRequestBuilder upsert ( ) { ",
  "12180": "return new BulkUpdateRequestBuilder ( bulkWriteOperation , query , true , codec , replacementCodec , collation , null ) ; ",
  "12181": "} public BulkUpdateRequestBuilder arrayFilters ( final List < ? extends DBObject > arrayFilters ) { ",
  "12182": "return new BulkUpdateRequestBuilder ( bulkWriteOperation , query , false , codec , replacementCodec , collation , arrayFilters ) ; ",
  "12183": "} public MapReduceToCollectionOperation maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12184": "} public MapReduceToCollectionOperation action ( final String action ) { ",
  "12185": "notNull ( \"action\" , action ) ; ",
  "12186": "public MapReduceStatistics execute ( final WriteBinding binding ) { ",
  "12187": "return withConnection ( binding , new OperationHelper . CallableWithConnection < MapReduceStatistics > ( ) { ",
  "12188": "public MapReduceStatistics call ( final Connection connection ) { ",
  "12189": "validateCollation ( connection , collation ) ; ",
  "12190": "return executeCommand ( binding , namespace . getDatabaseName ( ) , getCommand ( connection . getDescription ( ) ) , ",
  "12191": "connection , transformer ( ) ) ; ",
  "12192": "} public DropIndexOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12193": "} public static synchronized void init ( final MongoEmbeddedSettings mongoEmbeddedSettings ) { ",
  "12194": "if ( mongoEmbeddedLibrary != null ) { ",
  "12195": "mongoEmbeddedLibrary = MongoEmbeddedCAPI . create ( mongoEmbeddedSettings . getYamlConfig ( ) , ",
  "12196": "mongoEmbeddedSettings . getLogLevel ( ) . toCapiLogLevel ( ) , mongoEmbeddedSettings . getLibraryPath ( ) ) ; ",
  "12197": "} public static synchronized MongoClient create ( final MongoClientSettings mongoClientSettings ) { ",
  "12198": "if ( mongoEmbeddedLibrary == null ) { ",
  "12199": "Cluster cluster = new EmbeddedCluster ( mongoEmbeddedLibrary , mongoClientSettings ) ; ",
  "12200": "return new MongoClientImpl ( cluster , mongoClientSettings . getWrappedMongoClientSettings ( ) , null ) ; ",
  "12201": "} public static synchronized void close ( ) { ",
  "12202": "mongoEmbeddedLibrary . close ( ) ; ",
  "12203": "mongoEmbeddedLibrary = null ; ",
  "12204": "} public static void enableSni ( final String host , final SSLParameters sslParameters ) { ",
  "12205": "if ( SNI_SSL_HELPER != null ) { ",
  "12206": "SNI_SSL_HELPER . enableSni ( host , sslParameters ) ; ",
  "12207": "} public static String createAuthenticationHash ( final String userName , final char [ ] password ) { ",
  "12208": "ByteArrayOutputStream bout = new ByteArrayOutputStream ( userName . length ( ) + 20 + password . length ) ; ",
  "12209": "bout . write ( userName . getBytes ( UTF_8_CHARSET ) ) ; ",
  "12210": "bout . write ( \":mongo:\" . getBytes ( UTF_8_CHARSET ) ) ; ",
  "12211": "bout . write ( new String ( password ) . getBytes ( UTF_8_CHARSET ) ) ; ",
  "12212": "throw new RuntimeException ( \"impossible\" , ioe ) ; ",
  "12213": "return hexMD5 ( bout . toByteArray ( ) ) ; ",
  "12214": "public static byte getType ( final Object object ) { ",
  "12215": "return NULL ; ",
  "12216": "if ( object instanceof Integer ",
  "12217": "|| object instanceof Short ",
  "12218": "|| object instanceof Byte ",
  "12219": "|| object instanceof AtomicInteger ) { ",
  "12220": "return NUMBER_INT ; ",
  "12221": "if ( object instanceof Long || object instanceof AtomicLong ) { ",
  "12222": "return NUMBER_LONG ; ",
  "12223": "if ( object instanceof Number ) { ",
  "12224": "return NUMBER ; ",
  "12225": "if ( object instanceof String ) { ",
  "12226": "if ( object instanceof java . util . List ) { ",
  "12227": "return ARRAY ; ",
  "12228": "if ( object instanceof byte [ ] ) { ",
  "12229": "return BINARY ; ",
  "12230": "if ( object instanceof ObjectId ) { ",
  "12231": "return OID ; ",
  "12232": "if ( object instanceof Boolean ) { ",
  "12233": "return BOOLEAN ; ",
  "12234": "if ( object instanceof java . util . Date ) { ",
  "12235": "return DATE ; ",
  "12236": "if ( object instanceof BSONTimestamp ) { ",
  "12237": "return TIMESTAMP ; ",
  "12238": "if ( object instanceof java . util . regex . Pattern ) { ",
  "12239": "return REGEX ; ",
  "12240": "if ( object instanceof DBObject || object instanceof DBRef ) { ",
  "12241": "return OBJECT ; ",
  "12242": "if ( object instanceof CodeWScope ) { ",
  "12243": "return CODE_W_SCOPE ; ",
  "12244": "if ( object instanceof Code ) { ",
  "12245": "return CODE ; ",
  "12246": "BasicDBObject cmd = new BasicDBObject ( ) ; ",
  "12247": "cmd . put ( \"mapreduce\" , mapReduce ) ; ",
  "12248": "cmd . put ( \"map\" , map ) ; ",
  "12249": "cmd . put ( \"reduce\" , reduce ) ; ",
  "12250": "if ( verbose != null ) { ",
  "12251": "cmd . put ( \"verbose\" , verbose ) ; ",
  "12252": "BasicDBObject out = new BasicDBObject ( ) ; ",
  "12253": "switch ( outputType ) { ",
  "12254": "case INLINE : ",
  "12255": "out . put ( \"inline\" , 1 ) ; ",
  "12256": "out . put ( \"replace\" , outputCollection ) ; ",
  "12257": "out . put ( \"merge\" , outputCollection ) ; ",
  "12258": "out . put ( \"reduce\" , outputCollection ) ; ",
  "12259": "if ( outputDB != null ) { ",
  "12260": "out . put ( \"db\" , outputDB ) ; ",
  "12261": "cmd . put ( \"out\" , out ) ; ",
  "12262": "cmd . put ( \"query\" , query ) ; ",
  "12263": "cmd . put ( \"finalize\" , finalize ) ; ",
  "12264": "cmd . put ( \"sort\" , sort ) ; ",
  "12265": "cmd . put ( \"limit\" , limit ) ; ",
  "12266": "cmd . put ( \"scope\" , scope ) ; ",
  "12267": "if ( jsMode != null ) { ",
  "12268": "cmd . put ( \"jsMode\" , jsMode ) ; ",
  "12269": "if ( maxTimeMS != 0 ) { ",
  "12270": "cmd . put ( \"maxTimeMS\" , maxTimeMS ) ; ",
  "12271": "return cmd ; ",
  "12272": "} public static int extractErrorCode ( final BsonDocument response ) { ",
  "12273": "String errorMessage = extractErrorMessage ( response ) ; ",
  "12274": "if ( errorMessage != null ) { ",
  "12275": "if ( response . containsKey ( \"err\" ) ) { ",
  "12276": "return 11000 ; ",
  "12277": "if ( ! response . containsKey ( \"code\" ) && response . containsKey ( \"errObjects\" ) ) { ",
  "12278": "for ( BsonValue curErrorDocument : response . getArray ( \"errObjects\" ) ) { ",
  "12279": "if ( errorMessage . equals ( extractErrorMessage ( curErrorDocument . asDocument ( ) ) ) ) { ",
  "12280": "return curErrorDocument . asDocument ( ) . getNumber ( \"code\" ) . intValue ( ) ; ",
  "12281": "return response . getNumber ( \"code\" , new BsonInt32 ( - 1 ) ) . intValue ( ) ; ",
  "12282": "public static String extractErrorMessage ( final BsonDocument response ) { ",
  "12283": "if ( response . isString ( \"err\" ) ) { ",
  "12284": "return response . getString ( \"err\" ) . getValue ( ) ; ",
  "12285": "} else if ( response . isString ( \"errmsg\" ) ) { ",
  "12286": "return response . getString ( \"errmsg\" ) . getValue ( ) ; ",
  "12287": "} public long read ( final ByteBufferSet dest ) throws IOException { ",
  "12288": "checkReadBuffer ( dest ) ; ",
  "12289": "if ( ! dest . hasRemaining ( ) ) { ",
  "12290": "handshake ( ) ; ",
  "12291": "readLock . lock ( ) ; ",
  "12292": "if ( invalid || shutdownSent ) { ",
  "12293": "throw new ClosedChannelException ( ) ; ",
  "12294": "HandshakeStatus handshakeStatus = engine . getHandshakeStatus ( ) ; ",
  "12295": "int bytesToReturn = inPlain . nullOrEmpty ( ) ? 0 : inPlain . buffer . position ( ) ; ",
  "12296": "if ( bytesToReturn > 0 ) { ",
  "12297": "if ( inPlain . nullOrEmpty ( ) ) { ",
  "12298": "return bytesToReturn ; ",
  "12299": "return transferPendingPlain ( dest ) ; ",
  "12300": "if ( shutdownReceived ) { ",
  "12301": "Util . assertTrue ( inPlain . nullOrEmpty ( ) ) ; ",
  "12302": "switch ( handshakeStatus ) { ",
  "12303": "case NEED_UNWRAP : ",
  "12304": "case NEED_WRAP : ",
  "12305": "bytesToReturn = handshake ( Optional . of ( dest ) , Optional . of ( handshakeStatus ) ) ; ",
  "12306": "handshakeStatus = NOT_HANDSHAKING ; ",
  "12307": "case NOT_HANDSHAKING : ",
  "12308": "case FINISHED : ",
  "12309": "UnwrapResult res = readAndUnwrap ( Optional . of ( dest ) , NOT_HANDSHAKING , ",
  "12310": "if ( res . wasClosed ) { ",
  "12311": "bytesToReturn = res . bytesProduced ; ",
  "12312": "handshakeStatus = res . lastHandshakeStatus ; ",
  "12313": "case NEED_TASK : ",
  "12314": "handleTask ( ) ; ",
  "12315": "handshakeStatus = engine . getHandshakeStatus ( ) ; ",
  "12316": "} catch ( EofException e ) { ",
  "12317": "readLock . unlock ( ) ; ",
  "12318": "} public long write ( final ByteBufferSet source ) throws IOException { ",
  "12319": "writeLock . lock ( ) ; ",
  "12320": "return wrapAndWrite ( source ) ; ",
  "12321": "writeLock . unlock ( ) ; ",
  "12322": "+ ( hosts . isEmpty ( ) ? \"\" : \"hosts=\" + hosts ) ",
  "12323": "} public static UpdateResult acknowledged ( final long matchedCount , @ Nullable final Long modifiedCount , ",
  "12324": "@ Nullable final BsonValue upsertedId ) { ",
  "12325": "return new AcknowledgedUpdateResult ( matchedCount , modifiedCount , upsertedId ) ; ",
  "12326": "public String getContentType ( ) { ",
  "12327": "if ( extraElements != null && extraElements . containsKey ( \"contentType\" ) ) { ",
  "12328": "return extraElements . getString ( \"contentType\" ) ; ",
  "12329": "public List < String > getAliases ( ) { ",
  "12330": "if ( extraElements != null && extraElements . containsKey ( \"aliases\" ) ) { ",
  "12331": "return ( List < String > ) extraElements . get ( \"aliases\" ) ; ",
  "12332": "} public String getFirstKey ( ) { ",
  "12333": "return findInDocument ( new Finder < String > ( ) { ",
  "12334": "public String find ( final BsonReader bsonReader ) { ",
  "12335": "return bsonReader . readName ( ) ; ",
  "12336": "public String notFound ( ) { ",
  "12337": "} public static Bson ascending ( final List < String > fieldNames ) { ",
  "12338": "notNull ( \"fieldNames\" , fieldNames ) ; ",
  "12339": "return orderBy ( fieldNames , new BsonInt32 ( 1 ) ) ; ",
  "12340": "} public static Bson descending ( final List < String > fieldNames ) { ",
  "12341": "return orderBy ( fieldNames , new BsonInt32 ( - 1 ) ) ; ",
  "12342": "} public < T > void encodeWithChildContext ( final Encoder < T > encoder , final BsonWriter writer , final T value ) { ",
  "12343": "encoder . encode ( writer , value , DEFAULT_CONTEXT ) ; ",
  "12344": "} public static ObjectSerializer getLegacy ( ) { ",
  "12345": "ClassMapBasedObjectSerializer serializer = addCommonSerializers ( ) ; ",
  "12346": "serializer . addObjectSerializer ( Date . class , new LegacyDateSerializer ( serializer ) ) ; ",
  "12347": "serializer . addObjectSerializer ( BSONTimestamp . class , new LegacyBSONTimestampSerializer ( serializer ) ) ; ",
  "12348": "serializer . addObjectSerializer ( Binary . class , new LegacyBinarySerializer ( ) ) ; ",
  "12349": "serializer . addObjectSerializer ( byte [ ] . class , new LegacyBinarySerializer ( ) ) ; ",
  "12350": "} public static ObjectSerializer getStrict ( ) { ",
  "12351": "serializer . addObjectSerializer ( Date . class , new DateSerializer ( serializer ) ) ; ",
  "12352": "serializer . addObjectSerializer ( BSONTimestamp . class , new BSONTimestampSerializer ( serializer ) ) ; ",
  "12353": "serializer . addObjectSerializer ( Binary . class , new BinarySerializer ( serializer ) ) ; ",
  "12354": "serializer . addObjectSerializer ( byte [ ] . class , new ByteArraySerializer ( serializer ) ) ; ",
  "12355": "} public BsonDocument asDocument ( ) { ",
  "12356": "BsonDocument readConcern = new BsonDocument ( ) ; ",
  "12357": "if ( level != null ) { ",
  "12358": "readConcern . put ( \"level\" , new BsonString ( level . getValue ( ) ) ) ; ",
  "12359": "} private static com . mongodb . Mongo getMongo ( ) throws Exception { ",
  "12360": "if ( mongo == null ) { ",
  "12361": "mongo = new MongoClient ( host ) ; ",
  "12362": "return mongo ; ",
  "12363": "printUsage ( ) ; ",
  "12364": "String s = args [ i ] ; ",
  "12365": "if ( s . equals ( \"--db\" ) ) { ",
  "12366": "db = args [ i + 1 ] ; ",
  "12367": "if ( s . equals ( \"--host\" ) ) { ",
  "12368": "if ( s . equals ( \"help\" ) ) { ",
  "12369": "if ( s . equals ( \"list\" ) ) { ",
  "12370": "GridFS fs = getGridFS ( ) ; ",
  "12371": "DBCursor fileListCursor = fs . getFileList ( ) ; ",
  "12372": "while ( fileListCursor . hasNext ( ) ) { ",
  "12373": "DBObject o = fileListCursor . next ( ) ; ",
  "12374": "fileListCursor . close ( ) ; ",
  "12375": "if ( s . equals ( \"get\" ) ) { ",
  "12376": "String fn = args [ i + 1 ] ; ",
  "12377": "GridFSDBFile f = fs . findOne ( fn ) ; ",
  "12378": "f . writeTo ( f . getFilename ( ) ) ; ",
  "12379": "if ( s . equals ( \"put\" ) ) { ",
  "12380": "GridFSInputFile f = fs . createFile ( new File ( fn ) ) ; ",
  "12381": "f . validate ( ) ; ",
  "12382": "if ( s . equals ( \"md5\" ) ) { ",
  "12383": "DigestInputStream is = new DigestInputStream ( f . getInputStream ( ) , md5 ) ; ",
  "12384": "while ( is . read ( ) >= 0 ) { ",
  "12385": "int r = is . read ( new byte [ 17 ] ) ; ",
  "12386": "if ( r < 0 ) { ",
  "12387": "read += r ; ",
  "12388": "public void compress ( final List < ByteBuf > source , final BsonOutput target ) { ",
  "12389": "int uncompressedSize = getUncompressedSize ( source ) ; ",
  "12390": "byte [ ] singleByteArraySource = new byte [ uncompressedSize ] ; ",
  "12391": "copy ( source , singleByteArraySource ) ; ",
  "12392": "byte [ ] out = new byte [ Snappy . maxCompressedLength ( uncompressedSize ) ] ; ",
  "12393": "int compressedSize = Snappy . compress ( singleByteArraySource , 0 , singleByteArraySource . length , out , 0 ) ; ",
  "12394": "target . writeBytes ( out , 0 , compressedSize ) ; ",
  "12395": "} static int getNumberToReturn ( final int limit , final int batchSize , final int numReturnedSoFar ) { ",
  "12396": "int numberToReturn ; ",
  "12397": "if ( Math . abs ( limit ) != 0 ) { ",
  "12398": "numberToReturn = Math . abs ( limit ) - numReturnedSoFar ; ",
  "12399": "if ( batchSize != 0 && numberToReturn > Math . abs ( batchSize ) ) { ",
  "12400": "numberToReturn = batchSize ; ",
  "12401": "return numberToReturn ; ",
  "12402": "} public int getInt ( final String key ) { ",
  "12403": "Object o = get ( key ) ; ",
  "12404": "return toInt ( o ) ; ",
  "12405": "} public int getInt ( final String key , final int def ) { ",
  "12406": "Object foo = get ( key ) ; ",
  "12407": "return toInt ( foo ) ; ",
  "12408": "} public long getLong ( final String key ) { ",
  "12409": "return ( ( Number ) foo ) . longValue ( ) ; ",
  "12410": "} public double getDouble ( final String key ) { ",
  "12411": "return ( ( Number ) foo ) . doubleValue ( ) ; ",
  "12412": "} public String getString ( final String key ) { ",
  "12413": "} public boolean getBoolean ( final String key , final boolean def ) { ",
  "12414": "if ( foo instanceof Number ) { ",
  "12415": "return ( ( Number ) foo ) . intValue ( ) > 0 ; ",
  "12416": "if ( foo instanceof Boolean ) { ",
  "12417": "return ( Boolean ) foo ; ",
  "12418": "} public ObjectId getObjectId ( final String field , final ObjectId def ) { ",
  "12419": "Object foo = get ( field ) ; ",
  "12420": "return ( foo != null ) ? ( ObjectId ) foo : def ; ",
  "12421": "} public Date getDate ( final String field , final Date def ) { ",
  "12422": "return ( foo != null ) ? ( Date ) foo : def ; ",
  "12423": "private static Object canonicalize ( final Object from ) { ",
  "12424": "if ( from instanceof BSONObject && ! ( from instanceof BasicBSONList ) ) { ",
  "12425": "return canonicalizeBSONObject ( ( BSONObject ) from ) ; ",
  "12426": "} else if ( from instanceof List ) { ",
  "12427": "return canonicalizeList ( ( List < Object > ) from ) ; ",
  "12428": "} else if ( from instanceof Map ) { ",
  "12429": "return canonicalizeMap ( ( Map < String , Object > ) from ) ; ",
  "12430": "return from ; ",
  "12431": "} public FindOneAndUpdateOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12432": "public MongoCredential getCredential ( ) { ",
  "12433": "if ( getCredentialsList ( ) . size ( ) > 1 ) { ",
  "12434": "} else if ( getCredentialsList ( ) . isEmpty ( ) ) { ",
  "12435": "return getCredentialsList ( ) . get ( 0 ) ; ",
  "12436": "} public < T > ListDatabasesIterable < T > listDatabases ( final Class < T > clazz ) { ",
  "12437": "return createListDatabasesIterable ( null , clazz ) ; ",
  "12438": "} public < T > ListDatabasesIterable < T > listDatabases ( final ClientSession clientSession , final Class < T > clazz ) { ",
  "12439": "notNull ( \"clientSession\" , clientSession ) ; ",
  "12440": "return createListDatabasesIterable ( clientSession , clazz ) ; ",
  "12441": "} public ClientSession startSession ( final ClientSessionOptions options ) { ",
  "12442": "ClientSession clientSession = createClientSession ( notNull ( \"options\" , options ) ) ; ",
  "12443": "if ( clientSession == null ) { ",
  "12444": "return clientSession ; ",
  "12445": "} public static < TResult > Observable < TResult > observe ( final MongoIterable < TResult > mongoIterable ) { ",
  "12446": "return new Observable < TResult > ( ) { ",
  "12447": "public void subscribe ( final Observer < ? super TResult > observer ) { ",
  "12448": "new MongoIterableSubscription < TResult > ( mongoIterable , observer ) ; ",
  "12449": "} public static < TResult > Observable < TResult > observe ( final Block < SingleResultCallback < TResult > > operation ) { ",
  "12450": "new SingleResultCallbackSubscription < TResult > ( operation , observer ) ; ",
  "12451": "} public static < TResult > Observable < TResult > observeAndFlatten ( final Block < SingleResultCallback < List < TResult > > > operation ) { ",
  "12452": "new FlatteningSingleResultCallbackSubscription < TResult > ( operation , observer ) ; ",
  "12453": "public BsonType readBsonType ( ) { ",
  "12454": "if ( getState ( ) == State . INITIAL || getState ( ) == State . DONE || getState ( ) == State . SCOPE_DOCUMENT ) { ",
  "12455": "setState ( State . TYPE ) ; ",
  "12456": "if ( getState ( ) != State . TYPE ) { ",
  "12457": "throwInvalidState ( \"readBSONType\" , State . TYPE ) ; ",
  "12458": "if ( getContext ( ) . getContextType ( ) == BsonContextType . DOCUMENT ) { ",
  "12459": "JsonToken nameToken = popToken ( ) ; ",
  "12460": "switch ( nameToken . getType ( ) ) { ",
  "12461": "case UNQUOTED_STRING : ",
  "12462": "setCurrentName ( nameToken . getValue ( String . class ) ) ; ",
  "12463": "case END_OBJECT : ",
  "12464": "setState ( State . END_OF_DOCUMENT ) ; ",
  "12465": "return BsonType . END_OF_DOCUMENT ; ",
  "12466": "JsonToken colonToken = popToken ( ) ; ",
  "12467": "if ( colonToken . getType ( ) != JsonTokenType . COLON ) { ",
  "12468": "JsonToken token = popToken ( ) ; ",
  "12469": "if ( getContext ( ) . getContextType ( ) == BsonContextType . ARRAY && token . getType ( ) == JsonTokenType . END_ARRAY ) { ",
  "12470": "setState ( State . END_OF_ARRAY ) ; ",
  "12471": "boolean noValueFound = false ; ",
  "12472": "switch ( token . getType ( ) ) { ",
  "12473": "case BEGIN_ARRAY : ",
  "12474": "setCurrentBsonType ( BsonType . ARRAY ) ; ",
  "12475": "case BEGIN_OBJECT : ",
  "12476": "visitExtendedJSON ( ) ; ",
  "12477": "setCurrentBsonType ( BsonType . DOUBLE ) ; ",
  "12478": "currentValue = token . getValue ( ) ; ",
  "12479": "case END_OF_FILE : ",
  "12480": "setCurrentBsonType ( BsonType . END_OF_DOCUMENT ) ; ",
  "12481": "setCurrentBsonType ( BsonType . INT32 ) ; ",
  "12482": "case INT64 : ",
  "12483": "setCurrentBsonType ( BsonType . INT64 ) ; ",
  "12484": "case REGULAR_EXPRESSION : ",
  "12485": "setCurrentBsonType ( BsonType . REGULAR_EXPRESSION ) ; ",
  "12486": "setCurrentBsonType ( BsonType . STRING ) ; ",
  "12487": "String value = token . getValue ( String . class ) ; ",
  "12488": "if ( \"false\" . equals ( value ) || \"true\" . equals ( value ) ) { ",
  "12489": "setCurrentBsonType ( BsonType . BOOLEAN ) ; ",
  "12490": "currentValue = Boolean . parseBoolean ( value ) ; ",
  "12491": "} else if ( \"Infinity\" . equals ( value ) ) { ",
  "12492": "currentValue = Double . POSITIVE_INFINITY ; ",
  "12493": "} else if ( \"NaN\" . equals ( value ) ) { ",
  "12494": "currentValue = Double . NaN ; ",
  "12495": "} else if ( \"null\" . equals ( value ) ) { ",
  "12496": "setCurrentBsonType ( BsonType . NULL ) ; ",
  "12497": "} else if ( \"undefined\" . equals ( value ) ) { ",
  "12498": "setCurrentBsonType ( BsonType . UNDEFINED ) ; ",
  "12499": "} else if ( \"MinKey\" . equals ( value ) ) { ",
  "12500": "visitEmptyConstructor ( ) ; ",
  "12501": "setCurrentBsonType ( BsonType . MIN_KEY ) ; ",
  "12502": "currentValue = new MinKey ( ) ; ",
  "12503": "} else if ( \"MaxKey\" . equals ( value ) ) { ",
  "12504": "setCurrentBsonType ( BsonType . MAX_KEY ) ; ",
  "12505": "currentValue = new MaxKey ( ) ; ",
  "12506": "} else if ( \"BinData\" . equals ( value ) ) { ",
  "12507": "setCurrentBsonType ( BsonType . BINARY ) ; ",
  "12508": "currentValue = visitBinDataConstructor ( ) ; ",
  "12509": "} else if ( \"Date\" . equals ( value ) ) { ",
  "12510": "currentValue = visitDateTimeConstructorWithOutNew ( ) ; ",
  "12511": "} else if ( \"HexData\" . equals ( value ) ) { ",
  "12512": "currentValue = visitHexDataConstructor ( ) ; ",
  "12513": "} else if ( \"ISODate\" . equals ( value ) ) { ",
  "12514": "setCurrentBsonType ( BsonType . DATE_TIME ) ; ",
  "12515": "currentValue = visitISODateTimeConstructor ( ) ; ",
  "12516": "} else if ( \"NumberInt\" . equals ( value ) ) { ",
  "12517": "currentValue = visitNumberIntConstructor ( ) ; ",
  "12518": "} else if ( \"NumberLong\" . equals ( value ) ) { ",
  "12519": "currentValue = visitNumberLongConstructor ( ) ; ",
  "12520": "} else if ( \"NumberDecimal\" . equals ( value ) ) { ",
  "12521": "setCurrentBsonType ( BsonType . DECIMAL128 ) ; ",
  "12522": "currentValue = visitNumberDecimalConstructor ( ) ; ",
  "12523": "} else if ( \"ObjectId\" . equals ( value ) ) { ",
  "12524": "setCurrentBsonType ( BsonType . OBJECT_ID ) ; ",
  "12525": "currentValue = visitObjectIdConstructor ( ) ; ",
  "12526": "} else if ( \"Timestamp\" . equals ( value ) ) { ",
  "12527": "setCurrentBsonType ( BsonType . TIMESTAMP ) ; ",
  "12528": "currentValue = visitTimestampConstructor ( ) ; ",
  "12529": "} else if ( \"RegExp\" . equals ( value ) ) { ",
  "12530": "currentValue = visitRegularExpressionConstructor ( ) ; ",
  "12531": "} else if ( \"DBPointer\" . equals ( value ) ) { ",
  "12532": "setCurrentBsonType ( BsonType . DB_POINTER ) ; ",
  "12533": "currentValue = visitDBPointerConstructor ( ) ; ",
  "12534": "} else if ( \"UUID\" . equals ( value ) ",
  "12535": "|| \"GUID\" . equals ( value ) ",
  "12536": "|| \"CSUUID\" . equals ( value ) ",
  "12537": "|| \"CSGUID\" . equals ( value ) ",
  "12538": "|| \"JUUID\" . equals ( value ) ",
  "12539": "|| \"JGUID\" . equals ( value ) ",
  "12540": "|| \"PYUUID\" . equals ( value ) ",
  "12541": "|| \"PYGUID\" . equals ( value ) ) { ",
  "12542": "currentValue = visitUUIDConstructor ( value ) ; ",
  "12543": "} else if ( \"new\" . equals ( value ) ) { ",
  "12544": "visitNew ( ) ; ",
  "12545": "noValueFound = true ; ",
  "12546": "if ( noValueFound ) { ",
  "12547": "if ( getContext ( ) . getContextType ( ) == BsonContextType . ARRAY || getContext ( ) . getContextType ( ) == BsonContextType . DOCUMENT ) { ",
  "12548": "JsonToken commaToken = popToken ( ) ; ",
  "12549": "if ( commaToken . getType ( ) != JsonTokenType . COMMA ) { ",
  "12550": "pushToken ( commaToken ) ; ",
  "12551": "switch ( getContext ( ) . getContextType ( ) ) { ",
  "12552": "case DOCUMENT : ",
  "12553": "case SCOPE_DOCUMENT : ",
  "12554": "setState ( State . NAME ) ; ",
  "12555": "case JAVASCRIPT_WITH_SCOPE : ",
  "12556": "case TOP_LEVEL : ",
  "12557": "setState ( State . VALUE ) ; ",
  "12558": "return getCurrentBsonType ( ) ; ",
  "12559": "public Integer getWTimeout ( final TimeUnit timeUnit ) { ",
  "12560": "return wTimeoutMS == null ? null : ( int ) timeUnit . convert ( wTimeoutMS , TimeUnit . MILLISECONDS ) ; ",
  "12561": "BsonDocument document = new BsonDocument ( ) ; ",
  "12562": "addW ( document ) ; ",
  "12563": "addWTimeout ( document ) ; ",
  "12564": "addFSync ( document ) ; ",
  "12565": "addJ ( document ) ; ",
  "12566": "} public boolean isAcknowledged ( ) { ",
  "12567": "if ( w instanceof Integer ) { ",
  "12568": "return ( Integer ) w > 0 || ( journal != null && journal ) || ( fsync != null && fsync ) ; ",
  "12569": "} public WriteConcern withW ( final int w ) { ",
  "12570": "return new WriteConcern ( Integer . valueOf ( w ) , wTimeoutMS , fsync , journal ) ; ",
  "12571": "} public WriteConcern withW ( final String w ) { ",
  "12572": "notNull ( \"w\" , w ) ; ",
  "12573": "return new WriteConcern ( w , wTimeoutMS , fsync , journal ) ; ",
  "12574": "} public WriteConcern withWTimeout ( final long wTimeout , final TimeUnit timeUnit ) { ",
  "12575": "long newWTimeOutMS = TimeUnit . MILLISECONDS . convert ( wTimeout , timeUnit ) ; ",
  "12576": "return new WriteConcern ( w , ( int ) newWTimeOutMS , fsync , journal ) ; ",
  "12577": "public static Majority majorityWriteConcern ( final int wtimeout , final boolean fsync , final boolean j ) { ",
  "12578": "return new Majority ( wtimeout , fsync , j ) ; ",
  "12579": "} public void insert ( final DBObject document ) { ",
  "12580": "if ( document . get ( ID_FIELD_NAME ) == null ) { ",
  "12581": "document . put ( ID_FIELD_NAME , new ObjectId ( ) ) ; ",
  "12582": "addRequest ( new InsertRequest ( document , collection . getObjectCodec ( ) ) ) ; ",
  "12583": "} public BulkWriteRequestBuilder find ( final DBObject query ) { ",
  "12584": "return new BulkWriteRequestBuilder ( this , query , collection . getDefaultDBObjectCodec ( ) , collection . getObjectCodec ( ) ) ; ",
  "12585": "} public BulkWriteResult execute ( ) { ",
  "12586": "return collection . executeBulkWriteOperation ( ordered , bypassDocumentValidation , requests ) ; ",
  "12587": "} public static BasicDBObject parse ( final String json ) { ",
  "12588": "return parse ( json , DBObjectCodec . getDefaultRegistry ( ) . get ( BasicDBObject . class ) ) ; ",
  "12589": "} public static BasicDBObject parse ( final String json , final Decoder < BasicDBObject > decoder ) { ",
  "12590": "return decoder . decode ( new JsonReader ( json ) , DecoderContext . builder ( ) . build ( ) ) ; ",
  "12591": "public BasicDBObject append ( final String key , final Object val ) { ",
  "12592": "put ( key , val ) ; ",
  "12593": "} public String toJson ( final JsonWriterSettings writerSettings ) { ",
  "12594": "return toJson ( writerSettings , DBObjectCodec . getDefaultRegistry ( ) . get ( BasicDBObject . class ) ) ; ",
  "12595": "BasicDBObject newCopy = new BasicDBObject ( this . toMap ( ) ) ; ",
  "12596": "for ( final String field : keySet ( ) ) { ",
  "12597": "Object val = get ( field ) ; ",
  "12598": "newCopy . put ( field , ( ( BasicDBObject ) val ) . copy ( ) ) ; ",
  "12599": "newCopy . put ( field , ( ( BasicDBList ) val ) . copy ( ) ) ; ",
  "12600": "return newCopy ; ",
  "12601": "return compoundIndex ( fieldNames , new BsonInt32 ( 1 ) ) ; ",
  "12602": "return compoundIndex ( fieldNames , new BsonInt32 ( - 1 ) ) ; ",
  "12603": "} public static Bson geo2dsphere ( final List < String > fieldNames ) { ",
  "12604": "return compoundIndex ( fieldNames , new BsonString ( \"2dsphere\" ) ) ; ",
  "12605": "} public static Bson geoHaystack ( final String fieldName , final Bson additional ) { ",
  "12606": "return compoundIndex ( new BsonDocument ( fieldName , new BsonString ( \"geoHaystack\" ) ) , additional ) ; ",
  "12607": "} public List < String > getIndexNames ( ) { ",
  "12608": "List < String > indexNames = new ArrayList < String > ( requests . size ( ) ) ; ",
  "12609": "for ( IndexRequest request : requests ) { ",
  "12610": "if ( request . getName ( ) != null ) { ",
  "12611": "indexNames . add ( request . getName ( ) ) ; ",
  "12612": "indexNames . add ( IndexHelper . generateIndexName ( request . getKeys ( ) ) ) ; ",
  "12613": "} public FindOptions maxAwaitTime ( final long maxAwaitTime , final TimeUnit timeUnit ) { ",
  "12614": "this . maxAwaitTimeMS = TimeUnit . MILLISECONDS . convert ( maxAwaitTime , timeUnit ) ; ",
  "12615": "} public static BsonDocument parse ( final String json ) { ",
  "12616": "return new BsonDocumentCodec ( ) . decode ( new JsonReader ( json ) , DecoderContext . builder ( ) . build ( ) ) ; ",
  "12617": "} public BsonValue get ( final Object key , final BsonValue defaultValue ) { ",
  "12618": "BsonValue value = get ( key ) ; ",
  "12619": "return value != null ? value : defaultValue ; ",
  "12620": "} public BsonDocument getDocument ( final Object key , final BsonDocument defaultValue ) { ",
  "12621": "if ( ! containsKey ( key ) ) { ",
  "12622": "return get ( key ) . asDocument ( ) ; ",
  "12623": "} public BsonArray getArray ( final Object key , final BsonArray defaultValue ) { ",
  "12624": "return get ( key ) . asArray ( ) ; ",
  "12625": "} public BsonNumber getNumber ( final Object key , final BsonNumber defaultValue ) { ",
  "12626": "return get ( key ) . asNumber ( ) ; ",
  "12627": "} public BsonInt32 getInt32 ( final Object key , final BsonInt32 defaultValue ) { ",
  "12628": "return get ( key ) . asInt32 ( ) ; ",
  "12629": "} public BsonInt64 getInt64 ( final Object key , final BsonInt64 defaultValue ) { ",
  "12630": "return get ( key ) . asInt64 ( ) ; ",
  "12631": "} public BsonDecimal128 getDecimal128 ( final Object key , final BsonDecimal128 defaultValue ) { ",
  "12632": "return get ( key ) . asDecimal128 ( ) ; ",
  "12633": "} public BsonDouble getDouble ( final Object key , final BsonDouble defaultValue ) { ",
  "12634": "return get ( key ) . asDouble ( ) ; ",
  "12635": "} public BsonBoolean getBoolean ( final Object key , final BsonBoolean defaultValue ) { ",
  "12636": "return get ( key ) . asBoolean ( ) ; ",
  "12637": "} public BsonString getString ( final Object key , final BsonString defaultValue ) { ",
  "12638": "return get ( key ) . asString ( ) ; ",
  "12639": "} public BsonDateTime getDateTime ( final Object key , final BsonDateTime defaultValue ) { ",
  "12640": "return get ( key ) . asDateTime ( ) ; ",
  "12641": "} public BsonTimestamp getTimestamp ( final Object key , final BsonTimestamp defaultValue ) { ",
  "12642": "return get ( key ) . asTimestamp ( ) ; ",
  "12643": "} public BsonObjectId getObjectId ( final Object key , final BsonObjectId defaultValue ) { ",
  "12644": "return get ( key ) . asObjectId ( ) ; ",
  "12645": "} public BsonBinary getBinary ( final Object key , final BsonBinary defaultValue ) { ",
  "12646": "return get ( key ) . asBinary ( ) ; ",
  "12647": "} public BsonRegularExpression getRegularExpression ( final Object key , final BsonRegularExpression defaultValue ) { ",
  "12648": "return get ( key ) . asRegularExpression ( ) ; ",
  "12649": "} public String toJson ( final JsonWriterSettings settings ) { ",
  "12650": "new BsonDocumentCodec ( ) . encode ( new JsonWriter ( writer , settings ) , this , EncoderContext . builder ( ) . build ( ) ) ; ",
  "12651": "} private void writeHandlingTasks ( final RegisteredSocket socket , final WriteOperation op ) throws IOException { ",
  "12652": "socket . tlsChannel . write ( op . bufferSet . array , op . bufferSet . offset , op . bufferSet . length ) ; ",
  "12653": "} catch ( NeedsTaskException e ) { ",
  "12654": "warnAboutNeedTask ( ) ; ",
  "12655": "e . getTask ( ) . run ( ) ; ",
  "12656": "} public ChangeStreamOperation < T > maxAwaitTime ( final long maxAwaitTime , final TimeUnit timeUnit ) { ",
  "12657": "public static BsonDocument asBsonDocument ( final Object document , final CodecRegistry codecRegistry ) { ",
  "12658": "if ( document instanceof BsonDocument ) { ",
  "12659": "return ( BsonDocument ) document ; ",
  "12660": "return new BsonDocumentWrapper ( document , codecRegistry . get ( document . getClass ( ) ) ) ; ",
  "12661": "} public static void main ( final String [ ] args ) throws FileNotFoundException , InterruptedException , IOException { ",
  "12662": "final AtomicReference < ObjectId > fileIdRef = new AtomicReference < ObjectId > ( ) ; ",
  "12663": "final CountDownLatch uploadLatch = new CountDownLatch ( 1 ) ; ",
  "12664": "gridFSBucket . uploadFromStream ( \"mongodb-tutorial\" , streamToUploadFrom , options , new SingleResultCallback < ObjectId > ( ) { ",
  "12665": "public void onResult ( final ObjectId result , final Throwable t ) { ",
  "12666": "fileIdRef . set ( result ) ; ",
  "12667": "streamToUploadFrom . close ( new SingleResultCallback < Void > ( ) { ",
  "12668": "uploadLatch . countDown ( ) ; ",
  "12669": "uploadLatch . await ( ) ; ",
  "12670": "ObjectId fileId = fileIdRef . get ( ) ; ",
  "12671": "final CountDownLatch uploadLatch2 = new CountDownLatch ( 2 ) ; ",
  "12672": "final GridFSUploadStream uploadStream = gridFSBucket . openUploadStream ( \"sampleData\" ) ; ",
  "12673": "uploadStream . write ( data , new SingleResultCallback < Integer > ( ) { ",
  "12674": "public void onResult ( final Integer result , final Throwable t ) { ",
  "12675": "uploadLatch2 . countDown ( ) ; ",
  "12676": "uploadStream . close ( new SingleResultCallback < Void > ( ) { ",
  "12677": "uploadLatch2 . await ( ) ; ",
  "12678": "final CountDownLatch findLatch = new CountDownLatch ( 1 ) ; ",
  "12679": "} , new SingleResultCallback < Void > ( ) { ",
  "12680": "findLatch . countDown ( ) ; ",
  "12681": "findLatch . await ( ) ; ",
  "12682": "final CountDownLatch findLatch2 = new CountDownLatch ( 1 ) ; ",
  "12683": "} , ",
  "12684": "new SingleResultCallback < Void > ( ) { ",
  "12685": "findLatch2 . countDown ( ) ; ",
  "12686": "findLatch2 . await ( ) ; ",
  "12687": "Path outputPath = Paths . get ( \"/tmp/mongodb-tutorial.txt\" ) ; ",
  "12688": "AsynchronousFileChannel streamToDownloadTo = AsynchronousFileChannel . open ( outputPath , StandardOpenOption . CREATE_NEW , ",
  "12689": "StandardOpenOption . WRITE , StandardOpenOption . DELETE_ON_CLOSE ) ; ",
  "12690": "final CountDownLatch downloadLatch = new CountDownLatch ( 1 ) ; ",
  "12691": "gridFSBucket . downloadToStream ( fileId , channelToOutputStream ( streamToDownloadTo ) , new SingleResultCallback < Long > ( ) { ",
  "12692": "public void onResult ( final Long result , final Throwable t ) { ",
  "12693": "downloadLatch . countDown ( ) ; ",
  "12694": "downloadLatch . await ( ) ; ",
  "12695": "final CountDownLatch downloadLatch2 = new CountDownLatch ( 1 ) ; ",
  "12696": "streamToDownloadTo = AsynchronousFileChannel . open ( outputPath , StandardOpenOption . CREATE_NEW , StandardOpenOption . WRITE , ",
  "12697": "StandardOpenOption . DELETE_ON_CLOSE ) ; ",
  "12698": "gridFSBucket . downloadToStream ( \"mongodb-tutorial\" , channelToOutputStream ( streamToDownloadTo ) , downloadOptions , ",
  "12699": "new SingleResultCallback < Long > ( ) { ",
  "12700": "downloadLatch2 . countDown ( ) ; ",
  "12701": "downloadLatch2 . await ( ) ; ",
  "12702": "final CountDownLatch downloadLatch3 = new CountDownLatch ( 1 ) ; ",
  "12703": "final ByteBuffer dstByteBuffer = ByteBuffer . allocate ( 1024 * 1024 ) ; ",
  "12704": "final GridFSDownloadStream downloadStream = gridFSBucket . openDownloadStream ( fileId ) ; ",
  "12705": "downloadStream . read ( dstByteBuffer , new SingleResultCallback < Integer > ( ) { ",
  "12706": "dstByteBuffer . flip ( ) ; ",
  "12707": "byte [ ] bytes = new byte [ result ] ; ",
  "12708": "dstByteBuffer . get ( bytes ) ; ",
  "12709": "System . out . println ( new String ( bytes , StandardCharsets . UTF_8 ) ) ; ",
  "12710": "downloadStream . close ( new SingleResultCallback < Void > ( ) { ",
  "12711": "downloadLatch3 . countDown ( ) ; ",
  "12712": "downloadLatch3 . await ( ) ; ",
  "12713": "System . out . println ( \"ByName\" ) ; ",
  "12714": "dstByteBuffer . clear ( ) ; ",
  "12715": "final CountDownLatch downloadLatch4 = new CountDownLatch ( 1 ) ; ",
  "12716": "final GridFSDownloadStream downloadStreamByName = gridFSBucket . openDownloadStream ( \"sampleData\" ) ; ",
  "12717": "downloadStreamByName . read ( dstByteBuffer , new SingleResultCallback < Integer > ( ) { ",
  "12718": "downloadStreamByName . close ( new SingleResultCallback < Void > ( ) { ",
  "12719": "downloadLatch4 . countDown ( ) ; ",
  "12720": "downloadLatch4 . await ( ) ; ",
  "12721": "final CountDownLatch renameLatch = new CountDownLatch ( 1 ) ; ",
  "12722": "gridFSBucket . rename ( fileId , \"mongodbTutorial\" , new SingleResultCallback < Void > ( ) { ",
  "12723": "renameLatch . countDown ( ) ; ",
  "12724": "renameLatch . await ( ) ; ",
  "12725": "gridFSBucket . delete ( fileId , new SingleResultCallback < Void > ( ) { ",
  "12726": "final CountDownLatch dropLatch2 = new CountDownLatch ( 1 ) ; ",
  "12727": "dropLatch2 . countDown ( ) ; ",
  "12728": "dropLatch2 . await ( ) ; ",
  "12729": "System . out . println ( \"Finished\" ) ; ",
  "12730": "} public static < T > T notNull ( final String name , final T value , final SingleResultCallback < ? > callback ) { ",
  "12731": "callback . onResult ( null , exception ) ; ",
  "12732": "} public static void isTrue ( final String name , final boolean condition , final SingleResultCallback < ? > callback ) { ",
  "12733": "} public PropertyModelBuilder < ? > getProperty ( final String propertyName ) { ",
  "12734": "notNull ( \"propertyName\" , propertyName ) ; ",
  "12735": "for ( PropertyModelBuilder < ? > propertyModelBuilder : propertyModelBuilders ) { ",
  "12736": "if ( propertyModelBuilder . getName ( ) . equals ( propertyName ) ) { ",
  "12737": "return propertyModelBuilder ; ",
  "12738": "} public ClassModel < T > build ( ) { ",
  "12739": "List < PropertyModel < ? > > propertyModels = new ArrayList < PropertyModel < ? > > ( ) ; ",
  "12740": "PropertyModel < ? > idPropertyModel = null ; ",
  "12741": "stateNotNull ( \"type\" , type ) ; ",
  "12742": "for ( Convention convention : conventions ) { ",
  "12743": "convention . apply ( this ) ; ",
  "12744": "stateNotNull ( \"instanceCreatorFactory\" , instanceCreatorFactory ) ; ",
  "12745": "if ( discriminatorEnabled ) { ",
  "12746": "stateNotNull ( \"discriminatorKey\" , discriminatorKey ) ; ",
  "12747": "stateNotNull ( \"discriminator\" , discriminator ) ; ",
  "12748": "boolean isIdProperty = propertyModelBuilder . getName ( ) . equals ( idPropertyName ) ; ",
  "12749": "if ( isIdProperty ) { ",
  "12750": "propertyModelBuilder . readName ( ID_PROPERTY_NAME ) . writeName ( ID_PROPERTY_NAME ) ; ",
  "12751": "PropertyModel < ? > model = propertyModelBuilder . build ( ) ; ",
  "12752": "propertyModels . add ( model ) ; ",
  "12753": "idPropertyModel = model ; ",
  "12754": "validatePropertyModels ( type . getSimpleName ( ) , propertyModels ) ; ",
  "12755": "return new ClassModel < T > ( type , propertyNameToTypeParameterMap , instanceCreatorFactory , discriminatorEnabled , discriminatorKey , ",
  "12756": "discriminator , IdPropertyModelHolder . create ( type , idPropertyModel , idGenerator ) , unmodifiableList ( propertyModels ) ) ; ",
  "12757": "public UpdateOptions getOptions ( ) { ",
  "12758": "return new UpdateOptions ( ) ",
  "12759": ". upsert ( options . isUpsert ( ) ) ; ",
  "12760": "mongoClient = MongoClients . create ( \"mongodb://localhost:27017,localhost:27018,localhost:27019\" ) ; ",
  "12761": "MongoDatabase database = mongoClient . getDatabase ( \"testChangeStreams\" ) ; ",
  "12762": "sleep ( ) ; ",
  "12763": "MongoCollection < Document > collection = database . getCollection ( \"documents\" ) ; ",
  "12764": "MongoCursor < ChangeStreamDocument < Document > > cursor = collection . watch ( ) . iterator ( ) ; ",
  "12765": "ChangeStreamDocument < Document > next = cursor . next ( ) ; ",
  "12766": "System . out . println ( next ) ; ",
  "12767": "cursor = collection . watch ( ) . fullDocument ( FullDocument . UPDATE_LOOKUP ) . iterator ( ) ; ",
  "12768": "next = cursor . next ( ) ; ",
  "12769": "List < Bson > pipeline = singletonList ( ",
  "12770": "Aggregates . match ( ",
  "12771": "Filters . or ( ",
  "12772": "Filters . in ( \"operationType\" , asList ( \"update\" , \"replace\" , \"delete\" ) ) ",
  "12773": "cursor = collection . watch ( pipeline ) . fullDocument ( FullDocument . UPDATE_LOOKUP ) . iterator ( ) ; ",
  "12774": "next = cursor . tryNext ( ) ; ",
  "12775": "collection . updateOne ( Filters . eq ( \"updateMe\" , 1 ) , Updates . set ( \"updated\" , true ) ) ; ",
  "12776": "collection . deleteOne ( Filters . eq ( \"username\" , \"alice123\" ) ) ; ",
  "12777": "BsonDocument resumeToken = next . getResumeToken ( ) ; ",
  "12778": "System . out . println ( resumeToken ) ; ",
  "12779": "cursor = collection . watch ( ) . resumeAfter ( resumeToken ) . iterator ( ) ; ",
  "12780": "public static MongoException fromThrowable ( @ Nullable final Throwable t ) { ",
  "12781": "return fromThrowableNonNull ( t ) ; ",
  "12782": "} public static MongoException fromThrowableNonNull ( final Throwable t ) { ",
  "12783": "if ( t instanceof MongoException ) { ",
  "12784": "return ( MongoException ) t ; ",
  "12785": "return new MongoException ( t . getMessage ( ) , t ) ; ",
  "12786": "} public FindOperation < T > maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12787": "} public FindOperation < T > maxAwaitTime ( final long maxAwaitTime , final TimeUnit timeUnit ) { ",
  "12788": "notNull ( \"explainVerbosity\" , explainVerbosity ) ; ",
  "12789": "return new ReadOperation < BsonDocument > ( ) { ",
  "12790": "public BsonDocument execute ( final ReadBinding binding ) { ",
  "12791": "return withConnection ( binding , new CallableWithConnectionAndSource < BsonDocument > ( ) { ",
  "12792": "public BsonDocument call ( final ConnectionSource connectionSource , final Connection connection ) { ",
  "12793": "ReadBinding singleConnectionBinding = new SingleConnectionReadBinding ( binding . getReadPreference ( ) , ",
  "12794": "connectionSource . getServerDescription ( ) , ",
  "12795": "connection ) ; ",
  "12796": "return new CommandReadOperation < BsonDocument > ( getNamespace ( ) . getDatabaseName ( ) , ",
  "12797": "new BsonDocument ( \"explain\" , ",
  "12798": "getCommand ( binding . getSessionContext ( ) ) ) , ",
  "12799": "new BsonDocumentCodec ( ) ) . execute ( singleConnectionBinding ) ; ",
  "12800": "throw new MongoQueryException ( e ) ; ",
  "12801": "BatchCursor < BsonDocument > cursor = createExplainableQueryOperation ( ) . execute ( singleConnectionBinding ) ; ",
  "12802": "return cursor . next ( ) . iterator ( ) . next ( ) ; ",
  "12803": "singleConnectionBinding . release ( ) ; ",
  "12804": "return new AsyncReadOperation < BsonDocument > ( ) { ",
  "12805": "public void executeAsync ( final AsyncReadBinding binding , final SingleResultCallback < BsonDocument > callback ) { ",
  "12806": "withConnection ( binding , new AsyncCallableWithConnectionAndSource ( ) { ",
  "12807": "public void call ( final AsyncConnectionSource connectionSource , final AsyncConnection connection , final Throwable t ) { ",
  "12808": "SingleResultCallback < BsonDocument > errHandlingCallback = errorHandlingCallback ( callback , LOGGER ) ; ",
  "12809": "errHandlingCallback . onResult ( null , t ) ; ",
  "12810": "AsyncReadBinding singleConnectionReadBinding = ",
  "12811": "new AsyncSingleConnectionReadBinding ( binding . getReadPreference ( ) , connectionSource . getServerDescription ( ) , ",
  "12812": "new CommandReadOperation < BsonDocument > ( namespace . getDatabaseName ( ) , ",
  "12813": "new BsonDocument ( \"explain\" , getCommand ( binding . getSessionContext ( ) ) ) , ",
  "12814": ". executeAsync ( singleConnectionReadBinding , ",
  "12815": "releasingCallback ( exceptionTransformingCallback ( errHandlingCallback ) , ",
  "12816": "singleConnectionReadBinding , connectionSource , connection ) ) ; ",
  "12817": "createExplainableQueryOperation ( ) ",
  "12818": "releasingCallback ( new ExplainResultCallback ( errHandlingCallback ) , ",
  "12819": "public static JavaWrapper getWrapperIfReflectionObject ( final Class c ) { ",
  "12820": "if ( ReflectionDBObject . class . isAssignableFrom ( c ) ) { ",
  "12821": "return getWrapper ( c ) ; ",
  "12822": "} public static JavaWrapper getWrapper ( final Class c ) { ",
  "12823": "JavaWrapper w = _wrappers . get ( c ) ; ",
  "12824": "if ( w == null ) { ",
  "12825": "w = new JavaWrapper ( c ) ; ",
  "12826": "_wrappers . put ( c , w ) ; ",
  "12827": "return w ; ",
  "12828": "} public CountOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "12829": "} public UUID asUuid ( ) { ",
  "12830": "if ( ! BsonBinarySubType . isUuid ( type ) ) { ",
  "12831": "if ( type != BsonBinarySubType . UUID_STANDARD . getValue ( ) ) { ",
  "12832": "return UuidHelper . decodeBinaryToUuid ( this . data . clone ( ) , this . type , UuidRepresentation . STANDARD ) ; ",
  "12833": "} public UUID asUuid ( final UuidRepresentation uuidRepresentation ) { ",
  "12834": "Assertions . notNull ( \"uuidRepresentation\" , uuidRepresentation ) ; ",
  "12835": "final byte uuidType = uuidRepresentation == UuidRepresentation . STANDARD ",
  "12836": "? BsonBinarySubType . UUID_STANDARD . getValue ( ) ",
  "12837": ": BsonBinarySubType . UUID_LEGACY . getValue ( ) ; ",
  "12838": "if ( type != uuidType ) { ",
  "12839": "return UuidHelper . decodeBinaryToUuid ( data . clone ( ) , type , uuidRepresentation ) ; ",
  "12840": "} public static RawBsonDocument parse ( final String json ) { ",
  "12841": "notNull ( \"json\" , json ) ; ",
  "12842": "return new RawBsonDocumentCodec ( ) . decode ( new JsonReader ( json ) , DecoderContext . builder ( ) . build ( ) ) ; ",
  "12843": "} public ByteBuf getByteBuffer ( ) { ",
  "12844": "ByteBuffer buffer = ByteBuffer . wrap ( bytes , offset , length ) ; ",
  "12845": "buffer . order ( ByteOrder . LITTLE_ENDIAN ) ; ",
  "12846": "return new ByteBufNIO ( buffer ) ; ",
  "12847": "} public < T > T decode ( final Codec < T > codec ) { ",
  "12848": "return decode ( ( Decoder < T > ) codec ) ; ",
  "12849": "} public < T > T decode ( final Decoder < T > decoder ) { ",
  "12850": "BsonBinaryReader reader = createReader ( ) ; ",
  "12851": "return decoder . decode ( reader , DecoderContext . builder ( ) . build ( ) ) ; ",
  "12852": "} public static String serialize ( final Object object ) { ",
  "12853": "serialize ( object , buf ) ; ",
  "12854": "} public static void serialize ( final Object object , final StringBuilder buf ) { ",
  "12855": "JSONSerializers . getLegacy ( ) . serialize ( object , buf ) ; ",
  "12856": "} public static Object parse ( final String s , final BSONCallback c ) { ",
  "12857": "if ( s == null || ( s . trim ( ) ) . equals ( \"\" ) ) { ",
  "12858": "JSONParser p = new JSONParser ( s , c ) ; ",
  "12859": "return p . parse ( ) ; ",
  "12860": "} protected Object parse ( final String name ) { ",
  "12861": "char current = get ( ) ; ",
  "12862": "switch ( current ) { ",
  "12863": "read ( 'n' ) ; ",
  "12864": "read ( 'u' ) ; ",
  "12865": "read ( 'l' ) ; ",
  "12866": "read ( 'N' ) ; ",
  "12867": "read ( 'a' ) ; ",
  "12868": "value = Double . NaN ; ",
  "12869": "read ( 't' ) ; ",
  "12870": "read ( 'r' ) ; ",
  "12871": "read ( 'e' ) ; ",
  "12872": "value = true ; ",
  "12873": "read ( 'f' ) ; ",
  "12874": "read ( 's' ) ; ",
  "12875": "value = false ; ",
  "12876": "value = parseString ( true ) ; ",
  "12877": "case '1' : ",
  "12878": "case '2' : ",
  "12879": "case '3' : ",
  "12880": "case '4' : ",
  "12881": "case '5' : ",
  "12882": "case '6' : ",
  "12883": "case '7' : ",
  "12884": "case '8' : ",
  "12885": "case '9' : ",
  "12886": "value = parseNumber ( ) ; ",
  "12887": "value = parseArray ( name ) ; ",
  "12888": "value = parseObject ( name ) ; ",
  "12889": "throw new JSONParseException ( s , pos ) ; ",
  "12890": "} protected Object parseObject ( final String name ) { ",
  "12891": "_callback . objectStart ( name ) ; ",
  "12892": "_callback . objectStart ( ) ; ",
  "12893": "read ( '{' ) ; ",
  "12894": "while ( get ( ) != '}' ) { ",
  "12895": "String key = parseString ( false ) ; ",
  "12896": "read ( ':' ) ; ",
  "12897": "Object value = parse ( key ) ; ",
  "12898": "doCallback ( key , value ) ; ",
  "12899": "if ( ( current = get ( ) ) == ',' ) { ",
  "12900": "read ( ',' ) ; ",
  "12901": "read ( '}' ) ; ",
  "12902": "return _callback . objectDone ( ) ; ",
  "12903": "} public void readHex ( ) { ",
  "12904": "if ( pos < s . length ( ) ",
  "12905": "&& ( ( s . charAt ( pos ) >= '0' && s . charAt ( pos ) <= '9' ) ",
  "12906": "|| ( s . charAt ( pos ) >= 'A' && s . charAt ( pos ) <= 'F' ) ",
  "12907": "|| ( s . charAt ( pos ) >= 'a' && s . charAt ( pos ) <= 'f' ) ) ) { ",
  "12908": "} public void skipWS ( ) { ",
  "12909": "while ( pos < s . length ( ) && Character . isWhitespace ( s . charAt ( pos ) ) ) { ",
  "12910": "} public String parseString ( final boolean needQuote ) { ",
  "12911": "char quot = 0 ; ",
  "12912": "if ( check ( '\\'' ) ) { ",
  "12913": "quot = '\\'' ; ",
  "12914": "} else if ( check ( '\\\"' ) ) { ",
  "12915": "quot = '\\\"' ; ",
  "12916": "} else if ( needQuote ) { ",
  "12917": "char current ; ",
  "12918": "if ( quot > 0 ) { ",
  "12919": "read ( quot ) ; ",
  "12920": "while ( pos < s . length ( ) ) { ",
  "12921": "current = s . charAt ( pos ) ; ",
  "12922": "if ( current == quot ) { ",
  "12923": "if ( current == '\\\\' ) { ",
  "12924": "char x = get ( ) ; ",
  "12925": "char special = 0 ; ",
  "12926": "switch ( x ) { ",
  "12927": "buf . append ( s . substring ( start , pos - 1 ) ) ; ",
  "12928": "int tempPos = pos ; ",
  "12929": "readHex ( ) ; ",
  "12930": "int codePoint = Integer . parseInt ( s . substring ( tempPos , tempPos + 4 ) , 16 ) ; ",
  "12931": "buf . append ( ( char ) codePoint ) ; ",
  "12932": "start = pos ; ",
  "12933": "special = '\\n' ; ",
  "12934": "special = '\\r' ; ",
  "12935": "special = '\\t' ; ",
  "12936": "special = '\\b' ; ",
  "12937": "special = '\\\"' ; ",
  "12938": "special = '\\\\' ; ",
  "12939": "if ( special != 0 ) { ",
  "12940": "buf . append ( special ) ; ",
  "12941": "buf . append ( s . substring ( start , pos ) ) ; ",
  "12942": "} public Number parseNumber ( ) { ",
  "12943": "get ( ) ; ",
  "12944": "int start = this . pos ; ",
  "12945": "boolean isDouble = false ; ",
  "12946": "if ( check ( '-' ) || check ( '+' ) ) { ",
  "12947": "outer : ",
  "12948": "switch ( s . charAt ( pos ) ) { ",
  "12949": "isDouble = true ; ",
  "12950": "parseFraction ( ) ; ",
  "12951": "parseExponent ( ) ; ",
  "12952": "break outer ; ",
  "12953": "if ( isDouble ) { ",
  "12954": "return Double . valueOf ( s . substring ( start , pos ) ) ; ",
  "12955": "Long val = Long . valueOf ( s . substring ( start , pos ) ) ; ",
  "12956": "if ( val <= Integer . MAX_VALUE && val >= Integer . MIN_VALUE ) { ",
  "12957": "return val . intValue ( ) ; ",
  "12958": "throw new JSONParseException ( s , start , e ) ; ",
  "12959": "} public void parseFraction ( ) { ",
  "12960": "} public void parseExponent ( ) { ",
  "12961": "} protected Object parseArray ( final String name ) { ",
  "12962": "_callback . arrayStart ( name ) ; ",
  "12963": "_callback . arrayStart ( ) ; ",
  "12964": "read ( '[' ) ; ",
  "12965": "while ( current != ']' ) { ",
  "12966": "String elemName = String . valueOf ( i ++ ) ; ",
  "12967": "Object elem = parse ( elemName ) ; ",
  "12968": "doCallback ( elemName , elem ) ; ",
  "12969": "} else if ( current == ']' ) { ",
  "12970": "read ( ']' ) ; ",
  "12971": "return _callback . arrayDone ( ) ; ",
  "12972": "bulkWriteOperation . addRequest ( new ReplaceRequest ( query , document , upsert , queryCodec , replacementCodec , collation ) ) ; ",
  "12973": "bulkWriteOperation . addRequest ( new UpdateRequest ( query , update , true , upsert , queryCodec , collation , arrayFilters ) ) ; ",
  "12974": "} public void updateOne ( final DBObject update ) { ",
  "12975": "bulkWriteOperation . addRequest ( new UpdateRequest ( query , update , false , upsert , queryCodec , collation , arrayFilters ) ) ; ",
  "12976": "} public ConnectionDescription withConnectionId ( final ConnectionId connectionId ) { ",
  "12977": "notNull ( \"connectionId\" , connectionId ) ; ",
  "12978": "return new ConnectionDescription ( connectionId , serverVersion , maxWireVersion , serverType , maxBatchCount , maxDocumentSize , ",
  "12979": "maxMessageSize , compressors ) ; ",
  "12980": "} public static WriteConcernResult acknowledged ( final int count , final boolean isUpdateOfExisting , @ Nullable final BsonValue upsertedId ) { ",
  "12981": "return new WriteConcernResult ( ) { ",
  "12982": "public int getCount ( ) { ",
  "12983": "public boolean isUpdateOfExisting ( ) { ",
  "12984": "return isUpdateOfExisting ; ",
  "12985": "public BsonValue getUpsertedId ( ) { ",
  "12986": "return upsertedId ; ",
  "12987": "WriteConcernResult that = ( WriteConcernResult ) o ; ",
  "12988": "if ( count != that . getCount ( ) ) { ",
  "12989": "if ( isUpdateOfExisting != that . isUpdateOfExisting ( ) ) { ",
  "12990": "if ( upsertedId != null ? ! upsertedId . equals ( that . getUpsertedId ( ) ) : that . getUpsertedId ( ) != null ) { ",
  "12991": "int result = count ; ",
  "12992": "result = 31 * result + ( isUpdateOfExisting ? 1 : 0 ) ; ",
  "12993": "result = 31 * result + ( upsertedId != null ? upsertedId . hashCode ( ) : 0 ) ; ",
  "12994": "return \"AcknowledgedWriteResult{\" ",
  "12995": "+ \"count=\" + count ",
  "12996": "} public static WriteConcernResult unacknowledged ( ) { ",
  "12997": "return \"UnacknowledgedWriteResult{}\" ; ",
  "12998": "} public static Document parse ( final String json , final Decoder < Document > decoder ) { ",
  "12999": "notNull ( \"codec\" , decoder ) ; ",
  "13000": "JsonReader bsonReader = new JsonReader ( json ) ; ",
  "13001": "return decoder . decode ( bsonReader , DecoderContext . builder ( ) . build ( ) ) ; ",
  "13002": "} public Document append ( final String key , final Object value ) { ",
  "13003": "documentAsMap . put ( key , value ) ; ",
  "13004": "} public < T > T get ( final Object key , final Class < T > clazz ) { ",
  "13005": "notNull ( \"clazz\" , clazz ) ; ",
  "13006": "return clazz . cast ( documentAsMap . get ( key ) ) ; ",
  "13007": "public < T > T get ( final Object key , final T defaultValue ) { ",
  "13008": "notNull ( \"defaultValue\" , defaultValue ) ; ",
  "13009": "Object value = documentAsMap . get ( key ) ; ",
  "13010": "return value == null ? defaultValue : ( T ) value ; ",
  "13011": "} public < T > T getEmbedded ( final List < ? > keys , final Class < T > clazz ) { ",
  "13012": "notNull ( \"keys\" , keys ) ; ",
  "13013": "isTrue ( \"keys\" , ! keys . isEmpty ( ) ) ; ",
  "13014": "return getEmbeddedValue ( keys , clazz , null ) ; ",
  "13015": "} public < T > T getEmbedded ( final List < ? > keys , final T defaultValue ) { ",
  "13016": "return getEmbeddedValue ( keys , null , defaultValue ) ; ",
  "13017": "private < T > T getEmbeddedValue ( final List < ? > keys , final Class < T > clazz , final T defaultValue ) { ",
  "13018": "Object value = this ; ",
  "13019": "Iterator < ? > keyIterator = keys . iterator ( ) ; ",
  "13020": "while ( keyIterator . hasNext ( ) ) { ",
  "13021": "Object key = keyIterator . next ( ) ; ",
  "13022": "value = ( ( Document ) value ) . get ( key ) ; ",
  "13023": "if ( ! ( value instanceof Document ) ) { ",
  "13024": "} else if ( keyIterator . hasNext ( ) ) { ",
  "13025": "key , value . getClass ( ) . getName ( ) ) ) ; ",
  "13026": "return clazz != null ? clazz . cast ( value ) : ( T ) value ; ",
  "13027": "} public < T > List < T > getList ( final Object key , final Class < T > clazz ) { ",
  "13028": "return constructValuesList ( key , clazz , null ) ; ",
  "13029": "} public < T > List < T > getList ( final Object key , final Class < T > clazz , final List < T > defaultValue ) { ",
  "13030": "return constructValuesList ( key , clazz , defaultValue ) ; ",
  "13031": "private < T > List < T > constructValuesList ( final Object key , final Class < T > clazz , final List < T > defaultValue ) { ",
  "13032": "List < ? > value = get ( key , List . class ) ; ",
  "13033": "for ( Object item : value ) { ",
  "13034": "if ( ! clazz . isAssignableFrom ( item . getClass ( ) ) ) { ",
  "13035": "return ( List < T > ) value ; ",
  "13036": "} public String toJson ( final JsonWriterSettings writerSettings , final Encoder < Document > encoder ) { ",
  "13037": "JsonWriter writer = new JsonWriter ( new StringWriter ( ) , writerSettings ) ; ",
  "13038": "encoder . encode ( writer , this , EncoderContext . builder ( ) . isEncodingCollectibleDocument ( true ) . build ( ) ) ; ",
  "13039": "return writer . getWriter ( ) . toString ( ) ; ",
  "13040": "} public static TransactionOptions merge ( final TransactionOptions options , final TransactionOptions defaultOptions ) { ",
  "13041": "notNull ( \"defaultOptions\" , defaultOptions ) ; ",
  "13042": "return TransactionOptions . builder ( ) ",
  "13043": ". writeConcern ( options . getWriteConcern ( ) == null ",
  "13044": "? defaultOptions . getWriteConcern ( ) : options . getWriteConcern ( ) ) ",
  "13045": ". readConcern ( options . getReadConcern ( ) == null ",
  "13046": "? defaultOptions . getReadConcern ( ) : options . getReadConcern ( ) ) ",
  "13047": ". readPreference ( options . getReadPreference ( ) == null ",
  "13048": "? defaultOptions . getReadPreference ( ) : options . getReadPreference ( ) ) ",
  "13049": "final MongoCollection < Document > collection = database . getCollection ( \"test\" ) ; ",
  "13050": ". append ( \"type\" , \"database\" ) ",
  "13051": ". append ( \"count\" , 1 ) ",
  "13052": ". append ( \"info\" , new Document ( \"x\" , 203 ) . append ( \"y\" , 102 ) ) ; ",
  "13053": "collection . insertOne ( doc , new SingleResultCallback < Void > ( ) { ",
  "13054": "collection . find ( ) . first ( new SingleResultCallback < Document > ( ) { ",
  "13055": "public void onResult ( final Document document , final Throwable t ) { ",
  "13056": "List < Document > documents = new ArrayList < Document > ( ) ; ",
  "13057": "for ( int i = 0 ; i < 100 ; i ++ ) { ",
  "13058": "documents . add ( new Document ( \"i\" , i ) ) ; ",
  "13059": "collection . insertMany ( documents , new SingleResultCallback < Void > ( ) { ",
  "13060": "SingleResultCallback < Document > printDocument = new SingleResultCallback < Document > ( ) { ",
  "13061": "collection . find ( ) . first ( printDocument ) ; ",
  "13062": "collection . find ( ) . forEach ( printDocumentBlock , callbackWhenFinished ) ; ",
  "13063": "collection . find ( eq ( \"i\" , 71 ) ) . first ( printDocument ) ; ",
  "13064": "collection . find ( gt ( \"i\" , 50 ) ) . forEach ( printDocumentBlock , callbackWhenFinished ) ; ",
  "13065": "collection . find ( and ( gt ( \"i\" , 50 ) , lte ( \"i\" , 100 ) ) ) . forEach ( printDocumentBlock , callbackWhenFinished ) ; ",
  "13066": "collection . find ( exists ( \"i\" ) ) . sort ( descending ( \"i\" ) ) . first ( printDocument ) ; ",
  "13067": "collection . find ( ) . projection ( excludeId ( ) ) . first ( printDocument ) ; ",
  "13068": "collection . aggregate ( asList ( ",
  "13069": "match ( gt ( \"i\" , 0 ) ) , ",
  "13070": ") . forEach ( printDocumentBlock , callbackWhenFinished ) ; ",
  "13071": "collection . aggregate ( singletonList ( group ( null , sum ( \"total\" , \"$i\" ) ) ) ) . first ( printDocument ) ; ",
  "13072": "collection . updateOne ( eq ( \"i\" , 10 ) , set ( \"i\" , 110 ) , ",
  "13073": "new SingleResultCallback < UpdateResult > ( ) { ",
  "13074": "collection . updateMany ( lt ( \"i\" , 100 ) , inc ( \"i\" , 100 ) , ",
  "13075": "collection . deleteOne ( eq ( \"i\" , 110 ) , new SingleResultCallback < DeleteResult > ( ) { ",
  "13076": "collection . deleteMany ( gte ( \"i\" , 100 ) , new SingleResultCallback < DeleteResult > ( ) { ",
  "13077": "List < WriteModel < Document > > writes = new ArrayList < WriteModel < Document > > ( ) ; ",
  "13078": "writes . add ( new InsertOneModel < Document > ( new Document ( \"_id\" , 4 ) ) ) ; ",
  "13079": "writes . add ( new InsertOneModel < Document > ( new Document ( \"_id\" , 5 ) ) ) ; ",
  "13080": "writes . add ( new InsertOneModel < Document > ( new Document ( \"_id\" , 6 ) ) ) ; ",
  "13081": "writes . add ( new UpdateOneModel < Document > ( new Document ( \"_id\" , 1 ) , new Document ( \"$set\" , new Document ( \"x\" , 2 ) ) ) ) ; ",
  "13082": "writes . add ( new DeleteOneModel < Document > ( new Document ( \"_id\" , 2 ) ) ) ; ",
  "13083": "writes . add ( new ReplaceOneModel < Document > ( new Document ( \"_id\" , 3 ) , new Document ( \"_id\" , 3 ) . append ( \"x\" , 4 ) ) ) ; ",
  "13084": "SingleResultCallback < BulkWriteResult > printBatchResult = new SingleResultCallback < BulkWriteResult > ( ) { ",
  "13085": "public void onResult ( final BulkWriteResult result , final Throwable t ) { ",
  "13086": "System . out . println ( result ) ; ",
  "13087": "collection . bulkWrite ( writes , printBatchResult ) ; ",
  "13088": "final CountDownLatch dropLatch3 = new CountDownLatch ( 1 ) ; ",
  "13089": "dropLatch3 . countDown ( ) ; ",
  "13090": "dropLatch3 . await ( ) ; ",
  "13091": "collection . bulkWrite ( writes , new BulkWriteOptions ( ) . ordered ( false ) , printBatchResult ) ; ",
  "13092": "final CountDownLatch dropLatch4 = new CountDownLatch ( 1 ) ; ",
  "13093": "dropLatch4 . countDown ( ) ; ",
  "13094": "dropLatch4 . await ( ) ; ",
  "13095": "} static boolean prohibited ( final int codepoint ) { ",
  "13096": "return nonAsciiSpace ( ( char ) codepoint ) ",
  "13097": "|| asciiControl ( ( char ) codepoint ) ",
  "13098": "|| nonAsciiControl ( codepoint ) ",
  "13099": "|| privateUse ( codepoint ) ",
  "13100": "|| nonCharacterCodePoint ( codepoint ) ",
  "13101": "|| surrogateCodePoint ( codepoint ) ",
  "13102": "|| inappropriateForPlainText ( codepoint ) ",
  "13103": "|| inappropriateForCanonical ( codepoint ) ",
  "13104": "|| changeDisplayProperties ( codepoint ) ",
  "13105": "|| tagging ( codepoint ) ; ",
  "13106": "} private static boolean changeDisplayProperties ( final int codepoint ) { ",
  "13107": "return codepoint == 0x0340 ",
  "13108": "|| codepoint == 0x0341 ",
  "13109": "|| codepoint == 0x200E ",
  "13110": "|| codepoint == 0x200F ",
  "13111": "|| codepoint == 0x202A ",
  "13112": "|| codepoint == 0x202B ",
  "13113": "|| codepoint == 0x202C ",
  "13114": "|| codepoint == 0x202D ",
  "13115": "|| codepoint == 0x202E ",
  "13116": "|| codepoint == 0x206A ",
  "13117": "|| codepoint == 0x206B ",
  "13118": "|| codepoint == 0x206C ",
  "13119": "|| codepoint == 0x206D ",
  "13120": "|| codepoint == 0x206E ",
  "13121": "|| codepoint == 0x206F ; ",
  "13122": "} private static boolean nonCharacterCodePoint ( final int codepoint ) { ",
  "13123": "return 0xFDD0 <= codepoint && codepoint <= 0xFDEF ",
  "13124": "|| 0xFFFE <= codepoint && codepoint <= 0xFFFF ",
  "13125": "|| 0x1FFFE <= codepoint && codepoint <= 0x1FFFF ",
  "13126": "|| 0x2FFFE <= codepoint && codepoint <= 0x2FFFF ",
  "13127": "|| 0x3FFFE <= codepoint && codepoint <= 0x3FFFF ",
  "13128": "|| 0x4FFFE <= codepoint && codepoint <= 0x4FFFF ",
  "13129": "|| 0x5FFFE <= codepoint && codepoint <= 0x5FFFF ",
  "13130": "|| 0x6FFFE <= codepoint && codepoint <= 0x6FFFF ",
  "13131": "|| 0x7FFFE <= codepoint && codepoint <= 0x7FFFF ",
  "13132": "|| 0x8FFFE <= codepoint && codepoint <= 0x8FFFF ",
  "13133": "|| 0x9FFFE <= codepoint && codepoint <= 0x9FFFF ",
  "13134": "|| 0xAFFFE <= codepoint && codepoint <= 0xAFFFF ",
  "13135": "|| 0xBFFFE <= codepoint && codepoint <= 0xBFFFF ",
  "13136": "|| 0xCFFFE <= codepoint && codepoint <= 0xCFFFF ",
  "13137": "|| 0xDFFFE <= codepoint && codepoint <= 0xDFFFF ",
  "13138": "|| 0xEFFFE <= codepoint && codepoint <= 0xEFFFF ",
  "13139": "|| 0xFFFFE <= codepoint && codepoint <= 0xFFFFF ",
  "13140": "|| 0x10FFFE <= codepoint && codepoint <= 0x10FFFF ; ",
  "13141": "} private static boolean nonAsciiControl ( final int codepoint ) { ",
  "13142": "return 0x0080 <= codepoint && codepoint <= 0x009F ",
  "13143": "|| codepoint == 0x06DD ",
  "13144": "|| codepoint == 0x070F ",
  "13145": "|| codepoint == 0x180E ",
  "13146": "|| codepoint == 0x200C ",
  "13147": "|| codepoint == 0x200D ",
  "13148": "|| codepoint == 0x2028 ",
  "13149": "|| codepoint == 0x2029 ",
  "13150": "|| codepoint == 0x2060 ",
  "13151": "|| codepoint == 0x2061 ",
  "13152": "|| codepoint == 0x2062 ",
  "13153": "|| codepoint == 0x2063 ",
  "13154": "|| 0x206A <= codepoint && codepoint <= 0x206F ",
  "13155": "|| codepoint == 0xFEFF ",
  "13156": "|| 0xFFF9 <= codepoint && codepoint <= 0xFFFC ",
  "13157": "|| 0x1D173 <= codepoint && codepoint <= 0x1D17A ; ",
  "13158": "} private static boolean mappedToNothing ( final char ch ) { ",
  "13159": "return ch == '\u00ad' ",
  "13160": "|| ch == '\u034f' ",
  "13161": "|| ch == '\u1806' ",
  "13162": "|| ch == '\u180b' ",
  "13163": "|| ch == '\u180c' ",
  "13164": "|| ch == '\u180d' ",
  "13165": "|| ch == '\u200b' ",
  "13166": "|| ch == '\u200c' ",
  "13167": "|| ch == '\u200d' ",
  "13168": "|| ch == '\u2060' ",
  "13169": "|| '\ufe00' <= ch && ch <= '\ufe0f' ",
  "13170": "|| ch == '\ufeff' ; ",
  "13171": "public void release ( final T t , final boolean prune ) { ",
  "13172": "close ( t ) ; ",
  "13173": "if ( prune ) { ",
  "13174": "available . addLast ( t ) ; ",
  "13175": "releasePermit ( ) ; ",
  "13176": "public T get ( final long timeout , final TimeUnit timeUnit ) { ",
  "13177": "if ( ! acquirePermit ( timeout , timeUnit ) ) { ",
  "13178": "T t = available . pollLast ( ) ; ",
  "13179": "t = createNewAndReleasePermitIfFailure ( false ) ; ",
  "13180": "Iterator < T > iter = available . iterator ( ) ; ",
  "13181": "T t = iter . next ( ) ; ",
  "13182": "} public static < TExpression , Boundary > Bson bucket ( final TExpression groupBy , final List < Boundary > boundaries ) { ",
  "13183": "return bucket ( groupBy , boundaries , new BucketOptions ( ) ) ; ",
  "13184": "} public static < TExpression , TBoundary > Bson bucket ( final TExpression groupBy , final List < TBoundary > boundaries , ",
  "13185": "final BucketOptions options ) { ",
  "13186": "return new BucketStage < TExpression , TBoundary > ( groupBy , boundaries , options ) ; ",
  "13187": "} public static < TExpression > Bson bucketAuto ( final TExpression groupBy , final int buckets ) { ",
  "13188": "return bucketAuto ( groupBy , buckets , new BucketAutoOptions ( ) ) ; ",
  "13189": "} public static < TExpression > Bson bucketAuto ( final TExpression groupBy , final int buckets , final BucketAutoOptions options ) { ",
  "13190": "return new BucketAutoStage < TExpression > ( groupBy , buckets , options ) ; ",
  "13191": "} public static Bson lookup ( final String from , final String localField , final String foreignField , final String as ) { ",
  "13192": "return new BsonDocument ( \"$lookup\" , new BsonDocument ( \"from\" , new BsonString ( from ) ) ",
  "13193": ". append ( \"localField\" , new BsonString ( localField ) ) ",
  "13194": ". append ( \"foreignField\" , new BsonString ( foreignField ) ) ",
  "13195": ". append ( \"as\" , new BsonString ( as ) ) ) ; ",
  "13196": "} public static Bson lookup ( final String from , final List < ? extends Bson > pipeline , final String as ) { ",
  "13197": "return lookup ( from , null , pipeline , as ) ; ",
  "13198": "} public static < TExpression > Bson lookup ( final String from , @ Nullable final List < Variable < TExpression > > let , ",
  "13199": "final List < ? extends Bson > pipeline , final String as ) { ",
  "13200": "return new LookupStage < TExpression > ( from , let , pipeline , as ) ; ",
  "13201": "} public static < TExpression > Bson graphLookup ( final String from , final TExpression startWith , final String connectFromField , ",
  "13202": "final String connectToField , final String as ) { ",
  "13203": "return graphLookup ( from , startWith , connectFromField , connectToField , as , new GraphLookupOptions ( ) ) ; ",
  "13204": "final String connectToField , final String as , final GraphLookupOptions options ) { ",
  "13205": "return new GraphLookupStage < TExpression > ( from , startWith , connectFromField , connectToField , as , options ) ; ",
  "13206": "} public static < TExpression > Bson group ( @ Nullable final TExpression id , final BsonField ... fieldAccumulators ) { ",
  "13207": "return group ( id , asList ( fieldAccumulators ) ) ; ",
  "13208": "} public static < TExpression > Bson group ( @ Nullable final TExpression id , final List < BsonField > fieldAccumulators ) { ",
  "13209": "return new GroupStage < TExpression > ( id , fieldAccumulators ) ; ",
  "13210": "} public static Bson unwind ( final String fieldName , final UnwindOptions unwindOptions ) { ",
  "13211": "notNull ( \"unwindOptions\" , unwindOptions ) ; ",
  "13212": "BsonDocument options = new BsonDocument ( \"path\" , new BsonString ( fieldName ) ) ; ",
  "13213": "Boolean preserveNullAndEmptyArrays = unwindOptions . isPreserveNullAndEmptyArrays ( ) ; ",
  "13214": "if ( preserveNullAndEmptyArrays != null ) { ",
  "13215": "options . append ( \"preserveNullAndEmptyArrays\" , BsonBoolean . valueOf ( preserveNullAndEmptyArrays ) ) ; ",
  "13216": "String includeArrayIndex = unwindOptions . getIncludeArrayIndex ( ) ; ",
  "13217": "if ( includeArrayIndex != null ) { ",
  "13218": "options . append ( \"includeArrayIndex\" , new BsonString ( includeArrayIndex ) ) ; ",
  "13219": "return new BsonDocument ( \"$unwind\" , options ) ; ",
  "13220": "} public static Bson out ( final String collectionName , final AggregateOutStageOptions options ) { ",
  "13221": "notNull ( \"collectionName\" , collectionName ) ; ",
  "13222": "return new OutStage ( collectionName , options ) ; ",
  "13223": "} public int pipe ( final OutputStream os ) throws IOException { ",
  "13224": "WritableByteChannel channel = Channels . newChannel ( os ) ; ",
  "13225": "return channel . write ( getBufferForInternalBytes ( ) ) ; ",
  "13226": "} public Set < Map . Entry < String , Object > > entrySet ( ) { ",
  "13227": "final List < Map . Entry < String , Object > > entries = new ArrayList < Map . Entry < String , Object > > ( ) ; ",
  "13228": "BsonBinaryReader reader = getBsonReader ( ) ; ",
  "13229": "reader . readStartDocument ( ) ; ",
  "13230": "while ( reader . readBsonType ( ) != BsonType . END_OF_DOCUMENT ) { ",
  "13231": "entries . add ( new AbstractMap . SimpleImmutableEntry < String , Object > ( reader . readName ( ) , readValue ( reader ) ) ) ; ",
  "13232": "reader . readEndDocument ( ) ; ",
  "13233": "return new Set < Map . Entry < String , Object > > ( ) { ",
  "13234": "return entries . size ( ) ; ",
  "13235": "public boolean isEmpty ( ) { ",
  "13236": "return entries . isEmpty ( ) ; ",
  "13237": "public Iterator < Map . Entry < String , Object > > iterator ( ) { ",
  "13238": "return entries . iterator ( ) ; ",
  "13239": "public Object [ ] toArray ( ) { ",
  "13240": "return entries . toArray ( ) ; ",
  "13241": "public < T > T [ ] toArray ( final T [ ] a ) { ",
  "13242": "return entries . toArray ( a ) ; ",
  "13243": "public boolean contains ( final Object o ) { ",
  "13244": "return entries . contains ( o ) ; ",
  "13245": "public boolean containsAll ( final Collection < ? > c ) { ",
  "13246": "return entries . containsAll ( c ) ; ",
  "13247": "public boolean add ( final Map . Entry < String , Object > stringObjectEntry ) { ",
  "13248": "public boolean remove ( final Object o ) { ",
  "13249": "public boolean addAll ( final Collection < ? extends Map . Entry < String , Object > > c ) { ",
  "13250": "public boolean retainAll ( final Collection < ? > c ) { ",
  "13251": "public boolean removeAll ( final Collection < ? > c ) { ",
  "13252": "} public static AsyncInputStream channelToInputStream ( final AsynchronousByteChannel asynchronousByteChannel ) { ",
  "13253": "notNull ( \"asynchronousByteChannel\" , asynchronousByteChannel ) ; ",
  "13254": "public void read ( final ByteBuffer dst , final SingleResultCallback < Integer > callback ) { ",
  "13255": "asynchronousByteChannel . read ( dst , null , new CompletionHandler < Integer , Object > ( ) { ",
  "13256": "public void completed ( final Integer result , final Object attachment ) { ",
  "13257": "callback . onResult ( result , null ) ; ",
  "13258": "public void failed ( final Throwable exc , final Object attachment ) { ",
  "13259": "callback . onResult ( null , exc ) ; ",
  "13260": "asynchronousByteChannel . close ( ) ; ",
  "13261": "} public static AsyncOutputStream channelToOutputStream ( final AsynchronousFileChannel asynchronousFileChannel ) { ",
  "13262": "notNull ( \"asynchronousByteChannel\" , asynchronousFileChannel ) ; ",
  "13263": "private int position = 0 ; ",
  "13264": "public void write ( final ByteBuffer src , final SingleResultCallback < Integer > callback ) { ",
  "13265": "asynchronousFileChannel . write ( src , position , null , new CompletionHandler < Integer , Object > ( ) { ",
  "13266": "position += result ; ",
  "13267": "asynchronousFileChannel . close ( ) ; ",
  "13268": "} public static < K , V > CopyOnWriteMap < K , V > newHashMap ( ) { ",
  "13269": "Builder < K , V > builder = builder ( ) ; ",
  "13270": "return builder . newHashMap ( ) ; ",
  "13271": "} public static < K , V > CopyOnWriteMap < K , V > newHashMap ( final Map < ? extends K , ? extends V > map ) { ",
  "13272": "return builder . addAll ( map ) . newHashMap ( ) ; ",
  "13273": "} public static < K , V > CopyOnWriteMap < K , V > newLinkedMap ( ) { ",
  "13274": "return builder . newLinkedMap ( ) ; ",
  "13275": "} protected void throwInvalidContextType ( final String methodName , final BsonContextType actualContextType , ",
  "13276": "final BsonContextType ... validContextTypes ) { ",
  "13277": "methodName , validContextTypesString , actualContextType ) ; ",
  "13278": "throw new BsonInvalidOperationException ( message ) ; ",
  "13279": "methodName , validStatesString , state ) ; ",
  "13280": "} protected void verifyBSONType ( final String methodName , final BsonType requiredBsonType ) { ",
  "13281": "if ( state == State . INITIAL || state == State . SCOPE_DOCUMENT || state == State . TYPE ) { ",
  "13282": "readBsonType ( ) ; ",
  "13283": "if ( state == State . NAME ) { ",
  "13284": "skipName ( ) ; ",
  "13285": "if ( state != State . VALUE ) { ",
  "13286": "throwInvalidState ( methodName , State . VALUE ) ; ",
  "13287": "if ( currentBsonType != requiredBsonType ) { ",
  "13288": "methodName , requiredBsonType , currentBsonType ) ) ; ",
  "13289": "} protected void verifyName ( final String expectedName ) { ",
  "13290": "String actualName = readName ( ) ; ",
  "13291": "if ( ! actualName . equals ( expectedName ) ) { ",
  "13292": "expectedName , actualName ) ) ; ",
  "13293": "} protected void checkPreconditions ( final String methodName , final BsonType type ) { ",
  "13294": "verifyBSONType ( methodName , type ) ; ",
  "13295": "switch ( context . getContextType ( ) ) { ",
  "13296": "return State . TYPE ; ",
  "13297": "return State . DONE ; ",
  "13298": "} public static Decimal128 parse ( final String value ) { ",
  "13299": "String lowerCasedValue = value . toLowerCase ( ) ; ",
  "13300": "if ( NaN_STRINGS . contains ( lowerCasedValue ) ) { ",
  "13301": "return NaN ; ",
  "13302": "if ( NEGATIVE_NaN_STRINGS . contains ( lowerCasedValue ) ) { ",
  "13303": "return NEGATIVE_NaN ; ",
  "13304": "if ( POSITIVE_INFINITY_STRINGS . contains ( lowerCasedValue ) ) { ",
  "13305": "return POSITIVE_INFINITY ; ",
  "13306": "if ( NEGATIVE_INFINITY_STRINGS . contains ( lowerCasedValue ) ) { ",
  "13307": "return NEGATIVE_INFINITY ; ",
  "13308": "return new Decimal128 ( new BigDecimal ( value ) , value . charAt ( 0 ) == '-' ) ; ",
  "13309": "} public BigDecimal bigDecimalValue ( ) { ",
  "13310": "if ( isNaN ( ) ) { ",
  "13311": "if ( isInfinite ( ) ) { ",
  "13312": "BigDecimal bigDecimal = bigDecimalValueNoNegativeZeroCheck ( ) ; ",
  "13313": "if ( isNegative ( ) && bigDecimal . signum ( ) == 0 ) { ",
  "13314": "return bigDecimal ; ",
  "13315": "} private byte [ ] getBytes ( ) { ",
  "13316": "byte [ ] bytes = new byte [ 15 ] ; ",
  "13317": "long mask = 0x00000000000000ff ; ",
  "13318": "for ( int i = 14 ; i >= 7 ; i -- ) { ",
  "13319": "bytes [ i ] = ( byte ) ( ( low & mask ) > > > ( ( 14 - i ) << 3 ) ) ; ",
  "13320": "mask = mask << 8 ; ",
  "13321": "mask = 0x00000000000000ff ; ",
  "13322": "for ( int i = 6 ; i >= 1 ; i -- ) { ",
  "13323": "bytes [ i ] = ( byte ) ( ( high & mask ) > > > ( ( 6 - i ) << 3 ) ) ; ",
  "13324": "mask = 0x0001000000000000L ; ",
  "13325": "bytes [ 0 ] = ( byte ) ( ( high & mask ) > > > 48 ) ; ",
  "13326": "public double doubleValue ( ) { ",
  "13327": "if ( isNegative ( ) ) { ",
  "13328": "return Double . NEGATIVE_INFINITY ; ",
  "13329": "return Double . POSITIVE_INFINITY ; ",
  "13330": "if ( hasDifferentSign ( bigDecimal ) ) { ",
  "13331": "return - 0.0d ; ",
  "13332": "return bigDecimal . doubleValue ( ) ; ",
  "13333": "} public AggregateExplainOperation maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "13334": "} public AggregateExplainOperation hint ( final BsonValue hint ) { ",
  "13335": "this . hint = hint ; ",
  "13336": "BsonDocument collation = new BsonDocument ( ) ; ",
  "13337": "if ( locale != null ) { ",
  "13338": "collation . put ( \"locale\" , new BsonString ( locale ) ) ; ",
  "13339": "if ( caseLevel != null ) { ",
  "13340": "collation . put ( \"caseLevel\" , new BsonBoolean ( caseLevel ) ) ; ",
  "13341": "if ( caseFirst != null ) { ",
  "13342": "collation . put ( \"caseFirst\" , new BsonString ( caseFirst . getValue ( ) ) ) ; ",
  "13343": "if ( strength != null ) { ",
  "13344": "collation . put ( \"strength\" , new BsonInt32 ( strength . getIntRepresentation ( ) ) ) ; ",
  "13345": "if ( numericOrdering != null ) { ",
  "13346": "collation . put ( \"numericOrdering\" , new BsonBoolean ( numericOrdering ) ) ; ",
  "13347": "if ( alternate != null ) { ",
  "13348": "collation . put ( \"alternate\" , new BsonString ( alternate . getValue ( ) ) ) ; ",
  "13349": "if ( maxVariable != null ) { ",
  "13350": "collation . put ( \"maxVariable\" , new BsonString ( maxVariable . getValue ( ) ) ) ; ",
  "13351": "if ( normalization != null ) { ",
  "13352": "collation . put ( \"normalization\" , new BsonBoolean ( normalization ) ) ; ",
  "13353": "if ( backwards != null ) { ",
  "13354": "collation . put ( \"backwards\" , new BsonBoolean ( backwards ) ) ; ",
  "13355": "return collation ; ",
  "13356": "} public MongoClientOptions getOptions ( ) { ",
  "13357": "ReadPreference readPreference = proxied . getReadPreference ( ) ; ",
  "13358": "builder . readPreference ( readPreference ) ; ",
  "13359": "ReadConcern readConcern = proxied . getReadConcern ( ) ; ",
  "13360": "builder . readConcern ( readConcern ) ; ",
  "13361": "WriteConcern writeConcern = proxied . getWriteConcern ( ) ; ",
  "13362": "builder . writeConcern ( writeConcern ) ; ",
  "13363": "if ( proxied . getRetryWritesValue ( ) != null ) { ",
  "13364": "builder . retryWrites ( proxied . getRetryWritesValue ( ) ) ; ",
  "13365": "if ( proxied . getRetryReads ( ) != null ) { ",
  "13366": "builder . retryReads ( proxied . getRetryReads ( ) ) ; ",
  "13367": "Integer maxConnectionPoolSize = proxied . getMaxConnectionPoolSize ( ) ; ",
  "13368": "if ( maxConnectionPoolSize != null ) { ",
  "13369": "builder . connectionsPerHost ( maxConnectionPoolSize ) ; ",
  "13370": "Integer integer = proxied . getMinConnectionPoolSize ( ) ; ",
  "13371": "if ( integer != null ) { ",
  "13372": "builder . minConnectionsPerHost ( integer ) ; ",
  "13373": "Integer maxWaitTime = proxied . getMaxWaitTime ( ) ; ",
  "13374": "if ( maxWaitTime != null ) { ",
  "13375": "builder . maxWaitTime ( maxWaitTime ) ; ",
  "13376": "Integer threadsAllowedToBlockForConnectionMultiplier = proxied . getThreadsAllowedToBlockForConnectionMultiplier ( ) ; ",
  "13377": "if ( threadsAllowedToBlockForConnectionMultiplier != null ) { ",
  "13378": "builder . threadsAllowedToBlockForConnectionMultiplier ( threadsAllowedToBlockForConnectionMultiplier ) ; ",
  "13379": "Integer maxConnectionIdleTime = proxied . getMaxConnectionIdleTime ( ) ; ",
  "13380": "if ( maxConnectionIdleTime != null ) { ",
  "13381": "builder . maxConnectionIdleTime ( maxConnectionIdleTime ) ; ",
  "13382": "Integer maxConnectionLifeTime = proxied . getMaxConnectionLifeTime ( ) ; ",
  "13383": "if ( maxConnectionLifeTime != null ) { ",
  "13384": "builder . maxConnectionLifeTime ( maxConnectionLifeTime ) ; ",
  "13385": "Integer socketTimeout = proxied . getSocketTimeout ( ) ; ",
  "13386": "if ( socketTimeout != null ) { ",
  "13387": "builder . socketTimeout ( socketTimeout ) ; ",
  "13388": "Integer connectTimeout = proxied . getConnectTimeout ( ) ; ",
  "13389": "if ( connectTimeout != null ) { ",
  "13390": "builder . connectTimeout ( connectTimeout ) ; ",
  "13391": "String requiredReplicaSetName = proxied . getRequiredReplicaSetName ( ) ; ",
  "13392": "if ( requiredReplicaSetName != null ) { ",
  "13393": "builder . requiredReplicaSetName ( requiredReplicaSetName ) ; ",
  "13394": "Boolean sslEnabled = proxied . getSslEnabled ( ) ; ",
  "13395": "if ( sslEnabled != null ) { ",
  "13396": "builder . sslEnabled ( sslEnabled ) ; ",
  "13397": "Boolean sslInvalidHostnameAllowed = proxied . getSslInvalidHostnameAllowed ( ) ; ",
  "13398": "if ( sslInvalidHostnameAllowed != null ) { ",
  "13399": "builder . sslInvalidHostNameAllowed ( sslInvalidHostnameAllowed ) ; ",
  "13400": "Integer serverSelectionTimeout = proxied . getServerSelectionTimeout ( ) ; ",
  "13401": "if ( serverSelectionTimeout != null ) { ",
  "13402": "builder . serverSelectionTimeout ( serverSelectionTimeout ) ; ",
  "13403": "Integer localThreshold = proxied . getLocalThreshold ( ) ; ",
  "13404": "if ( localThreshold != null ) { ",
  "13405": "builder . localThreshold ( localThreshold ) ; ",
  "13406": "Integer heartbeatFrequency = proxied . getHeartbeatFrequency ( ) ; ",
  "13407": "if ( heartbeatFrequency != null ) { ",
  "13408": "builder . heartbeatFrequency ( heartbeatFrequency ) ; ",
  "13409": "String applicationName = proxied . getApplicationName ( ) ; ",
  "13410": "if ( applicationName != null ) { ",
  "13411": "builder . applicationName ( applicationName ) ; ",
  "13412": "if ( ! proxied . getCompressorList ( ) . isEmpty ( ) ) { ",
  "13413": "builder . compressorList ( proxied . getCompressorList ( ) ) ; ",
  "13414": "} public long writeTo ( final File file ) throws IOException { ",
  "13415": "out = new FileOutputStream ( file ) ; ",
  "13416": "return writeTo ( out ) ; ",
  "13417": "} public long writeTo ( final OutputStream out ) throws IOException { ",
  "13418": "int nc = numChunks ( ) ; ",
  "13419": "out . write ( getChunk ( i ) ) ; ",
  "13420": "} void remove ( ) { ",
  "13421": "fs . getFilesCollection ( ) . remove ( new BasicDBObject ( \"_id\" , id ) ) ; ",
  "13422": "fs . getChunksCollection ( ) . remove ( new BasicDBObject ( \"files_id\" , id ) ) ; ",
  "13423": "} public PushOptions sort ( @ Nullable final Integer sort ) { ",
  "13424": "if ( sortDocument != null ) { ",
  "13425": "this . sort = sort ; ",
  "13426": "} public PushOptions sortDocument ( @ Nullable final Bson sortDocument ) { ",
  "13427": "this . sortDocument = sortDocument ; ",
  "13428": "} @ BsonIgnore @ Nullable ",
  "13429": "public MongoNamespace getNamespace ( ) { ",
  "13430": "if ( namespaceDocument == null ) { ",
  "13431": "if ( ! namespaceDocument . containsKey ( \"db\" ) || ! namespaceDocument . containsKey ( \"coll\" ) ) { ",
  "13432": "return new MongoNamespace ( namespaceDocument . getString ( \"db\" ) . getValue ( ) , namespaceDocument . getString ( \"coll\" ) . getValue ( ) ) ; ",
  "13433": "public String getDatabaseName ( ) { ",
  "13434": "if ( ! namespaceDocument . containsKey ( \"db\" ) ) { ",
  "13435": "return namespaceDocument . getString ( \"db\" ) . getValue ( ) ; ",
  "13436": "} public static < TFullDocument > Codec < ChangeStreamDocument < TFullDocument > > createCodec ( final Class < TFullDocument > fullDocumentClass , ",
  "13437": "final CodecRegistry codecRegistry ) { ",
  "13438": "return new ChangeStreamDocumentCodec < TFullDocument > ( fullDocumentClass , codecRegistry ) ; ",
  "13439": "Document myDoc = collection . find ( ) . first ( ) ; ",
  "13440": "System . out . println ( myDoc . toJson ( ) ) ; ",
  "13441": "collection . insertMany ( documents ) ; ",
  "13442": "myDoc = collection . find ( ) . first ( ) ; ",
  "13443": "MongoCursor < Document > cursor = collection . find ( ) . iterator ( ) ; ",
  "13444": "System . out . println ( cursor . next ( ) . toJson ( ) ) ; ",
  "13445": "for ( Document cur : collection . find ( ) ) { ",
  "13446": "System . out . println ( cur . toJson ( ) ) ; ",
  "13447": "myDoc = collection . find ( eq ( \"i\" , 71 ) ) . first ( ) ; ",
  "13448": "cursor = collection . find ( gt ( \"i\" , 50 ) ) . iterator ( ) ; ",
  "13449": "cursor = collection . find ( and ( gt ( \"i\" , 50 ) , lte ( \"i\" , 100 ) ) ) . iterator ( ) ; ",
  "13450": "Block < Document > printBlock = new Block < Document > ( ) { ",
  "13451": "collection . find ( gt ( \"i\" , 50 ) ) . forEach ( printBlock ) ; ",
  "13452": "collection . find ( and ( gt ( \"i\" , 50 ) , lte ( \"i\" , 100 ) ) ) . forEach ( printBlock ) ; ",
  "13453": "myDoc = collection . find ( exists ( \"i\" ) ) . sort ( descending ( \"i\" ) ) . first ( ) ; ",
  "13454": "myDoc = collection . find ( ) . projection ( excludeId ( ) ) . first ( ) ; ",
  "13455": ") . forEach ( printBlock ) ; ",
  "13456": "myDoc = collection . aggregate ( singletonList ( group ( null , sum ( \"total\" , \"$i\" ) ) ) ) . first ( ) ; ",
  "13457": "collection . updateOne ( eq ( \"i\" , 10 ) , set ( \"i\" , 110 ) ) ; ",
  "13458": "UpdateResult updateResult = collection . updateMany ( lt ( \"i\" , 100 ) , inc ( \"i\" , 100 ) ) ; ",
  "13459": "collection . deleteOne ( eq ( \"i\" , 110 ) ) ; ",
  "13460": "DeleteResult deleteResult = collection . deleteMany ( gte ( \"i\" , 100 ) ) ; ",
  "13461": "collection . bulkWrite ( writes ) ; ",
  "13462": "collection . bulkWrite ( writes , new BulkWriteOptions ( ) . ordered ( false ) ) ; ",
  "13463": "} public EstimatedDocumentCountOptions maxTime ( final long maxTime , final TimeUnit timeUnit ) { ",
  "13464": "public void encode ( final BsonWriter writer , final LocalTime value , final EncoderContext encoderContext ) { ",
  "13465": "writer . writeDateTime ( value . atDate ( LocalDate . ofEpochDay ( 0L ) ) . toInstant ( ZoneOffset . UTC ) . toEpochMilli ( ) ) ; ",
  "13466": "} public static Builder builder ( final ClientSessionOptions options ) { ",
  "13467": "Builder builder = new Builder ( ) ; ",
  "13468": "builder . causallyConsistent = options . isCausallyConsistent ( ) ; ",
  "13469": "builder . defaultTransactionOptions = options . getDefaultTransactionOptions ( ) ; ",
  "13470": "connectionsPerHost = 10 ; ",
  "13471": "threadsAllowedToBlockForConnectionMultiplier = 5 ; ",
  "13472": "maxWaitTime = 1000 * 60 * 2 ; ",
  "13473": "connectTimeout = 1000 * 10 ; ",
  "13474": "socketFactory = SocketFactory . getDefault ( ) ; ",
  "13475": "socketTimeout = 0 ; ",
  "13476": "socketKeepAlive = false ; ",
  "13477": "readPreference = null ; ",
  "13478": "writeConcern = null ; ",
  "13479": "safe = false ; ",
  "13480": "w = 0 ; ",
  "13481": "wtimeout = 0 ; ",
  "13482": "fsync = false ; ",
  "13483": "j = false ; ",
  "13484": "dbDecoderFactory = DefaultDBDecoder . FACTORY ; ",
  "13485": "dbEncoderFactory = DefaultDBEncoder . FACTORY ; ",
  "13486": "description = null ; ",
  "13487": "cursorFinalizerEnabled = true ; ",
  "13488": "alwaysUseMBeans = false ; ",
  "13489": "requiredReplicaSetName = null ; ",
  "13490": "} public MongoOptions copy ( ) { ",
  "13491": "MongoOptions m = new MongoOptions ( ) ; ",
  "13492": "m . connectionsPerHost = connectionsPerHost ; ",
  "13493": "m . threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier ; ",
  "13494": "m . maxWaitTime = maxWaitTime ; ",
  "13495": "m . connectTimeout = connectTimeout ; ",
  "13496": "m . socketFactory = socketFactory ; ",
  "13497": "m . socketTimeout = socketTimeout ; ",
  "13498": "m . socketKeepAlive = socketKeepAlive ; ",
  "13499": "m . readPreference = readPreference ; ",
  "13500": "m . writeConcern = writeConcern ; ",
  "13501": "m . safe = safe ; ",
  "13502": "m . w = w ; ",
  "13503": "m . wtimeout = wtimeout ; ",
  "13504": "m . fsync = fsync ; ",
  "13505": "m . j = j ; ",
  "13506": "m . dbDecoderFactory = dbDecoderFactory ; ",
  "13507": "m . dbEncoderFactory = dbEncoderFactory ; ",
  "13508": "m . description = description ; ",
  "13509": "m . cursorFinalizerEnabled = cursorFinalizerEnabled ; ",
  "13510": "m . alwaysUseMBeans = alwaysUseMBeans ; ",
  "13511": "m . requiredReplicaSetName = requiredReplicaSetName ; ",
  "13512": "public WriteConcern getWriteConcern ( ) { ",
  "13513": "WriteConcern retVal ; ",
  "13514": "retVal = writeConcern ; ",
  "13515": "} else if ( w != 0 || wtimeout != 0 || fsync | j ) { ",
  "13516": "retVal = WriteConcern . ACKNOWLEDGED ; ",
  "13517": "if ( w != 0 ) { ",
  "13518": "retVal = retVal . withW ( w ) ; ",
  "13519": "if ( wtimeout != 0 ) { ",
  "13520": "retVal = retVal . withWTimeout ( wtimeout , TimeUnit . MILLISECONDS ) ; ",
  "13521": "if ( fsync ) { ",
  "13522": "retVal = retVal . withFsync ( fsync ) ; ",
  "13523": "if ( j ) { ",
  "13524": "retVal = retVal . withJ ( j ) ; ",
  "13525": "} else if ( safe ) { ",
  "13526": "retVal = WriteConcern . UNACKNOWLEDGED ; ",
  "13527": "public Long getMaxStaleness ( final TimeUnit timeUnit ) { ",
  "13528": "if ( maxStalenessMS == null ) { ",
  "13529": "return timeUnit . convert ( maxStalenessMS , TimeUnit . MILLISECONDS ) ; ",
  "13530": "@ ConditionalOnMissingBean ",
  "13531": "public TelemetryConfiguration telemetryConfiguration ( AzureMonitorConfig config ) { ",
  "13532": "final TelemetryConfiguration telemetryConfiguration = TelemetryConfiguration . getActive ( ) ; ",
  "13533": "if ( StringUtils . isEmpty ( telemetryConfiguration . getInstrumentationKey ( ) ) ) { ",
  "13534": "telemetryConfiguration . setInstrumentationKey ( config . instrumentationKey ( ) ) ; ",
  "13535": "return telemetryConfiguration ; ",
  "13536": "} public static String getUserAgent ( String serviceName , boolean allowTelemetry ) { ",
  "13537": "if ( allowTelemetry ) { ",
  "13538": "macAddress = GetHashMac . getHashMac ( ) ; ",
  "13539": "} private boolean isForgotPasswordAuthorizationRequest ( @ NonNull HttpServletRequest request ) { ",
  "13540": "final String error = request . getParameter ( \"error\" ) ; ",
  "13541": "final String description = request . getParameter ( \"error_description\" ) ; ",
  "13542": "if ( \"access_denied\" . equals ( error ) ) { ",
  "13543": "return description . startsWith ( \"AADB2C90118:\" ) ; ",
  "13544": "} @ SuppressFBWarnings ( \"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\" ) ",
  "13545": "private void populateProperties ( ConfigurableEnvironment environment , VcapPojo [ ] pojos ) { ",
  "13546": "final Map < String , Object > map = new HashMap < > ( ) ; ",
  "13547": "populateDefaultStorageProperties ( map , ",
  "13548": "findPojoForServiceType ( VcapServiceType . AZURE_STORAGE , pojos ) ) ; ",
  "13549": "populateDefaultServiceBusProperties ( map , ",
  "13550": "findPojoForServiceType ( VcapServiceType . AZURE_SERVICEBUS , pojos ) ) ; ",
  "13551": "populateDefaultDocumentDBProperties ( map , ",
  "13552": "findPojoForServiceType ( VcapServiceType . AZURE_DOCUMENTDB , pojos ) ) ; ",
  "13553": "addOrReplace ( environment . getPropertySources ( ) , map ) ; ",
  "13554": "} private boolean isMatchingUserGroupKey ( final JsonNode node ) { ",
  "13555": "return node . get ( aadAuthenticationProperties . getUserGroup ( ) . getKey ( ) ) . asText ( ) ",
  "13556": ". equals ( aadAuthenticationProperties . getUserGroup ( ) . getValue ( ) ) ; ",
  "13557": "} public Set < GrantedAuthority > convertGroupsToGrantedAuthorities ( final List < UserGroup > groups ) { ",
  "13558": "final Set < GrantedAuthority > mappedAuthorities = groups . stream ( ) . filter ( this :: isValidUserGroupToGrantAuthority ) ",
  "13559": ". map ( userGroup -> new SimpleGrantedAuthority ( DEFAULT_ROLE_PREFIX + userGroup . getDisplayName ( ) ) ) ",
  "13560": ". collect ( Collectors . toCollection ( LinkedHashSet :: new ) ) ; ",
  "13561": "if ( mappedAuthorities . isEmpty ( ) ) { ",
  "13562": "mappedAuthorities . add ( DEFAULT_AUTHORITY ) ; ",
  "13563": "return mappedAuthorities ; ",
  "13564": "} private boolean isValidUserGroupToGrantAuthority ( final UserGroup group ) { ",
  "13565": "return aadAuthenticationProperties . getUserGroup ( ) . getAllowedGroups ( ) . contains ( group . getDisplayName ( ) ) ",
  "13566": "|| aadAuthenticationProperties . getActiveDirectoryGroups ( ) . contains ( group . getDisplayName ( ) ) ; ",
  "13567": "} public String get ( final String property ) { ",
  "13568": "final String secretName = getKeyvaultSecretName ( property ) ; ",
  "13569": "if ( System . currentTimeMillis ( ) - this . lastUpdateTime . get ( ) > this . cacheRefreshIntervalInMs ) { ",
  "13570": "synchronized ( this . refreshLock ) { ",
  "13571": "this . lastUpdateTime . set ( System . currentTimeMillis ( ) ) ; ",
  "13572": "fillSecretsHashMap ( ) ; ",
  "13573": "if ( this . propertyNamesHashMap . containsKey ( secretName ) ) { ",
  "13574": "final SecretBundle secretBundle = this . keyVaultClient . getSecret ( this . vaultUri , secretName ) ; ",
  "13575": "return secretBundle . value ( ) ; ",
  "13576": "} public ServiceEndpoints getServiceEndpoints ( String environment ) { ",
  "13577": "if ( ! endpoints . containsKey ( environment ) ) { ",
  "13578": "return endpoints . get ( environment ) ; ",
  "13579": "} private void sendQueueMessage ( ) throws ServiceBusException , ",
  "13580": "final Message message = new Message ( ",
  "13581": "messageBody . getBytes ( StandardCharsets . UTF_8 ) ) ; ",
  "13582": "queueClientForSending . send ( message ) ; ",
  "13583": "@ Scope ( BeanDefinition . SCOPE_SINGLETON ) ",
  "13584": "@ ConditionalOnMissingBean ( AADAuthenticationFilter . class ) ",
  "13585": "public AADAuthenticationFilter azureADJwtTokenFilter ( ) { ",
  "13586": "return new AADAuthenticationFilter ( aadAuthProps , serviceEndpointsProps , getJWTResourceRetriever ( ) ) ; ",
  "13587": "} @ RequestMapping ( value = \"/api/todolist/{index}\" , ",
  "13588": "method = RequestMethod . GET , produces = { MediaType . APPLICATION_JSON_VALUE } ) ",
  "13589": "public ResponseEntity < ? > getTodoItem ( @ PathVariable ( \"index\" ) int index ) { ",
  "13590": "if ( index > todoList . size ( ) - 1 ) { ",
  "13591": "return new ResponseEntity < > ( todoList . get ( index ) , HttpStatus . OK ) ; ",
  "13592": "} @ RequestMapping ( value = \"/api/todolist\" , method = RequestMethod . GET , produces = { MediaType . APPLICATION_JSON_VALUE } ) ",
  "13593": "public ResponseEntity < List < TodoItem > > getAllTodoItems ( ) { ",
  "13594": "return new ResponseEntity < > ( todoList , HttpStatus . OK ) ; ",
  "13595": "} @ PreAuthorize ( \"hasRole('ROLE_group1')\" ) ",
  "13596": "@ RequestMapping ( value = \"/api/todolist\" , method = RequestMethod . PUT , consumes = MediaType . APPLICATION_JSON_VALUE ) ",
  "13597": "public ResponseEntity < String > updateTodoItem ( @ RequestBody TodoItem item ) { ",
  "13598": "final List < TodoItem > find = ",
  "13599": "todoList . stream ( ) . filter ( i -> i . getID ( ) == item . getID ( ) ) . collect ( Collectors . toList ( ) ) ; ",
  "13600": "if ( ! find . isEmpty ( ) ) { ",
  "13601": "todoList . set ( todoList . indexOf ( find . get ( 0 ) ) , item ) ; ",
  "13602": "} @ RequestMapping ( value = \"/api/todolist/{id}\" , method = RequestMethod . DELETE ) ",
  "13603": "public ResponseEntity < String > deleteTodoItem ( @ PathVariable ( \"id\" ) int id , ",
  "13604": "PreAuthenticatedAuthenticationToken authToken ) { ",
  "13605": "final UserPrincipal current = ( UserPrincipal ) authToken . getPrincipal ( ) ; ",
  "13606": "if ( current . isMemberOf ( ",
  "13607": "new UserGroup ( \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" , \"group1\" ) ) ) { ",
  "13608": "final List < TodoItem > find = todoList . stream ( ) . filter ( i -> i . getID ( ) == id ) . collect ( Collectors . toList ( ) ) ; ",
  "13609": "todoList . remove ( todoList . indexOf ( find . get ( 0 ) ) ) ; ",
  "13610": "return new ResponseEntity < > ( \"OK\" , HttpStatus . OK ) ; ",
  "13611": "public void run ( String ... args ) throws Exception { ",
  "13612": "final AssetInfo uploadAsset = uploadFileAndCreateAsset ( \"video.mp4\" ) ; ",
  "13613": "} private void sendQueueMessage ( ) throws ServiceBusException , InterruptedException { ",
  "13614": "final Message message = new Message ( messageBody . getBytes ( StandardCharsets . UTF_8 ) ) ; ",
  "13615": "queueClient . send ( message ) ; ",
  "13616": "} public Map < String , Object > toMap ( boolean stacktrace ) { ",
  "13617": "Status status = Status . valueOf ( this . status ) ; ",
  "13618": "Throwable cause = Optional . ofNullable ( getCause ( ) ) . orElse ( this ) ; ",
  "13619": "String message = Optional . ofNullable ( cause . getMessage ( ) ) . orElse ( status . reason ( ) ) ; ",
  "13620": "Map < String , Object > err = new LinkedHashMap < > ( ) ; ",
  "13621": "err . put ( \"message\" , message ) ; ",
  "13622": "if ( stacktrace ) { ",
  "13623": "err . put ( \"stacktrace\" , Throwables . getStackTraceAsString ( cause ) . replace ( \"\\r\" , \"\" ) . split ( \"\\\\n\" ) ) ; ",
  "13624": "err . put ( \"status\" , status . value ( ) ) ; ",
  "13625": "err . put ( \"reason\" , status . reason ( ) ) ; ",
  "13626": "return err ; ",
  "13627": "} private static String message ( final Status status , @ Nullable final String tail ) { ",
  "13628": "return message ( status . reason ( ) , status . value ( ) , tail ) ; ",
  "13629": "} private static String message ( final String reason , final int status , @ Nullable final String tail ) { ",
  "13630": "} public LiveReload register ( final Path path , final String ... includes ) { ",
  "13631": "if ( Files . exists ( path ) ) { ",
  "13632": "paths . add ( new Object [ ] { path , Arrays . asList ( includes ) } ) ; ",
  "13633": "} public List < String > assets ( final String name ) { ",
  "13634": "return fileset . getOrDefault ( name , Collections . emptyList ( ) ) ; ",
  "13635": "} public Set < String > patterns ( ) { ",
  "13636": "return patterns ( file -> aggregators . stream ( ) ",
  "13637": ". noneMatch ( it -> it . fileset ( ) . contains ( file ) ) ) ",
  "13638": ". map ( v -> \"/\" + v + \"/**\" ) ",
  "13639": "} public List < String > scripts ( final String fileset ) { ",
  "13640": "return assets ( fileset ) ",
  "13641": ". filter ( scripts ) ",
  "13642": "} public List < AssetProcessor > pipeline ( final String dist ) { ",
  "13643": "List < AssetProcessor > chain = this . pipeline . get ( dist ) ; ",
  "13644": "if ( chain == null ) { ",
  "13645": "return Collections . unmodifiableList ( chain ) ; ",
  "13646": "} public Map < String , List < File > > build ( final String dist , final File dir ) throws Exception { ",
  "13647": "aggregators ( aggregators , conf ) ; ",
  "13648": "return buildInternal ( dist , dir ) ; ",
  "13649": "} public File buildOne ( String filename , File dir ) throws Exception { ",
  "13650": "String dist = \"dev\" ; ",
  "13651": "final MediaType type ; ",
  "13652": "AssetWriter writer ; ",
  "13653": "if ( scripts . test ( filename ) ) { ",
  "13654": "type = MediaType . js ; ",
  "13655": "writer = new AssetWriter ( dist , null , dir , \".js\" , \";\" , charset , this . fileset , scripts ) ; ",
  "13656": "} else if ( styles . test ( filename ) ) { ",
  "13657": "type = MediaType . css ; ",
  "13658": "writer = new AssetWriter ( dist , null , dir , \".css\" , \"\" , charset , this . fileset , styles ) ; ",
  "13659": "List < AssetProcessor > pipeline = pipeline ( dist ) ; ",
  "13660": "compile ( pipeline , ImmutableList . of ( filename ) . iterator ( ) , type , writer , path -> true , 0 , 0 ) ; ",
  "13661": "return new File ( dir , filename ) ; ",
  "13662": "} public String summary ( Map < String , List < File > > result , Path outDir , String dist , long duration , ",
  "13663": "String ... extraInfo ) { ",
  "13664": "StringBuilder buffer = new StringBuilder ( ) ; ",
  "13665": "buffer . append ( \"Summary:\\n\" ) ; ",
  "13666": "long seconds = Duration . ofMillis ( duration ) . getSeconds ( ) ; ",
  "13667": "String took = seconds > 0 ? seconds + \"s\" : duration + \"ms\" ; ",
  "13668": "Stream . of ( extraInfo ) . forEach ( line -> buffer . append ( line ) . append ( \"\\n\" ) ) ; ",
  "13669": "int w1 = result . keySet ( ) . stream ( ) ",
  "13670": ". map ( it -> it . length ( ) + 2 ) ",
  "13671": ". max ( Integer :: compareTo ) ",
  "13672": ". orElse ( 0 ) ; ",
  "13673": "int mw1 = Math . max ( w1 , \"Fileset\" . length ( ) + 2 ) ; ",
  "13674": "int w2 = result . values ( ) . stream ( ) ",
  "13675": ". flatMap ( List :: stream ) ",
  "13676": ". map ( file -> outDir . relativize ( file . toPath ( ) ) . toString ( ) ) ",
  "13677": ". map ( String :: length ) ",
  "13678": "buffer . append ( format ( w1 , w2 , \"Fileset\" , \"Output\" , \"Size\" ) ) ; ",
  "13679": "result . forEach ( ( fileset , files ) -> { ",
  "13680": "if ( files . size ( ) > 0 ) { ",
  "13681": "files . forEach ( file -> buffer . append ( format ( mw1 , w2 , \"\" , outDir . relativize ( file . toPath ( ) ) , ",
  "13682": "AssetCompiler . humanReadableByteCount ( file . length ( ) ) ) ) ) ; ",
  "13683": "} public CaffeineCache < K , V > doWith ( final Callback < K , V , Cache < K , V > > configurer ) { ",
  "13684": "this . callback = configurer :: apply ; ",
  "13685": "} public CaffeineCache < K , V > doWithAsync ( final AsyncCallback < K , V > configurer ) { ",
  "13686": "} private void register ( final Path dir ) throws IOException { ",
  "13687": "WatchKey key = dir . register ( watcher , new Kind [ ] { ENTRY_CREATE , ENTRY_DELETE , ENTRY_MODIFY } , HIGH ) ; ",
  "13688": "} public GuavaCache < K , V > doWith ( final Callback < K , V , Cache < K , V > > configurer ) { ",
  "13689": "public void configure ( Env env , Config config , Binder binder ) { ",
  "13690": "GenericObjectPoolConfig poolConfig = poolConfig ( config . getConfig ( \"jedis.pool\" ) ) ; ",
  "13691": "int timeout = ( int ) config . getDuration ( \"jedis.timeout\" , TimeUnit . MILLISECONDS ) ; ",
  "13692": "List < String > hosts = config . getStringList ( \"jedis.sentinel.hosts\" ) ; ",
  "13693": "final Set < String > sentinels = new HashSet < > ( hosts ) ; ",
  "13694": "final String MASTER_NAME = config . getString ( \"jedis.sentinel.master\" ) ; ",
  "13695": "final String REDIS_PASSWORD = config . getString ( \"jedis.password\" ) ; ",
  "13696": "JedisSentinelPool pool ; ",
  "13697": "if ( REDIS_PASSWORD . length ( ) > 0 ) { ",
  "13698": "pool = new JedisSentinelPool ( MASTER_NAME , sentinels , poolConfig , timeout , REDIS_PASSWORD ) ; ",
  "13699": "pool = new JedisSentinelPool ( MASTER_NAME , sentinels , poolConfig , timeout ) ; ",
  "13700": "RedisProvider provider = new RedisProvider ( pool , null , poolConfig ) ; ",
  "13701": "env . onStart ( provider :: start ) ; ",
  "13702": "env . onStop ( provider :: stop ) ; ",
  "13703": "Env . ServiceKey serviceKey = env . serviceKey ( ) ; ",
  "13704": "serviceKey . generate ( JedisSentinelPool . class , \"db\" , k -> binder . bind ( k ) . toInstance ( pool ) ) ; ",
  "13705": "} public RamlType newProperty ( String name , String type , boolean required , String ... values ) { ",
  "13706": "properties = new LinkedHashMap < > ( ) ; ",
  "13707": "if ( values . length > 0 ) { ",
  "13708": "properties . put ( required ? name : name + \"?\" , ImmutableMap . of ( \"enum\" , values ) ) ; ",
  "13709": "properties . put ( required ? name : name + \"?\" , type ) ; ",
  "13710": "} public static RamlType valueOf ( String name ) { ",
  "13711": "switch ( name . toLowerCase ( ) ) { ",
  "13712": "case \"boolean\" : ",
  "13713": "case \"byte\" : ",
  "13714": "case \"short\" : ",
  "13715": "case \"int\" : ",
  "13716": "case \"integer\" : ",
  "13717": "case \"long\" : ",
  "13718": "return INTEGER ; ",
  "13719": "case \"float\" : ",
  "13720": "case \"double\" : ",
  "13721": "case \"char\" : ",
  "13722": "case \"character\" : ",
  "13723": "case \"string\" : ",
  "13724": "case \"file\" : ",
  "13725": "case \"upload\" : ",
  "13726": "case \"path\" : ",
  "13727": "case \"binary\" : ",
  "13728": "return FILE ; ",
  "13729": "case \"date\" : ",
  "13730": "case \"datetime\" : ",
  "13731": "case \"localdatetime\" : ",
  "13732": "return DATE_TIME ; ",
  "13733": "return new RamlType ( \"object\" , name ) ; ",
  "13734": "} public FileEventOptions kind ( final WatchEvent . Kind < Path > kind ) { ",
  "13735": "kinds . add ( kind ) ; ",
  "13736": "} public FileEventOptions includes ( final String expression ) { ",
  "13737": "this . matchers . add ( new GlobPathMatcher ( expression ) ) ; ",
  "13738": "} public Hbs doWith ( final Consumer < Handlebars > callback ) { ",
  "13739": "return doWith ( ( hbs , conf ) -> callback . accept ( hbs ) ) ; ",
  "13740": "} public Gzon doWith ( final Consumer < GsonBuilder > configurer ) { ",
  "13741": "this . configurer = ( gson , conf ) -> configurer . accept ( gson ) ; ",
  "13742": "} public Micrometer doWith ( @ Nonnull final Consumer < CompositeMeterRegistry > configurer ) { ",
  "13743": "return doWith ( ( registry , conf ) -> configurer . accept ( registry ) ) ; ",
  "13744": "} public Thl doWith ( final Consumer < TemplateEngine > callback ) { ",
  "13745": "return doWith ( ( e , c ) -> callback . accept ( e ) ) ; ",
  "13746": "} public Auth authorizer ( final String name , final String pattern , ",
  "13747": "final Authorizer < ? > authorizer ) { ",
  "13748": "authorizer ( authorizer , name , pattern ) ; ",
  "13749": "public Auth authorizer ( final String name , final String pattern , ",
  "13750": "final Class < ? extends Authorizer > authorizer ) { ",
  "13751": "} private void authorizer ( final Object authorizer , final String name , final String pattern ) { ",
  "13752": "authorizers . put ( pattern , Maps . immutableEntry ( name , authorizer ) ) ; ",
  "13753": "} public Auth form ( final String pattern , ",
  "13754": "final Class < ? extends Authenticator < UsernamePasswordCredentials > > authenticator ) { ",
  "13755": "bindings . put ( pattern , ( binder , conf ) -> { ",
  "13756": "TypeLiteral < Authenticator < UsernamePasswordCredentials > > usernamePasswordAuthenticator = new TypeLiteral < Authenticator < UsernamePasswordCredentials > > ( ) { ",
  "13757": "binder . bind ( usernamePasswordAuthenticator . getRawType ( ) ) . to ( authenticator ) ; ",
  "13758": "bindProfile ( binder , CommonProfile . class ) ; ",
  "13759": "Multibinder . newSetBinder ( binder , Client . class ) ",
  "13760": ". addBinding ( ) . toProvider ( FormAuth . class ) ; ",
  "13761": "return new FormFilter ( conf . getString ( \"auth.form.loginUrl\" ) , ",
  "13762": "conf . getString ( \"application.path\" ) + authCallbackPath ( conf ) ) ; ",
  "13763": "} public Auth basic ( final String pattern , ",
  "13764": "bindings . put ( pattern , ( binder , config ) -> { ",
  "13765": ". addBinding ( ) . toProvider ( BasicAuth . class ) ; ",
  "13766": "return new AuthFilter ( IndirectBasicAuthClient . class , CommonProfile . class ) ; ",
  "13767": "} public < C extends Credentials , U extends CommonProfile > Auth client ( final Client < C , U > client ) { ",
  "13768": "return client ( \"*\" , client ) ; ",
  "13769": "} public < C extends Credentials , U extends CommonProfile > Auth client ( final String pattern , ",
  "13770": "final Client < C , U > client ) { ",
  "13771": "return client ( pattern , config -> client ) ; ",
  "13772": "} public < C extends Credentials , U extends CommonProfile > Auth client ( ",
  "13773": "final Function < Config , Client < C , U > > provider ) { ",
  "13774": "return client ( \"*\" , provider ) ; ",
  "13775": "public < C extends Credentials , U extends CommonProfile > Auth client ( final String pattern , ",
  "13776": "Client < C , U > client = provider . apply ( config ) ; ",
  "13777": ". addBinding ( ) . toInstance ( client ) ; ",
  "13778": "Class clientType = client . getClass ( ) ; ",
  "13779": "Class profileType = ClientType . typeOf ( clientType ) ; ",
  "13780": "bindProfile ( binder , profileType ) ; ",
  "13781": "return new AuthFilter ( clientType , profileType ) ; ",
  "13782": "final Class < ? extends Client < C , U > > client ) { ",
  "13783": ". addBinding ( ) . to ( client ) ; ",
  "13784": "Class profileType = ClientType . typeOf ( client ) ; ",
  "13785": "return new AuthFilter ( client , profileType ) ; ",
  "13786": "} public < U extends CommonProfile > Auth store ( final Class < ? extends AuthStore < U > > store ) { ",
  "13787": "} public Auth logout ( final String logoutUrl , final String redirecTo ) { ",
  "13788": "this . logoutUrl = Optional . of ( logoutUrl ) ; ",
  "13789": "this . redirecTo = Optional . of ( redirecTo ) ; ",
  "13790": "} public Auth logout ( final String logoutUrl ) { ",
  "13791": "this . redirecTo = Optional . empty ( ) ; ",
  "13792": "public static Route . Mapper < Object > reactor ( final Function < Flux , Flux > flux , ",
  "13793": "final Function < Mono , Mono > mono ) { ",
  "13794": "return Route . Mapper . create ( \"reactor\" , value -> { ",
  "13795": "if ( value instanceof Flux ) { ",
  "13796": "return new Deferred ( deferred -> flux . apply ( ( Flux ) value ) ",
  "13797": ". consume ( deferred :: set , deferred :: set ) ) ; ",
  "13798": "if ( value instanceof Mono ) { ",
  "13799": "return new Deferred ( deferred -> mono . apply ( ( Mono ) value ) ",
  "13800": "@ Nonnull ",
  "13801": "public Result set ( final Object value ) { ",
  "13802": "if ( value instanceof Throwable ) { ",
  "13803": "reject ( ( Throwable ) value ) ; ",
  "13804": "resolve ( value ) ; ",
  "13805": "} public void resolve ( @ Nullable final Object value ) { ",
  "13806": "handler . handle ( null , null ) ; ",
  "13807": "Result result ; ",
  "13808": "if ( value instanceof Result ) { ",
  "13809": "super . set ( value ) ; ",
  "13810": "result = ( Result ) value ; ",
  "13811": "result = clone ( ) ; ",
  "13812": "handler . handle ( result , null ) ; ",
  "13813": "} public void handler ( final Request req , final Handler handler ) throws Exception { ",
  "13814": "if ( initializer != null ) { ",
  "13815": "initializer . run ( req , this ) ; ",
  "13816": "public static Deferred deferred ( final String executor , final Route . ZeroArgHandler handler ) { ",
  "13817": "return deferred ( executor , req -> handler . handle ( ) ) ; ",
  "13818": "public static Deferred deferred ( final String executor , final Route . OneArgHandler handler ) { ",
  "13819": "return new Deferred ( executor , ( req , deferred ) -> { ",
  "13820": "deferred . resolve ( handler . handle ( req ) ) ; ",
  "13821": "deferred . reject ( x ) ; ",
  "13822": "} public RamlPath path ( String pattern ) { ",
  "13823": "RamlPath path = resources . get ( pattern ) ; ",
  "13824": "path = new RamlPath ( ) ; ",
  "13825": "resources . put ( pattern , path ) ; ",
  "13826": "} public RamlType define ( Type javaType , RamlType baseType ) { ",
  "13827": "if ( types == null ) { ",
  "13828": "types = new LinkedHashMap < > ( ) ; ",
  "13829": "String typeName = MoreTypes . getRawType ( javaType ) . getSimpleName ( ) ; ",
  "13830": "RamlType ramlType = new RamlType ( baseType . getType ( ) , typeName ) ; ",
  "13831": "types . put ( typeName , ramlType ) ; ",
  "13832": "return ramlType ; ",
  "13833": "} public RamlType define ( Type type ) { ",
  "13834": "Type componentType = componentType ( type ) ; ",
  "13835": "String typeName = MoreTypes . getRawType ( componentType ) . getSimpleName ( ) ; ",
  "13836": "RamlType ramlType = RamlType . valueOf ( typeName ) ; ",
  "13837": "if ( ramlType . isObject ( ) ) { ",
  "13838": "RamlType existing = types . get ( typeName ) ; ",
  "13839": "if ( existing == null ) { ",
  "13840": "ModelConverters converter = ModelConverters . getInstance ( ) ; ",
  "13841": "Property property = converter . readAsProperty ( componentType ) ; ",
  "13842": "Map < PropertyBuilder . PropertyId , Object > args = new EnumMap < > ( ",
  "13843": "PropertyBuilder . PropertyId . class ) ; ",
  "13844": "for ( Map . Entry < String , Model > entry : converter . readAll ( componentType ) . entrySet ( ) ) { ",
  "13845": "define ( entry . getKey ( ) , entry . getValue ( ) ) ; ",
  "13846": "ramlType = define ( typeName , PropertyBuilder . toModel ( PropertyBuilder . merge ( property , args ) ) ) ; ",
  "13847": "ramlType = existing ; ",
  "13848": "return type != componentType ? ramlType . toArray ( ) : ramlType ; ",
  "13849": "} public String toYaml ( ) throws IOException { ",
  "13850": "YAMLMapper mapper = new YAMLMapper ( ) ; ",
  "13851": "mapper . setSerializationInclusion ( JsonInclude . Include . NON_NULL ) ; ",
  "13852": "mapper . configure ( YAMLGenerator . Feature . ALWAYS_QUOTE_NUMBERS_AS_STRINGS , false ) ; ",
  "13853": "mapper . configure ( YAMLGenerator . Feature . MINIMIZE_QUOTES , true ) ; ",
  "13854": "} public static Raml build ( Raml base , List < RouteMethod > routes ) { ",
  "13855": "Raml raml = Optional . ofNullable ( base ) . orElseGet ( Raml :: new ) ; ",
  "13856": "BiFunction < RamlPath , String , RamlPath > pathFactory = ( path , segment ) -> ",
  "13857": "path == null ? raml . path ( segment ) : path . path ( segment ) ; ",
  "13858": "BiConsumer < Function < String , RamlParameter > , RouteParameter > parameterFactory = ( factory , parameter ) -> { ",
  "13859": "RamlParameter p = factory . apply ( parameter . name ( ) ) ; ",
  "13860": "p . setDescription ( parameter . description ( ) ",
  "13861": ". map ( Raml :: yamlText ) ",
  "13862": ". orElse ( null ) ) ; ",
  "13863": "List < String > enums = parameter . enums ( ) ; ",
  "13864": "if ( enums . size ( ) > 0 ) { ",
  "13865": "p . setType ( RamlType . STRING ) ; ",
  "13866": "p . setEnum ( enums ) ; ",
  "13867": "p . setType ( raml . define ( parameter . type ( ) ) ) ; ",
  "13868": "p . setRequired ( ! parameter . optional ( ) ) ; ",
  "13869": "p . setDefault ( parameter . defaultValue ( ) ) ; ",
  "13870": "Set < String > alltypes = new LinkedHashSet < > ( ) ; ",
  "13871": "Consumer < Function < RouteMethod , List < String > > > mediaTypes = types -> ",
  "13872": "routes . stream ( ) . forEach ( r -> types . apply ( r ) . forEach ( alltypes :: add ) ) ; ",
  "13873": "mediaTypes . accept ( RouteMethod :: consumes ) ; ",
  "13874": "mediaTypes . accept ( RouteMethod :: produces ) ; ",
  "13875": "boolean defaultMediaType = false ; ",
  "13876": "if ( alltypes . size ( ) == 0 ) { ",
  "13877": "raml . setMediaType ( ImmutableList . of ( MediaType . json . name ( ) ) ) ; ",
  "13878": "defaultMediaType = true ; ",
  "13879": "} else if ( alltypes . size ( ) == 1 ) { ",
  "13880": "raml . setMediaType ( ImmutableList . of ( alltypes . iterator ( ) . next ( ) ) ) ; ",
  "13881": "for ( RouteMethod route : routes ) { ",
  "13882": "List < String > segments = Splitter . on ( \"/\" ) ",
  "13883": ". trimResults ( ) ",
  "13884": ". omitEmptyStrings ( ) ",
  "13885": ". splitToList ( route . pattern ( ) ) ; ",
  "13886": "RamlPath path = null ; ",
  "13887": "for ( String segment : segments ) { ",
  "13888": "RamlPath newPath = pathFactory . apply ( path , \"/\" + segment ) ; ",
  "13889": "if ( segment . startsWith ( \"{\" ) && segment . endsWith ( \"}\" ) ) { ",
  "13890": "String pathvar = segment . substring ( 1 , segment . length ( ) - 1 ) ; ",
  "13891": "route . parameters ( ) . stream ( ) ",
  "13892": ". filter ( it -> it . kind ( ) == RouteParameter . Kind . PATH ) ",
  "13893": ". filter ( it -> it . name ( ) . equals ( pathvar ) ) ",
  "13894": ". ifPresent ( it -> parameterFactory . accept ( newPath :: uriParameter , it ) ) ; ",
  "13895": "path = newPath ; ",
  "13896": "path = Optional . ofNullable ( path ) . orElseGet ( ( ) -> raml . path ( \"/\" ) ) ; ",
  "13897": "path . setDescription ( route . summary ( ) ",
  "13898": "RamlMethod method = path . method ( route . method ( ) ) ; ",
  "13899": "method . setDescription ( route . description ( ) ",
  "13900": "List < RouteParameter > files = route . parameters ( ) . stream ( ) ",
  "13901": ". filter ( it -> it . kind ( ) == RouteParameter . Kind . FILE ) ",
  "13902": ". filter ( it -> it . kind ( ) == RouteParameter . Kind . QUERY ) ",
  "13903": ". forEach ( it -> parameterFactory . accept ( method :: formParameter , it ) ) ; ",
  "13904": "files . forEach ( it -> { ",
  "13905": "parameterFactory . accept ( method :: formParameter , it ) ; ",
  "13906": "method . setMediaType ( ImmutableList . of ( MediaType . multipart . name ( ) ) ) ; ",
  "13907": ". forEach ( it -> parameterFactory . accept ( method :: queryParameter , it ) ) ; ",
  "13908": "List < String > consumes = route . consumes ( ) ; ",
  "13909": "if ( consumes . size ( ) == 0 && ! defaultMediaType ) { ",
  "13910": "consumes = ImmutableList . of ( MediaType . json . name ( ) ) ; ",
  "13911": "method . setMediaType ( consumes ) ; ",
  "13912": ". filter ( it -> it . kind ( ) == RouteParameter . Kind . HEADER ) ",
  "13913": ". forEach ( it -> parameterFactory . accept ( method :: headerParameter , it ) ) ; ",
  "13914": ". filter ( it -> it . kind ( ) == RouteParameter . Kind . BODY ) ",
  "13915": ". forEach ( it -> { ",
  "13916": "method . setMediaType ( route . consumes ( ) ) ; ",
  "13917": "method . setBody ( raml . define ( it . type ( ) ) ) ; ",
  "13918": "List < String > produces = route . produces ( ) ; ",
  "13919": "if ( produces . size ( ) == 0 ) { ",
  "13920": "produces = ImmutableList . of ( MediaType . json . name ( ) ) ; ",
  "13921": "RouteResponse returns = route . response ( ) ; ",
  "13922": "Map < Integer , String > status = returns . status ( ) ; ",
  "13923": "Integer statusCode = returns . statusCode ( ) ; ",
  "13924": "RamlResponse response = method . response ( statusCode ) ; ",
  "13925": "response . setDescription ( yamlText ( returns . description ( ) . orElseGet ( ( ) -> FriendlyTypeName ",
  "13926": ". name ( returns . type ( ) ) ) ) ) ; ",
  "13927": "produces . forEach ( type -> response . setMediaType ( type , raml . define ( returns . type ( ) ) ) ) ; ",
  "13928": "status . entrySet ( ) . stream ( ) ",
  "13929": ". filter ( it -> ! statusCode . equals ( it . getKey ( ) ) ) ",
  "13930": ". forEach ( it -> method . response ( it . getKey ( ) ) . setDescription ( it . getValue ( ) ) ) ; ",
  "13931": "return raml ; ",
  "13932": "} public Map < Integer , String > status ( ) { ",
  "13933": "return Optional . ofNullable ( status ) . orElse ( ImmutableMap . of ( ) ) ; ",
  "13934": "} public int statusCode ( ) { ",
  "13935": "return status ( ) . entrySet ( ) . stream ( ) ",
  "13936": ". map ( it -> it . getKey ( ) ) ",
  "13937": ". filter ( code -> code >= 200 && code < 400 ) ",
  "13938": ". orElseGet ( ( ) -> type ( ) == void . class ? 204 : 200 ) ; ",
  "13939": "} public RouteResponse status ( final Map < Integer , String > status ) { ",
  "13940": "this . status = new LinkedHashMap < > ( ) ; ",
  "13941": "this . status . putAll ( status ) ; ",
  "13942": "} public void setMediaType ( final String mediaType , RamlType body ) { ",
  "13943": "if ( this . mediaType == null ) { ",
  "13944": "this . mediaType = new LinkedHashMap < > ( ) ; ",
  "13945": "this . mediaType . put ( mediaType , body ) ; ",
  "13946": "} protected static PKCS8EncodedKeySpec generateKeySpec ( final char [ ] password , final byte [ ] key ) ",
  "13947": "throws IOException , NoSuchAlgorithmException , NoSuchPaddingException , InvalidKeySpecException , ",
  "13948": "InvalidKeyException , InvalidAlgorithmParameterException { ",
  "13949": "if ( password == null || password . length == 0 ) { ",
  "13950": "return new PKCS8EncodedKeySpec ( key ) ; ",
  "13951": "EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new EncryptedPrivateKeyInfo ( key ) ; ",
  "13952": "SecretKeyFactory keyFactory = SecretKeyFactory ",
  "13953": ". getInstance ( encryptedPrivateKeyInfo . getAlgName ( ) ) ; ",
  "13954": "PBEKeySpec pbeKeySpec = new PBEKeySpec ( password ) ; ",
  "13955": "SecretKey pbeKey = keyFactory . generateSecret ( pbeKeySpec ) ; ",
  "13956": "Cipher cipher = Cipher . getInstance ( encryptedPrivateKeyInfo . getAlgName ( ) ) ; ",
  "13957": "cipher . init ( Cipher . DECRYPT_MODE , pbeKey , encryptedPrivateKeyInfo . getAlgParameters ( ) ) ; ",
  "13958": "return encryptedPrivateKeyInfo . getKeySpec ( cipher ) ; ",
  "13959": "} static KeyStore buildKeyStore ( final File certChainFile , final File keyFile , ",
  "13960": "final char [ ] keyPasswordChars ) ",
  "13961": "throws KeyStoreException , NoSuchAlgorithmException , ",
  "13962": "NoSuchPaddingException , InvalidKeySpecException , InvalidAlgorithmParameterException , ",
  "13963": "CertificateException , KeyException , IOException { ",
  "13964": "ByteBuffer encodedKeyBuf = PemReader . readPrivateKey ( keyFile ) ; ",
  "13965": "byte [ ] encodedKey = encodedKeyBuf . array ( ) ; ",
  "13966": "PKCS8EncodedKeySpec encodedKeySpec = generateKeySpec ( keyPasswordChars , encodedKey ) ; ",
  "13967": "PrivateKey key ; ",
  "13968": "key = KeyFactory . getInstance ( \"RSA\" ) . generatePrivate ( encodedKeySpec ) ; ",
  "13969": "} catch ( InvalidKeySpecException ignore ) { ",
  "13970": "key = KeyFactory . getInstance ( \"DSA\" ) . generatePrivate ( encodedKeySpec ) ; ",
  "13971": "} catch ( InvalidKeySpecException ignore2 ) { ",
  "13972": "key = KeyFactory . getInstance ( \"EC\" ) . generatePrivate ( encodedKeySpec ) ; ",
  "13973": "} catch ( InvalidKeySpecException e ) { ",
  "13974": "CertificateFactory cf = CertificateFactory . getInstance ( \"X.509\" ) ; ",
  "13975": "List < ByteBuffer > certs = PemReader . readCertificates ( certChainFile ) ; ",
  "13976": "List < Certificate > certChain = new ArrayList < Certificate > ( certs . size ( ) ) ; ",
  "13977": "for ( ByteBuffer buf : certs ) { ",
  "13978": "certChain . add ( cf . generateCertificate ( new ByteArrayInputStream ( buf . array ( ) ) ) ) ; ",
  "13979": "KeyStore ks = KeyStore . getInstance ( \"JKS\" ) ; ",
  "13980": "ks . load ( null , null ) ; ",
  "13981": "ks . setKeyEntry ( \"key\" , key , keyPasswordChars , ",
  "13982": "certChain . toArray ( new Certificate [ certChain . size ( ) ] ) ) ; ",
  "13983": "return ks ; ",
  "13984": "} protected static TrustManagerFactory buildTrustManagerFactory ( final File certChainFile , ",
  "13985": "TrustManagerFactory trustManagerFactory ) ",
  "13986": "throws NoSuchAlgorithmException , CertificateException , KeyStoreException , IOException { ",
  "13987": "X509Certificate cert = ( X509Certificate ) cf ",
  "13988": ". generateCertificate ( new ByteArrayInputStream ( buf . array ( ) ) ) ; ",
  "13989": "X500Principal principal = cert . getSubjectX500Principal ( ) ; ",
  "13990": "ks . setCertificateEntry ( principal . getName ( \"RFC2253\" ) , cert ) ; ",
  "13991": "if ( trustManagerFactory == null ) { ",
  "13992": "trustManagerFactory = TrustManagerFactory ",
  "13993": ". getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; ",
  "13994": "trustManagerFactory . init ( ks ) ; ",
  "13995": "return trustManagerFactory ; ",
  "13996": "} public Jade doWith ( final Consumer < JadeConfiguration > callback ) { ",
  "13997": "return doWith ( ( j , c ) -> callback . accept ( j ) ) ; ",
  "13998": "} public List < String > enums ( ) { ",
  "13999": "return Optional . ofNullable ( MoreTypes . getRawType ( type ) ) ",
  "14000": ". map ( Class :: getEnumConstants ) ",
  "14001": ". filter ( Objects :: nonNull ) ",
  "14002": ". map ( values -> Arrays . asList ( values ) . stream ( ) ",
  "14003": ". map ( value -> ( ( Enum ) value ) . name ( ) ) ",
  "14004": ". collect ( Collectors . toList ( ) ) ",
  "14005": ") . orElse ( Collections . emptyList ( ) ) ; ",
  "14006": "public Optional < Object > ifGet ( final List < MediaType > types ) { ",
  "14007": "return Optional . ofNullable ( value ) ; ",
  "14008": "public < T > T get ( final List < MediaType > types ) { ",
  "14009": "public Result header ( final String name , final Object value ) { ",
  "14010": "setHeader ( name , value ) ; ",
  "14011": "public Result header ( final String name , final Object ... values ) { ",
  "14012": "return header ( name , ImmutableList . copyOf ( values ) ) ; ",
  "14013": "public Result header ( final String name , final Iterable < Object > values ) { ",
  "14014": "setHeader ( name , values ) ; ",
  "14015": "} static Throwing . Runnable runEnhancer ( ) { ",
  "14016": "return ( ) -> { ",
  "14017": "Set < String > packages = PKG . getAndSet ( null ) ; ",
  "14018": "if ( packages != null ) { ",
  "14019": "EbeanEnhancer . newEnhancer ( ) . run ( packages ) ; ",
  "14020": "} public void setMediaType ( final List < String > mediaType ) { ",
  "14021": "this . mediaType = mediaType == null ? null : ( mediaType . isEmpty ( ) ? null : mediaType ) ; ",
  "14022": "} public RamlParameter queryParameter ( String name ) { ",
  "14023": "if ( queryParameters == null ) { ",
  "14024": "queryParameters = new LinkedHashMap < > ( ) ; ",
  "14025": "RamlParameter param = queryParameters . get ( name ) ; ",
  "14026": "param = new RamlParameter ( name ) ; ",
  "14027": "queryParameters . put ( name , param ) ; ",
  "14028": "} public RamlParameter formParameter ( String name ) { ",
  "14029": "if ( formParameters == null ) { ",
  "14030": "formParameters = new LinkedHashMap < > ( ) ; ",
  "14031": "RamlParameter param = formParameters . get ( name ) ; ",
  "14032": "formParameters . put ( name , param ) ; ",
  "14033": "} public RamlParameter headerParameter ( String name ) { ",
  "14034": "headers = new LinkedHashMap < > ( ) ; ",
  "14035": "RamlParameter param = headers . get ( name ) ; ",
  "14036": "headers . put ( name , param ) ; ",
  "14037": "} public RamlResponse response ( Integer status ) { ",
  "14038": "if ( responses == null ) { ",
  "14039": "responses = new LinkedHashMap < > ( ) ; ",
  "14040": "RamlResponse response = responses . get ( status ) ; ",
  "14041": "response = new RamlResponse ( ) ; ",
  "14042": "responses . put ( status , response ) ; ",
  "14043": "} public RequestLogger dateFormatter ( final DateTimeFormatter formatter ) { ",
  "14044": "return dateFormatter ( ts -> formatter . format ( Instant . ofEpochMilli ( ts ) ) ) ; ",
  "14045": "} public RequestLogger dateFormatter ( final Function < Long , String > formatter ) { ",
  "14046": "this . df = formatter ; ",
  "14047": "} public Hbv doWith ( final Consumer < HibernateValidatorConfiguration > configurer ) { ",
  "14048": "this . configurer = ( hvc , conf ) -> configurer . accept ( hvc ) ; ",
  "14049": "public int read ( final byte [ ] b , int off , int len ) throws IOException { ",
  "14050": "if ( encoderOut . position ( ) > 0 ) { ",
  "14051": "encoderOut . flip ( ) ; ",
  "14052": "int c = Math . min ( encoderOut . remaining ( ) , len ) ; ",
  "14053": "encoderOut . get ( b , off , c ) ; ",
  "14054": "off += c ; ",
  "14055": "len -= c ; ",
  "14056": "read += c ; ",
  "14057": "encoderOut . compact ( ) ; ",
  "14058": "if ( ! endOfInput && ( lastCoderResult == null || lastCoderResult . isUnderflow ( ) ) ) { ",
  "14059": "encoderIn . compact ( ) ; ",
  "14060": "int position = encoderIn . position ( ) ; ",
  "14061": "int c = reader . read ( encoderIn . array ( ) , position , encoderIn . remaining ( ) ) ; ",
  "14062": "endOfInput = true ; ",
  "14063": "encoderIn . position ( position + c ) ; ",
  "14064": "encoderIn . flip ( ) ; ",
  "14065": "lastCoderResult = encoder . encode ( encoderIn , encoderOut , endOfInput ) ; ",
  "14066": "if ( endOfInput && encoderOut . position ( ) == 0 ) { ",
  "14067": "return read == 0 && endOfInput ? - 1 : read ; ",
  "14068": "} public FileWatcher register ( final Path path , final Class < ? extends FileEventHandler > handler ) { ",
  "14069": "return register ( path , handler , EMPTY ) ; ",
  "14070": "} public FileWatcher register ( final Path path , final Class < ? extends FileEventHandler > handler , ",
  "14071": "final Consumer < FileEventOptions > configurer ) { ",
  "14072": "return register ( c -> path , p -> new FileEventOptions ( p , handler ) , configurer ) ; ",
  "14073": "} public FileWatcher register ( final Path path , final FileEventHandler handler ) { ",
  "14074": "return register ( c -> path , p -> new FileEventOptions ( p , handler ) , EMPTY ) ; ",
  "14075": "} public FileWatcher register ( final String property , final FileEventHandler handler ) { ",
  "14076": "return register ( c -> Paths . get ( c . getString ( property ) ) , p -> new FileEventOptions ( p , handler ) , ",
  "14077": "EMPTY ) ; ",
  "14078": "} public FileWatcher register ( final String property , ",
  "14079": "final Class < ? extends FileEventHandler > handler ) { ",
  "14080": "return register ( property , handler , EMPTY ) ; ",
  "14081": "} public Requery doWith ( final Consumer < ConfigurationBuilder > configurer ) { ",
  "14082": "return doWith ( ( c , b ) -> configurer . accept ( b ) ) ; ",
  "14083": "} public static Requery reactive ( final String name , final EntityModel model ) { ",
  "14084": "return new Requery ( name , ReactiveEntityStore . class , model , ",
  "14085": "conf -> ReactiveSupport . toReactiveStore ( new EntityDataStore < > ( conf ) ) ) ; ",
  "14086": "} public static Requery reactor ( final String name , final EntityModel model ) { ",
  "14087": "return new Requery ( name , ReactorEntityStore . class , model , ",
  "14088": "conf -> new ReactorEntityStore < > ( new EntityDataStore < > ( conf ) ) ) ; ",
  "14089": "} public static Requery completionStage ( final String name , final EntityModel model ) { ",
  "14090": "return new Requery ( name , CompletionStageEntityStore . class , model , ",
  "14091": "conf -> new CompletableEntityStore ( new EntityDataStore < > ( conf ) ) ) ; ",
  "14092": "} public static Requery kotlin ( final String name , final EntityModel model ) { ",
  "14093": "return new Requery ( name , KotlinEntityDataStore . class , model , ",
  "14094": "conf -> new KotlinEntityDataStore < > ( conf ) ) ; ",
  "14095": "} public XSS js ( final JavaScriptEscapeType type , final JavaScriptEscapeLevel level ) { ",
  "14096": "} public XSS html ( final HtmlEscapeType type , final HtmlEscapeLevel level ) { ",
  "14097": "} public XSS json ( final JsonEscapeType type , final JsonEscapeLevel level ) { ",
  "14098": "} public XSS css ( final CssStringEscapeType type , final CssStringEscapeLevel level ) { ",
  "14099": "} public Lambda prefix ( String prefix ) { ",
  "14100": "return new Lambda ( declaringClass , owner , desc , implementationName , name , ",
  "14101": "Route . normalize ( prefix + \"/\" + pattern ) , method . orElse ( null ) , tag ) ; ",
  "14102": "} public Lambda method ( MethodNode method ) { ",
  "14103": "return new Lambda ( declaringClass , owner , desc , implementationName , name , pattern , method , tag ) ; ",
  "14104": "} private Map < String , Object > attrs ( final String path , final String ... without ) { ",
  "14105": "Map < String , Object > attrs = new LinkedHashMap < > ( get ( path ) ) ; ",
  "14106": "Arrays . asList ( without ) . forEach ( attrs :: remove ) ; ",
  "14107": "return attrs ; ",
  "14108": "} private Tuple < Element , Element > symbol ( final Path file , final String id ) throws IOException { ",
  "14109": "Element svg = Jsoup . parse ( file . toFile ( ) , \"UTF-8\" ) . select ( \"svg\" ) . first ( ) ; ",
  "14110": "Element symbol = new Element ( Tag . valueOf ( \"symbol\" ) , \"\" ) ",
  "14111": ". attr ( \"id\" , id ) ",
  "14112": ". attr ( \"viewBox\" , svg . attr ( \"viewBox\" ) ) ; ",
  "14113": "new ArrayList < > ( svg . childNodes ( ) ) . forEach ( symbol :: appendChild ) ; ",
  "14114": "return new Tuple ( svg , symbol ) ; ",
  "14115": "} private CharSequence css ( final String id , final Element svg ) { ",
  "14116": "Throwing . Function < String , Tuple < Tuple < Number , String > , Tuple < Number , String > > > viewBox = Throwing ",
  "14117": ". < String , Tuple < Tuple < Number , String > , Tuple < Number , String > > > throwingFunction ( name -> { ",
  "14118": "String vbox = svg . attr ( name ) ; ",
  "14119": "String [ ] dimension = vbox . split ( \"\\\\s+\" ) ; ",
  "14120": "return new Tuple ( parse ( dimension [ 2 ] ) , parse ( dimension [ _3 ] ) ) ; ",
  "14121": "} ) . memoized ( ) ; ",
  "14122": "Tuple < Number , String > w = Optional . ofNullable ( Strings . emptyToNull ( svg . attr ( \"width\" ) ) ) ",
  "14123": ". map ( this :: parse ) ",
  "14124": ". orElseGet ( ( ) -> viewBox . apply ( \"viewBox\" ) . _1 ) ; ",
  "14125": "Tuple < Number , String > h = Optional . ofNullable ( Strings . emptyToNull ( svg . attr ( \"height\" ) ) ) ",
  "14126": ". orElseGet ( ( ) -> viewBox . apply ( \"viewBox\" ) . _2 ) ; ",
  "14127": "StringBuilder css = new StringBuilder ( ) ; ",
  "14128": "css . append ( get ( \"css.prefix\" ) . toString ( ) ) . append ( \".\" ) . append ( id ) ",
  "14129": "return css ; ",
  "14130": "} private Tuple < Number , String > parse ( final String value ) { ",
  "14131": "Matcher matcher = SIZE . matcher ( value ) ; ",
  "14132": "String number = matcher . group ( 1 ) ; ",
  "14133": "String unit = matcher . group ( _3 ) ; ",
  "14134": "boolean round = get ( \"css.round\" ) ; ",
  "14135": "Number num = Double . parseDouble ( number ) ; ",
  "14136": "return new Tuple ( round ? Math . round ( num . doubleValue ( ) ) : num , unit ) ; ",
  "14137": "} private void write ( final Path path , final List < CharSequence > sequence ) throws IOException { ",
  "14138": "path . toFile ( ) . getParentFile ( ) . mkdirs ( ) ; ",
  "14139": "Files . write ( path , sequence ) ; ",
  "14140": "} public TransactionalRequest handle ( String name ) { ",
  "14141": "this . handleKey = Key . get ( Handle . class , Names . named ( name ) ) ; ",
  "14142": "} private Model doModel ( Type type , Model model ) { ",
  "14143": "Map < String , Property > properties = model . getProperties ( ) ; ",
  "14144": "BeanDescription desc = Json . mapper ( ) . getSerializationConfig ( ) ",
  "14145": ". introspect ( Json . mapper ( ) . constructType ( type ) ) ; ",
  "14146": "for ( BeanPropertyDefinition beanProperty : desc . findProperties ( ) ) { ",
  "14147": "Property property = properties . get ( beanProperty . getName ( ) ) ; ",
  "14148": "if ( property != null ) { ",
  "14149": "property . setRequired ( beanProperty . isRequired ( ) ) ; ",
  "14150": "} public static AppModuleLoader build ( final String name , final File ... cp ) throws Exception { ",
  "14151": "Map < ModuleIdentifier , ModuleSpec > modules = newModule ( name , 0 , \"\" , cp ) ; ",
  "14152": "return new AppModuleLoader ( modules ) ; ",
  "14153": "public < T > Optional < T > lastEventId ( final Class < T > type ) { ",
  "14154": "return lastEventId . toOptional ( type ) ; ",
  "14155": "public CompletableFuture < Optional < Object > > send ( final Object data , final String type ) { ",
  "14156": "return send ( data , MediaType . valueOf ( type ) ) ; ",
  "14157": "public CompletableFuture < Optional < Object > > send ( final Object data , final MediaType type ) { ",
  "14158": "return event ( data ) . type ( type ) . send ( ) ; ",
  "14159": "public CompletableFuture < Optional < Object > > send ( final Object data ) { ",
  "14160": "return event ( data ) . send ( ) ; ",
  "14161": "public < T > T require ( final Class < T > type ) { ",
  "14162": "return require ( Key . get ( type ) ) ; ",
  "14163": "public < T > T require ( final String name , final Class < T > type ) { ",
  "14164": "return require ( Key . get ( type , Names . named ( name ) ) ) ; ",
  "14165": "public < T > T require ( final TypeLiteral < T > type ) { ",
  "14166": "public < T > T require ( final Key < T > key ) { ",
  "14167": "return injector . getInstance ( key ) ; ",
  "14168": "public Sse keepAlive ( final int time , final TimeUnit unit ) { ",
  "14169": "return keepAlive ( unit . toMillis ( time ) ) ; ",
  "14170": "public Sse keepAlive ( final long millis ) { ",
  "14171": "scheduler . schedule ( new KeepAlive ( this , millis ) , millis , TimeUnit . MILLISECONDS ) ; ",
  "14172": "public View put ( final String name , final Object value ) { ",
  "14173": "model . put ( name , value ) ; ",
  "14174": "public View put ( final Map < String , ? > values ) { ",
  "14175": "values . forEach ( ( k , v ) -> model . put ( k , v ) ) ; ",
  "14176": "} public MongoRx doWith ( final BiConsumer < MongoClientSettings . Builder , Config > configurer ) { ",
  "14177": "} public MongoRx doWith ( final Consumer < MongoClientSettings . Builder > configurer ) { ",
  "14178": "return doWith ( ( s , c ) -> configurer . accept ( s ) ) ; ",
  "14179": "public MongoRx observableAdapter ( final Function < Observable , Observable > adapter ) { ",
  "14180": "} private AssetException rewrite ( final AssetException ex ) { ",
  "14181": "List < StackTraceElement > stacktrace = Lists . newArrayList ( ex . getStackTrace ( ) ) ; ",
  "14182": "List < AssetProblem > problems = ex . getProblems ( ) ; ",
  "14183": "AssetProblem head = problems . get ( 0 ) ; ",
  "14184": "stacktrace . add ( 0 , ",
  "14185": "new StackTraceElement ( head . getFilename ( ) , \"\" , head . getFilename ( ) , head . getLine ( ) ) ) ; ",
  "14186": "ex . setStackTrace ( stacktrace . toArray ( new StackTraceElement [ stacktrace . size ( ) ] ) ) ; ",
  "14187": "} public static ClassLoader classLoader ( final ClassLoader parent ) throws IOException { ",
  "14188": "return classLoader ( parent , new File ( System . getProperty ( \"user.dir\" ) ) ) ; ",
  "14189": "} public static ClassLoader classLoader ( final ClassLoader parent , File projectDir ) throws IOException { ",
  "14190": "File publicDir = new File ( projectDir , \"public\" ) ; ",
  "14191": "if ( publicDir . exists ( ) ) { ",
  "14192": "return new URLClassLoader ( new URL [ ] { publicDir . toURI ( ) . toURL ( ) } , parent ) ; ",
  "14193": "} public Map < String , Object > attributes ( ) { ",
  "14194": "return Optional . ofNullable ( attributes ) . orElse ( ImmutableMap . of ( ) ) ; ",
  "14195": "} public RouteMethod attributes ( Map < String , Object > attributes ) { ",
  "14196": "if ( attributes != null ) { ",
  "14197": "if ( this . attributes == null ) { ",
  "14198": "this . attributes = new LinkedHashMap < > ( ) ; ",
  "14199": "this . attributes . putAll ( attributes ) ; ",
  "14200": "} public RouteMethod attribute ( String name , Object value ) { ",
  "14201": "this . attributes . put ( name , value ) ; ",
  "14202": "} public RouteMethod param ( String name , Consumer < RouteParameter > customizer ) { ",
  "14203": "parameters ( ) . stream ( ) ",
  "14204": ". filter ( p -> name . equals ( p . name ( ) ) ) ",
  "14205": ". ifPresent ( customizer ) ; ",
  "14206": "} public static Route . Mapper < Object > rx ( final Function < Observable , Observable > observable , ",
  "14207": "final Function < Single , Single > single ) { ",
  "14208": "return rx ( observable , single , Function . identity ( ) ) ; ",
  "14209": "public static Route . Mapper < Object > rx ( final Function < Observable , Observable > observable , ",
  "14210": "final Function < Single , Single > single , final Function < Completable , Completable > completable ) { ",
  "14211": "return Route . Mapper . create ( \"rx\" , v -> { ",
  "14212": "if ( v instanceof Observable ) { ",
  "14213": "return new Deferred ( ",
  "14214": "deferred -> observable . apply ( ( Observable ) v ) . subscribe ( new DeferredSubscriber ( deferred ) ) ) ; ",
  "14215": "} else if ( v instanceof Single ) { ",
  "14216": "deferred -> single . apply ( ( Single ) v ) . subscribe ( new DeferredSubscriber ( deferred ) ) ) ; ",
  "14217": "} else if ( v instanceof Completable ) { ",
  "14218": "return new Deferred ( deferred -> completable . apply ( ( Completable ) v ) ",
  "14219": ". subscribe ( new DeferredSubscriber ( deferred ) ) ) ; ",
  "14220": "} public < T > T get ( final Class < T > entityClass , final Object id ) { ",
  "14221": "return mapper ( entityClass ) . get ( id ) ; ",
  "14222": "} public < T > ListenableFuture < T > getAsync ( final Class < T > entityClass , final Object id ) { ",
  "14223": "return mapper ( entityClass ) . getAsync ( id ) ; ",
  "14224": "} public void delete ( final Class < ? > entityClass , final Object id , final Mapper . Option ... options ) { ",
  "14225": "Mapper mapper = mapper ( entityClass ) ; ",
  "14226": "mapper . delete ( id , options ) ; ",
  "14227": "} public ListenableFuture < Void > deleteAsync ( final Class < ? > entityClass , final Object id , ",
  "14228": "final Mapper . Option ... options ) { ",
  "14229": "return mapper . deleteAsync ( id , options ) ; ",
  "14230": "} public void delete ( final Object entity , final Mapper . Option ... options ) { ",
  "14231": "Mapper mapper = mapper ( entity . getClass ( ) ) ; ",
  "14232": "mapper . delete ( entity , options ) ; ",
  "14233": "} public ListenableFuture < Void > deleteAsync ( final Object entity , final Mapper . Option ... options ) { ",
  "14234": "return mapper . deleteAsync ( entity , options ) ; ",
  "14235": "} public < T > void save ( final T entity , final Mapper . Option ... options ) { ",
  "14236": "Class entityClass = entity . getClass ( ) ; ",
  "14237": "mapper . save ( entity , options ) ; ",
  "14238": "} public < T > ListenableFuture < Void > saveAsync ( final T entity , final Mapper . Option ... options ) { ",
  "14239": "return mapper . saveAsync ( entity , options ) ; ",
  "14240": "} public < T > Result < T > query ( final Class < T > entityClass , final String statement , ",
  "14241": "final Map < String , Object > values ) { ",
  "14242": "return query ( entityClass , new SimpleStatement ( statement , values ) ) ; ",
  "14243": "} public < T > Result < T > query ( final Class < T > entityClass , final Statement statement ) { ",
  "14244": "Mapper < T > mapper = mapper ( entityClass ) ; ",
  "14245": "Session session = mapper . getManager ( ) . getSession ( ) ; ",
  "14246": "ResultSet rs = session . execute ( statement ) ; ",
  "14247": "return mapper . map ( rs ) ; ",
  "14248": "} public < T > ListenableFuture < Result < T > > queryAsync ( final Class < T > entityClass , ",
  "14249": "final String statement , final Map < String , Object > values ) { ",
  "14250": "return queryAsync ( entityClass , new SimpleStatement ( statement , values ) ) ; ",
  "14251": "final Statement statement ) { ",
  "14252": "ResultSetFuture rs = session . executeAsync ( statement ) ; ",
  "14253": "return Futures . transformAsync ( rs , rs1 -> Futures . immediateFuture ( mapper . map ( rs1 ) ) ) ; ",
  "14254": "} public static Status valueOf ( final int statusCode ) { ",
  "14255": "Integer key = Integer . valueOf ( statusCode ) ; ",
  "14256": "Status status = statusMap . get ( key ) ; ",
  "14257": "return status == null ? new Status ( key , key . toString ( ) ) : status ; ",
  "14258": "} private void ready ( ) { ",
  "14259": "ready . await ( ) ; ",
  "14260": "} public Hcast doWith ( final BiConsumer < com . hazelcast . config . Config , Config > configurer ) { ",
  "14261": "} public Hcast doWith ( final Consumer < com . hazelcast . config . Config > configurer ) { ",
  "14262": "return doWith ( ( config , conf ) -> configurer . accept ( config ) ) ; ",
  "14263": "} public Jdbi3 doWith ( Consumer < Jdbi > configurer ) { ",
  "14264": "return doWith ( ( jdbi , conf ) -> configurer . accept ( jdbi ) ) ; ",
  "14265": "public RewrittenStatement rewrite ( final String sql , final Binding params , ",
  "14266": "final StatementContext ctx ) ",
  "14267": "final ParsedStatement stmt = new ParsedStatement ( ) ; ",
  "14268": "final String parsedSql = parseString ( sql , stmt , params ) ; ",
  "14269": "return new MyRewrittenStatement ( parsedSql , stmt , ctx ) ; ",
  "14270": "throw new UnableToCreateStatementException ( ",
  "14271": "} public AssetHandler maxAge ( final String maxAge ) { ",
  "14272": "Try . apply ( ( ) -> Long . parseLong ( maxAge ) ) ",
  "14273": ". recover ( x -> ConfigFactory . empty ( ) ",
  "14274": ". withValue ( \"v\" , ConfigValueFactory . fromAnyRef ( maxAge ) ) ",
  "14275": ". getDuration ( \"v\" ) ",
  "14276": ". getSeconds ( ) ) ",
  "14277": ". onSuccess ( this :: maxAge ) ; ",
  "14278": "} protected void send ( final Request req , final Response rsp , final Asset asset ) throws Throwable { ",
  "14279": "rsp . send ( asset ) ; ",
  "14280": "} public Metrics request ( final String method , final String pattern ) { ",
  "14281": "routes . add ( r -> r . use ( method , pattern , new InstrumentedHandler ( ) ) ) ; ",
  "14282": "} public Metrics ping ( ) { ",
  "14283": "bindings . add ( ( binder , routes , conf ) -> { ",
  "14284": "routes . use ( \"GET\" , this . pattern + \"/ping\" , new PingHandler ( ) ) ; ",
  "14285": "} public Metrics threadDump ( ) { ",
  "14286": "routes . use ( \"GET\" , this . pattern + \"/thread-dump\" , new ThreadDumpHandler ( ) ) ; ",
  "14287": "} public Metrics metric ( final String name , final Metric metric ) { ",
  "14288": "MapBinder . newMapBinder ( binder , String . class , Metric . class ) . addBinding ( name ) ",
  "14289": ". toInstance ( metric ) ; ",
  "14290": "} public < M extends Metric > Metrics metric ( final String name , final Class < M > metric ) { ",
  "14291": ". to ( metric ) ; ",
  "14292": "} public Metrics healthCheck ( final String name , final HealthCheck check ) { ",
  "14293": "MapBinder . newMapBinder ( binder , String . class , HealthCheck . class ) . addBinding ( name ) ",
  "14294": ". toInstance ( check ) ; ",
  "14295": "} public < H extends HealthCheck > Metrics healthCheck ( final String name , final Class < H > check ) { ",
  "14296": "MapBinder . newMapBinder ( binder , String . class , HealthCheck . class ) ",
  "14297": ". addBinding ( name ) ",
  "14298": ". to ( check ) ; ",
  "14299": "} public Metrics reporter ( final BiFunction < MetricRegistry , Config , Reporter > callback ) { ",
  "14300": "} public Metrics reporter ( final Function < MetricRegistry , Reporter > callback ) { ",
  "14301": "return reporter ( ( registry , conf ) -> callback . apply ( registry ) ) ; ",
  "14302": "} public Eh doWith ( final Consumer < Configuration > configurer ) { ",
  "14303": "return doWith ( ( ehconf , conf ) -> configurer . accept ( ehconf ) ) ; ",
  "14304": "} public static List < MediaType > valueOf ( final String ... types ) throws Err . BadMediaType { ",
  "14305": "List < MediaType > result = new ArrayList < > ( ) ; ",
  "14306": "for ( String type : types ) { ",
  "14307": "result . add ( valueOf ( type ) ) ; ",
  "14308": "} public static List < MediaType > parse ( final String value ) throws Err . BadMediaType { ",
  "14309": "return cache . computeIfAbsent ( value , MediaType :: parseInternal ) ; ",
  "14310": "} public static Optional < MediaType > byFile ( final File file ) { ",
  "14311": "return byPath ( file . getName ( ) ) ; ",
  "14312": "} public static Optional < MediaType > byPath ( final Path path ) { ",
  "14313": "return byPath ( path . toString ( ) ) ; ",
  "14314": "} public static Optional < MediaType > byPath ( final String path ) { ",
  "14315": "int idx = path . lastIndexOf ( '.' ) ; ",
  "14316": "if ( idx != - 1 ) { ",
  "14317": "String ext = path . substring ( idx + 1 ) ; ",
  "14318": "return byExtension ( ext ) ; ",
  "14319": "} public static Optional < MediaType > byExtension ( final String ext ) { ",
  "14320": "String key = \"mime.\" + ext ; ",
  "14321": "if ( types . hasPath ( key ) ) { ",
  "14322": "return Optional . of ( MediaType . valueOf ( types . getString ( \"mime.\" + ext ) ) ) ; ",
  "14323": "} public Jdbi doWith ( Consumer < DBI > configurer ) { ",
  "14324": "return doWith ( ( dbi , conf ) -> configurer . accept ( dbi ) ) ; ",
  "14325": "} public Aws with ( final BiFunction < AWSCredentialsProvider , Config , Object > callback ) { ",
  "14326": "callbacks . add ( callback ) ; ",
  "14327": "} public Aws with ( final Function < AWSCredentialsProvider , Object > callback ) { ",
  "14328": "return with ( ( creds , conf ) -> callback . apply ( creds ) ) ; ",
  "14329": "} public < T extends AmazonWebServiceClient > Aws doWith ( ",
  "14330": "final BiFunction < T , Config , Object > callback ) { ",
  "14331": "after . add ( callback ) ; ",
  "14332": "} public < T extends AmazonWebServiceClient > Aws doWith ( final Function < T , Object > callback ) { ",
  "14333": "return doWith ( ( s , c ) -> callback . apply ( ( T ) s ) ) ; ",
  "14334": "} public jOOQ doWith ( Consumer < Configuration > configurer ) { ",
  "14335": "return doWith ( ( configuration , conf ) -> configurer . accept ( configuration ) ) ; ",
  "14336": "} public Quartz with ( final JobDetail job , final Trigger trigger ) { ",
  "14337": "jobMap . put ( job , trigger ) ; ",
  "14338": "} public Quartz with ( final Class < ? extends Job > jobClass , ",
  "14339": "final BiConsumer < JobBuilder , TriggerBuilder < Trigger > > configurer ) { ",
  "14340": "JobBuilder job = JobBuilder . newJob ( jobClass ) ",
  "14341": ". withIdentity ( ",
  "14342": "JobKey . jobKey ( jobClass . getSimpleName ( ) , jobClass . getPackage ( ) . getName ( ) ) ",
  "14343": "TriggerBuilder < Trigger > trigger = TriggerBuilder . newTrigger ( ) ",
  "14344": "TriggerKey . triggerKey ( jobClass . getSimpleName ( ) , jobClass . getPackage ( ) . getName ( ) ) ",
  "14345": "configurer . accept ( job , trigger ) ; ",
  "14346": "return with ( job . build ( ) , trigger . build ( ) ) ; ",
  "14347": "} private void shutdownGracefully ( final Iterator < EventExecutorGroup > iterator ) { ",
  "14348": "EventExecutorGroup group = iterator . next ( ) ; ",
  "14349": "if ( ! group . isShuttingDown ( ) ) { ",
  "14350": "group . shutdownGracefully ( ) . addListener ( future -> { ",
  "14351": "shutdownGracefully ( iterator ) ; ",
  "14352": "} public Cassandra doWithClusterBuilder ( final BiConsumer < Cluster . Builder , Config > configurer ) { ",
  "14353": "} public Cassandra doWithClusterBuilder ( final Consumer < Cluster . Builder > configurer ) { ",
  "14354": "return doWithClusterBuilder ( ( b , c ) -> configurer . accept ( b ) ) ; ",
  "14355": "} public Cassandra doWithCluster ( final Consumer < Cluster > configurer ) { ",
  "14356": "return doWithCluster ( ( cc , c ) -> configurer . accept ( cc ) ) ; ",
  "14357": "} public Yasson doWith ( final Consumer < JsonbConfig > configurer ) { ",
  "14358": "this . configurer = ( jsonConfig , conf ) -> configurer . accept ( jsonConfig ) ; ",
  "14359": "public static Result with ( final Object entity , final Status status ) { ",
  "14360": "return new Result ( ) . status ( status ) . set ( entity ) ; ",
  "14361": "public static Result with ( final Object entity , final int status ) { ",
  "14362": "return with ( entity , Status . valueOf ( status ) ) ; ",
  "14363": "public static Result with ( final Status status ) { ",
  "14364": "return new Result ( ) . status ( status ) ; ",
  "14365": "public static Result when ( final String type , final Supplier < Object > supplier ) { ",
  "14366": "return new Result ( ) . when ( type , supplier ) ; ",
  "14367": "} private static Result redirect ( final Status status , final String location ) { ",
  "14368": "return with ( status ) . header ( \"location\" , location ) ; ",
  "14369": "} public SSIHandler delimiters ( final String start , final String end ) { ",
  "14370": "this . startDelimiter = start ; ",
  "14371": "this . endDelimiter = end ; ",
  "14372": "} public Couchbase environment ( final java . util . function . Supplier < CouchbaseEnvironment > env ) { ",
  "14373": "return environment ( c -> env . get ( ) ) ; ",
  "14374": "} public Jackson module ( final Module module ) { ",
  "14375": "modules . add ( binder -> binder . addBinding ( ) . toInstance ( module ) ) ; ",
  "14376": "} public Jackson module ( final Class < ? extends Module > module ) { ",
  "14377": "modules . add ( binder -> binder . addBinding ( ) . to ( module ) ) ; ",
  "14378": "} public Nodejs overwrite ( final boolean overwrite ) { ",
  "14379": "if ( overwrite ) { ",
  "14380": "this . coptions = EnumSet . of ( StandardCopyOption . REPLACE_EXISTING ) ; ",
  "14381": "this . coptions = Collections . emptySet ( ) ; ",
  "14382": "} public void exec ( final String library , final Throwing . Consumer < V8 > callback ) throws Throwable { ",
  "14383": "Path basedir = deploy ( library ) ; ",
  "14384": "List < String > candidates = Arrays . asList ( ",
  "14385": "basedir . getFileName ( ) . toString ( ) + \".js\" , ",
  "14386": "\"main.js\" , ",
  "14387": "\"index.js\" ) ; ",
  "14388": "Path main = candidates . stream ( ) ",
  "14389": ". map ( basedir :: resolve ) ",
  "14390": ". filter ( Files :: exists ) ",
  "14391": ". orElseThrow ( ( ) -> new FileNotFoundException ( candidates . toString ( ) ) ) ; ",
  "14392": "callback . accept ( node . getRuntime ( ) ) ; ",
  "14393": "node . exec ( main . toFile ( ) ) ; ",
  "14394": "while ( node . isRunning ( ) ) { ",
  "14395": "node . handleMessage ( ) ; ",
  "14396": "} public static void run ( final Throwing . Consumer < Nodejs > callback ) { ",
  "14397": "run ( new File ( System . getProperty ( \"java.io.tmpdir\" ) ) , callback ) ; ",
  "14398": "} public static void run ( final File basedir , final Throwing . Consumer < Nodejs > callback ) { ",
  "14399": "Nodejs node = new Nodejs ( basedir ) ; ",
  "14400": "Try . run ( ( ) -> callback . accept ( node ) ) ",
  "14401": ". onComplete ( node :: release ) ",
  "14402": ". throwException ( ) ; ",
  "14403": "} public Pebble doWith ( final BiConsumer < PebbleEngine . Builder , Config > callback ) { ",
  "14404": "} public Pebble doWith ( final Consumer < PebbleEngine . Builder > callback ) { ",
  "14405": "return doWith ( ( p , c ) -> callback . accept ( p ) ) ; ",
  "14406": "} public Pac4j doWith ( Consumer < org . pac4j . core . config . Config > configurer ) { ",
  "14407": "return doWith ( ( pac4j , conf ) -> configurer . accept ( pac4j ) ) ; ",
  "14408": "} public Pac4j doWith ( BiConsumer < org . pac4j . core . config . Config , Config > configurer ) { ",
  "14409": "this . configurer = configurer ; ",
  "14410": "} public < C extends Credentials , U extends CommonProfile > Pac4j client ( String pattern , ",
  "14411": "Authorizer < U > authorizer , Function < Config , Client < C , U > > client ) { ",
  "14412": "return clientInternal ( pattern , client , authorizer ) ; ",
  "14413": "} public Pac4j unauthenticated ( Supplier < UserProfile > provider ) { ",
  "14414": "return unauthenticated ( req -> provider . get ( ) ) ; ",
  "14415": "} public Pac4j form ( String pattern ) { ",
  "14416": "return clientInternal ( pattern , conf -> { ",
  "14417": "showDevLogin = true ; ",
  "14418": "return new FormClient ( \"/login\" , new SimpleTestUsernamePasswordAuthenticator ( ) ) ; ",
  "14419": "} , null ) ; ",
  "14420": "} protected static KeyManagerFactory buildKeyManagerFactory ( final File certChainFile , ",
  "14421": "final File keyFile , final String keyPassword ) ",
  "14422": "throws UnrecoverableKeyException , KeyStoreException , NoSuchAlgorithmException , ",
  "14423": "String algorithm = Security . getProperty ( \"ssl.KeyManagerFactory.algorithm\" ) ; ",
  "14424": "algorithm = \"SunX509\" ; ",
  "14425": "return buildKeyManagerFactory ( certChainFile , algorithm , keyFile , keyPassword ) ; ",
  "14426": "final String keyAlgorithm , final File keyFile , final String keyPassword ) ",
  "14427": "throws KeyStoreException , NoSuchAlgorithmException , NoSuchPaddingException , ",
  "14428": "InvalidKeySpecException , InvalidAlgorithmParameterException , IOException , ",
  "14429": "CertificateException , KeyException , UnrecoverableKeyException { ",
  "14430": "char [ ] keyPasswordChars = keyPassword == null ? EMPTY_CHARS : keyPassword . toCharArray ( ) ; ",
  "14431": "KeyStore ks = buildKeyStore ( certChainFile , keyFile , keyPasswordChars ) ; ",
  "14432": "KeyManagerFactory kmf = KeyManagerFactory . getInstance ( keyAlgorithm ) ; ",
  "14433": "kmf . init ( ks , keyPasswordChars ) ; ",
  "14434": "return kmf ; ",
  "14435": "} public List < RouteMethod > parseFully ( Jooby application ) throws Exception { ",
  "14436": "List < RouteMethod > methods = parseFully ( application . getClass ( ) . getName ( ) , ",
  "14437": "Jooby . exportRoutes ( application ) ) ; ",
  "14438": "} public Path export ( Path outputBaseDir , String application ) throws Exception { ",
  "14439": "return new BytecodeRouteParser ( loader , dir ) . export ( outputBaseDir , application ) ; ",
  "14440": "} public List < RouteMethod > parse ( String application ) throws Exception { ",
  "14441": "return new BytecodeRouteParser ( loader , dir ) . parse ( application ) . stream ( ) ",
  "14442": ". filter ( filter ) ",
  "14443": "} public List < RouteMethod > parseFully ( String application , List < Route . Definition > routes ) ",
  "14444": "List < RouteMethod > methods = parse ( application ) ; ",
  "14445": "BiFunction < String , String , OptionalInt > routeIndex = ( verb , pattern ) -> { ",
  "14446": "RouteMethod it = new RouteMethod ( verb , pattern , new RouteResponse ( void . class ) ) ; ",
  "14447": "return IntStream . range ( 0 , methods . size ( ) ) ",
  "14448": ". filter ( i -> methods . get ( i ) . equals ( it ) ) ",
  "14449": "List < RouteMethod > result = new ArrayList < > ( routes . size ( ) ) ; ",
  "14450": "for ( Route . Definition route : routes ) { ",
  "14451": "routeIndex . apply ( route . method ( ) , route . pattern ( ) ) ",
  "14452": ". ifPresent ( i -> result . add ( complement ( route , methods . remove ( i ) ) ) ) ; ",
  "14453": "customizer . entrySet ( ) . forEach ( it -> ",
  "14454": "result . stream ( ) ",
  "14455": ". filter ( it . getKey ( ) ) ",
  "14456": ". forEach ( it . getValue ( ) ) ",
  "14457": "} public ApiParser modify ( final Predicate < RouteMethod > matcher , ",
  "14458": "final Consumer < RouteMethod > customizer ) { ",
  "14459": "this . customizer . put ( matcher , customizer ) ; ",
  "14460": "} public Scanner scan ( final Class < ? > type ) { ",
  "14461": "if ( type == Named . class || type == com . google . inject . name . Named . class ) { ",
  "14462": "serviceTypes . add ( Named . class ) ; ",
  "14463": "serviceTypes . add ( com . google . inject . name . Named . class ) ; ",
  "14464": "} else if ( type == Singleton . class || type == com . google . inject . Singleton . class ) { ",
  "14465": "serviceTypes . add ( Singleton . class ) ; ",
  "14466": "serviceTypes . add ( com . google . inject . Singleton . class ) ; ",
  "14467": "serviceTypes . add ( type ) ; ",
  "14468": "} public ApiTool swagger ( String path , Consumer < Swagger > swagger ) { ",
  "14469": "return swagger ( new Options ( path , options ) , swagger ) ; ",
  "14470": "} public ApiTool swagger ( Options options , Consumer < Swagger > swagger ) { ",
  "14471": "this . swagger = swagger ; ",
  "14472": "} public ApiTool raml ( String path , Consumer < Raml > raml ) { ",
  "14473": "return raml ( new Options ( path , options ) , raml ) ; ",
  "14474": "} public ApiTool raml ( Options options , Consumer < Raml > raml ) { ",
  "14475": "this . raml = raml ; ",
  "14476": "} public ApiTool modify ( final Predicate < RouteMethod > matcher , ",
  "14477": "} public static GroupByPath from ( final String bucket , final Class < ? > entityClass ) { ",
  "14478": "String alias = String . valueOf ( entityClass . getSimpleName ( ) . charAt ( 0 ) ) ; ",
  "14479": "return Select . select ( alias + \".*\" ) ",
  "14480": ". where ( path ( alias , CLASS ) . eq ( s ( entityClass . getName ( ) ) ) ) ; ",
  "14481": "} public static String qualifyId ( final Class < ? > entityClass , final Object id ) { ",
  "14482": "return qualifyId ( entityClass . getName ( ) , id ) ; ",
  "14483": "} public String process ( String filename , String source , Config conf ) throws Exception { ",
  "14484": "return process ( filename , source , conf , getClass ( ) . getClassLoader ( ) ) ; ",
  "14485": "} public boolean hasProperties ( String ... properties ) { ",
  "14486": "for ( String property : properties ) { ",
  "14487": "if ( ! hasProperty ( property ) ) { ",
  "14488": "} public static Demo . CDemoFileInfo infoForSource ( final Source source ) throws IOException { ",
  "14489": "EngineType engineType = source . readEngineType ( ) ; ",
  "14490": "source . setPosition ( source . readFixedInt32 ( ) ) ; ",
  "14491": "PacketInstance < GeneratedMessage > pi = engineType . getNextPacketInstance ( source ) ; ",
  "14492": "return ( Demo . CDemoFileInfo ) pi . parse ( ) ; ",
  "14493": "} private static S2DotaMatchMetadata . CDOTAMatchMetadataFile metadataForStream ( InputStream stream ) throws IOException { ",
  "14494": "return Packet . parse ( S2DotaMatchMetadata . CDOTAMatchMetadataFile . class , ByteString . readFrom ( stream ) ) ; ",
  "14495": "} private byte [ ] readPacket ( Source source ) throws IOException { ",
  "14496": "int size = source . readFixedInt32 ( ) ; ",
  "14497": "return packetReader . readFromSource ( source , size , false ) ; ",
  "14498": "} public int readVarInt32 ( ) throws IOException { ",
  "14499": "byte tmp = readByte ( ) ; ",
  "14500": "if ( tmp >= 0 ) { ",
  "14501": "int result = tmp & 0x7f ; ",
  "14502": "if ( ( tmp = readByte ( ) ) >= 0 ) { ",
  "14503": "result |= tmp << 7 ; ",
  "14504": "result |= ( tmp & 0x7f ) << 7 ; ",
  "14505": "result |= tmp << 14 ; ",
  "14506": "result |= ( tmp & 0x7f ) << 14 ; ",
  "14507": "result |= tmp << 21 ; ",
  "14508": "result |= ( tmp & 0x7f ) << 21 ; ",
  "14509": "result |= ( tmp = readByte ( ) ) << 28 ; ",
  "14510": "if ( tmp < 0 ) { ",
  "14511": "} public int readFixedInt32 ( ) throws IOException { ",
  "14512": "return ByteBuffer . wrap ( readBytes ( 4 ) ) . order ( ByteOrder . LITTLE_ENDIAN ) . asIntBuffer ( ) . get ( ) ; ",
  "14513": "} public EngineType readEngineType ( ) throws IOException { ",
  "14514": "engineType = EngineId . typeForMagic ( new String ( readBytes ( 8 ) ) ) ; ",
  "14515": "if ( engineType == null ) { ",
  "14516": "throw new IOException ( ) ; ",
  "14517": "return engineType ; ",
  "14518": "} public boolean sendMsgByName ( String name , String msg ) { ",
  "14519": "Account account = api . getAccountByName ( name ) ; ",
  "14520": "if ( null == account ) { ",
  "14521": "return this . api . sendText ( account . getUserName ( ) , msg ) ; ",
  "14522": "} public boolean sendImgName ( String name , String imgPath ) { ",
  "14523": "return this . api . sendImg ( account . getUserName ( ) , imgPath ) ; ",
  "14524": "} public boolean sendFileName ( String name , String filePath ) { ",
  "14525": "return this . api . sendFile ( account . getUserName ( ) , filePath ) ; ",
  "14526": "this . api = new WeChatApiImpl ( this ) ; ",
  "14527": "api . login ( config . autoLogin ( ) ) ; ",
  "14528": "Thread msgHandle = new Thread ( new Runnable ( ) { ",
  "14529": "if ( hasMessage ( ) ) { ",
  "14530": "WeChatMessage weChatMessage = nextMessage ( ) ; ",
  "14531": "callBack ( mapping . get ( MsgType . ALL ) , weChatMessage ) ; ",
  "14532": "callBack ( mapping . get ( weChatMessage . getMsgType ( ) ) , weChatMessage ) ; ",
  "14533": "DateUtils . sleep ( 50 ) ; ",
  "14534": "msgHandle . setName ( \"message-handle\" ) ; ",
  "14535": "msgHandle . setDaemon ( true ) ; ",
  "14536": "msgHandle . start ( ) ; ",
  "14537": "this . other ( ) ; ",
  "14538": "} protected void other ( ) { ",
  "14539": "Scanner scanner = new Scanner ( System . in ) ; ",
  "14540": "if ( scanner . hasNext ( ) ) { ",
  "14541": "String text = scanner . next ( ) ; ",
  "14542": "if ( \"quit\" . equals ( text ) || \"exit\" . equals ( text ) ) { ",
  "14543": "api . logout ( ) ; ",
  "14544": "DateUtils . sleep ( 100 ) ; ",
  "14545": "} private void callBack ( List < Invoke > invokes , WeChatMessage message ) { ",
  "14546": "if ( null != invokes && invokes . size ( ) > 0 && null != message ) { ",
  "14547": "for ( Invoke invoke : invokes ) { ",
  "14548": "invoke . call ( this , message ) ; ",
  "14549": "} public void updateLastCheck ( ) { ",
  "14550": "this . lastCheckTs = System . currentTimeMillis ( ) ; ",
  "14551": "if ( this . config ( ) . autoLogin ( ) ) { ",
  "14552": "String file = this . config ( ) . assetsDir ( ) + \"/login.json\" ; ",
  "14553": "WeChatUtils . writeJson ( file , HotReload . build ( this . session ( ) ) ) ; ",
  "14554": "log . debug ( \"\u5199\u5165\u672c\u5730\u767b\u5f55JSON\" ) ; ",
  "14555": "} public static Config load ( String filePath ) { ",
  "14556": "Config config = new Config ( ) ; ",
  "14557": "try ( final InputStream stream = Config . class . getResourceAsStream ( filePath ) ) { ",
  "14558": "config . props . load ( stream ) ; ",
  "14559": "throw new WeChatException ( \"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u51fa\u9519\" , e ) ; ",
  "14560": "} public < T extends WeChatBot > void call ( T bot , WeChatMessage message ) { ",
  "14561": "if ( INVOKED_MSG . contains ( message . getId ( ) ) ) { ",
  "14562": "if ( message . getMsgType ( ) == MsgType . ADD_FRIEND && bot . config ( ) . autoAddFriend ( ) ) { ",
  "14563": "bot . api ( ) . verify ( message . getRecommend ( ) ) ; ",
  "14564": "Account account = bot . api ( ) . getAccountById ( message . getFromUserName ( ) ) ; ",
  "14565": "INVOKED_MSG . add ( message . getId ( ) ) ; ",
  "14566": "method . invoke ( bot , message ) ; ",
  "14567": "if ( msgType == MsgType . ALL || msgType == message . getMsgType ( ) ) { ",
  "14568": "if ( message . getMsgType ( ) == MsgType . ADD_FRIEND ) { ",
  "14569": "if ( accountTypes . contains ( account . getAccountType ( ) ) ) { ",
  "14570": "} public static String match ( String reg , String text ) { ",
  "14571": "Pattern pattern = Pattern . compile ( reg ) ; ",
  "14572": "return m . group ( 1 ) ; ",
  "14573": "} public static String formatMsg ( String msg ) { ",
  "14574": "msg = msg . replace ( \"&lt;\" , \"<\" ) ",
  "14575": ". replace ( \"&gt;\" , \">\" ) ",
  "14576": ". replace ( \"<br/>\" , \"\\n\" ) ; ",
  "14577": "return emojiParse ( msg ) ; ",
  "14578": "} public static String getMimeType ( String fileUrl ) { ",
  "14579": "FileNameMap fileNameMap = URLConnection . getFileNameMap ( ) ; ",
  "14580": "String type = fileNameMap . getContentTypeFor ( fileUrl ) ; ",
  "14581": "} public static void sleep ( long ms ) { ",
  "14582": "TimeUnit . MILLISECONDS . sleep ( ms ) ; ",
  "14583": "log . error ( \"\" , e ) ; ",
  "14584": "} private void autoLogin ( ) { ",
  "14585": "String file = bot . config ( ) . assetsDir ( ) + \"/login.json\" ; ",
  "14586": "HotReload hotReload = WeChatUtils . fromJson ( new FileReader ( file ) , HotReload . class ) ; ",
  "14587": "hotReload . reLogin ( bot ) ; ",
  "14588": "this . login ( false ) ; ",
  "14589": "} private String getUUID ( ) { ",
  "14590": "log . info ( \"\u83b7\u53d6\u4e8c\u7ef4\u7801UUID\" ) ; ",
  "14591": "ApiResponse response = this . client . send ( new StringRequest ( \"https://login.weixin.qq.com/jslogin\" ) ",
  "14592": ". add ( \"appid\" , \"wx782c26e4c19acffb\" ) . add ( \"fun\" , \"new\" ) ) ; ",
  "14593": "Matcher matcher = UUID_PATTERN . matcher ( response . getRawBody ( ) ) ; ",
  "14594": "if ( matcher . find ( ) && StateCode . SUCCESS . equals ( matcher . group ( 1 ) ) ) { ",
  "14595": "this . uuid = matcher . group ( 2 ) ; ",
  "14596": "return this . uuid ; ",
  "14597": "} private void getQrImage ( String uuid , boolean terminalShow ) { ",
  "14598": "String uid = null != uuid ? uuid : this . uuid ; ",
  "14599": "String imgDir = bot . config ( ) . assetsDir ( ) ; ",
  "14600": "FileResponse fileResponse = this . client . download ( ",
  "14601": "new FileRequest ( String . format ( \"%s/qrcode/%s\" , Constant . BASE_URL , uid ) ) ) ; ",
  "14602": "InputStream inputStream = fileResponse . getInputStream ( ) ; ",
  "14603": "File qrCode = WeChatUtils . saveFile ( inputStream , imgDir , \"qrcode.png\" ) ; ",
  "14604": "DateUtils . sleep ( 200 ) ; ",
  "14605": "QRCodeUtils . showQrCode ( qrCode , terminalShow ) ; ",
  "14606": "this . getQrImage ( uid , terminalShow ) ; ",
  "14607": "} private String checkLogin ( String uuid ) { ",
  "14608": "String url = String . format ( \"%s/cgi-bin/mmwebwx-bin/login\" , Constant . BASE_URL ) ; ",
  "14609": "Long time = System . currentTimeMillis ( ) ; ",
  "14610": "ApiResponse response = this . client . send ( new StringRequest ( url ) ",
  "14611": ". add ( \"loginicon\" , true ) . add ( \"uuid\" , uid ) ",
  "14612": ". add ( \"tip\" , \"1\" ) . add ( \"_\" , time ) ",
  "14613": ". add ( \"r\" , ( int ) ( - time / 1000 ) / 1579 ) ",
  "14614": ". timeout ( 30 ) ) ; ",
  "14615": "Matcher matcher = CHECK_LOGIN_PATTERN . matcher ( response . getRawBody ( ) ) ; ",
  "14616": "if ( StateCode . SUCCESS . equals ( matcher . group ( 1 ) ) ) { ",
  "14617": "if ( ! this . processLoginSession ( response . getRawBody ( ) ) ) { ",
  "14618": "return StateCode . FAIL ; ",
  "14619": "return StateCode . SUCCESS ; ",
  "14620": "return matcher . group ( 1 ) ; ",
  "14621": "} private boolean processLoginSession ( String loginContent ) { ",
  "14622": "LoginSession loginSession = bot . session ( ) ; ",
  "14623": "Matcher matcher = PROCESS_LOGIN_PATTERN . matcher ( loginContent ) ; ",
  "14624": "loginSession . setUrl ( matcher . group ( 1 ) ) ; ",
  "14625": "ApiResponse response = this . client . send ( new StringRequest ( loginSession . getUrl ( ) ) . noRedirect ( ) ) ; ",
  "14626": "loginSession . setUrl ( loginSession . getUrl ( ) . substring ( 0 , loginSession . getUrl ( ) . lastIndexOf ( \"/\" ) ) ) ; ",
  "14627": "String body = response . getRawBody ( ) ; ",
  "14628": "List < String > fileUrl = new ArrayList < > ( ) ; ",
  "14629": "List < String > syncUrl = new ArrayList < > ( ) ; ",
  "14630": "for ( int i = 0 ; i < FILE_URL . size ( ) ; i ++ ) { ",
  "14631": "fileUrl . add ( String . format ( \"https://%s/cgi-bin/mmwebwx-bin\" , FILE_URL . get ( i ) ) ) ; ",
  "14632": "syncUrl . add ( String . format ( \"https://%s/cgi-bin/mmwebwx-bin\" , WEB_PUSH_URL . get ( i ) ) ) ; ",
  "14633": "String indexUrl = INDEX_URL . get ( i ) ; ",
  "14634": "if ( loginSession . getUrl ( ) . contains ( indexUrl ) ) { ",
  "14635": "loginSession . setFileUrl ( fileUrl . get ( i ) ) ; ",
  "14636": "loginSession . setSyncUrl ( syncUrl . get ( i ) ) ; ",
  "14637": "if ( ! flag ) { ",
  "14638": "loginSession . setFileUrl ( loginSession . getUrl ( ) ) ; ",
  "14639": "loginSession . setSyncUrl ( loginSession . getUrl ( ) ) ; ",
  "14640": "loginSession . setDeviceId ( \"e\" + String . valueOf ( System . currentTimeMillis ( ) ) ) ; ",
  "14641": "BaseRequest baseRequest = new BaseRequest ( ) ; ",
  "14642": "loginSession . setBaseRequest ( baseRequest ) ; ",
  "14643": "loginSession . setSKey ( WeChatUtils . match ( \"<skey>(\\\\S+)</skey>\" , body ) ) ; ",
  "14644": "loginSession . setWxSid ( WeChatUtils . match ( \"<wxsid>(\\\\S+)</wxsid>\" , body ) ) ; ",
  "14645": "loginSession . setWxUin ( WeChatUtils . match ( \"<wxuin>(\\\\S+)</wxuin>\" , body ) ) ; ",
  "14646": "loginSession . setPassTicket ( WeChatUtils . match ( \"<pass_ticket>(\\\\S+)</pass_ticket>\" , body ) ) ; ",
  "14647": "baseRequest . setSkey ( loginSession . getSKey ( ) ) ; ",
  "14648": "baseRequest . setSid ( loginSession . getWxSid ( ) ) ; ",
  "14649": "baseRequest . setUin ( loginSession . getWxUin ( ) ) ; ",
  "14650": "baseRequest . setDeviceID ( loginSession . getDeviceId ( ) ) ; ",
  "14651": "} private String pushLogin ( ) { ",
  "14652": "String uin = this . client . cookie ( \"wxUin\" ) ; ",
  "14653": "if ( StringUtils . isEmpty ( uin ) ) { ",
  "14654": "String url = String . format ( \"%s/cgi-bin/mmwebwx-bin/webwxpushloginurl?uin=%s\" , ",
  "14655": "Constant . BASE_URL , uin ) ; ",
  "14656": "JsonResponse jsonResponse = this . client . send ( new JsonRequest ( url ) ) ; ",
  "14657": "return jsonResponse . getString ( \"uuid\" ) ; ",
  "14658": "} private void statusNotify ( ) { ",
  "14659": "log . info ( \"\u5f00\u542f\u72b6\u6001\u901a\u77e5\" ) ; ",
  "14660": "String url = String . format ( \"%s/webwxstatusnotify?lang=zh_CN&pass_ticket=%s\" , ",
  "14661": "bot . session ( ) . getUrl ( ) , bot . session ( ) . getPassTicket ( ) ) ; ",
  "14662": "this . client . send ( new JsonRequest ( url ) . post ( ) . jsonBody ( ) ",
  "14663": ". add ( \"BaseRequest\" , bot . session ( ) . getBaseRequest ( ) ) ",
  "14664": ". add ( \"Code\" , 3 ) ",
  "14665": ". add ( \"FromUserName\" , bot . session ( ) . getUserName ( ) ) ",
  "14666": ". add ( \"ToUserName\" , bot . session ( ) . getUserName ( ) ) ",
  "14667": ". add ( \"ClientMsgId\" , System . currentTimeMillis ( ) / 1000 ) ) ; ",
  "14668": "} private void webInit ( ) { ",
  "14669": "log . info ( \"\u5fae\u4fe1\u521d\u59cb\u5316...\" ) ; ",
  "14670": "int r = ( int ) ( - System . currentTimeMillis ( ) / 1000 ) / 1579 ; ",
  "14671": "String url = String . format ( \"%s/webwxinit?r=%d&pass_ticket=%s\" , ",
  "14672": "bot . session ( ) . getUrl ( ) , r , bot . session ( ) . getPassTicket ( ) ) ; ",
  "14673": "JsonResponse response = this . client . send ( new JsonRequest ( url ) . post ( ) . jsonBody ( ) ",
  "14674": ". add ( \"BaseRequest\" , bot . session ( ) . getBaseRequest ( ) ) ) ; ",
  "14675": "WebInitResponse webInitResponse = response . parse ( WebInitResponse . class ) ; ",
  "14676": "List < Account > contactList = webInitResponse . getContactList ( ) ; ",
  "14677": "this . syncRecentContact ( contactList ) ; ",
  "14678": "Account account = webInitResponse . getAccount ( ) ; ",
  "14679": "SyncKey syncKey = webInitResponse . getSyncKey ( ) ; ",
  "14680": "bot . session ( ) . setInviteStartCount ( webInitResponse . getInviteStartCount ( ) ) ; ",
  "14681": "bot . session ( ) . setAccount ( account ) ; ",
  "14682": "bot . session ( ) . setUserName ( account . getUserName ( ) ) ; ",
  "14683": "bot . session ( ) . setNickName ( account . getNickName ( ) ) ; ",
  "14684": "bot . session ( ) . setSyncKey ( syncKey ) ; ",
  "14685": "} private void startRevive ( ) { ",
  "14686": "bot . setRunning ( true ) ; ",
  "14687": "Thread thread = new Thread ( new ChatLoop ( bot ) ) ; ",
  "14688": "thread . setName ( \"wechat-listener\" ) ; ",
  "14689": "thread . setDaemon ( true ) ; ",
  "14690": "thread . start ( ) ; ",
  "14691": "public SyncCheckRet syncCheck ( ) { ",
  "14692": "String url = String . format ( \"%s/synccheck\" , bot . session ( ) . getSyncOrUrl ( ) ) ; ",
  "14693": ". add ( \"r\" , System . currentTimeMillis ( ) ) ",
  "14694": ". add ( \"skey\" , bot . session ( ) . getSKey ( ) ) ",
  "14695": ". add ( \"sid\" , bot . session ( ) . getWxSid ( ) ) ",
  "14696": ". add ( \"uin\" , bot . session ( ) . getWxUin ( ) ) ",
  "14697": ". add ( \"deviceid\" , bot . session ( ) . getDeviceId ( ) ) ",
  "14698": ". add ( \"synckey\" , bot . session ( ) . getSyncKeyStr ( ) ) ",
  "14699": ". add ( \"_\" , System . currentTimeMillis ( ) ) ",
  "14700": ". timeout ( 30 ) ",
  "14701": "Matcher matcher = SYNC_CHECK_PATTERN . matcher ( response . getRawBody ( ) ) ; ",
  "14702": "if ( ! \"0\" . equals ( matcher . group ( 1 ) ) ) { ",
  "14703": "return new SyncCheckRet ( RetCode . parse ( Integer . valueOf ( matcher . group ( 1 ) ) ) , 0 ) ; ",
  "14704": "return new SyncCheckRet ( RetCode . parse ( Integer . valueOf ( matcher . group ( 1 ) ) ) , Integer . valueOf ( matcher . group ( 2 ) ) ) ; ",
  "14705": "return new SyncCheckRet ( RetCode . UNKNOWN , 0 ) ; ",
  "14706": "if ( e instanceof SocketTimeoutException ) { ",
  "14707": "log . warn ( \"\u5fc3\u8df3\u68c0\u67e5\u8d85\u65f6\" ) ; ",
  "14708": "return syncCheck ( ) ; ",
  "14709": "log . error ( \"\u5fc3\u8df3\u68c0\u67e5\u51fa\u9519\" , e ) ; ",
  "14710": "public WebSyncResponse webSync ( ) { ",
  "14711": "String url = String . format ( \"%s/webwxsync?sid=%s&sKey=%s&passTicket=%s\" , ",
  "14712": "bot . session ( ) . getUrl ( ) , bot . session ( ) . getWxSid ( ) , ",
  "14713": "bot . session ( ) . getSKey ( ) , bot . session ( ) . getPassTicket ( ) ) ; ",
  "14714": ". add ( \"SyncKey\" , bot . session ( ) . getSyncKey ( ) ) ",
  "14715": ". add ( \"rr\" , ~ ( System . currentTimeMillis ( ) / 1000 ) ) ) ; ",
  "14716": "WebSyncResponse webSyncResponse = response . parse ( WebSyncResponse . class ) ; ",
  "14717": "if ( ! webSyncResponse . success ( ) ) { ",
  "14718": "log . warn ( \"\u83b7\u53d6\u6d88\u606f\u5931\u8d25\" ) ; ",
  "14719": "return webSyncResponse ; ",
  "14720": "bot . session ( ) . setSyncKey ( webSyncResponse . getSyncKey ( ) ) ; ",
  "14721": "public void logout ( ) { ",
  "14722": "if ( bot . isRunning ( ) ) { ",
  "14723": "String url = String . format ( \"%s/webwxlogout\" , bot . session ( ) . getUrl ( ) ) ; ",
  "14724": "this . client . send ( new StringRequest ( url ) ",
  "14725": ". add ( \"redirect\" , 1 ) ",
  "14726": ". add ( \"type\" , 1 ) ",
  "14727": ". add ( \"sKey\" , bot . session ( ) . getSKey ( ) ) ) ; ",
  "14728": "bot . setRunning ( false ) ; ",
  "14729": "this . logging = false ; ",
  "14730": "this . client . cookies ( ) . clear ( ) ; ",
  "14731": "new File ( file ) . delete ( ) ; ",
  "14732": "public void loadContact ( int seq ) { ",
  "14733": "log . info ( \"\u5f00\u59cb\u83b7\u53d6\u8054\u7cfb\u4eba\u4fe1\u606f\" ) ; ",
  "14734": "String url = String . format ( \"%s/webwxgetcontact?r=%s&seq=%s&skey=%s\" , ",
  "14735": "bot . session ( ) . getUrl ( ) , System . currentTimeMillis ( ) , ",
  "14736": "seq , bot . session ( ) . getSKey ( ) ) ; ",
  "14737": "JsonResponse response = this . client . send ( new JsonRequest ( url ) . jsonBody ( ) ) ; ",
  "14738": "JsonObject jsonObject = response . toJsonObject ( ) ; ",
  "14739": "seq = jsonObject . get ( \"Seq\" ) . getAsInt ( ) ; ",
  "14740": "this . memberCount += jsonObject . get ( \"MemberCount\" ) . getAsInt ( ) ; ",
  "14741": "List < Account > memberList = WeChatUtils . fromJson ( WeChatUtils . toJson ( jsonObject . getAsJsonArray ( \"MemberList\" ) ) , new TypeToken < List < Account > > ( ) { } ) ; ",
  "14742": "for ( Account account : memberList ) { ",
  "14743": "if ( null == account . getUserName ( ) ) { ",
  "14744": "accountMap . put ( account . getUserName ( ) , account ) ; ",
  "14745": "if ( seq == 0 ) { ",
  "14746": "this . contactList = new ArrayList < > ( this . getAccountByType ( AccountType . TYPE_FRIEND ) ) ; ",
  "14747": "this . publicUsersList = new ArrayList < > ( this . getAccountByType ( AccountType . TYPE_MP ) ) ; ",
  "14748": "this . specialUsersList = new ArrayList < > ( this . getAccountByType ( AccountType . TYPE_SPECIAL ) ) ; ",
  "14749": "Set < Account > groupAccounts = this . getAccountByType ( AccountType . TYPE_GROUP ) ; ",
  "14750": "for ( Account groupAccount : groupAccounts ) { ",
  "14751": "groupUserNames . add ( groupAccount . getUserName ( ) ) ; ",
  "14752": "} public void loadGroupList ( ) { ",
  "14753": "log . info ( \"\u52a0\u8f7d\u7fa4\u804a\u4fe1\u606f\" ) ; ",
  "14754": "List < Map < String , String > > list = new ArrayList < > ( groupUserNames . size ( ) ) ; ",
  "14755": "for ( String groupUserName : groupUserNames ) { ",
  "14756": "Map < String , String > map = new HashMap < > ( 2 ) ; ",
  "14757": "map . put ( \"UserName\" , groupUserName ) ; ",
  "14758": "map . put ( \"EncryChatRoomId\" , \"\" ) ; ",
  "14759": "list . add ( map ) ; ",
  "14760": "String url = String . format ( \"%s/webwxbatchgetcontact?type=ex&r=%s&pass_ticket=%s\" , ",
  "14761": "bot . session ( ) . getUrl ( ) , System . currentTimeMillis ( ) / 1000 , bot . session ( ) . getPassTicket ( ) ) ; ",
  "14762": "JsonResponse jsonResponse = this . client . send ( new JsonRequest ( url ) . post ( ) . jsonBody ( ) ",
  "14763": ". add ( \"Count\" , groupUserNames . size ( ) ) ",
  "14764": ". add ( \"List\" , list ) ",
  "14765": "this . groupList = WeChatUtils . fromJson ( WeChatUtils . toJson ( jsonResponse . toJsonObject ( ) . getAsJsonArray ( \"ContactList\" ) ) , new TypeToken < List < Account > > ( ) { } ) ; ",
  "14766": "public Account getAccountByName ( String name ) { ",
  "14767": "for ( Account account : accountMap . values ( ) ) { ",
  "14768": "if ( name . equals ( account . getRemarkName ( ) ) ) { ",
  "14769": "return account ; ",
  "14770": "if ( name . equals ( account . getNickName ( ) ) ) { ",
  "14771": "} public Set < Account > getAccountByType ( AccountType accountType ) { ",
  "14772": "Set < Account > accountSet = new HashSet < > ( ) ; ",
  "14773": "if ( account . getAccountType ( ) . equals ( accountType ) ) { ",
  "14774": "accountSet . add ( account ) ; ",
  "14775": "return accountSet ; ",
  "14776": "} public void syncRecentContact ( List < Account > contactList ) { ",
  "14777": "if ( null != contactList && contactList . size ( ) > 0 ) { ",
  "14778": "for ( Account account : contactList ) { ",
  "14779": "public List < WeChatMessage > handleMsg ( List < Message > messages ) { ",
  "14780": "if ( null != messages && messages . size ( ) > 0 ) { ",
  "14781": "List < WeChatMessage > weChatMessages = new ArrayList < > ( messages . size ( ) ) ; ",
  "14782": "boolean hashNewMsg = false ; ",
  "14783": "for ( Message message : messages ) { ",
  "14784": "WeChatMessage weChatMessage = this . processMsg ( message ) ; ",
  "14785": "if ( null != weChatMessage ) { ",
  "14786": "weChatMessages . add ( weChatMessage ) ; ",
  "14787": "hashNewMsg = true ; ",
  "14788": "if ( hashNewMsg ) { ",
  "14789": "log . info ( \"\u4f60\u6709\u65b0\u7684\u6d88\u606f\" ) ; ",
  "14790": "return weChatMessages ; ",
  "14791": "} private String downloadImg ( String msgId ) { ",
  "14792": "return this . downloadFile ( ",
  "14793": "new DownLoad ( ApiURL . IMAGE , bot . session ( ) . getUrl ( ) , msgId , bot . session ( ) . getSKey ( ) ) ",
  "14794": ". msgId ( msgId ) . saveByDay ( ) ",
  "14795": "} private String downloadIconImg ( String msgId ) { ",
  "14796": "new DownLoad ( ApiURL . ICON , bot . session ( ) . getUrl ( ) , msgId , bot . session ( ) . getSKey ( ) ) ",
  "14797": ". msgId ( msgId ) ",
  "14798": "} private String downloadHeadImg ( String userName ) { ",
  "14799": "new DownLoad ( ApiURL . HEAD_IMG , bot . session ( ) . getUrl ( ) , userName , bot . session ( ) . getSKey ( ) ) ",
  "14800": ". msgId ( userName ) ",
  "14801": "} private String downloadVideo ( String msgId ) { ",
  "14802": "new DownLoad ( ApiURL . VIDEO , bot . session ( ) . getUrl ( ) , msgId , bot . session ( ) . getSKey ( ) ) ",
  "14803": "} private String downloadVoice ( String msgId ) { ",
  "14804": "new DownLoad ( ApiURL . VOICE , bot . session ( ) . getUrl ( ) , msgId , bot . session ( ) . getSKey ( ) ) ",
  "14805": "public MediaResponse uploadMedia ( String toUser , String filePath ) { ",
  "14806": "throw new WeChatException ( \"\u6587\u4ef6[\" + filePath + \"]\u4e0d\u5b58\u5728\" ) ; ",
  "14807": "long size = file . length ( ) ; ",
  "14808": "String mimeType = WeChatUtils . getMimeType ( filePath ) ; ",
  "14809": "String mediatype = \"doc\" ; ",
  "14810": "if ( mediatype . contains ( \"image\" ) ) { ",
  "14811": "mediatype = \"pic\" ; ",
  "14812": "if ( mediatype . contains ( \"audio\" ) ) { ",
  "14813": "mediatype = \"audio\" ; ",
  "14814": "if ( mediatype . contains ( \"video\" ) ) { ",
  "14815": "mediatype = \"video\" ; ",
  "14816": "String url = String . format ( \"%s/webwxuploadmedia?f=json\" , bot . session ( ) . getFileUrl ( ) ) ; ",
  "14817": "String mediaId = System . currentTimeMillis ( ) / 1000 + StringUtils . random ( 6 ) ; ",
  "14818": "Map < String , Object > uploadMediaRequest = new HashMap < > ( 10 ) ; ",
  "14819": "uploadMediaRequest . put ( \"UploadType\" , 2 ) ; ",
  "14820": "uploadMediaRequest . put ( \"BaseRequest\" , bot . session ( ) . getBaseRequest ( ) ) ; ",
  "14821": "uploadMediaRequest . put ( \"ClientMediaId\" , mediaId ) ; ",
  "14822": "uploadMediaRequest . put ( \"TotalLen\" , size ) ; ",
  "14823": "uploadMediaRequest . put ( \"StartPos\" , 0 ) ; ",
  "14824": "uploadMediaRequest . put ( \"DataLen\" , size ) ; ",
  "14825": "uploadMediaRequest . put ( \"MediaType\" , 4 ) ; ",
  "14826": "uploadMediaRequest . put ( \"FromUserName\" , bot . session ( ) . getUserName ( ) ) ; ",
  "14827": "uploadMediaRequest . put ( \"ToUserName\" , toUser ) ; ",
  "14828": "uploadMediaRequest . put ( \"FileMd5\" , MD5Checksum . getMD5Checksum ( file . getPath ( ) ) ) ; ",
  "14829": "String dataTicket = this . client . cookie ( \"webwx_data_ticket\" ) ; ",
  "14830": "if ( StringUtils . isEmpty ( dataTicket ) ) { ",
  "14831": "throw new WeChatException ( \"\u7f3a\u5c11\u4e86\u9644\u4ef6Cookie\" ) ; ",
  "14832": "ApiResponse response = this . client . send ( new StringRequest ( url ) . post ( ) . multipart ( ) ",
  "14833": ". fileName ( file . getName ( ) ) ",
  "14834": ". add ( \"id\" , \"WU_FILE_0\" ) ",
  "14835": ". add ( \"name\" , filePath ) ",
  "14836": ". add ( \"type\" , mimeType ) ",
  "14837": ". add ( \"size\" , String . valueOf ( size ) ) ",
  "14838": ". add ( \"mediatype\" , mediatype ) ",
  "14839": ". add ( \"uploadmediarequest\" , WeChatUtils . toJson ( uploadMediaRequest ) ) ",
  "14840": ". add ( \"webwx_data_ticket\" , dataTicket ) ",
  "14841": ". add ( \"pass_ticket\" , bot . session ( ) . getPassTicket ( ) ) ",
  "14842": ". add ( \"filename\" , RequestBody . create ( MediaType . parse ( mimeType ) , file ) ) ) ; ",
  "14843": "MediaResponse mediaResponse = response . parse ( MediaResponse . class ) ; ",
  "14844": "if ( ! mediaResponse . success ( ) ) { ",
  "14845": "return mediaResponse ; ",
  "14846": "public boolean sendImg ( String toUserName , String filePath ) { ",
  "14847": "DateUtils . sendSleep ( ) ; ",
  "14848": "String mediaId = this . uploadMedia ( toUserName , filePath ) . getMediaId ( ) ; ",
  "14849": "if ( StringUtils . isEmpty ( mediaId ) ) { ",
  "14850": "log . warn ( \"Media\u4e3a\u7a7a\" ) ; ",
  "14851": "String url = String . format ( \"%s/webwxsendmsgimg?fun=async&f=json&pass_ticket=%s\" , ",
  "14852": "String msgId = System . currentTimeMillis ( ) / 1000 + StringUtils . random ( 6 ) ; ",
  "14853": "Map < String , Object > msg = new HashMap < > ( ) ; ",
  "14854": "msg . put ( \"Type\" , 3 ) ; ",
  "14855": "msg . put ( \"MediaId\" , mediaId ) ; ",
  "14856": "msg . put ( \"FromUserName\" , bot . session ( ) . getUserName ( ) ) ; ",
  "14857": "msg . put ( \"ToUserName\" , toUserName ) ; ",
  "14858": "msg . put ( \"LocalID\" , msgId ) ; ",
  "14859": "msg . put ( \"ClientMsgId\" , msgId ) ; ",
  "14860": ". add ( \"Msg\" , msg ) ",
  "14861": "return null != response && response . success ( ) ; ",
  "14862": "public boolean sendText ( String toUserName , String msg ) { ",
  "14863": "String url = String . format ( \"%s/webwxsendmsg?pass_ticket=%s\" , bot . session ( ) . getUrl ( ) , bot . session ( ) . getPassTicket ( ) ) ; ",
  "14864": ". add ( \"Msg\" , new SendMessage ( 1 , msg , bot . session ( ) . getUserName ( ) , toUserName , msgId , msgId ) ) ",
  "14865": "} public static String getMD5Checksum ( String filename ) { ",
  "14866": "byte [ ] b = createChecksum ( filename ) ; ",
  "14867": "result += Integer . toString ( ( b [ i ] & 0xff ) + 0x100 , 16 ) . substring ( 1 ) ; ",
  "14868": "} public static void recoverCookie ( Map < String , List < Cookie > > cookieStore ) { ",
  "14869": "BotClient . cookieStore . clear ( ) ; ",
  "14870": "BotClient . cookieStore = cookieStore ; ",
  "14871": "} private OkHttpClient timeout ( ApiRequest request ) { ",
  "14872": "int timeoutMillis = request . getTimeout ( ) * 1000 ; ",
  "14873": "if ( client . readTimeoutMillis ( ) == 0 || client . readTimeoutMillis ( ) > timeoutMillis ) { ",
  "14874": "if ( null != clientWithTimeout && clientWithTimeout . readTimeoutMillis ( ) > timeoutMillis ) { ",
  "14875": "return clientWithTimeout ; ",
  "14876": "clientWithTimeout = client . newBuilder ( ) . readTimeout ( timeoutMillis + 1000 , TimeUnit . MILLISECONDS ) . build ( ) ; ",
  "14877": "} public static void showQrCode ( File qrCode , boolean terminal ) throws WriterException { ",
  "14878": "if ( ! terminal ) { ",
  "14879": "String os = System . getProperty ( \"os.name\" ) . toLowerCase ( ) ; ",
  "14880": "if ( os . contains ( \"mac\" ) || os . contains ( \"win\" ) ) { ",
  "14881": "Desktop . getDesktop ( ) . open ( qrCode ) ; ",
  "14882": "Map < EncodeHintType , Object > hintMap = new EnumMap < EncodeHintType , Object > ( EncodeHintType . class ) ; ",
  "14883": "hintMap . put ( EncodeHintType . CHARACTER_SET , \"UTF-8\" ) ; ",
  "14884": "hintMap . put ( EncodeHintType . MARGIN , 1 ) ; ",
  "14885": "hintMap . put ( EncodeHintType . ERROR_CORRECTION , ErrorCorrectionLevel . L ) ; ",
  "14886": "String qrContent = QRCodeUtils . readQRCode ( qrCode , hintMap ) ; ",
  "14887": "QRCodeWriter qrCodeWriter = new QRCodeWriter ( ) ; ",
  "14888": "BitMatrix bitMatrix ; ",
  "14889": "bitMatrix = qrCodeWriter . encode ( qrContent , BarcodeFormat . QR_CODE , 10 , 10 , hintMap ) ; ",
  "14890": "System . out . println ( toAscii ( bitMatrix ) ) ; ",
  "14891": "} private static String toAscii ( BitMatrix bitMatrix ) { ",
  "14892": "for ( int rows = 0 ; rows < bitMatrix . getHeight ( ) ; rows ++ ) { ",
  "14893": "for ( int cols = 0 ; cols < bitMatrix . getWidth ( ) ; cols ++ ) { ",
  "14894": "boolean x = bitMatrix . get ( rows , cols ) ; ",
  "14895": "if ( ! x ) { ",
  "14896": "sb . append ( \"\\n\" ) ; ",
  "14897": "} private static String readQRCode ( File filePath , Map hintMap ) { ",
  "14898": "BinaryBitmap binaryBitmap = new BinaryBitmap ( new HybridBinarizer ( ",
  "14899": "new BufferedImageLuminanceSource ( ImageIO . read ( new FileInputStream ( filePath ) ) ) ) ) ; ",
  "14900": "Result qrCodeResult = new MultiFormatReader ( ) . decode ( binaryBitmap , hintMap ) ; ",
  "14901": "return qrCodeResult . getText ( ) ; ",
  "14902": "} public static OkHttpClient . Builder configureToIgnoreCertificate ( OkHttpClient . Builder builder ) { ",
  "14903": "final TrustManager [ ] trustAllCerts = new TrustManager [ ] { ",
  "14904": "new X509TrustManager ( ) { ",
  "14905": "public void checkClientTrusted ( java . security . cert . X509Certificate [ ] chain , String authType ) { ",
  "14906": "public void checkServerTrusted ( java . security . cert . X509Certificate [ ] chain , String authType ) { ",
  "14907": "public java . security . cert . X509Certificate [ ] getAcceptedIssuers ( ) { ",
  "14908": "return new java . security . cert . X509Certificate [ ] { } ; ",
  "14909": "final SSLContext sslContext = SSLContext . getInstance ( \"SSL\" ) ; ",
  "14910": "sslContext . init ( null , trustAllCerts , new java . security . SecureRandom ( ) ) ; ",
  "14911": "final SSLSocketFactory sslSocketFactory = sslContext . getSocketFactory ( ) ; ",
  "14912": "builder . sslSocketFactory ( sslSocketFactory , ( X509TrustManager ) trustAllCerts [ 0 ] ) ; ",
  "14913": "builder . hostnameVerifier ( new HostnameVerifier ( ) { ",
  "14914": "public boolean verify ( String hostname , SSLSession session ) { ",
  "14915": "} @ PostDeploy ",
  "14916": "public void onDeploymentFinished ( ProcessEngine processEngine ) { ",
  "14917": "long processCount = processEngine . getRuntimeService ( ) . createProcessInstanceQuery ( ) . processDefinitionKey ( PROCESS_DEFINITION_KEY ) . count ( ) ; ",
  "14918": "if ( processCount == 0 ) { ",
  "14919": "Map < String , Object > variables = new HashMap < String , Object > ( ) ; ",
  "14920": "variables . put ( \"taskAssignee\" , \"demo\" ) ; ",
  "14921": "ProcessInstance processInstance = processEngine . getRuntimeService ( ) . startProcessInstanceByKey ( PROCESS_DEFINITION_KEY , \"vorgang-27\" , variables ) ; ",
  "14922": "variables = new HashMap < String , Object > ( ) ; ",
  "14923": "variables . put ( \"subtaskAssignee\" , \"demo\" ) ; ",
  "14924": "processEngine . getRuntimeService ( ) . messageEventReceived ( \"SUBTASK_WANTED\" , processInstance . getId ( ) , variables ) ; ",
  "14925": "} @ StartProcess ( \"OrderConfirmation\" ) ",
  "14926": "public void saveNewOrder ( Order order ) { ",
  "14927": "entityManager . persist ( order . getCustomer ( ) ) ; ",
  "14928": "entityManager . persist ( order ) ; ",
  "14929": "businessProcess . setVariable ( \"orderId\" , order . getId ( ) ) ; ",
  "14930": "Claim claim = new Claim ( ) ; ",
  "14931": "claim . setExpenditure ( 1000 ) ; ",
  "14932": "processEngine . getRuntimeService ( ) . startProcessInstanceByKey ( BpmConstants . DECISION_FLOW_KEY_mitarbeiterBestimmen , ",
  "14933": "Variables . createVariables ( ) ",
  "14934": ". putValue ( \"claim\" , claim ) ) ; ",
  "14935": "} public void initFromProcessEngineConfiguration ( ProcessEngineConfigurationImpl processEngineConfiguration , String resourceName ) { ",
  "14936": "this . resourceName = resourceName ; ",
  "14937": "setDataSource ( processEngineConfiguration . getDataSource ( ) ) ; ",
  "14938": "initDataSource ( ) ; ",
  "14939": "initCommandContextFactory ( ) ; ",
  "14940": "initTransactionFactory ( ) ; ",
  "14941": "initTransactionContextFactory ( ) ; ",
  "14942": "initCommandExecutors ( ) ; ",
  "14943": "initIdentityProviderSessionFactory ( ) ; ",
  "14944": "initSqlSessionFactory ( ) ; ",
  "14945": "initSessionFactories ( ) ; ",
  "14946": "} public void startAccontOpeningProcess ( Map < String , Object > variables ) { ",
  "14947": "String businessKey = ( String ) variables . get ( \"ordernumber\" ) ; ",
  "14948": "runtimeService . startProcessInstanceByKey ( PROCESS_KEY , businessKey , variables ) ; ",
  "14949": "} public static BoxDeveloperEditionAPIConnection userClient ( String userId ) { ",
  "14950": "if ( userId == null ) { ",
  "14951": "BoxDeveloperEditionAPIConnection userClient = BoxDeveloperEditionAPIConnection . getAppUserConnection ( ",
  "14952": "userId , CLIENT_ID , CLIENT_SECRET , jwtEncryptionPreferences , accessTokenCache ) ; ",
  "14953": "return userClient ; ",
  "14954": "} catch ( BoxAPIException apiException ) { ",
  "14955": "apiException . printStackTrace ( ) ; ",
  "14956": "throw apiException ; ",
  "14957": "} private void addExecutionListener ( final ActivityImpl activity ) { ",
  "14958": "final String guardClass = guardClass ( activity ) ; ",
  "14959": "if ( isNotBlank ( guardClass ) ) { ",
  "14960": "activity . addExecutionListener ( ExecutionListener . EVENTNAME_START , classDelegateFor ( guardClass ) ) ; ",
  "14961": "activity . addExecutionListener ( ExecutionListener . EVENTNAME_END , classDelegateFor ( guardClass ) ) ; ",
  "14962": "} public void updateModifiedFieldsFromEntity ( ProcessDefinitionEntity updatingProcessDefinition ) { ",
  "14963": "if ( ! this . key . equals ( updatingProcessDefinition . key ) || ! this . deploymentId . equals ( updatingProcessDefinition . deploymentId ) ) { ",
  "14964": "this . revision = updatingProcessDefinition . revision ; ",
  "14965": "this . suspensionState = updatingProcessDefinition . suspensionState ; ",
  "14966": "if ( processEngine . getRuntimeService ( ) . createProcessInstanceQuery ( ) . processDefinitionKey ( PROCESS_DEFINITION_KEY ) . count ( ) == 0 ) { ",
  "14967": "Order order = new Order ( ) ",
  "14968": "processEngine . getRuntimeService ( ) . startProcessInstanceByKey ( ",
  "14969": "PROCESS_DEFINITION_KEY , ",
  "14970": "Variables . createVariables ( ) . putValueTyped ( ",
  "14971": "ProcessVariables . VAR_NAME_ORDER , ",
  "14972": "Variables . objectValue ( order ) . serializationDataFormat ( SerializationDataFormats . JSON ) . create ( ) ) ) ; ",
  "14973": "} private void addFourEyesTaskListener ( ActivityImpl activity ) { ",
  "14974": "UserTaskActivityBehavior userTaskActivityBehavior = ( UserTaskActivityBehavior ) activity . getActivityBehavior ( ) ; ",
  "14975": "boolean listenerAlreadyExists = false ; ",
  "14976": "List < TaskListener > existingListeners = userTaskActivityBehavior . getTaskDefinition ( ) . getTaskListeners ( ) . get ( \"complete\" ) ; ",
  "14977": "for ( TaskListener taskListener : existingListeners ) { ",
  "14978": "if ( taskListener instanceof ClassDelegate && ",
  "14979": "( ( ClassDelegate ) taskListener ) . getClassName ( ) . equals ( TaskCompletionListener . class . getName ( ) ) ) { ",
  "14980": "listenerAlreadyExists = true ; ",
  "14981": "if ( ! listenerAlreadyExists ) { ",
  "14982": "ClassDelegate taskListener = new ClassDelegate ( TaskCompletionListener . class , null ) ; ",
  "14983": "userTaskActivityBehavior . getTaskDefinition ( ) . addTaskListener ( \"complete\" , taskListener ) ; ",
  "14984": "public void deployProcessesToTenantEngines ( ) { ",
  "14985": "for ( ProcessEngine processEngine : BpmPlatform . getProcessEngineService ( ) . getProcessEngines ( ) ) { ",
  "14986": "if ( processEngine != BpmPlatform . getDefaultProcessEngine ( ) ) { ",
  "14987": "TenantManager . deployDefaultProcessesToEngine ( processEngine ) ; ",
  "14988": "} private void setSharedAttribute ( Task task ) { ",
  "14989": "setSharedAttribute ( BRIDGE_TASK_ID , task . getId ( ) ) ; ",
  "14990": "setSharedAttribute ( BRIDGE_PROCESS_DEFINITION_ID , null ) ; ",
  "14991": "} public String getPortletId ( String portletName , String servletContextName ) { ",
  "14992": "String portletId = portletName ; ",
  "14993": "if ( Validator . isNotNull ( servletContextName ) ) { ",
  "14994": "if ( servletContextName . startsWith ( \"/\" ) ) { ",
  "14995": "servletContextName = servletContextName . substring ( 1 ) ; ",
  "14996": "portletId = portletId . concat ( PortletConstants . WAR_SEPARATOR ) . concat ( servletContextName ) ; ",
  "14997": "portletId = PortalUtil . getJsSafePortletId ( portletId ) ; ",
  "14998": "return portletId ; ",
  "14999": "User user = processEngine . getIdentityService ( ) . createUserQuery ( ) . userId ( \"niall\" ) . singleResult ( ) ; ",
  "15000": "createInitialUserInternal ( processEngine ) ; ",
  "15001": "} private ProcessEngine startProcessEngine ( String tenant ) { ",
  "15002": "ProcessEngineConfigurationImpl configuration = new StandaloneProcessEngineConfiguration ( ) ; ",
  "15003": "configuration . setIdGenerator ( new StrongUuidGenerator ( ) ) ; ",
  "15004": "configureCustomRetryStrategy ( configuration ) ; ",
  "15005": "configuration . setProcessEngineName ( tenant ) ; ",
  "15006": "configuration . setJdbcDriver ( \"org.h2.Driver\" ) ; ",
  "15007": "configuration . setJdbcUrl ( \"jdbc:h2:./camunda-h2-dbs/process-engine-\" + tenant + \";MVCC=TRUE;TRACE_LEVEL_FILE=0;DB_CLOSE_ON_EXIT=FALSE\" ) ; ",
  "15008": "configuration . setDatabaseSchemaUpdate ( StandaloneProcessEngineConfiguration . DB_SCHEMA_UPDATE_TRUE ) ; ",
  "15009": "configuration . setJobExecutorDeploymentAware ( true ) ; ",
  "15010": "configuration . setHistory ( StandaloneProcessEngineConfiguration . HISTORY_FULL ) ; ",
  "15011": "JobExecutor jobExecutor = getServiceContainer ( ) . getServiceValue ( ServiceTypes . JOB_EXECUTOR , jobAcquisitionName ) ; ",
  "15012": "if ( jobExecutor == null ) { ",
  "15013": "configuration . setJobExecutor ( jobExecutor ) ; ",
  "15014": "ProcessEngine processEngine = configuration . buildProcessEngine ( ) ; ",
  "15015": "RuntimeContainerDelegate . INSTANCE . get ( ) . registerProcessEngine ( processEngine ) ; ",
  "15016": "return processEngine ; ",
  "15017": "} private void checkTaskSelectedViaBridge ( ) { ",
  "15018": "String bridgeTaskId = ( String ) getSharedSessionAttribute ( BRIDGE_TASK_ID ) ; ",
  "15019": "String selectedTaskId = ( String ) getSharedSessionAttribute ( ASSOCIATED_TASK_ID ) ; ",
  "15020": "if ( selectedTaskId == null && bridgeTaskId != null ) { ",
  "15021": "switchTaskId ( bridgeTaskId ) ; ",
  "15022": "if ( selectedTaskId != null && bridgeTaskId != null && ! selectedTaskId . equals ( bridgeTaskId ) ) { ",
  "15023": "} public List < String > getTaskList ( List < String > correlationIds ) { ",
  "15024": "ArrayList < String > tasks = new ArrayList < String > ( ) ; ",
  "15025": "for ( String id : correlationIds ) { ",
  "15026": "List < Task > tasksForCorrelationId = taskService . createTaskQuery ( ) . processVariableValueEquals ( CALLBACK_CORRELATION_ID , id ) . list ( ) ; ",
  "15027": "for ( Task task : tasksForCorrelationId ) { ",
  "15028": "tasks . add ( task . getName ( ) ) ; ",
  "15029": "return tasks ; ",
  "15030": "} public static String getServletContextPath ( ",
  "15031": "ProcessEngine processEngine , String processDefinitionId ) { ",
  "15032": "return getServletContextPath ( getProcessApplicationInfo ( processEngine , processDefinitionId ) ) ; ",
  "15033": "} public static String getServletContextPath ( String processDefinitionId ) { ",
  "15034": "ProcessApplicationInfo processApplicationInfo = getProcessApplicationInfo ( processDefinitionId ) ; ",
  "15035": "if ( processApplicationInfo == null ) { ",
  "15036": "return processApplicationInfo . getProperties ( ) . get ( ",
  "15037": "ProcessApplicationInfo . PROP_SERVLET_CONTEXT_PATH ) ; ",
  "15038": "} public static ProcessApplicationInfo getProcessApplicationInfo ( ",
  "15039": "ProcessDefinition processDefinition = processEngine . getRepositoryService ( ) . getProcessDefinition ( processDefinitionId ) ; ",
  "15040": "String processApplicationName = processEngine . getManagementService ( ) ",
  "15041": ". getProcessApplicationForDeployment ( processDefinition . getDeploymentId ( ) ) ; ",
  "15042": "if ( processApplicationName == null ) { ",
  "15043": "ProcessApplicationService processApplicationService = BpmPlatform . getProcessApplicationService ( ) ; ",
  "15044": "return processApplicationService . getProcessApplicationInfo ( processApplicationName ) ; ",
  "15045": "} public static ProcessApplicationInfo getProcessApplicationInfo ( String processDefinitionId ) { ",
  "15046": "ProcessEngineService processEngineService = BpmPlatform . getProcessEngineService ( ) ; ",
  "15047": "ProcessApplicationService processAppService = BpmPlatform . getProcessApplicationService ( ) ; ",
  "15048": "for ( String appName : processAppService . getProcessApplicationNames ( ) ) { ",
  "15049": "ProcessApplicationInfo appInfo = processAppService ",
  "15050": ". getProcessApplicationInfo ( appName ) ; ",
  "15051": "for ( ProcessApplicationDeploymentInfo deploymentInfo : appInfo ",
  "15052": ". getDeploymentInfo ( ) ) { ",
  "15053": "long count = processEngineService ",
  "15054": ". getProcessEngine ( deploymentInfo . getProcessEngineName ( ) ) ",
  "15055": ". getRepositoryService ( ) . createProcessDefinitionQuery ( ) ",
  "15056": ". deploymentId ( deploymentInfo . getDeploymentId ( ) ) ",
  "15057": ". processDefinitionId ( processDefinitionId ) . count ( ) ; ",
  "15058": "if ( count > 0 ) { ",
  "15059": "return appInfo ; ",
  "15060": "} @ PostConstruct ",
  "15061": "public void initializeDiscountRules ( ) { ",
  "15062": "List < DiscountRuleEntry > rules = rulesDAO . findAllDiscountRuleEntries ( ) ; ",
  "15063": "if ( ( rules == null ) || ( rules . size ( ) == 0 ) ) { ",
  "15064": "public void startFirstProcess ( ProcessEngine processEngine ) { ",
  "15065": "processEngine = BpmPlatform . getProcessEngineService ( ) . getProcessEngine ( \"anders\" ) ; ",
  "15066": "createUsers ( processEngine ) ; ",
  "15067": "startProcessInstances ( processEngine , \"invoice\" , 1 ) ; ",
  "15068": "startProcessInstances ( processEngine , \"invoice\" , null ) ; ",
  "15069": "for ( int i = 0 ; i < 1000 ; i ++ ) { ",
  "15070": "@ Bean ",
  "15071": "public UserDetailsService userDetailsService ( ) { ",
  "15072": "InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager ( ) ; ",
  "15073": "manager . createUser ( User . withDefaultPasswordEncoder ( ) . username ( \"demo\" ) . password ( \"demo\" ) . roles ( \"ACTUATOR\" , \"camunda-admin\" ) . build ( ) ) ; ",
  "15074": "manager . createUser ( User . withDefaultPasswordEncoder ( ) . username ( \"john\" ) . password ( \"john\" ) . roles ( \"camunda-user\" ) . build ( ) ) ; ",
  "15075": "public static final < T extends Serializable > T castValue ( final Object value ) { ",
  "15076": "return value != null ? ( T ) value : null ; ",
  "15077": "public void init ( ) throws Exception { ",
  "15078": "log . info ( \"=======================\" ) ; ",
  "15079": "CamundaBpmComponent component = new CamundaBpmComponent ( processEngine ) ; ",
  "15080": "component . setCamelContext ( cdiCamelContext ) ; ",
  "15081": "cdiCamelContext . addComponent ( \"camunda-bpm\" , component ) ; ",
  "15082": "cdiCamelContext . addComponent ( \"jms\" , cdiCamelContext . getComponent ( \"seda\" , SedaComponent . class ) ) ; ",
  "15083": "cdiCamelContext . addRoutes ( openAccountRoute ) ; ",
  "15084": "cdiCamelContext . start ( ) ; ",
  "15085": "} public static DmnDecisionTableResult evaluate ( String decisionKey , VariableContext variables ) { ",
  "15086": "final DmnEngine dmnEngine = Context . getProcessEngineConfiguration ( ) . getDmnEngine ( ) ; ",
  "15087": "DeploymentCache deploymentCache = Context . getProcessEngineConfiguration ( ) . getDeploymentCache ( ) ; ",
  "15088": "DmnDecision decisionDefinition = ( DmnDecision ) deploymentCache . findDeployedLatestDecisionDefinitionByKey ( decisionKey ) ; ",
  "15089": "return dmnEngine . evaluateDecisionTable ( decisionDefinition , variables ) ; ",
  "15090": "} protected CriteriaQuery < T > createQuery ( CriteriaBuilder cb ) { ",
  "15091": "CriteriaQuery < T > query = cb . createQuery ( getEntityType ( ) ) ; ",
  "15092": "Root < T > e = query . from ( getEntityType ( ) ) ; ",
  "15093": "query . select ( e ) ; ",
  "15094": "if ( sortColumn != null ) { ",
  "15095": "Path < Object > sortField = e . get ( sortColumn ) ; ",
  "15096": "if ( sortAsc ) { ",
  "15097": "query . orderBy ( cb . asc ( sortField ) ) ; ",
  "15098": "query . orderBy ( cb . desc ( sortField ) ) ; ",
  "15099": "return query ; ",
  "15100": "} @ Produces ",
  "15101": "@ Named ( \"orderProcesses\" ) ",
  "15102": "public List < OrderProcessDTO > getOrders ( ) { ",
  "15103": "ProcessEngineImpl processEngine = ( ProcessEngineImpl ) ProcessEngines . getDefaultProcessEngine ( ) ; ",
  "15104": "ProcessEngineConfigurationImpl processEngineConfiguration = processEngine . getProcessEngineConfiguration ( ) ; ",
  "15105": "MyBatisQueryCommandExecutor commandExecutor = new MyBatisQueryCommandExecutor ( processEngineConfiguration , \"customMappings.xml\" ) ; ",
  "15106": "return commandExecutor . executeQueryCommand ( new Command < List < OrderProcessDTO > > ( ) { ",
  "15107": "public List < OrderProcessDTO > execute ( CommandContext commandContext ) { ",
  "15108": "return ( List < OrderProcessDTO > ) commandContext . getDbSqlSession ( ) . selectList ( \"selectOrdersWithProcessInformation\" , null ) ; ",
  "15109": "} public static void checkIsSet ( final DelegateExecution execution , final String variableName ) { ",
  "15110": "checkArgument ( variableName != null , VARIABLE_NAME_MUST_BE_NOT_NULL ) ; ",
  "15111": "final Object variableLocal = execution . getVariableLocal ( variableName ) ; ",
  "15112": "final Object variable = execution . getVariable ( variableName ) ; ",
  "15113": "checkState ( variableLocal != null || variable != null , ",
  "15114": "} public static void checkIsSetGlobal ( final DelegateExecution execution , final String variableName ) { ",
  "15115": "public void execute ( ActivityExecution execution ) throws Exception { ",
  "15116": "String processDefinitionKey = this . processDefinitionKey ; ",
  "15117": "String binding = this . binding ; ",
  "15118": "Integer version = this . version ; ",
  "15119": "if ( copy_processDefinitionExpression != null ) { ",
  "15120": "processDefinitionKey = ( String ) copy_processDefinitionExpression . getValue ( execution ) ; ",
  "15121": "ProcessDefinitionEntity processDefinition = null ; ",
  "15122": "if ( binding == null || CalledElementBinding . LATEST . getValue ( ) . equals ( binding ) ) { ",
  "15123": "processDefinition = Context . getProcessEngineConfiguration ( ) . getDeploymentCache ( ) . findDeployedLatestProcessDefinitionByKey ( processDefinitionKey ) ; ",
  "15124": "} else if ( binding != null && CalledElementBinding . DEPLOYMENT . getValue ( ) . equals ( binding ) ) { ",
  "15125": "processDefinition = Context ",
  "15126": ". getProcessEngineConfiguration ( ) ",
  "15127": ". getDeploymentCache ( ) ",
  "15128": ". findDeployedProcessDefinitionByDeploymentAndKey ( Context . getExecutionContext ( ) . getExecution ( ) . getProcessDefinition ( ) . getDeploymentId ( ) , ",
  "15129": "processDefinitionKey ) ; ",
  "15130": "} else if ( binding != null && CalledElementBinding . VERSION . getValue ( ) . equals ( binding ) && version != null ) { ",
  "15131": "processDefinition = Context . getProcessEngineConfiguration ( ) . getDeploymentCache ( ) ",
  "15132": ". findDeployedProcessDefinitionByKeyAndVersion ( processDefinitionKey , version ) ; ",
  "15133": "String businessKey = null ; ",
  "15134": "Map < String , Object > callActivityVariables = new HashMap < String , Object > ( ) ; ",
  "15135": "for ( DataAssociation dataInputAssociation : copy_dataInputAssociations ) { ",
  "15136": "if ( dataInputAssociation . getBusinessKeyExpression ( ) != null ) { ",
  "15137": "businessKey = ( String ) dataInputAssociation . getBusinessKeyExpression ( ) . getValue ( execution ) ; ",
  "15138": "} else if ( dataInputAssociation . getVariables ( ) != null ) { ",
  "15139": "Map < String , Object > variables = execution . getVariables ( ) ; ",
  "15140": "if ( variables != null && ! variables . isEmpty ( ) ) { ",
  "15141": "Set < String > variableKeys = variables . keySet ( ) ; ",
  "15142": "for ( String variableKey : variableKeys ) { ",
  "15143": "callActivityVariables . put ( variableKey , variables . get ( variableKey ) ) ; ",
  "15144": "} else if ( dataInputAssociation . getSourceExpression ( ) != null ) { ",
  "15145": "value = dataInputAssociation . getSourceExpression ( ) . getValue ( execution ) ; ",
  "15146": "value = execution . getVariable ( dataInputAssociation . getSource ( ) ) ; ",
  "15147": "callActivityVariables . put ( dataInputAssociation . getTarget ( ) , value ) ; ",
  "15148": "String migrationScenario = null ; ",
  "15149": "migrationScenario = ( String ) migrationScenarioExpression . getValue ( execution ) ; ",
  "15150": "catch ( ProcessEngineException ex ) { ",
  "15151": "if ( migrationScenario == null ) { ",
  "15152": "PvmProcessInstance subProcessInstance = execution . createSubProcessInstance ( processDefinition , businessKey ) ; ",
  "15153": "subProcessInstance . start ( callActivityVariables ) ; ",
  "15154": "ActivityImpl startActivity = processDefinition . findActivity ( migrationScenario ) ; ",
  "15155": "ExecutionEntity subProcessInstance = ( ExecutionEntity ) processDefinition . createProcessInstance ( businessKey , startActivity ) ; ",
  "15156": "subProcessInstance . setSuperExecution ( ( ExecutionEntity ) execution ) ; ",
  "15157": "( ( ExecutionEntity ) execution ) . setSubProcessInstance ( subProcessInstance ) ; ",
  "15158": "if ( subProcessInstance . getExecutions ( ) . size ( ) == 1 ) { ",
  "15159": "healExecution ( subProcessInstance , subProcessInstance . getExecutions ( ) . get ( 0 ) , startActivity ) ; ",
  "15160": "else if ( subProcessInstance . getExecutions ( ) . size ( ) > 1 ) { ",
  "15161": "} @ Start ( order = 9 ) ",
  "15162": "Boolean runMigrations = ninjaProperties . getBoolean ( NinjaConstant . NINJA_MIGRATION_RUN ) ; ",
  "15163": "if ( runMigrations != null && runMigrations ) { ",
  "15164": "migrationEngineProvider . get ( ) . migrate ( ) ; ",
  "15165": "} public static List < String > tokenize ( String arguments , boolean stringify ) { ",
  "15166": "LinkedList < String > argList = new LinkedList < > ( ) ; ",
  "15167": "StringBuilder currArg = new StringBuilder ( ) ; ",
  "15168": "int state = NO_TOKEN_STATE ; ",
  "15169": "int len = arguments . length ( ) ; ",
  "15170": "char c = arguments . charAt ( i ) ; ",
  "15171": "currArg . append ( c ) ; ",
  "15172": "case SINGLE_QUOTE_STATE : ",
  "15173": "state = NORMAL_TOKEN_STATE ; ",
  "15174": "case DOUBLE_QUOTE_STATE : ",
  "15175": "char next = arguments . charAt ( i ) ; ",
  "15176": "if ( next == '\"' || next == '\\\\' ) { ",
  "15177": "currArg . append ( next ) ; ",
  "15178": "case NO_TOKEN_STATE : ",
  "15179": "case NORMAL_TOKEN_STATE : ",
  "15180": "state = SINGLE_QUOTE_STATE ; ",
  "15181": "state = DOUBLE_QUOTE_STATE ; ",
  "15182": "else if ( state == NORMAL_TOKEN_STATE ) { ",
  "15183": "argList . add ( currArg . toString ( ) ) ; ",
  "15184": "currArg = new StringBuilder ( ) ; ",
  "15185": "state = NO_TOKEN_STATE ; ",
  "15186": "currArg . append ( '\\\\' ) ; ",
  "15187": "else if ( state != NO_TOKEN_STATE ) { ",
  "15188": "if ( stringify ) { ",
  "15189": "for ( int i = 0 ; i < argList . size ( ) ; i ++ ) { ",
  "15190": "argList . set ( i , \"\\\"\" + _escapeQuotesAndBackslashes ( argList . get ( i ) ) + \"\\\"\" ) ; ",
  "15191": "return argList ; ",
  "15192": "} protected static String _escapeQuotesAndBackslashes ( String s ) { ",
  "15193": "final StringBuilder buf = new StringBuilder ( s ) ; ",
  "15194": "for ( int i = s . length ( ) - 1 ; i >= 0 ; i -- ) { ",
  "15195": "if ( ( c == '\\\\' ) || ( c == '\"' ) ) { ",
  "15196": "buf . insert ( i , '\\\\' ) ; ",
  "15197": "else if ( c == '\\n' ) { ",
  "15198": "buf . insert ( i , \"\\\\n\" ) ; ",
  "15199": "else if ( c == '\\t' ) { ",
  "15200": "buf . insert ( i , \"\\\\t\" ) ; ",
  "15201": "else if ( c == '\\r' ) { ",
  "15202": "buf . insert ( i , \"\\\\r\" ) ; ",
  "15203": "else if ( c == '\\b' ) { ",
  "15204": "buf . insert ( i , \"\\\\b\" ) ; ",
  "15205": "else if ( c == '\\f' ) { ",
  "15206": "buf . insert ( i , \"\\\\f\" ) ; ",
  "15207": "} public static String getCharsetOfContentType ( String rawContentType , String defaultEncoding ) { ",
  "15208": "if ( rawContentType . contains ( \"charset=\" ) ) { ",
  "15209": "String charset = rawContentType . split ( \"charset=\" ) [ 1 ] ; ",
  "15210": "return charset ; ",
  "15211": "return defaultEncoding ; ",
  "15212": "} static public Map < String , RouteParameter > parse ( String path ) { ",
  "15213": "Map < String , RouteParameter > params = new LinkedHashMap < > ( ) ; ",
  "15214": "Matcher matcher = Route . PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE . matcher ( path ) ; ",
  "15215": "RouteParameter param = new RouteParameter ( ",
  "15216": "matcher . start ( 0 ) , matcher . group ( 0 ) , matcher . group ( 1 ) , matcher . group ( 3 ) ) ; ",
  "15217": "params . put ( param . getName ( ) , param ) ; ",
  "15218": "} private void enforceCorrectEncodingOfRequest ( ) { ",
  "15219": "String charset = NinjaConstant . UTF_8 ; ",
  "15220": "String contentType = getHeader ( CONTENT_TYPE ) ; ",
  "15221": "charset = HttpHeaderUtils . getCharsetOfContentTypeOrUtf8 ( contentType ) ; ",
  "15222": "httpServletRequest . setCharacterEncoding ( charset ) ; ",
  "15223": "} private < T > Map < String , List < T > > toUnmodifiableMap ( Multimap < String , T > multimap ) { ",
  "15224": "Map < String , List < T > > map = new HashMap < > ( multimap . size ( ) ) ; ",
  "15225": "for ( Entry < String , Collection < T > > entry : multimap . asMap ( ) . entrySet ( ) ) { ",
  "15226": "Collection < T > value = entry . getValue ( ) ; ",
  "15227": "Collections . emptyList ( ) ; ",
  "15228": "} else if ( value instanceof List ) { ",
  "15229": "map . put ( entry . getKey ( ) , ( List < T > ) value ) ; ",
  "15230": "map . put ( entry . getKey ( ) , new ArrayList < > ( value ) ) ; ",
  "15231": "return Collections . unmodifiableMap ( map ) ; ",
  "15232": "public Builder with ( ControllerMethod controllerMethod ) { ",
  "15233": "LambdaRoute lambdaRoute = LambdaRoute . resolve ( controllerMethod ) ; ",
  "15234": "Method method = lambdaRoute . getFunctionalMethod ( ) ; ",
  "15235": "return builder ( method . getDeclaringClass ( ) , method . getName ( ) ) ; ",
  "15236": "public Injector getInjector ( ) { ",
  "15237": "Bootstrap ninjaBootstrapLocal = ninjaBootstrap ; ",
  "15238": "if ( ninjaBootstrapLocal == null ) { ",
  "15239": "ninjaBootstrapLocal = ninjaBootstrap ; ",
  "15240": "if ( ninjaProperties == null ) { ",
  "15241": "ninjaProperties ",
  "15242": "= new NinjaPropertiesImpl ( ",
  "15243": "NinjaModeHelper . determineModeFromSystemPropertiesOrProdIfNotSet ( ) ) ; ",
  "15244": "ninjaBootstrap ",
  "15245": "= createNinjaBootstrap ( ninjaProperties , contextPath ) ; ",
  "15246": "return ninjaBootstrapLocal . getInjector ( ) ; ",
  "15247": "} public Result serveStatic ( ) { ",
  "15248": "Object renderable = new Renderable ( ) { ",
  "15249": "public void render ( Context context , Result result ) { ",
  "15250": "String fileName = getFileNameFromPathOrReturnRequestPath ( context ) ; ",
  "15251": "URL url = getStaticFileFromAssetsDir ( fileName ) ; ",
  "15252": "streamOutUrlEntity ( url , context , result ) ; ",
  "15253": "return Results . ok ( ) . render ( renderable ) ; ",
  "15254": "} private URL getStaticFileFromAssetsDir ( String fileName ) { ",
  "15255": "if ( ninjaProperties . isDev ( ) ",
  "15256": "&& new File ( assetsDirInDevModeWithoutTrailingSlash ( ) ) . exists ( ) ) { ",
  "15257": "String finalNameWithoutLeadingSlash = assetsControllerHelper . normalizePathWithoutLeadingSlash ( fileName , false ) ; ",
  "15258": "File possibleFile = new File ( ",
  "15259": "assetsDirInDevModeWithoutTrailingSlash ( ) ",
  "15260": "+ File . separator ",
  "15261": "+ finalNameWithoutLeadingSlash ) ; ",
  "15262": "url = getUrlForFile ( possibleFile ) ; ",
  "15263": "String finalNameWithoutLeadingSlash = assetsControllerHelper . normalizePathWithoutLeadingSlash ( fileName , true ) ; ",
  "15264": "url = this . getClass ( ) . getClassLoader ( ) ",
  "15265": ". getResource ( ASSETS_DIR ",
  "15266": "+ \"/\" ",
  "15267": "} private URL getStaticFileFromMetaInfResourcesDir ( String fileName ) { ",
  "15268": "String finalNameWithoutLeadingSlash ",
  "15269": "= assetsControllerHelper . normalizePathWithoutLeadingSlash ( fileName , true ) ; ",
  "15270": "url = this . getClass ( ) . getClassLoader ( ) . getResource ( \"META-INF/resources/webjars/\" + finalNameWithoutLeadingSlash ) ; ",
  "15271": "} private String assetsDirInDevModeWithoutTrailingSlash ( ) { ",
  "15272": "String srcDir = System . ",
  "15273": "getProperty ( \"user.dir\" ) ",
  "15274": "+ \"src\" ",
  "15275": "+ \"main\" ",
  "15276": "+ \"java\" ; ",
  "15277": "return srcDir + File . separator + ASSETS_DIR ; ",
  "15278": "} public static boolean isThisASecureCallbackName ( String callback ) { ",
  "15279": "return ! Strings . isNullOrEmpty ( callback ) ",
  "15280": "&& ! callback . contains ( \"..\" ) ",
  "15281": "&& CALLBACK_SECURITY_VALIDATION_REGEXP . matcher ( callback ) . matches ( ) ; ",
  "15282": "} private PropertiesConfiguration loadLanguageConfiguration ( String fileOrUrl ) { ",
  "15283": "PropertiesConfiguration configuration = SwissKnife ",
  "15284": ". loadConfigurationInUtf8 ( fileOrUrl ) ; ",
  "15285": "if ( configuration != null && ninjaProperties . isDev ( ) ) { ",
  "15286": "FileChangedReloadingStrategy strategy = new FileChangedReloadingStrategy ( ) ; ",
  "15287": "configuration . setReloadingStrategy ( strategy ) ; ",
  "15288": "} private Map < String , Configuration > loadAllMessageFilesForRegisteredLanguages ( ) { ",
  "15289": "Map < String , Configuration > langToKeyAndValuesMappingMutable = Maps . newHashMap ( ) ; ",
  "15290": "Configuration defaultLanguage = loadLanguageConfiguration ( \"conf/messages.properties\" ) ; ",
  "15291": "if ( defaultLanguage == null ) { ",
  "15292": "langToKeyAndValuesMappingMutable . put ( \"\" , defaultLanguage ) ; ",
  "15293": "String [ ] applicationLangs = ninjaProperties ",
  "15294": ". getStringArray ( NinjaConstant . applicationLanguages ) ; ",
  "15295": "if ( applicationLangs == null ) { ",
  "15296": "return ImmutableMap . copyOf ( langToKeyAndValuesMappingMutable ) ; ",
  "15297": "for ( String lang : applicationLangs ) { ",
  "15298": "Configuration configuration = loadLanguageConfiguration ( String ",
  "15299": ". format ( \"conf/messages_%s.properties\" , lang ) ) ; ",
  "15300": "Configuration configurationLangOnly = null ; ",
  "15301": "if ( lang . contains ( \"-\" ) ) { ",
  "15302": "String langOnly = lang . split ( \"-\" ) [ 0 ] ; ",
  "15303": "configurationLangOnly = loadLanguageConfiguration ( String ",
  "15304": ". format ( \"conf/messages_%s.properties\" , langOnly ) ) ; ",
  "15305": "if ( configuration == null ) { ",
  "15306": "logger . info ( ",
  "15307": "lang ) ; ",
  "15308": "CompositeConfiguration compositeConfiguration = new CompositeConfiguration ( ) ; ",
  "15309": "compositeConfiguration . addConfiguration ( configuration ) ; ",
  "15310": "if ( configurationLangOnly != null ) { ",
  "15311": "compositeConfiguration ",
  "15312": ". addConfiguration ( configurationLangOnly ) ; ",
  "15313": "compositeConfiguration . addConfiguration ( defaultLanguage ) ; ",
  "15314": "langToKeyAndValuesMappingMutable . put ( lang , ",
  "15315": "( Configuration ) compositeConfiguration ) ; ",
  "15316": "} private Configuration getLanguageConfigurationForLocale ( Optional < String > language ) { ",
  "15317": "if ( ! language . isPresent ( ) ) { ",
  "15318": "return langToKeyAndValuesMapping . get ( \"\" ) ; ",
  "15319": "String [ ] languages = language . get ( ) . split ( \",\" ) ; ",
  "15320": "for ( String l : languages ) { ",
  "15321": "l = l . trim ( ) ; ",
  "15322": "if ( l . contains ( \";\" ) ) { ",
  "15323": "l = l . split ( \";\" ) [ 0 ] ; ",
  "15324": "Configuration configuration = langToKeyAndValuesMapping . get ( l ) ; ",
  "15325": "if ( l . contains ( \"-\" ) ) { ",
  "15326": "String [ ] array = l . split ( \"-\" ) ; ",
  "15327": "String languageWithoutCountry = array [ 0 ] ; ",
  "15328": "if ( array . length > 1 ) { ",
  "15329": "String country = array [ 1 ] ; ",
  "15330": "String languageWithUpperCaseCountry = languageWithoutCountry + \"-\" + country . toUpperCase ( ) ; ",
  "15331": "configuration = langToKeyAndValuesMapping . get ( languageWithUpperCaseCountry ) ; ",
  "15332": "configuration = langToKeyAndValuesMapping ",
  "15333": ". get ( languageWithoutCountry ) ; ",
  "15334": "} protected static URL getUrlForStringFromClasspathAsFileOrUrl ( String logbackConfigurationFile ) { ",
  "15335": "url = Resources . getResource ( logbackConfigurationFile ) ; ",
  "15336": "File file = new File ( logbackConfigurationFile ) ; ",
  "15337": "url = new File ( logbackConfigurationFile ) . toURI ( ) . toURL ( ) ; ",
  "15338": "} catch ( MalformedURLException ex ) { ",
  "15339": "url = new URL ( logbackConfigurationFile ) ; ",
  "15340": "} private Cookie generateNinjaLanguageCookie ( ) { ",
  "15341": "Cookie cookie = Cookie . builder ( applicationCookiePrefix ",
  "15342": "+ ninja . utils . NinjaConstant . LANG_COOKIE_SUFFIX , \"\" ) ",
  "15343": ". setMaxAge ( TEN_YEARS ) . build ( ) ; ",
  "15344": "return cookie ; ",
  "15345": "} protected static String generateSecret ( Random random ) { ",
  "15346": "String charsetForSecret = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\" ; ",
  "15347": "StringBuilder stringBuilder = new StringBuilder ( 64 ) ; ",
  "15348": "for ( int i = 0 ; i < 64 ; i ++ ) { ",
  "15349": "int charToPoPickFromCharset = random . nextInt ( charsetForSecret . length ( ) ) ; ",
  "15350": "stringBuilder . append ( charsetForSecret . charAt ( charToPoPickFromCharset ) ) ; ",
  "15351": "} protected RunClassInSeparateJvmMachine buildRunClassInSeparateJvmMachine ( ",
  "15352": "String name , ",
  "15353": "String classNameWithMainToRun , ",
  "15354": "List < String > classpath , ",
  "15355": "List < String > jvmArguments , ",
  "15356": "File mavenBaseDir ) { ",
  "15357": "return new RunClassInSeparateJvmMachine ( ",
  "15358": "classNameWithMainToRun , ",
  "15359": "classpath , ",
  "15360": "buildJvmArguments ( ) , ",
  "15361": "mavenBaseDir ",
  "15362": "} protected List < Artifact > getAllArtifactsComingFromNinjaStandalone ( ",
  "15363": "List < Artifact > artifacts ) { ",
  "15364": "List < Artifact > resultingArtifacts = new ArrayList < > ( ) ; ",
  "15365": "for ( String dependencyTrail : artifact . getDependencyTrail ( ) ) { ",
  "15366": "if ( dependencyTrail . contains ( NinjaMavenPluginConstants . NINJA_STANDALONE_ARTIFACT_ID ) ) { ",
  "15367": "resultingArtifacts . add ( artifact ) ; ",
  "15368": "return resultingArtifacts ; ",
  "15369": "} static public Class < ? extends Standalone > resolveStandaloneClass ( ) { ",
  "15370": "return resolveStandaloneClass ( ",
  "15371": "System . getProperty ( Standalone . KEY_NINJA_STANDALONE_CLASS ) , ",
  "15372": "ForwardingServiceLoader . loadWithSystemServiceLoader ( Standalone . class ) , ",
  "15373": "Standalone . DEFAULT_STANDALONE_CLASS ",
  "15374": "} static Class < ? extends Standalone > resolveStandaloneClass ( String standaloneClassNameSystemProperty , ",
  "15375": "ForwardingServiceLoader < Standalone > standaloneServiceLoader , ",
  "15376": "String standaloneClassNameDefaultValue ) { ",
  "15377": "Class < ? extends Standalone > resolvedStandaloneClass = null ; ",
  "15378": "if ( standaloneClassNameSystemProperty != null ) { ",
  "15379": "resolvedStandaloneClass ",
  "15380": "= ( Class < Standalone > ) Class . forName ( standaloneClassNameSystemProperty ) ; ",
  "15381": "if ( resolvedStandaloneClass == null ) { ",
  "15382": "Iterator < Standalone > standaloneIterator = standaloneServiceLoader . iterator ( ) ; ",
  "15383": "if ( standaloneIterator . hasNext ( ) ) { ",
  "15384": "resolvedStandaloneClass = standaloneIterator . next ( ) . getClass ( ) ; ",
  "15385": "standaloneServiceLoader . reload ( ) ; ",
  "15386": "= ( Class < Standalone > ) Class . forName ( standaloneClassNameDefaultValue ) ; ",
  "15387": "return resolvedStandaloneClass ; ",
  "15388": "} public String encrypt ( String data ) { ",
  "15389": "if ( ! secretKeySpec . isPresent ( ) ) { ",
  "15390": "Cipher cipher = Cipher . getInstance ( ALGORITHM ) ; ",
  "15391": "cipher . init ( Cipher . ENCRYPT_MODE , secretKeySpec . get ( ) ) ; ",
  "15392": "byte [ ] encrypted = cipher . doFinal ( data . getBytes ( StandardCharsets . UTF_8 ) ) ; ",
  "15393": "return Base64 . encodeBase64URLSafeString ( encrypted ) ; ",
  "15394": "} catch ( InvalidKeyException ex ) { ",
  "15395": "logger . error ( getHelperLogMessage ( ) , ex ) ; ",
  "15396": "} catch ( GeneralSecurityException ex ) { ",
  "15397": "} public String decrypt ( String data ) { ",
  "15398": "byte [ ] decoded = Base64 . decodeBase64 ( data ) ; ",
  "15399": "cipher . init ( Cipher . DECRYPT_MODE , secretKeySpec . get ( ) ) ; ",
  "15400": "byte [ ] decrypted = cipher . doFinal ( decoded ) ; ",
  "15401": "return new String ( decrypted , StandardCharsets . UTF_8 ) ; ",
  "15402": "public Result onException ( Context context , Exception exception ) { ",
  "15403": "return onException ( context , exception , null ) ; ",
  "15404": "public Result getInternalServerErrorResult ( Context context , Exception exception ) { ",
  "15405": "return getInternalServerErrorResult ( context , exception , null ) ; ",
  "15406": "} private final String readNinjaVersion ( ) { ",
  "15407": "String LOCATION_OF_NINJA_BUILTIN_PROPERTIES = \"ninja/ninja-builtin.properties\" ; ",
  "15408": "String NINJA_VERSION_PROPERTY_KEY = \"ninja.version\" ; ",
  "15409": "String ninjaVersion ; ",
  "15410": "try ( InputStream stream = Thread . currentThread ( ) . getContextClassLoader ( ) . getResourceAsStream ( LOCATION_OF_NINJA_BUILTIN_PROPERTIES ) ) { ",
  "15411": "Properties prop = new Properties ( ) ; ",
  "15412": "prop . load ( stream ) ; ",
  "15413": "ninjaVersion = prop . getProperty ( NINJA_VERSION_PROPERTY_KEY ) ; ",
  "15414": "return ninjaVersion ; ",
  "15415": "} private void register ( Path path ) throws IOException { ",
  "15416": "WatchKey watchKey = path . register ( ",
  "15417": "watchService , ",
  "15418": "new WatchEvent . Kind [ ] { ",
  "15419": "StandardWatchEventKinds . ENTRY_CREATE , ",
  "15420": "StandardWatchEventKinds . ENTRY_MODIFY , ",
  "15421": "StandardWatchEventKinds . ENTRY_DELETE ",
  "15422": "SensitivityWatchEventModifier . HIGH ) ; ",
  "15423": "mapOfWatchKeysToPaths . put ( watchKey , path ) ; ",
  "15424": "} public boolean matches ( String httpMethod , String uri ) { ",
  "15425": "if ( this . httpMethod . equalsIgnoreCase ( httpMethod ) ) { ",
  "15426": "Matcher matcher = regex . matcher ( uri ) ; ",
  "15427": "return matcher . matches ( ) ; ",
  "15428": "} public Map < String , String > getPathParametersEncoded ( String uri ) { ",
  "15429": "Map < String , String > map = Maps . newHashMap ( ) ; ",
  "15430": "Matcher m = regex . matcher ( uri ) ; ",
  "15431": "Iterator < String > it = this . parameters . keySet ( ) . iterator ( ) ; ",
  "15432": "for ( int i = 1 ; i < m . groupCount ( ) + 1 ; i ++ ) { ",
  "15433": "String parameterName = it . next ( ) ; ",
  "15434": "map . put ( parameterName , m . group ( i ) ) ; ",
  "15435": "} protected static String convertRawUriToRegex ( String rawUri ) { ",
  "15436": "Matcher groupMatcher = Pattern . compile ( \"\\\\(([^?].*)\\\\)\" ) . matcher ( rawUri ) ; ",
  "15437": "String converted = groupMatcher . replaceAll ( \"\\\\(?:$1\\\\)\" ) ; ",
  "15438": "Matcher matcher = PATTERN_FOR_VARIABLE_PARTS_OF_ROUTE . matcher ( converted ) ; ",
  "15439": "StringBuffer stringBuffer = new StringBuffer ( ) ; ",
  "15440": "String namedVariablePartOfRoute = matcher . group ( 3 ) ; ",
  "15441": "String namedVariablePartOfORouteReplacedWithRegex ; ",
  "15442": "if ( namedVariablePartOfRoute != null ) { ",
  "15443": "namedVariablePartOfORouteReplacedWithRegex ",
  "15444": "= \"(\" + Matcher . quoteReplacement ( namedVariablePartOfRoute ) + \")\" ; ",
  "15445": "= VARIABLE_ROUTES_DEFAULT_REGEX ; ",
  "15446": "matcher . appendReplacement ( stringBuffer , namedVariablePartOfORouteReplacedWithRegex ) ; ",
  "15447": "matcher . appendTail ( stringBuffer ) ; ",
  "15448": "return stringBuffer . toString ( ) ; ",
  "15449": "} public static Optional < NinjaMode > determineModeFromSystemProperties ( ) { ",
  "15450": "NinjaMode ninjaMode = null ; ",
  "15451": "String modeFromGetSystemProperty = System ",
  "15452": ". getProperty ( NinjaConstant . MODE_KEY_NAME ) ; ",
  "15453": "if ( modeFromGetSystemProperty != null ) { ",
  "15454": "if ( modeFromGetSystemProperty . equals ( NinjaConstant . MODE_TEST ) ) { ",
  "15455": "ninjaMode = NinjaMode . test ; ",
  "15456": "} else if ( modeFromGetSystemProperty . equals ( NinjaConstant . MODE_DEV ) ) { ",
  "15457": "ninjaMode = NinjaMode . dev ; ",
  "15458": "} else if ( modeFromGetSystemProperty . equals ( NinjaConstant . MODE_PROD ) ) { ",
  "15459": "ninjaMode = NinjaMode . prod ; ",
  "15460": "return Optional . ofNullable ( ninjaMode ) ; ",
  "15461": "} public static NinjaMode determineModeFromSystemPropertiesOrProdIfNotSet ( ) { ",
  "15462": "Optional < NinjaMode > ninjaModeOptional = determineModeFromSystemProperties ( ) ; ",
  "15463": "NinjaMode ninjaMode ; ",
  "15464": "if ( ! ninjaModeOptional . isPresent ( ) ) { ",
  "15465": "ninjaMode = ninjaModeOptional . get ( ) ; ",
  "15466": "return ninjaMode ; ",
  "15467": "} public String getMimeType ( String filename , String defaultMimeType ) { ",
  "15468": "Matcher matcher = extPattern . matcher ( filename . toLowerCase ( ) ) ; ",
  "15469": "String ext = \"\" ; ",
  "15470": "ext = matcher . group ( 1 ) ; ",
  "15471": "if ( ext . length ( ) > 0 ) { ",
  "15472": "String mimeType = mimetypes . getProperty ( ext ) ; ",
  "15473": "if ( mimeType == null ) { ",
  "15474": "return defaultMimeType ; ",
  "15475": "return mimeType ; ",
  "15476": "} public boolean isValidMimeType ( String mimeType ) { ",
  "15477": "} else if ( mimeType . indexOf ( \";\" ) != - 1 ) { ",
  "15478": "return mimetypes . contains ( mimeType . split ( \";\" ) [ 0 ] ) ; ",
  "15479": "return mimetypes . contains ( mimeType ) ; ",
  "15480": "} static public Set < String > parseProtocolRequestHeader ( String value ) { ",
  "15481": "Set < String > subprotocols = new LinkedHashSet < > ( ) ; ",
  "15482": "if ( ! StringUtils . isEmpty ( value ) ) { ",
  "15483": "String [ ] values = value . split ( \",\" ) ; ",
  "15484": "for ( String v : values ) { ",
  "15485": "subprotocols . add ( v . trim ( ) ) ; ",
  "15486": "return subprotocols ; ",
  "15487": "} private Method verifyControllerMethod ( Class < ? > controllerClass , ",
  "15488": "String controllerMethod ) { ",
  "15489": "Method methodFromQueryingClass = null ; ",
  "15490": "for ( Method method : controllerClass . getMethods ( ) ) { ",
  "15491": "if ( method . getName ( ) . equals ( controllerMethod ) ) { ",
  "15492": "if ( methodFromQueryingClass == null ) { ",
  "15493": "methodFromQueryingClass = method ; ",
  "15494": "if ( Result . class . isAssignableFrom ( methodFromQueryingClass . getReturnType ( ) ) ) { ",
  "15495": "return methodFromQueryingClass ; ",
  "15496": "log . error ( ",
  "15497": "} public Route buildRoute ( Injector injector ) { ",
  "15498": "if ( functionalMethod == null ) { ",
  "15499": "LinkedList < Class < ? extends Filter > > allFilters = new LinkedList < > ( ) ; ",
  "15500": "allFilters . addAll ( calculateGlobalFilters ( this . globalFiltersOptional , injector ) ) ; ",
  "15501": "allFilters . addAll ( this . localFilters ) ; ",
  "15502": "allFilters . addAll ( calculateFiltersForClass ( functionalMethod . getDeclaringClass ( ) ) ) ; ",
  "15503": "FilterWith filterWith = functionalMethod . getAnnotation ( FilterWith . class ) ; ",
  "15504": "if ( filterWith != null ) { ",
  "15505": "allFilters . addAll ( Arrays . asList ( filterWith . value ( ) ) ) ; ",
  "15506": "FilterChain filterChain = buildFilterChain ( injector , allFilters ) ; ",
  "15507": "return new Route ( httpMethod , uri , functionalMethod , filterChain ) ; ",
  "15508": "} public static SerializedLambda getSerializedLambda ( Object lambda ) { ",
  "15509": "Objects . requireNonNull ( lambda ) ; ",
  "15510": "if ( ! ( lambda instanceof java . io . Serializable ) ) { ",
  "15511": "for ( Class < ? > clazz = lambda . getClass ( ) ; clazz != null ; clazz = clazz . getSuperclass ( ) ) { ",
  "15512": "Method replaceMethod = clazz . getDeclaredMethod ( \"writeReplace\" ) ; ",
  "15513": "replaceMethod . setAccessible ( true ) ; ",
  "15514": "Object serializedForm = replaceMethod . invoke ( lambda ) ; ",
  "15515": "if ( serializedForm instanceof SerializedLambda ) { ",
  "15516": "return ( SerializedLambda ) serializedForm ; ",
  "15517": "} catch ( NoSuchMethodError e ) { ",
  "15518": "} catch ( SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e ) { ",
  "15519": "final public void run ( ) { ",
  "15520": "Thread . currentThread ( ) . setName ( this . name ) ; ",
  "15521": "this . configure ( ) ; ",
  "15522": "this . start ( ) ; ",
  "15523": "shutdown ( ) ; ",
  "15524": "join ( ) ; ",
  "15525": "} protected String createServerUrl ( String scheme , String host , Integer port ) { ",
  "15526": "sb . append ( scheme ) ; ",
  "15527": "sb . append ( \"://\" ) ; ",
  "15528": "sb . append ( ( host != null ? host : \"localhost\" ) ) ; ",
  "15529": "if ( ( \"http\" . equals ( scheme ) && port != 80 ) || ( \"https\" . equals ( scheme ) && port != 443 ) ) { ",
  "15530": "sb . append ( port ) ; ",
  "15531": "public void init ( Router router ) { ",
  "15532": "this . router = router ; ",
  "15533": "configureReflections ( ) ; ",
  "15534": "controllers = Maps . newHashMap ( ) ; ",
  "15535": "methods = Sets . newHashSet ( ) ; ",
  "15536": "processFoundMethods ( ) ; ",
  "15537": "sortMethods ( ) ; ",
  "15538": "registerMethods ( ) ; ",
  "15539": "} private void registerMethods ( ) { ",
  "15540": "final Class < ? > controllerClass = method . getDeclaringClass ( ) ; ",
  "15541": "final Path methodPath = method . getAnnotation ( Path . class ) ; ",
  "15542": "final Set < String > controllerPaths = controllers ",
  "15543": ". get ( controllerClass ) ; ",
  "15544": "String [ ] paths = { \"/\" } ; ",
  "15545": "if ( methodPath != null ) { ",
  "15546": "paths = methodPath . value ( ) ; ",
  "15547": "for ( String controllerPath : controllerPaths ) { ",
  "15548": "for ( String methodPathSpec : paths ) { ",
  "15549": "final String httpMethod = getHttpMethod ( method ) ; ",
  "15550": "final String fullPath = controllerPath + methodPathSpec ; ",
  "15551": "final String methodName = method . getName ( ) ; ",
  "15552": "router . METHOD ( httpMethod ) . route ( fullPath ) ",
  "15553": ". with ( controllerClass , methodName ) ; ",
  "15554": "} private void processFoundMethods ( ) { ",
  "15555": "for ( Method method : findControllerMethods ( ) ) { ",
  "15556": "if ( allowMethod ( method ) ) { ",
  "15557": "methods . add ( method ) ; ",
  "15558": "if ( ! controllers . containsKey ( controllerClass ) ) { ",
  "15559": "Set < String > paths = collectPaths ( controllerClass ) ; ",
  "15560": "controllers . put ( controllerClass , paths ) ; ",
  "15561": "} private void sortMethods ( ) { ",
  "15562": "List < Method > methodList = new ArrayList < > ( methods ) ; ",
  "15563": "Collections . sort ( methodList , new Comparator < Method > ( ) { ",
  "15564": "public int compare ( Method m1 , Method m2 ) { ",
  "15565": "int o1 = Integer . MAX_VALUE ; ",
  "15566": "if ( m1 . isAnnotationPresent ( Order . class ) ) { ",
  "15567": "Order order = m1 . getAnnotation ( Order . class ) ; ",
  "15568": "o1 = order . value ( ) ; ",
  "15569": "int o2 = Integer . MAX_VALUE ; ",
  "15570": "if ( m2 . isAnnotationPresent ( Order . class ) ) { ",
  "15571": "Order order = m2 . getAnnotation ( Order . class ) ; ",
  "15572": "o2 = order . value ( ) ; ",
  "15573": "if ( o1 == o2 ) { ",
  "15574": "String s1 = m1 . getDeclaringClass ( ) . getName ( ) + \".\" ",
  "15575": "+ m1 . getName ( ) ; ",
  "15576": "String s2 = m2 . getDeclaringClass ( ) . getName ( ) + \".\" ",
  "15577": "+ m2 . getName ( ) ; ",
  "15578": "return s1 . compareTo ( s2 ) ; ",
  "15579": "if ( o1 < o2 ) { ",
  "15580": "methods = new LinkedHashSet < > ( methodList ) ; ",
  "15581": "private Set < Method > findControllerMethods ( ) { ",
  "15582": "Set < Method > methods = Sets . newLinkedHashSet ( ) ; ",
  "15583": "methods . addAll ( reflections . getMethodsAnnotatedWith ( Path . class ) ) ; ",
  "15584": "boolean enableCustomHttpMethods = ninjaProperties . getBooleanWithDefault ( NINJA_CUSTOM_HTTP_METHODS , false ) ; ",
  "15585": "if ( enableCustomHttpMethods ) { ",
  "15586": "Reflections annotationReflections = new Reflections ( \"\" , new TypeAnnotationsScanner ( ) , new SubTypesScanner ( ) ) ; ",
  "15587": "for ( Class < ? > httpMethod : annotationReflections . getTypesAnnotatedWith ( HttpMethod . class ) ) { ",
  "15588": "if ( httpMethod . isAnnotation ( ) ) { ",
  "15589": "methods . addAll ( reflections . getMethodsAnnotatedWith ( ( Class < ? extends Annotation > ) httpMethod ) ) ; ",
  "15590": "Reflections annotationReflections = new Reflections ( \"ninja.jaxy\" , new TypeAnnotationsScanner ( ) , new SubTypesScanner ( ) ) ; ",
  "15591": "} private void configureReflections ( ) { ",
  "15592": "Optional < String > basePackage = Optional . ofNullable ( ninjaProperties . get ( NinjaConstant . APPLICATION_MODULES_BASE_PACKAGE ) ) ; ",
  "15593": "if ( basePackage . isPresent ( ) ) { ",
  "15594": "reflections = new Reflections ( ",
  "15595": "basePackage . get ( ) + \".\" + NinjaConstant . CONTROLLERS_DIR , ",
  "15596": "new MethodAnnotationsScanner ( ) ) ; ",
  "15597": "NinjaConstant . CONTROLLERS_DIR , ",
  "15598": "} private boolean allowMethod ( Method method ) { ",
  "15599": "if ( method . isAnnotationPresent ( Requires . class ) ) { ",
  "15600": "String key = method . getAnnotation ( Requires . class ) . value ( ) ; ",
  "15601": "String value = ninjaProperties . get ( key ) ; ",
  "15602": "Set < NinjaMode > modes = Sets . newTreeSet ( ) ; ",
  "15603": "for ( Annotation annotation : method . getAnnotations ( ) ) { ",
  "15604": "Class < ? extends Annotation > annotationClass = annotation ",
  "15605": ". annotationType ( ) ; ",
  "15606": "if ( annotationClass . isAnnotationPresent ( RuntimeMode . class ) ) { ",
  "15607": "RuntimeMode mode = annotationClass ",
  "15608": ". getAnnotation ( RuntimeMode . class ) ; ",
  "15609": "modes . add ( mode . value ( ) ) ; ",
  "15610": "return modes . isEmpty ( ) || modes . contains ( runtimeMode ) ; ",
  "15611": "} private String getHttpMethod ( Method method ) { ",
  "15612": "if ( annotationClass . isAnnotationPresent ( HttpMethod . class ) ) { ",
  "15613": "HttpMethod httpMethod = annotationClass ",
  "15614": ". getAnnotation ( HttpMethod . class ) ; ",
  "15615": "return httpMethod . value ( ) ; ",
  "15616": "logger . info ( String ",
  "15617": "method . getClass ( ) . getName ( ) , method . getName ( ) ) ) ; ",
  "15618": "return HttpMethod . GET ; ",
  "15619": "} public static ControllerMethodInvoker build ( ",
  "15620": "Method functionalMethod , ",
  "15621": "Method implementationMethod , ",
  "15622": "Injector injector , ",
  "15623": "NinjaProperties ninjaProperties ) { ",
  "15624": "final Type [ ] genericParameterTypes = implementationMethod . getGenericParameterTypes ( ) ; ",
  "15625": "final MethodParameter [ ] methodParameters = MethodParameter . convertIntoMethodParameters ( genericParameterTypes ) ; ",
  "15626": "final Annotation [ ] [ ] paramAnnotations = implementationMethod ",
  "15627": ". getParameterAnnotations ( ) ; ",
  "15628": "ArgumentExtractor < ? > [ ] argumentExtractors = new ArgumentExtractor < ? > [ methodParameters . length ] ; ",
  "15629": "for ( int i = 0 ; i < methodParameters . length ; i ++ ) { ",
  "15630": "argumentExtractors [ i ] = getArgumentExtractor ( methodParameters [ i ] , paramAnnotations [ i ] , ",
  "15631": "injector ) ; ",
  "15632": "} catch ( RoutingException e ) { ",
  "15633": "int bodyAsFound = - 1 ; ",
  "15634": "for ( int i = 0 ; i < argumentExtractors . length ; i ++ ) { ",
  "15635": "if ( argumentExtractors [ i ] == null ) { ",
  "15636": "if ( bodyAsFound > - 1 ) { ",
  "15637": "+ implementationMethod . getDeclaringClass ( ) . getName ( ) + \".\" + implementationMethod . getName ( ) + \"()\\n\" ",
  "15638": "argumentExtractors [ i ] = new ArgumentExtractors . BodyAsExtractor ( methodParameters [ i ] . parameterClass ) ; ",
  "15639": "bodyAsFound = i ; ",
  "15640": "argumentExtractors [ i ] = ",
  "15641": "validateArgumentWithExtractor ( ",
  "15642": "methodParameters [ i ] , ",
  "15643": "paramAnnotations [ i ] , ",
  "15644": "injector , ",
  "15645": "argumentExtractors [ i ] ) ; ",
  "15646": "boolean useStrictArgumentExtractors = determineWhetherToUseStrictArgumentExtractorMode ( ninjaProperties ) ; ",
  "15647": "return new ControllerMethodInvoker ( functionalMethod , argumentExtractors , useStrictArgumentExtractors ) ; ",
  "15648": "} private < T > T invoke ( Context context , Map < String , String [ ] > parameters , Class < T > classOfT , String paramPrefix ) { ",
  "15649": "t = classOfT . newInstance ( ) ; ",
  "15650": "for ( String declaredField : getAllDeclaredFieldsAsStringSet ( classOfT ) ) { ",
  "15651": "Field field = classOfT . getDeclaredField ( declaredField ) ; ",
  "15652": "Class < ? > fieldType = field . getType ( ) ; ",
  "15653": "if ( parameters . containsKey ( paramPrefix + declaredField ) ) { ",
  "15654": "String [ ] values = parameters . get ( paramPrefix + declaredField ) ; ",
  "15655": "if ( Collection . class . isAssignableFrom ( fieldType ) || List . class . isAssignableFrom ( fieldType ) ) { ",
  "15656": "ListParamParser < ? > parser = ( ListParamParser < ? > ) paramParsers . getListParser ( getGenericType ( field ) ) ; ",
  "15657": "if ( parser == null ) { ",
  "15658": "field . set ( t , parser . parseParameter ( field . getName ( ) , values , context . getValidation ( ) ) ) ; ",
  "15659": "} else if ( fieldType . isArray ( ) ) { ",
  "15660": "ArrayParamParser < ? > parser = paramParsers . getArrayParser ( fieldType ) ; ",
  "15661": "ParamParser < ? > parser = ( ParamParser < ? > ) paramParsers . getParamParser ( fieldType ) ; ",
  "15662": "field . set ( t , parser . parseParameter ( field . getName ( ) , values [ 0 ] , context . getValidation ( ) ) ) ; ",
  "15663": "for ( String parameter : parameters . keySet ( ) ) { ",
  "15664": "if ( parameter . startsWith ( paramPrefix + declaredField + \".\" ) ) { ",
  "15665": "if ( isEmptyParameter ( parameters . get ( parameter ) ) ) { ",
  "15666": "field . set ( t , invoke ( context , parameters , fieldType , paramPrefix + declaredField + \".\" ) ) ; ",
  "15667": "} catch ( NoSuchFieldException ",
  "15668": "| SecurityException ",
  "15669": "| IllegalArgumentException ",
  "15670": "| IllegalAccessException e ) { ",
  "15671": "classOfT . getName ( ) , paramPrefix + declaredField , parameters . get ( paramPrefix + declaredField ) , e ) ; ",
  "15672": "} public static Result redirect ( String url ) { ",
  "15673": "Result result = status ( Result . SC_303_SEE_OTHER ) ; ",
  "15674": "result . addHeader ( Result . LOCATION , url ) ; ",
  "15675": "result . render ( Result . NO_HTTP_BODY ) ; ",
  "15676": "} public static Result redirectTemporary ( String url ) { ",
  "15677": "Result result = status ( Result . SC_307_TEMPORARY_REDIRECT ) ; ",
  "15678": "public MultiPartEmail createMultiPartEmailWithContent ( Mail mail ) throws EmailException { ",
  "15679": "MultiPartEmail multiPartEmail ; ",
  "15680": "if ( mail . getBodyHtml ( ) == null || mail . getBodyHtml ( ) . equals ( \"\" ) ) { ",
  "15681": "multiPartEmail = new MultiPartEmail ( ) ; ",
  "15682": "multiPartEmail . setMsg ( mail . getBodyText ( ) ) ; ",
  "15683": "} else if ( mail . getBodyText ( ) == null || mail . getBodyText ( ) . equals ( \"\" ) ) { ",
  "15684": "multiPartEmail = new HtmlEmail ( ) . setHtmlMsg ( mail . getBodyHtml ( ) ) ; ",
  "15685": "multiPartEmail = ",
  "15686": "new HtmlEmail ( ) . setHtmlMsg ( mail . getBodyHtml ( ) ) . setTextMsg ( mail . getBodyText ( ) ) ; ",
  "15687": "return multiPartEmail ; ",
  "15688": "} public static PropertiesConfiguration loadConfigurationInUtf8 ( String fileOrUrlOrClasspathUrl ) { ",
  "15689": "PropertiesConfiguration propertiesConfiguration = new PropertiesConfiguration ( ) ; ",
  "15690": "propertiesConfiguration . setEncoding ( NinjaConstant . UTF_8 ) ; ",
  "15691": "propertiesConfiguration . setDelimiterParsingDisabled ( true ) ; ",
  "15692": "propertiesConfiguration . setFileName ( fileOrUrlOrClasspathUrl ) ; ",
  "15693": "propertiesConfiguration . getLayout ( ) . setSingleLine ( NinjaConstant . applicationSecret , true ) ; ",
  "15694": "propertiesConfiguration . load ( fileOrUrlOrClasspathUrl ) ; ",
  "15695": "} catch ( ConfigurationException e ) { ",
  "15696": "return propertiesConfiguration ; ",
  "15697": "} public static String getRealClassNameLowerCamelCase ( Object object ) { ",
  "15698": "return CaseFormat . UPPER_CAMEL . to ( CaseFormat . LOWER_CAMEL , object . getClass ( ) . getSimpleName ( ) ) ; ",
  "15699": "} public static boolean doesClassExist ( String nameWithPackage , Object instanceToGetClassloaderFrom ) { ",
  "15700": "boolean exists = false ; ",
  "15701": "Class . forName ( nameWithPackage , false , instanceToGetClassloaderFrom . getClass ( ) . getClassLoader ( ) ) ; ",
  "15702": "exists = true ; ",
  "15703": "exists = false ; ",
  "15704": "return exists ; ",
  "15705": "} static public String getSourceCodeRelativePathForStackTraceElement ( StackTraceElement ste ) { ",
  "15706": "String packageName = ste . getClassName ( ) ; ",
  "15707": "int pos = packageName . lastIndexOf ( '.' ) ; ",
  "15708": "packageName = packageName . substring ( 0 , pos ) ; ",
  "15709": "packageName . replace ( \".\" , File . separator ) ",
  "15710": "+ ste . getFileName ( ) ; ",
  "15711": "ste . getFileName ( ) ; ",
  "15712": "} public void add ( String key , Object value , String expiration ) { ",
  "15713": "checkSerializable ( value ) ; ",
  "15714": "cache . add ( key , value , TimeUtil . parseDuration ( expiration ) ) ; ",
  "15715": "public < T > T get ( String key , Class < T > clazz ) { ",
  "15716": "return ( T ) cache . get ( key ) ; ",
  "15717": "} void checkSerializable ( Object value ) { ",
  "15718": "if ( value != null && ! ( value instanceof Serializable ) ) { ",
  "15719": "throw new CacheException ( ",
  "15720": "+ value . getClass ( ) . getName ( ) , ",
  "15721": "new NotSerializableException ( value . getClass ( ) . getName ( ) ) ) ; ",
  "15722": "} public Result render ( Object object ) { ",
  "15723": "if ( this . renderable == null ) { ",
  "15724": "this . renderable = object ; ",
  "15725": "assertObjectNoRenderableOrThrowException ( this . renderable ) ; ",
  "15726": "Map < String , Object > map ; ",
  "15727": "if ( this . renderable instanceof Map ) { ",
  "15728": "map = ( Map ) this . renderable ; ",
  "15729": "map = Maps . newHashMap ( ) ; ",
  "15730": "map . put ( SwissKnife . getRealClassNameLowerCamelCase ( this . renderable ) , this . renderable ) ; ",
  "15731": "this . renderable = map ; ",
  "15732": "String key = SwissKnife . getRealClassNameLowerCamelCase ( object ) ; ",
  "15733": "key ) ) ; ",
  "15734": "map . put ( SwissKnife . getRealClassNameLowerCamelCase ( object ) , object ) ; ",
  "15735": "} public Result render ( Entry < String , Object > entry ) { ",
  "15736": "Map < String , Object > map = Maps . newHashMap ( ) ; ",
  "15737": "map . put ( entry . getKey ( ) , entry . getValue ( ) ) ; ",
  "15738": "if ( map . containsKey ( entry . getKey ( ) ) ) { ",
  "15739": "entry . getKey ( ) ) ) ; ",
  "15740": "map . put ( ",
  "15741": "SwissKnife . getRealClassNameLowerCamelCase ( this . renderable ) , ",
  "15742": "this . renderable ) ; ",
  "15743": "} public Result render ( String key , Object value ) { ",
  "15744": "render ( new AbstractMap . SimpleEntry < String , Object > ( key , value ) ) ; ",
  "15745": "public Result renderRaw ( final String string ) { ",
  "15746": "Renderable renderable = new Renderable ( ) { ",
  "15747": "if ( result . getContentType ( ) == null ) { ",
  "15748": "result . contentType ( Result . TEXT_PLAIN ) ; ",
  "15749": "ResponseStreams resultJsonCustom = context ",
  "15750": ". finalizeHeaders ( result ) ; ",
  "15751": "try ( Writer writer = resultJsonCustom . getWriter ( ) ) { ",
  "15752": "writer . write ( string ) ; ",
  "15753": "} catch ( IOException ioException ) { ",
  "15754": "ioException ) ; ",
  "15755": "render ( renderable ) ; ",
  "15756": "} public Result renderRaw ( final byte [ ] bytes ) { ",
  "15757": "result . contentType ( Result . APPLICATION_OCTET_STREAM ) ; ",
  "15758": "ResponseStreams responseStreams = context ",
  "15759": "try ( OutputStream outputStream = responseStreams . getOutputStream ( ) ) { ",
  "15760": "throw new InternalServerErrorException ( ioException ) ; ",
  "15761": "} public Cookie getCookie ( String cookieName ) { ",
  "15762": "for ( Cookie cookie : getCookies ( ) ) { ",
  "15763": "if ( cookie . getName ( ) . equals ( cookieName ) ) { ",
  "15764": "} public Result redirect ( String url ) { ",
  "15765": "status ( Result . SC_303_SEE_OTHER ) ; ",
  "15766": "addHeader ( Result . LOCATION , url ) ; ",
  "15767": "} public Result redirectTemporary ( String url ) { ",
  "15768": "status ( Result . SC_307_TEMPORARY_REDIRECT ) ; ",
  "15769": "} public Result doNotCacheContent ( ) { ",
  "15770": "addHeader ( CACHE_CONTROL , CACHE_CONTROL_DEFAULT_NOCACHE_VALUE ) ; ",
  "15771": "addHeader ( DATE , DateUtil . formatForHttpHeader ( System . currentTimeMillis ( ) ) ) ; ",
  "15772": "addHeader ( EXPIRES , DateUtil . formatForHttpHeader ( 0L ) ) ; ",
  "15773": "} public static void checkThatApplicationSecretIsSet ( ",
  "15774": "boolean isProd , ",
  "15775": "String baseDirWithoutTrailingSlash , ",
  "15776": "PropertiesConfiguration defaultConfiguration , ",
  "15777": "Configuration compositeConfiguration ) { ",
  "15778": "String applicationSecret = compositeConfiguration . getString ( NinjaConstant . applicationSecret ) ; ",
  "15779": "if ( applicationSecret == null ",
  "15780": "|| applicationSecret . isEmpty ( ) ) { ",
  "15781": "if ( isProd ) { ",
  "15782": "logger . error ( errorMessage ) ; ",
  "15783": "String secret = SecretGenerator . generateSecret ( ) ; ",
  "15784": "compositeConfiguration . setProperty ( NinjaConstant . applicationSecret , secret ) ; ",
  "15785": "defaultConfiguration . setProperty ( NinjaConstant . applicationSecret , secret ) ; ",
  "15786": "String pathToApplicationConfInSrcDir = baseDirWithoutTrailingSlash + File . separator + \"src\" + File . separator + \"main\" + File . separator + \"java\" + File . separator + NinjaProperties . CONF_FILE_LOCATION_BY_CONVENTION ; ",
  "15787": "Files . createParentDirs ( new File ( pathToApplicationConfInSrcDir ) ) ; ",
  "15788": "defaultConfiguration . save ( pathToApplicationConfInSrcDir ) ; ",
  "15789": "defaultConfiguration . save ( ) ; ",
  "15790": "} public String normalizePathWithoutLeadingSlash ( String fileName , boolean enforceUnixSeparator ) { ",
  "15791": "String fileNameNormalized = enforceUnixSeparator ",
  "15792": "? FilenameUtils . normalize ( fileName , true ) ",
  "15793": ": FilenameUtils . normalize ( fileName ) ; ",
  "15794": "return StringUtils . removeStart ( fileNameNormalized , \"/\" ) ; ",
  "15795": "} public boolean isDirectoryURL ( URL url ) { ",
  "15796": "return url . getProtocol ( ) . equals ( \"file\" ) && new File ( url . toURI ( ) ) . isDirectory ( ) ; ",
  "15797": "} private void step1 ( ) ",
  "15798": "if ( b [ k ] == 's' ) ",
  "15799": "if ( ends ( \"sses\" ) ) k -= 2 ; ",
  "15800": "else if ( ends ( \"ies\" ) ) setto ( \"i\" ) ; ",
  "15801": "else if ( b [ k - 1 ] != 's' ) k -- ; ",
  "15802": "if ( ends ( \"eed\" ) ) ",
  "15803": "if ( m ( ) > 0 ) k -- ; ",
  "15804": "else if ( ( ends ( \"ed\" ) || ends ( \"ing\" ) ) && vowelinstem ( ) ) ",
  "15805": "k = j ; ",
  "15806": "if ( ends ( \"at\" ) ) setto ( \"ate\" ) ; ",
  "15807": "else if ( ends ( \"bl\" ) ) setto ( \"ble\" ) ; ",
  "15808": "else if ( ends ( \"iz\" ) ) setto ( \"ize\" ) ; ",
  "15809": "else if ( doublec ( k ) ) ",
  "15810": "int ch = b [ k -- ] ; ",
  "15811": "if ( ch == 'l' || ch == 's' || ch == 'z' ) k ++ ; ",
  "15812": "else if ( m ( ) == 1 && cvc ( k ) ) setto ( \"e\" ) ; ",
  "15813": "} private void step3 ( ) ",
  "15814": "if ( k == k0 ) return ; ",
  "15815": "switch ( b [ k - 1 ] ) ",
  "15816": "if ( ends ( \"ational\" ) ) ",
  "15817": "r ( \"ate\" ) ; ",
  "15818": "if ( ends ( \"tional\" ) ) ",
  "15819": "r ( \"tion\" ) ; ",
  "15820": "if ( ends ( \"enci\" ) ) ",
  "15821": "r ( \"ence\" ) ; ",
  "15822": "if ( ends ( \"anci\" ) ) ",
  "15823": "r ( \"ance\" ) ; ",
  "15824": "if ( ends ( \"izer\" ) ) ",
  "15825": "r ( \"ize\" ) ; ",
  "15826": "if ( ends ( \"bli\" ) ) ",
  "15827": "r ( \"ble\" ) ; ",
  "15828": "if ( ends ( \"alli\" ) ) ",
  "15829": "r ( \"al\" ) ; ",
  "15830": "if ( ends ( \"entli\" ) ) ",
  "15831": "r ( \"ent\" ) ; ",
  "15832": "if ( ends ( \"eli\" ) ) ",
  "15833": "r ( \"e\" ) ; ",
  "15834": "if ( ends ( \"ousli\" ) ) ",
  "15835": "r ( \"ous\" ) ; ",
  "15836": "if ( ends ( \"ization\" ) ) ",
  "15837": "if ( ends ( \"ation\" ) ) ",
  "15838": "if ( ends ( \"ator\" ) ) ",
  "15839": "if ( ends ( \"alism\" ) ) ",
  "15840": "if ( ends ( \"iveness\" ) ) ",
  "15841": "r ( \"ive\" ) ; ",
  "15842": "if ( ends ( \"fulness\" ) ) ",
  "15843": "r ( \"ful\" ) ; ",
  "15844": "if ( ends ( \"ousness\" ) ) ",
  "15845": "if ( ends ( \"aliti\" ) ) ",
  "15846": "if ( ends ( \"iviti\" ) ) ",
  "15847": "if ( ends ( \"biliti\" ) ) ",
  "15848": "if ( ends ( \"logi\" ) ) ",
  "15849": "r ( \"log\" ) ; ",
  "15850": "} private void step5 ( ) ",
  "15851": "if ( ends ( \"al\" ) ) break ; ",
  "15852": "if ( ends ( \"ance\" ) ) break ; ",
  "15853": "if ( ends ( \"ence\" ) ) break ; ",
  "15854": "if ( ends ( \"er\" ) ) break ; ",
  "15855": "if ( ends ( \"ic\" ) ) break ; ",
  "15856": "if ( ends ( \"able\" ) ) break ; ",
  "15857": "if ( ends ( \"ible\" ) ) break ; ",
  "15858": "if ( ends ( \"ant\" ) ) break ; ",
  "15859": "if ( ends ( \"ement\" ) ) break ; ",
  "15860": "if ( ends ( \"ment\" ) ) break ; ",
  "15861": "if ( ends ( \"ent\" ) ) break ; ",
  "15862": "if ( ends ( \"ion\" ) && j >= 0 && ( b [ j ] == 's' || b [ j ] == 't' ) ) break ; ",
  "15863": "if ( ends ( \"ou\" ) ) break ; ",
  "15864": "if ( ends ( \"ism\" ) ) break ; ",
  "15865": "if ( ends ( \"ate\" ) ) break ; ",
  "15866": "if ( ends ( \"iti\" ) ) break ; ",
  "15867": "if ( ends ( \"ous\" ) ) break ; ",
  "15868": "case 'v' : ",
  "15869": "if ( ends ( \"ive\" ) ) break ; ",
  "15870": "case 'z' : ",
  "15871": "if ( ends ( \"ize\" ) ) break ; ",
  "15872": "if ( m ( ) > 1 ) k = j ; ",
  "15873": "protected TokenStreamComponents createComponents ( String fieldName ) ",
  "15874": "Tokenizer tokenizer = new HanLPTokenizer ( HanLP . newSegment ( ) . enableOffset ( true ) , filter , enablePorterStemming ) ; ",
  "15875": "return new TokenStreamComponents ( tokenizer ) ; ",
  "15876": "} private int [ ] fetchDatabaseNameRangeIndexFromURLForH2FileMode ( String url ) { ",
  "15877": "int fileLabelIndex = url . indexOf ( FILE_MODE_FLAG ) ; ",
  "15878": "int parameterLabelIndex = url . indexOf ( \";\" , fileLabelIndex ) ; ",
  "15879": "if ( parameterLabelIndex == - 1 ) { ",
  "15880": "parameterLabelIndex = url . length ( ) ; ",
  "15881": "if ( fileLabelIndex != - 1 ) { ",
  "15882": "return new int [ ] { fileLabelIndex + FILE_MODE_FLAG . length ( ) + 1 , parameterLabelIndex } ; ",
  "15883": "} private int [ ] fetchDatabaseNameRangeIndexFromURLForH2MemMode ( String url ) { ",
  "15884": "int fileLabelIndex = url . indexOf ( MEMORY_MODE_FLAG ) ; ",
  "15885": "return new int [ ] { fileLabelIndex + MEMORY_MODE_FLAG . length ( ) + 1 , parameterLabelIndex } ; ",
  "15886": "} public static ConnectionInfo parser ( String url ) { ",
  "15887": "if ( null == url ) { ",
  "15888": "return ConnectionInfo . UNKNOWN_CONNECTION_INFO ; ",
  "15889": "String lowerCaseUrl = url . toLowerCase ( ) ; ",
  "15890": "ConnectionURLParser parser = findURLParser ( lowerCaseUrl ) ; ",
  "15891": "return parser . parse ( url ) ; ",
  "15892": "} public static void registerConnectionParser ( String urlPrefix , ConnectionURLParser parser ) { ",
  "15893": "if ( null == urlPrefix || parser == null ) { ",
  "15894": "parserRegister . put ( urlPrefix . toLowerCase ( ) , parser ) ; ",
  "15895": "} protected String fetchDatabaseHostsFromURL ( String url ) { ",
  "15896": "URLLocation hostsLocation = fetchDatabaseHostsIndexRange ( url ) ; ",
  "15897": "return url . substring ( hostsLocation . startIndex ( ) , hostsLocation . endIndex ( ) ) ; ",
  "15898": "} protected String fetchDatabaseNameFromURL ( String url ) { ",
  "15899": "URLLocation hostsLocation = fetchDatabaseNameIndexRange ( url ) ; ",
  "15900": "} private static void start ( Context context , Class < ? > daemonClazzName , int interval ) { ",
  "15901": "String cmd = context . getDir ( BIN_DIR_NAME , Context . MODE_PRIVATE ) ",
  "15902": ". getAbsolutePath ( ) + File . separator + DAEMON_BIN_NAME ; ",
  "15903": "StringBuilder cmdBuilder = new StringBuilder ( ) ; ",
  "15904": "cmdBuilder . append ( cmd ) ; ",
  "15905": "cmdBuilder . append ( context . getPackageName ( ) ) ; ",
  "15906": "cmdBuilder . append ( daemonClazzName . getName ( ) ) ; ",
  "15907": "cmdBuilder . append ( interval ) ; ",
  "15908": "Runtime . getRuntime ( ) . exec ( cmdBuilder . toString ( ) ) . waitFor ( ) ; ",
  "15909": "} catch ( IOException | InterruptedException e ) { ",
  "15910": "} public static void run ( final Context context , final Class < ? > daemonServiceClazz , ",
  "15911": "final int interval ) { ",
  "15912": "new Thread ( new Runnable ( ) { ",
  "15913": "Command . install ( context , BIN_DIR_NAME , DAEMON_BIN_NAME ) ; ",
  "15914": "start ( context , daemonServiceClazz , interval ) ; ",
  "15915": "} ) . start ( ) ; ",
  "15916": "} private static void copyFile ( File file , InputStream is , String mode ) ",
  "15917": "throws IOException , InterruptedException { ",
  "15918": "final String abspath = file . getAbsolutePath ( ) ; ",
  "15919": "final FileOutputStream out = new FileOutputStream ( file ) ; ",
  "15920": "byte buf [ ] = new byte [ 1024 ] ; ",
  "15921": "while ( ( len = is . read ( buf ) ) > 0 ) { ",
  "15922": "out . write ( buf , 0 , len ) ; ",
  "15923": "} public static void copyAssets ( Context context , String assetsFilename , File file , String mode ) ",
  "15924": "AssetManager manager = context . getAssets ( ) ; ",
  "15925": "final InputStream is = manager . open ( assetsFilename ) ; ",
  "15926": "copyFile ( file , is , mode ) ; ",
  "15927": "public static boolean install ( Context context , String destDir , String filename ) { ",
  "15928": "String binaryDir = \"armeabi\" ; ",
  "15929": "String abi = Build . CPU_ABI ; ",
  "15930": "if ( abi . startsWith ( \"armeabi-v7a\" ) ) { ",
  "15931": "binaryDir = \"armeabi-v7a\" ; ",
  "15932": "} else if ( abi . startsWith ( \"x86\" ) ) { ",
  "15933": "binaryDir = \"x86\" ; ",
  "15934": "String assetfilename = binaryDir + File . separator + filename ; ",
  "15935": "File f = new File ( context . getDir ( destDir , Context . MODE_PRIVATE ) , filename ) ; ",
  "15936": "copyAssets ( context , assetfilename , f , \"0755\" ) ; ",
  "15937": "} public static long parseDuration ( String duration ) { ",
  "15938": "if ( duration == null || duration . isEmpty ( ) ) { ",
  "15939": "long toAdd = - 1 ; ",
  "15940": "if ( days . matcher ( duration ) . matches ( ) ) { ",
  "15941": "Matcher matcher = days . matcher ( duration ) ; ",
  "15942": "matcher . matches ( ) ; ",
  "15943": "toAdd = Long . parseLong ( matcher . group ( 1 ) ) * 60 * 60 * 24 * 1000 ; ",
  "15944": "} else if ( hours . matcher ( duration ) . matches ( ) ) { ",
  "15945": "Matcher matcher = hours . matcher ( duration ) ; ",
  "15946": "toAdd = Long . parseLong ( matcher . group ( 1 ) ) * 60 * 60 * 1000 ; ",
  "15947": "} else if ( minutes . matcher ( duration ) . matches ( ) ) { ",
  "15948": "Matcher matcher = minutes . matcher ( duration ) ; ",
  "15949": "toAdd = Long . parseLong ( matcher . group ( 1 ) ) * 60 * 1000 ; ",
  "15950": "} else if ( seconds . matcher ( duration ) . matches ( ) ) { ",
  "15951": "Matcher matcher = seconds . matcher ( duration ) ; ",
  "15952": "toAdd = Long . parseLong ( matcher . group ( 1 ) ) * 1000 ; ",
  "15953": "} else if ( milliseconds . matcher ( duration ) . matches ( ) ) { ",
  "15954": "Matcher matcher = milliseconds . matcher ( duration ) ; ",
  "15955": "toAdd = Long . parseLong ( matcher . group ( 1 ) ) ; ",
  "15956": "if ( toAdd == - 1 ) { ",
  "15957": "} protected CronScheduleBuilder createCronScheduleBuilder ( String cronExpr ) { ",
  "15958": "int i = cronExpr . indexOf ( \"[\" ) ; ",
  "15959": "int j = cronExpr . indexOf ( \"]\" ) ; ",
  "15960": "TimeZone timezone = defaultTimezone ; ",
  "15961": "if ( i > - 1 && j > - 1 ) { ",
  "15962": "timezone = TimeZone . getTimeZone ( cronExpr . substring ( i + 1 , j ) ) ; ",
  "15963": "cronExpr = cronExpr . substring ( 0 , i ) . trim ( ) ; ",
  "15964": "return CronScheduleBuilder . cronSchedule ( cronExpr ) . inTimeZone ( timezone ) ; ",
  "15965": "} public static boolean isBeginGroupKey ( RenderingHints . Key key ) { ",
  "15966": "return SVGHints . KEY_BEGIN_GROUP . equals ( key ) ",
  "15967": "|| beginGroupKeys . contains ( key ) ; ",
  "15968": "} public static boolean isEndGroupKey ( RenderingHints . Key key ) { ",
  "15969": "return SVGHints . KEY_END_GROUP . equals ( key ) || endGroupKeys . contains ( key ) ; ",
  "15970": "} public static boolean isElementTitleKey ( RenderingHints . Key key ) { ",
  "15971": "return SVGHints . KEY_ELEMENT_TITLE . equals ( key ) ",
  "15972": "|| elementTitleKeys . contains ( key ) ; ",
  "15973": "} public static String escapeForXML ( String source ) { ",
  "15974": "Args . nullNotPermitted ( source , \"source\" ) ; ",
  "15975": "for ( int i = 0 ; i < source . length ( ) ; i ++ ) { ",
  "15976": "char c = source . charAt ( i ) ; ",
  "15977": "case '<' : { ",
  "15978": "sb . append ( \"&lt;\" ) ; ",
  "15979": "case '>' : { ",
  "15980": "sb . append ( \"&gt;\" ) ; ",
  "15981": "case '&' : { ",
  "15982": "String next = source . substring ( i , Math . min ( i + 6 , ",
  "15983": "source . length ( ) ) ) ; ",
  "15984": "if ( next . startsWith ( \"&lt;\" ) || next . startsWith ( \"&gt;\" ) ",
  "15985": "|| next . startsWith ( \"&amp;\" ) ",
  "15986": "|| next . startsWith ( \"&apos;\" ) ",
  "15987": "|| next . startsWith ( \"&quot;\" ) ) { ",
  "15988": "sb . append ( \"&amp;\" ) ; ",
  "15989": "case '\\'' : { ",
  "15990": "sb . append ( \"&apos;\" ) ; ",
  "15991": "case '\\\"' : { ",
  "15992": "sb . append ( \"&quot;\" ) ; ",
  "15993": "default : sb . append ( c ) ; ",
  "15994": "} public static void writeToSVG ( File file , String svgElement ) ",
  "15995": "writeToSVG ( file , svgElement , false ) ; ",
  "15996": "} public static void writeToSVG ( File file , String svgElement , boolean zip ) ",
  "15997": "BufferedWriter writer = null ; ",
  "15998": "OutputStream os = new FileOutputStream ( file ) ; ",
  "15999": "if ( zip ) { ",
  "16000": "os = new GZIPOutputStream ( os ) ; ",
  "16001": "OutputStreamWriter osw = new OutputStreamWriter ( os , \"UTF-8\" ) ; ",
  "16002": "writer = new BufferedWriter ( osw ) ; ",
  "16003": "writer . write ( svgElement + \"\\n\" ) ; ",
  "16004": "} public static void writeToHTML ( File file , String title , String svgElement ) ",
  "16005": "FileOutputStream fos = new FileOutputStream ( file ) ; ",
  "16006": "OutputStreamWriter osw = new OutputStreamWriter ( fos , \"UTF-8\" ) ; ",
  "16007": "writer . write ( \"<html>\\n\" ) ; ",
  "16008": "writer . write ( \"<head>\\n\" ) ; ",
  "16009": "writer . write ( \"<title>\" + title + \"</title>\\n\" ) ; ",
  "16010": "writer . write ( \"</head>\\n\" ) ; ",
  "16011": "writer . write ( \"<body>\\n\" ) ; ",
  "16012": "writer . write ( \"</body>\\n\" ) ; ",
  "16013": "writer . write ( \"</html>\\n\" ) ; ",
  "16014": "Logger . getLogger ( SVGUtils . class . getName ( ) ) . log ( Level . SEVERE , ",
  "16015": "null , ex ) ; ",
  "16016": "} public static Shape copyOf ( Shape shape ) { ",
  "16017": "Args . nullNotPermitted ( shape , \"shape\" ) ; ",
  "16018": "if ( shape instanceof Line2D ) { ",
  "16019": "Line2D l = ( Line2D ) shape ; ",
  "16020": "return new Line2D . Double ( l . getX1 ( ) , l . getY1 ( ) , l . getX2 ( ) , l . getY2 ( ) ) ; ",
  "16021": "if ( shape instanceof Rectangle2D ) { ",
  "16022": "Rectangle2D r = ( Rectangle2D ) shape ; ",
  "16023": "return new Rectangle2D . Double ( r . getX ( ) , r . getY ( ) , r . getWidth ( ) , ",
  "16024": "r . getHeight ( ) ) ; ",
  "16025": "if ( shape instanceof RoundRectangle2D ) { ",
  "16026": "RoundRectangle2D rr = ( RoundRectangle2D ) shape ; ",
  "16027": "return new RoundRectangle2D . Double ( rr . getX ( ) , rr . getY ( ) , ",
  "16028": "rr . getWidth ( ) , rr . getHeight ( ) , rr . getArcWidth ( ) , ",
  "16029": "rr . getArcHeight ( ) ) ; ",
  "16030": "if ( shape instanceof Arc2D ) { ",
  "16031": "Arc2D arc = ( Arc2D ) shape ; ",
  "16032": "return new Arc2D . Double ( arc . getX ( ) , arc . getY ( ) , arc . getWidth ( ) , ",
  "16033": "arc . getHeight ( ) , arc . getAngleStart ( ) , arc . getAngleExtent ( ) , ",
  "16034": "arc . getArcType ( ) ) ; ",
  "16035": "if ( shape instanceof Ellipse2D ) { ",
  "16036": "Ellipse2D ell = ( Ellipse2D ) shape ; ",
  "16037": "return new Ellipse2D . Double ( ell . getX ( ) , ell . getY ( ) , ell . getWidth ( ) , ",
  "16038": "ell . getHeight ( ) ) ; ",
  "16039": "if ( shape instanceof Polygon ) { ",
  "16040": "Polygon p = ( Polygon ) shape ; ",
  "16041": "return new Polygon ( p . xpoints , p . ypoints , p . npoints ) ; ",
  "16042": "return new Path2D . Double ( shape ) ; ",
  "16043": "} public static GeneralPath createPolygon ( int [ ] xPoints , int [ ] yPoints , ",
  "16044": "int nPoints , boolean close ) { ",
  "16045": "GeneralPath p = new GeneralPath ( ) ; ",
  "16046": "p . moveTo ( xPoints [ 0 ] , yPoints [ 0 ] ) ; ",
  "16047": "for ( int i = 1 ; i < nPoints ; i ++ ) { ",
  "16048": "p . lineTo ( xPoints [ i ] , yPoints [ i ] ) ; ",
  "16049": "if ( close ) { ",
  "16050": "p . closePath ( ) ; ",
  "16051": "public ColorModel getColorModel ( int transparency ) { ",
  "16052": "if ( transparency == Transparency . TRANSLUCENT ) { ",
  "16053": "return ColorModel . getRGBdefault ( ) ; ",
  "16054": "} else if ( transparency == Transparency . OPAQUE ) { ",
  "16055": "return new DirectColorModel ( 32 , 0x00ff0000 , 0x0000ff00 , 0x000000ff ) ; ",
  "16056": "public BufferedImage createCompatibleImage ( int width , int height ) { ",
  "16057": "ColorModel model = getColorModel ( ) ; ",
  "16058": "WritableRaster raster = model . createCompatibleWritableRaster ( width , ",
  "16059": "height ) ; ",
  "16060": "return new BufferedImage ( model , raster , model . isAlphaPremultiplied ( ) , ",
  "16061": "public VolatileImage createCompatibleVolatileImage ( int width , int height , ",
  "16062": "ImageCapabilities caps , int transparency ) throws AWTException { ",
  "16063": "if ( img == null ) { ",
  "16064": "img = new BufferedImage ( 1 , 1 , BufferedImage . TYPE_INT_ARGB ) ; ",
  "16065": "gc = img . createGraphics ( ) . getDeviceConfiguration ( ) ; ",
  "16066": "return gc . createCompatibleVolatileImage ( width , height , caps , ",
  "16067": "transparency ) ; ",
  "16068": "} public static void arrayMustHaveLength ( int length , boolean [ ] array , ",
  "16069": "String ref ) { ",
  "16070": "nullNotPermitted ( array , \"array\" ) ; ",
  "16071": "if ( array . length != length ) { ",
  "16072": "} public String valueStr ( ) { ",
  "16073": ". append ( this . height ) . toString ( ) ; ",
  "16074": "} public String get ( String family ) { ",
  "16075": "Args . nullNotPermitted ( family , \"family\" ) ; ",
  "16076": "return this . alternates . get ( family ) ; ",
  "16077": "} public void put ( String family , String alternate ) { ",
  "16078": "this . alternates . put ( family , alternate ) ; ",
  "16079": "public String mapFont ( String family ) { ",
  "16080": "String alternate = this . alternates . get ( family ) ; ",
  "16081": "return alternate ; ",
  "16082": "return family ; ",
  "16083": "} public void setShapeRendering ( String value ) { ",
  "16084": "if ( ! value . equals ( \"auto\" ) && ! value . equals ( \"crispEdges\" ) ",
  "16085": "&& ! value . equals ( \"geometricPrecision\" ) ",
  "16086": "&& ! value . equals ( \"optimizeSpeed\" ) ) { ",
  "16087": "this . shapeRendering = value ; ",
  "16088": "} public void setTextRendering ( String value ) { ",
  "16089": "if ( ! value . equals ( \"auto\" ) && ! value . equals ( \"optimizeSpeed\" ) ",
  "16090": "&& ! value . equals ( \"optimizeLegibility\" ) ",
  "16091": "&& ! value . equals ( \"geometricPrecision\" ) ) { ",
  "16092": "this . textRendering = value ; ",
  "16093": "} public void setTransformDP ( int dp ) { ",
  "16094": "this . transformDP = dp ; ",
  "16095": "if ( dp < 1 || dp > 10 ) { ",
  "16096": "this . transformFormat = null ; ",
  "16097": "DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ; ",
  "16098": "dfs . setDecimalSeparator ( '.' ) ; ",
  "16099": "this . transformFormat = new DecimalFormat ( \"0.\" ",
  "16100": "+ \"##########\" . substring ( 0 , dp ) , dfs ) ; ",
  "16101": "} public void setGeometryDP ( int dp ) { ",
  "16102": "this . geometryDP = dp ; ",
  "16103": "this . geometryFormat = null ; ",
  "16104": "this . geometryFormat = new DecimalFormat ( \"0.\" ",
  "16105": "public GraphicsConfiguration getDeviceConfiguration ( ) { ",
  "16106": "if ( this . deviceConfiguration == null ) { ",
  "16107": "this . deviceConfiguration = new SVGGraphicsConfiguration ( this . width , ",
  "16108": "this . height ) ; ",
  "16109": "return this . deviceConfiguration ; ",
  "16110": "public Graphics create ( ) { ",
  "16111": "SVGGraphics2D copy = new SVGGraphics2D ( this ) ; ",
  "16112": "copy . setRenderingHints ( getRenderingHints ( ) ) ; ",
  "16113": "copy . setTransform ( getTransform ( ) ) ; ",
  "16114": "copy . setClip ( getClip ( ) ) ; ",
  "16115": "copy . setPaint ( getPaint ( ) ) ; ",
  "16116": "copy . setColor ( getColor ( ) ) ; ",
  "16117": "copy . setComposite ( getComposite ( ) ) ; ",
  "16118": "copy . setStroke ( getStroke ( ) ) ; ",
  "16119": "copy . setFont ( getFont ( ) ) ; ",
  "16120": "copy . setBackground ( getBackground ( ) ) ; ",
  "16121": "copy . setFilePrefix ( getFilePrefix ( ) ) ; ",
  "16122": "copy . setFileSuffix ( getFileSuffix ( ) ) ; ",
  "16123": "public void setPaint ( Paint paint ) { ",
  "16124": "if ( paint == null ) { ",
  "16125": "this . paint = paint ; ",
  "16126": "this . gradientPaintRef = null ; ",
  "16127": "if ( paint instanceof Color ) { ",
  "16128": "setColor ( ( Color ) paint ) ; ",
  "16129": "} else if ( paint instanceof GradientPaint ) { ",
  "16130": "GradientPaint gp = ( GradientPaint ) paint ; ",
  "16131": "GradientPaintKey key = new GradientPaintKey ( gp ) ; ",
  "16132": "String ref = this . gradientPaints . get ( key ) ; ",
  "16133": "int count = this . gradientPaints . keySet ( ) . size ( ) ; ",
  "16134": "String id = this . defsKeyPrefix + \"gp\" + count ; ",
  "16135": "this . elementIDs . add ( id ) ; ",
  "16136": "this . gradientPaints . put ( key , id ) ; ",
  "16137": "this . gradientPaintRef = id ; ",
  "16138": "this . gradientPaintRef = ref ; ",
  "16139": "} else if ( paint instanceof LinearGradientPaint ) { ",
  "16140": "LinearGradientPaint lgp = ( LinearGradientPaint ) paint ; ",
  "16141": "LinearGradientPaintKey key = new LinearGradientPaintKey ( lgp ) ; ",
  "16142": "String ref = this . linearGradientPaints . get ( key ) ; ",
  "16143": "int count = this . linearGradientPaints . keySet ( ) . size ( ) ; ",
  "16144": "String id = this . defsKeyPrefix + \"lgp\" + count ; ",
  "16145": "this . linearGradientPaints . put ( key , id ) ; ",
  "16146": "} else if ( paint instanceof RadialGradientPaint ) { ",
  "16147": "RadialGradientPaint rgp = ( RadialGradientPaint ) paint ; ",
  "16148": "RadialGradientPaintKey key = new RadialGradientPaintKey ( rgp ) ; ",
  "16149": "String ref = this . radialGradientPaints . get ( key ) ; ",
  "16150": "int count = this . radialGradientPaints . keySet ( ) . size ( ) ; ",
  "16151": "String id = this . defsKeyPrefix + \"rgp\" + count ; ",
  "16152": "this . radialGradientPaints . put ( key , id ) ; ",
  "16153": "this . color = c ; ",
  "16154": "this . paint = c ; ",
  "16155": "public void setRenderingHint ( RenderingHints . Key hintKey , Object hintValue ) { ",
  "16156": "if ( hintKey == null ) { ",
  "16157": "if ( SVGHints . isBeginGroupKey ( hintKey ) ) { ",
  "16158": "String groupId = null ; ",
  "16159": "List < Entry > otherKeysAndValues = null ; ",
  "16160": "if ( hintValue instanceof String ) { ",
  "16161": "groupId = ( String ) hintValue ; ",
  "16162": "} else if ( hintValue instanceof Map ) { ",
  "16163": "Map hintValueMap = ( Map ) hintValue ; ",
  "16164": "groupId = ( String ) hintValueMap . get ( \"id\" ) ; ",
  "16165": "ref = ( String ) hintValueMap . get ( \"ref\" ) ; ",
  "16166": "for ( final Object obj : hintValueMap . entrySet ( ) ) { ",
  "16167": "final Entry e = ( Entry ) obj ; ",
  "16168": "final Object key = e . getKey ( ) ; ",
  "16169": "if ( \"id\" . equals ( key ) || \"ref\" . equals ( key ) ) { ",
  "16170": "if ( otherKeysAndValues == null ) { ",
  "16171": "otherKeysAndValues = new ArrayList < Entry > ( ) ; ",
  "16172": "otherKeysAndValues . add ( e ) ; ",
  "16173": "this . sb . append ( \"<g\" ) ; ",
  "16174": "if ( groupId != null ) { ",
  "16175": "if ( this . elementIDs . contains ( groupId ) ) { ",
  "16176": "this . elementIDs . add ( groupId ) ; ",
  "16177": "this . sb . append ( SVGUtils . escapeForXML ( ref ) ) . append ( \"\\\"\" ) ; ",
  "16178": "if ( otherKeysAndValues != null ) { ",
  "16179": "for ( final Entry e : otherKeysAndValues ) { ",
  "16180": "this . sb . append ( SVGUtils . escapeForXML ( String . valueOf ( ",
  "16181": "e . getValue ( ) ) ) ) . append ( \"\\\"\" ) ; ",
  "16182": "this . sb . append ( \">\" ) ; ",
  "16183": "} else if ( SVGHints . isEndGroupKey ( hintKey ) ) { ",
  "16184": "this . sb . append ( \"</g>\\n\" ) ; ",
  "16185": "} else if ( SVGHints . isElementTitleKey ( hintKey ) && ( hintValue != null ) ) { ",
  "16186": "this . sb . append ( \"<title>\" ) ; ",
  "16187": "this . sb . append ( SVGUtils . escapeForXML ( String . valueOf ( hintValue ) ) ) ; ",
  "16188": "this . sb . append ( \"</title>\" ) ; ",
  "16189": "this . hints . put ( hintKey , hintValue ) ; ",
  "16190": "} private void appendOptionalElementIDFromHint ( StringBuilder sb ) { ",
  "16191": "String elementID = ( String ) this . hints . get ( SVGHints . KEY_ELEMENT_ID ) ; ",
  "16192": "if ( elementID != null ) { ",
  "16193": "this . hints . put ( SVGHints . KEY_ELEMENT_ID , null ) ; ",
  "16194": "if ( this . elementIDs . contains ( elementID ) ) { ",
  "16195": "this . elementIDs . add ( elementID ) ; ",
  "16196": "public void draw ( Shape s ) { ",
  "16197": "if ( ! ( this . stroke instanceof BasicStroke ) ) { ",
  "16198": "fill ( this . stroke . createStrokedShape ( s ) ) ; ",
  "16199": "if ( s instanceof Line2D ) { ",
  "16200": "Line2D l = ( Line2D ) s ; ",
  "16201": "appendOptionalElementIDFromHint ( this . sb ) ; ",
  "16202": "this . sb . append ( \"x1=\\\"\" ) . append ( geomDP ( l . getX1 ( ) ) ) ",
  "16203": "if ( ! this . transform . isIdentity ( ) ) { ",
  "16204": "this . sb . append ( \"transform=\\\"\" ) . append ( getSVGTransform ( ",
  "16205": "this . sb . append ( getClipPathRef ( ) ) ; ",
  "16206": "this . sb . append ( \"/>\" ) ; ",
  "16207": "} else if ( s instanceof Rectangle2D ) { ",
  "16208": "Rectangle2D r = ( Rectangle2D ) s ; ",
  "16209": "this . sb . append ( \"x=\\\"\" ) . append ( geomDP ( r . getX ( ) ) ) ",
  "16210": "this . sb . append ( \"style=\\\"\" ) . append ( strokeStyle ( ) ) ",
  "16211": "} else if ( s instanceof Ellipse2D ) { ",
  "16212": "Ellipse2D e = ( Ellipse2D ) s ; ",
  "16213": "this . sb . append ( \"cx=\\\"\" ) . append ( geomDP ( e . getCenterX ( ) ) ) ",
  "16214": "} else if ( s instanceof Path2D ) { ",
  "16215": "Path2D path = ( Path2D ) s ; ",
  "16216": "this . sb . append ( \"</g>\" ) ; ",
  "16217": "draw ( new GeneralPath ( s ) ) ; ",
  "16218": "public void fill ( Shape s ) { ",
  "16219": "if ( s instanceof Rectangle2D ) { ",
  "16220": "if ( r . isEmpty ( ) ) { ",
  "16221": "this . sb . append ( \"style=\\\"\" ) . append ( getSVGFillStyle ( ) ) ; ",
  "16222": "fill ( new GeneralPath ( s ) ) ; ",
  "16223": "} private String getSVGPathData ( Path2D path ) { ",
  "16224": "StringBuilder b = new StringBuilder ( \"d=\\\"\" ) ; ",
  "16225": "PathIterator iterator = path . getPathIterator ( null ) ; ",
  "16226": "while ( ! iterator . isDone ( ) ) { ",
  "16227": "int type = iterator . currentSegment ( coords ) ; ",
  "16228": "if ( ! first ) { ",
  "16229": "case ( PathIterator . SEG_MOVETO ) : ",
  "16230": ". append ( geomDP ( coords [ 1 ] ) ) ; ",
  "16231": "case ( PathIterator . SEG_LINETO ) : ",
  "16232": "case ( PathIterator . SEG_QUADTO ) : ",
  "16233": "case ( PathIterator . SEG_CUBICTO ) : ",
  "16234": ". append ( geomDP ( coords [ 5 ] ) ) ; ",
  "16235": "case ( PathIterator . SEG_CLOSE ) : ",
  "16236": "iterator . next ( ) ; ",
  "16237": "return b . append ( \"\\\"\" ) . toString ( ) ; ",
  "16238": "} private float getAlpha ( ) { ",
  "16239": "float alpha = 1.0f ; ",
  "16240": "if ( this . composite instanceof AlphaComposite ) { ",
  "16241": "AlphaComposite ac = ( AlphaComposite ) this . composite ; ",
  "16242": "alpha = ac . getAlpha ( ) ; ",
  "16243": "return alpha ; ",
  "16244": "} private String svgColorStr ( ) { ",
  "16245": "String result = \"black;\" ; ",
  "16246": "if ( this . paint instanceof Color ) { ",
  "16247": "return rgbColorStr ( ( Color ) this . paint ) ; ",
  "16248": "} else if ( this . paint instanceof GradientPaint ",
  "16249": "|| this . paint instanceof LinearGradientPaint ",
  "16250": "|| this . paint instanceof RadialGradientPaint ) { ",
  "16251": "return \"url(#\" + this . gradientPaintRef + \")\" ; ",
  "16252": "} private String rgbColorStr ( Color c ) { ",
  "16253": "StringBuilder b = new StringBuilder ( \"rgb(\" ) ; ",
  "16254": "b . append ( c . getRed ( ) ) . append ( \",\" ) . append ( c . getGreen ( ) ) . append ( \",\" ) ",
  "16255": ". append ( c . getBlue ( ) ) . append ( \")\" ) ; ",
  "16256": "} private String rgbaColorStr ( Color c ) { ",
  "16257": "StringBuilder b = new StringBuilder ( \"rgba(\" ) ; ",
  "16258": "double alphaPercent = c . getAlpha ( ) / 255.0 ; ",
  "16259": ". append ( c . getBlue ( ) ) ; ",
  "16260": "b . append ( \",\" ) . append ( transformDP ( alphaPercent ) ) ; ",
  "16261": "b . append ( \")\" ) ; ",
  "16262": "} private String strokeStyle ( ) { ",
  "16263": "double strokeWidth = 1.0f ; ",
  "16264": "String strokeCap = DEFAULT_STROKE_CAP ; ",
  "16265": "String strokeJoin = DEFAULT_STROKE_JOIN ; ",
  "16266": "float miterLimit = DEFAULT_MITER_LIMIT ; ",
  "16267": "float [ ] dashArray = new float [ 0 ] ; ",
  "16268": "if ( this . stroke instanceof BasicStroke ) { ",
  "16269": "BasicStroke bs = ( BasicStroke ) this . stroke ; ",
  "16270": "strokeWidth = bs . getLineWidth ( ) > 0.0 ? bs . getLineWidth ( ) ",
  "16271": ": this . zeroStrokeWidth ; ",
  "16272": "switch ( bs . getEndCap ( ) ) { ",
  "16273": "case BasicStroke . CAP_ROUND : ",
  "16274": "strokeCap = \"round\" ; ",
  "16275": "case BasicStroke . CAP_SQUARE : ",
  "16276": "strokeCap = \"square\" ; ",
  "16277": "case BasicStroke . CAP_BUTT : ",
  "16278": "switch ( bs . getLineJoin ( ) ) { ",
  "16279": "case BasicStroke . JOIN_BEVEL : ",
  "16280": "strokeJoin = \"bevel\" ; ",
  "16281": "case BasicStroke . JOIN_ROUND : ",
  "16282": "strokeJoin = \"round\" ; ",
  "16283": "case BasicStroke . JOIN_MITER : ",
  "16284": "miterLimit = bs . getMiterLimit ( ) ; ",
  "16285": "dashArray = bs . getDashArray ( ) ; ",
  "16286": ". append ( \";\" ) ; ",
  "16287": "if ( ! strokeCap . equals ( DEFAULT_STROKE_CAP ) ) { ",
  "16288": "if ( ! strokeJoin . equals ( DEFAULT_STROKE_JOIN ) ) { ",
  "16289": "if ( Math . abs ( DEFAULT_MITER_LIMIT - miterLimit ) < 0.001 ) { ",
  "16290": "if ( dashArray != null && dashArray . length != 0 ) { ",
  "16291": "for ( int i = 0 ; i < dashArray . length ; i ++ ) { ",
  "16292": "b . append ( dashArray [ i ] ) ; ",
  "16293": "b . append ( \";\" ) ; ",
  "16294": "if ( this . checkStrokeControlHint ) { ",
  "16295": "Object hint = getRenderingHint ( RenderingHints . KEY_STROKE_CONTROL ) ; ",
  "16296": "if ( RenderingHints . VALUE_STROKE_NORMALIZE . equals ( hint ) ",
  "16297": "&& ! this . shapeRendering . equals ( \"crispEdges\" ) ) { ",
  "16298": "b . append ( \"shape-rendering:crispEdges;\" ) ; ",
  "16299": "if ( RenderingHints . VALUE_STROKE_PURE . equals ( hint ) ",
  "16300": "&& ! this . shapeRendering . equals ( \"geometricPrecision\" ) ) { ",
  "16301": "b . append ( \"shape-rendering:geometricPrecision;\" ) ; ",
  "16302": "} private String getSVGFillStyle ( ) { ",
  "16303": "} private String getSVGFontStyle ( ) { ",
  "16304": "String fontFamily = this . fontMapper . mapFont ( this . font . getFamily ( ) ) ; ",
  "16305": "if ( this . font . isBold ( ) ) { ",
  "16306": "if ( this . font . isItalic ( ) ) { ",
  "16307": "public FontMetrics getFontMetrics ( Font f ) { ",
  "16308": "if ( this . fmImage == null ) { ",
  "16309": "this . fmImage = new BufferedImage ( 10 , 10 , ",
  "16310": "BufferedImage . TYPE_INT_RGB ) ; ",
  "16311": "this . fmImageG2D = this . fmImage . createGraphics ( ) ; ",
  "16312": "this . fmImageG2D . setRenderingHint ( ",
  "16313": "RenderingHints . KEY_FRACTIONALMETRICS , ",
  "16314": "RenderingHints . VALUE_FRACTIONALMETRICS_ON ) ; ",
  "16315": "return this . fmImageG2D . getFontMetrics ( f ) ; ",
  "16316": "public void drawString ( String str , float x , float y ) { ",
  "16317": "if ( str . isEmpty ( ) ) { ",
  "16318": "if ( ! SVGHints . VALUE_DRAW_STRING_TYPE_VECTOR . equals ( ",
  "16319": "this . hints . get ( SVGHints . KEY_DRAW_STRING_TYPE ) ) ) { ",
  "16320": "this . transform ) ) . append ( \"\\\"\" ) ; ",
  "16321": ". append ( \"\\\"\" ) ; ",
  "16322": "Object hintValue = getRenderingHint ( SVGHints . KEY_TEXT_RENDERING ) ; ",
  "16323": "if ( hintValue != null ) { ",
  "16324": "String textRenderValue = hintValue . toString ( ) ; ",
  "16325": "this . sb . append ( SVGUtils . escapeForXML ( str ) ) . append ( \"</text>\" ) ; ",
  "16326": "AttributedString as = new AttributedString ( str , ",
  "16327": "this . font . getAttributes ( ) ) ; ",
  "16328": "drawString ( as . getIterator ( ) , x , y ) ; ",
  "16329": "public void drawString ( AttributedCharacterIterator iterator , int x , int y ) { ",
  "16330": "drawString ( iterator , ( float ) x , ( float ) y ) ; ",
  "16331": "public void drawString ( AttributedCharacterIterator iterator , float x , ",
  "16332": "float y ) { ",
  "16333": "Set < Attribute > s = iterator . getAllAttributeKeys ( ) ; ",
  "16334": "if ( ! s . isEmpty ( ) ) { ",
  "16335": "TextLayout layout = new TextLayout ( iterator , ",
  "16336": "getFontRenderContext ( ) ) ; ",
  "16337": "layout . draw ( this , x , y ) ; ",
  "16338": "StringBuilder strb = new StringBuilder ( ) ; ",
  "16339": "iterator . first ( ) ; ",
  "16340": "for ( int i = iterator . getBeginIndex ( ) ; i < iterator . getEndIndex ( ) ; ",
  "16341": "i ++ ) { ",
  "16342": "strb . append ( iterator . current ( ) ) ; ",
  "16343": "drawString ( strb . toString ( ) , x , y ) ; ",
  "16344": "public void drawGlyphVector ( GlyphVector g , float x , float y ) { ",
  "16345": "fill ( g . getOutline ( x , y ) ) ; ",
  "16346": "public void translate ( double tx , double ty ) { ",
  "16347": "AffineTransform t = getTransform ( ) ; ",
  "16348": "t . translate ( tx , ty ) ; ",
  "16349": "setTransform ( t ) ; ",
  "16350": "public void rotate ( double theta ) { ",
  "16351": "t . rotate ( theta ) ; ",
  "16352": "public void rotate ( double theta , double x , double y ) { ",
  "16353": "translate ( x , y ) ; ",
  "16354": "rotate ( theta ) ; ",
  "16355": "translate ( - x , - y ) ; ",
  "16356": "public void scale ( double sx , double sy ) { ",
  "16357": "t . scale ( sx , sy ) ; ",
  "16358": "public void transform ( AffineTransform t ) { ",
  "16359": "AffineTransform tx = getTransform ( ) ; ",
  "16360": "tx . concatenate ( t ) ; ",
  "16361": "setTransform ( tx ) ; ",
  "16362": "public void setTransform ( AffineTransform t ) { ",
  "16363": "this . transform = new AffineTransform ( ) ; ",
  "16364": "this . transform = new AffineTransform ( t ) ; ",
  "16365": "this . clipRef = null ; ",
  "16366": "public boolean hit ( Rectangle rect , Shape s , boolean onStroke ) { ",
  "16367": "Shape ts ; ",
  "16368": "if ( onStroke ) { ",
  "16369": "ts = this . transform . createTransformedShape ( ",
  "16370": "this . stroke . createStrokedShape ( s ) ) ; ",
  "16371": "ts = this . transform . createTransformedShape ( s ) ; ",
  "16372": "if ( ! rect . getBounds2D ( ) . intersects ( ts . getBounds2D ( ) ) ) { ",
  "16373": "Area a1 = new Area ( rect ) ; ",
  "16374": "Area a2 = new Area ( ts ) ; ",
  "16375": "a1 . intersect ( a2 ) ; ",
  "16376": "return ! a1 . isEmpty ( ) ; ",
  "16377": "public Shape getClip ( ) { ",
  "16378": "if ( this . clip == null ) { ",
  "16379": "AffineTransform inv ; ",
  "16380": "inv = this . transform . createInverse ( ) ; ",
  "16381": "return inv . createTransformedShape ( this . clip ) ; ",
  "16382": "} catch ( NoninvertibleTransformException ex ) { ",
  "16383": "public void setClip ( Shape shape ) { ",
  "16384": "this . clip = this . transform . createTransformedShape ( shape ) ; ",
  "16385": "} private String registerClip ( Shape clip ) { ",
  "16386": "if ( clip == null ) { ",
  "16387": "String pathStr = getSVGPathData ( new Path2D . Double ( clip ) ) ; ",
  "16388": "int index = this . clipPaths . indexOf ( pathStr ) ; ",
  "16389": "this . clipPaths . add ( pathStr ) ; ",
  "16390": "index = this . clipPaths . size ( ) - 1 ; ",
  "16391": "return this . defsKeyPrefix + CLIP_KEY_PREFIX + index ; ",
  "16392": "public void clip ( Shape s ) { ",
  "16393": "s = s . getBounds2D ( ) ; ",
  "16394": "setClip ( s ) ; ",
  "16395": "Shape ts = this . transform . createTransformedShape ( s ) ; ",
  "16396": "if ( ! ts . intersects ( this . clip . getBounds2D ( ) ) ) { ",
  "16397": "setClip ( new Rectangle2D . Double ( ) ) ; ",
  "16398": "Area a1 = new Area ( ts ) ; ",
  "16399": "Area a2 = new Area ( this . clip ) ; ",
  "16400": "this . clip = new Path2D . Double ( a1 ) ; ",
  "16401": "public void clipRect ( int x , int y , int width , int height ) { ",
  "16402": "setRect ( x , y , width , height ) ; ",
  "16403": "clip ( this . rect ) ; ",
  "16404": "public void setClip ( int x , int y , int width , int height ) { ",
  "16405": "setClip ( this . rect ) ; ",
  "16406": "public void drawLine ( int x1 , int y1 , int x2 , int y2 ) { ",
  "16407": "if ( this . line == null ) { ",
  "16408": "this . line = new Line2D . Double ( x1 , y1 , x2 , y2 ) ; ",
  "16409": "this . line . setLine ( x1 , y1 , x2 , y2 ) ; ",
  "16410": "draw ( this . line ) ; ",
  "16411": "public void fillRect ( int x , int y , int width , int height ) { ",
  "16412": "fill ( this . rect ) ; ",
  "16413": "public void clearRect ( int x , int y , int width , int height ) { ",
  "16414": "if ( getBackground ( ) == null ) { ",
  "16415": "Paint saved = getPaint ( ) ; ",
  "16416": "setPaint ( getBackground ( ) ) ; ",
  "16417": "fillRect ( x , y , width , height ) ; ",
  "16418": "setPaint ( saved ) ; ",
  "16419": "public void drawRoundRect ( int x , int y , int width , int height , ",
  "16420": "int arcWidth , int arcHeight ) { ",
  "16421": "setRoundRect ( x , y , width , height , arcWidth , arcHeight ) ; ",
  "16422": "draw ( this . roundRect ) ; ",
  "16423": "public void fillRoundRect ( int x , int y , int width , int height , ",
  "16424": "fill ( this . roundRect ) ; ",
  "16425": "public void drawOval ( int x , int y , int width , int height ) { ",
  "16426": "setOval ( x , y , width , height ) ; ",
  "16427": "draw ( this . oval ) ; ",
  "16428": "public void fillOval ( int x , int y , int width , int height ) { ",
  "16429": "fill ( this . oval ) ; ",
  "16430": "public void drawArc ( int x , int y , int width , int height , int startAngle , ",
  "16431": "int arcAngle ) { ",
  "16432": "setArc ( x , y , width , height , startAngle , arcAngle ) ; ",
  "16433": "draw ( this . arc ) ; ",
  "16434": "public void fillArc ( int x , int y , int width , int height , int startAngle , ",
  "16435": "fill ( this . arc ) ; ",
  "16436": "public void drawPolyline ( int [ ] xPoints , int [ ] yPoints , int nPoints ) { ",
  "16437": "GeneralPath p = GraphicsUtils . createPolygon ( xPoints , yPoints , nPoints , ",
  "16438": "draw ( p ) ; ",
  "16439": "public void drawPolygon ( int [ ] xPoints , int [ ] yPoints , int nPoints ) { ",
  "16440": "public void fillPolygon ( int [ ] xPoints , int [ ] yPoints , int nPoints ) { ",
  "16441": "fill ( p ) ; ",
  "16442": "} private byte [ ] getPNGBytes ( Image img ) { ",
  "16443": "RenderedImage ri ; ",
  "16444": "if ( img instanceof RenderedImage ) { ",
  "16445": "ri = ( RenderedImage ) img ; ",
  "16446": "BufferedImage bi = new BufferedImage ( img . getWidth ( null ) , ",
  "16447": "img . getHeight ( null ) , BufferedImage . TYPE_INT_ARGB ) ; ",
  "16448": "Graphics2D g2 = bi . createGraphics ( ) ; ",
  "16449": "g2 . drawImage ( img , 0 , 0 , null ) ; ",
  "16450": "ri = bi ; ",
  "16451": "ImageIO . write ( ri , \"png\" , baos ) ; ",
  "16452": "Logger . getLogger ( SVGGraphics2D . class . getName ( ) ) . log ( Level . SEVERE , ",
  "16453": "public boolean drawImage ( Image img , int x , int y , int w , int h , ",
  "16454": "ImageObserver observer ) { ",
  "16455": "Object hint = getRenderingHint ( SVGHints . KEY_IMAGE_HANDLING ) ; ",
  "16456": "if ( SVGHints . VALUE_IMAGE_HANDLING_EMBED . equals ( hint ) ) { ",
  "16457": "this . sb . append ( \"xlink:href=\\\"data:image/png;base64,\" ) ; ",
  "16458": "this . sb . append ( Base64 . getEncoder ( ) . encode ( getPNGBytes ( ",
  "16459": "img ) ) ) ; ",
  "16460": "this . sb . append ( \"x=\\\"\" ) . append ( geomDP ( x ) ) ",
  "16461": ". append ( geomDP ( h ) ) . append ( \"\\\"/>\\n\" ) ; ",
  "16462": "int count = this . imageElements . size ( ) ; ",
  "16463": "String href = ( String ) this . hints . get ( SVGHints . KEY_IMAGE_HREF ) ; ",
  "16464": "href = this . filePrefix + count + this . fileSuffix ; ",
  "16465": "this . hints . put ( SVGHints . KEY_IMAGE_HREF , null ) ; ",
  "16466": "ImageElement imageElement = new ImageElement ( href , img ) ; ",
  "16467": "this . imageElements . add ( imageElement ) ; ",
  "16468": "this . sb . append ( \"xlink:href=\\\"\" ) ; ",
  "16469": "public boolean drawImage ( Image img , int x , int y , Color bgcolor , ",
  "16470": "int w = img . getWidth ( null ) ; ",
  "16471": "if ( w < 0 ) { ",
  "16472": "int h = img . getHeight ( null ) ; ",
  "16473": "if ( h < 0 ) { ",
  "16474": "return drawImage ( img , x , y , w , h , bgcolor , observer ) ; ",
  "16475": "Color bgcolor , ImageObserver observer ) { ",
  "16476": "setPaint ( bgcolor ) ; ",
  "16477": "fillRect ( x , y , w , h ) ; ",
  "16478": "return drawImage ( img , x , y , w , h , observer ) ; ",
  "16479": "public boolean drawImage ( Image img , int dx1 , int dy1 , int dx2 , int dy2 , ",
  "16480": "int sx1 , int sy1 , int sx2 , int sy2 , ImageObserver observer ) { ",
  "16481": "int w = dx2 - dx1 ; ",
  "16482": "int h = dy2 - dy1 ; ",
  "16483": "BufferedImage img2 = new BufferedImage ( w , h , ",
  "16484": "BufferedImage . TYPE_INT_ARGB ) ; ",
  "16485": "Graphics2D g2 = img2 . createGraphics ( ) ; ",
  "16486": "g2 . drawImage ( img , 0 , 0 , w , h , sx1 , sy1 , sx2 , sy2 , null ) ; ",
  "16487": "return drawImage ( img2 , dx1 , dy1 , null ) ; ",
  "16488": "int sx1 , int sy1 , int sx2 , int sy2 , Color bgcolor , ",
  "16489": "fillRect ( dx1 , dy1 , dx2 - dx1 , dy2 - dy1 ) ; ",
  "16490": "return drawImage ( img , dx1 , dy1 , dx2 , dy2 , sx1 , sy1 , sx2 , sy2 , observer ) ; ",
  "16491": "public void drawRenderedImage ( RenderedImage img , AffineTransform xform ) { ",
  "16492": "BufferedImage bi = GraphicsUtils . convertRenderedImage ( img ) ; ",
  "16493": "drawImage ( bi , xform , null ) ; ",
  "16494": "public void drawRenderableImage ( RenderableImage img , ",
  "16495": "AffineTransform xform ) { ",
  "16496": "RenderedImage ri = img . createDefaultRendering ( ) ; ",
  "16497": "drawRenderedImage ( ri , xform ) ; ",
  "16498": "public boolean drawImage ( Image img , AffineTransform xform , ",
  "16499": "ImageObserver obs ) { ",
  "16500": "AffineTransform savedTransform = getTransform ( ) ; ",
  "16501": "if ( xform != null ) { ",
  "16502": "transform ( xform ) ; ",
  "16503": "boolean result = drawImage ( img , 0 , 0 , obs ) ; ",
  "16504": "setTransform ( savedTransform ) ; ",
  "16505": "public void drawImage ( BufferedImage img , BufferedImageOp op , int x , int y ) { ",
  "16506": "BufferedImage imageToDraw = img ; ",
  "16507": "if ( op != null ) { ",
  "16508": "imageToDraw = op . filter ( img , null ) ; ",
  "16509": "drawImage ( imageToDraw , new AffineTransform ( 1f , 0f , 0f , 1f , x , y ) , null ) ; ",
  "16510": "} public String getSVGElement ( String id ) { ",
  "16511": "return getSVGElement ( id , true , null , null , null ) ; ",
  "16512": "} public String getSVGElement ( String id , boolean includeDimensions , ",
  "16513": "ViewBox viewBox , PreserveAspectRatio preserveAspectRatio , ",
  "16514": "MeetOrSlice meetOrSlice ) { ",
  "16515": "String unitStr = this . units != null ? this . units . toString ( ) : \"\" ; ",
  "16516": "if ( includeDimensions ) { ",
  "16517": "svg . append ( \"width=\\\"\" ) . append ( this . width ) . append ( unitStr ) ",
  "16518": "if ( viewBox != null ) { ",
  "16519": "if ( preserveAspectRatio != null ) { ",
  "16520": "svg . append ( \"preserveAspectRatio=\\\"\" ) ",
  "16521": ". append ( preserveAspectRatio . toString ( ) ) ; ",
  "16522": "if ( meetOrSlice != null ) { ",
  "16523": "svg . append ( \"text-rendering=\\\"\" ) . append ( this . textRendering ) ",
  "16524": ". append ( \"\\\">\\n\" ) ; ",
  "16525": "StringBuilder defs = new StringBuilder ( \"<defs>\" ) ; ",
  "16526": "for ( GradientPaintKey key : this . gradientPaints . keySet ( ) ) { ",
  "16527": "defs . append ( getLinearGradientElement ( this . gradientPaints . get ( key ) , ",
  "16528": "key . getPaint ( ) ) ) ; ",
  "16529": "defs . append ( \"\\n\" ) ; ",
  "16530": "for ( LinearGradientPaintKey key : this . linearGradientPaints . keySet ( ) ) { ",
  "16531": "defs . append ( getLinearGradientElement ( ",
  "16532": "this . linearGradientPaints . get ( key ) , key . getPaint ( ) ) ) ; ",
  "16533": "for ( RadialGradientPaintKey key : this . radialGradientPaints . keySet ( ) ) { ",
  "16534": "defs . append ( getRadialGradientElement ( ",
  "16535": "this . radialGradientPaints . get ( key ) , key . getPaint ( ) ) ) ; ",
  "16536": "for ( int i = 0 ; i < this . clipPaths . size ( ) ; i ++ ) { ",
  "16537": ". append ( this . defsKeyPrefix ) . append ( CLIP_KEY_PREFIX ) . append ( i ) ",
  "16538": ". append ( \"\\\">\" ) ; ",
  "16539": "b . append ( \"</clipPath>\" ) . append ( \"\\n\" ) ; ",
  "16540": "defs . append ( b . toString ( ) ) ; ",
  "16541": "defs . append ( \"</defs>\\n\" ) ; ",
  "16542": "svg . append ( defs ) ; ",
  "16543": "svg . append ( this . sb ) ; ",
  "16544": "svg . append ( \"</svg>\" ) ; ",
  "16545": "return svg . toString ( ) ; ",
  "16546": "} public String getSVGDocument ( ) { ",
  "16547": "b . append ( \"\\\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\\\">\\n\" ) ; ",
  "16548": "b . append ( getSVGElement ( ) ) ; ",
  "16549": "return b . append ( \"\\n\" ) . toString ( ) ; ",
  "16550": "} private String getLinearGradientElement ( String id , GradientPaint paint ) { ",
  "16551": "Point2D p1 = paint . getPoint1 ( ) ; ",
  "16552": "Point2D p2 = paint . getPoint2 ( ) ; ",
  "16553": "b . append ( \"gradientUnits=\\\"userSpaceOnUse\\\">\" ) ; ",
  "16554": "Color c1 = paint . getColor1 ( ) ; ",
  "16555": "if ( c1 . getAlpha ( ) < 255 ) { ",
  "16556": "double alphaPercent = c1 . getAlpha ( ) / 255.0 ; ",
  "16557": "b . append ( \"/>\" ) ; ",
  "16558": "Color c2 = paint . getColor2 ( ) ; ",
  "16559": "if ( c2 . getAlpha ( ) < 255 ) { ",
  "16560": "double alphaPercent = c2 . getAlpha ( ) / 255.0 ; ",
  "16561": "return b . append ( \"</linearGradient>\" ) . toString ( ) ; ",
  "16562": "} private String getLinearGradientElement ( String id , ",
  "16563": "LinearGradientPaint paint ) { ",
  "16564": "Point2D p1 = paint . getStartPoint ( ) ; ",
  "16565": "Point2D p2 = paint . getEndPoint ( ) ; ",
  "16566": "if ( ! paint . getCycleMethod ( ) . equals ( CycleMethod . NO_CYCLE ) ) { ",
  "16567": "String sm = paint . getCycleMethod ( ) . equals ( CycleMethod . REFLECT ) ",
  "16568": "? \"reflect\" : \"repeat\" ; ",
  "16569": "for ( int i = 0 ; i < paint . getFractions ( ) . length ; i ++ ) { ",
  "16570": "Color c = paint . getColors ( ) [ i ] ; ",
  "16571": "float fraction = paint . getFractions ( ) [ i ] ; ",
  "16572": ". append ( rgbColorStr ( c ) ) . append ( \"\\\"\" ) ; ",
  "16573": "if ( c . getAlpha ( ) < 255 ) { ",
  "16574": "} private String getRadialGradientElement ( String id , RadialGradientPaint rgp ) { ",
  "16575": "Point2D center = rgp . getCenterPoint ( ) ; ",
  "16576": "Point2D focus = rgp . getFocusPoint ( ) ; ",
  "16577": "float radius = rgp . getRadius ( ) ; ",
  "16578": "b . append ( \"fy=\\\"\" ) . append ( geomDP ( focus . getY ( ) ) ) . append ( \"\\\">\" ) ; ",
  "16579": "Color [ ] colors = rgp . getColors ( ) ; ",
  "16580": "float [ ] fractions = rgp . getFractions ( ) ; ",
  "16581": "for ( int i = 0 ; i < colors . length ; i ++ ) { ",
  "16582": "Color c = colors [ i ] ; ",
  "16583": "float f = fractions [ i ] ; ",
  "16584": "b . append ( \"stop-color=\\\"\" ) . append ( rgbColorStr ( c ) ) . append ( \"\\\"\" ) ; ",
  "16585": "return b . append ( \"</radialGradient>\" ) . toString ( ) ; ",
  "16586": "} private String getClipPathRef ( ) { ",
  "16587": "if ( this . clipRef == null ) { ",
  "16588": "this . clipRef = registerClip ( getClip ( ) ) ; ",
  "16589": "b . append ( \"clip-path=\\\"url(#\" ) . append ( this . clipRef ) . append ( \")\\\"\" ) ; ",
  "16590": "} private void setRect ( int x , int y , int width , int height ) { ",
  "16591": "if ( this . rect == null ) { ",
  "16592": "this . rect = new Rectangle2D . Double ( x , y , width , height ) ; ",
  "16593": "this . rect . setRect ( x , y , width , height ) ; ",
  "16594": "} private void setRoundRect ( int x , int y , int width , int height , int arcWidth , ",
  "16595": "int arcHeight ) { ",
  "16596": "if ( this . roundRect == null ) { ",
  "16597": "this . roundRect = new RoundRectangle2D . Double ( x , y , width , height , ",
  "16598": "arcWidth , arcHeight ) ; ",
  "16599": "this . roundRect . setRoundRect ( x , y , width , height , ",
  "16600": "} private void setArc ( int x , int y , int width , int height , int startAngle , ",
  "16601": "if ( this . arc == null ) { ",
  "16602": "this . arc = new Arc2D . Double ( x , y , width , height , startAngle , ",
  "16603": "arcAngle , Arc2D . PIE ) ; ",
  "16604": "this . arc . setArc ( x , y , width , height , startAngle , arcAngle , ",
  "16605": "Arc2D . PIE ) ; ",
  "16606": "} private void setOval ( int x , int y , int width , int height ) { ",
  "16607": "if ( this . oval == null ) { ",
  "16608": "this . oval = new Ellipse2D . Double ( x , y , width , height ) ; ",
  "16609": "this . oval . setFrame ( x , y , width , height ) ; ",
  "16610": "} private SEVERITY toSeverity ( Integer rank ) { ",
  "16611": "if ( rank <= 9 ) { ",
  "16612": "return SEVERITY . ERROR ; ",
  "16613": "if ( rank <= 14 ) { ",
  "16614": "return SEVERITY . WARN ; ",
  "16615": "return SEVERITY . INFO ; ",
  "16616": "} public static List < String > getParts ( String string , final String ... regexpList ) { ",
  "16617": "final List < String > parts = new ArrayList < > ( ) ; ",
  "16618": "for ( final String regexp : regexpList ) { ",
  "16619": "final Pattern pattern = Pattern . compile ( regexp ) ; ",
  "16620": "final Matcher matcher = pattern . matcher ( string ) ; ",
  "16621": "final boolean found = matcher . find ( ) ; ",
  "16622": "final String part = matcher . group ( 1 ) . trim ( ) ; ",
  "16623": "parts . add ( part ) ; ",
  "16624": "string = string . replaceFirst ( quote ( matcher . group ( ) ) , \"\" ) . trim ( ) ; ",
  "16625": "return parts ; ",
  "16626": "} public void addTrade ( Decimal tradeVolume , Decimal tradePrice ) { ",
  "16627": "if ( openPrice == null ) { ",
  "16628": "openPrice = tradePrice ; ",
  "16629": "closePrice = tradePrice ; ",
  "16630": "if ( maxPrice == null ) { ",
  "16631": "maxPrice = tradePrice ; ",
  "16632": "maxPrice = maxPrice . isLessThan ( tradePrice ) ? tradePrice : maxPrice ; ",
  "16633": "if ( minPrice == null ) { ",
  "16634": "minPrice = tradePrice ; ",
  "16635": "minPrice = minPrice . isGreaterThan ( tradePrice ) ? tradePrice : minPrice ; ",
  "16636": "volume = volume . plus ( tradeVolume ) ; ",
  "16637": "amount = amount . plus ( tradeVolume . multipliedBy ( tradePrice ) ) ; ",
  "16638": "trades ++ ; ",
  "16639": "} private void increaseLengthTo ( int index , int maxLength ) { ",
  "16640": "if ( highestResultIndex > - 1 ) { ",
  "16641": "int newResultsCount = Math . min ( index - highestResultIndex , maxLength ) ; ",
  "16642": "if ( newResultsCount == maxLength ) { ",
  "16643": "results . clear ( ) ; ",
  "16644": "results . addAll ( Collections . < T > nCopies ( maxLength , null ) ) ; ",
  "16645": "} else if ( newResultsCount > 0 ) { ",
  "16646": "results . addAll ( Collections . < T > nCopies ( newResultsCount , null ) ) ; ",
  "16647": "removeExceedingResults ( maxLength ) ; ",
  "16648": "results . addAll ( Collections . < T > nCopies ( Math . min ( index + 1 , maxLength ) , null ) ) ; ",
  "16649": "} private void removeExceedingResults ( int maximumResultCount ) { ",
  "16650": "int resultCount = results . size ( ) ; ",
  "16651": "if ( resultCount > maximumResultCount ) { ",
  "16652": "final int nbResultsToRemove = resultCount - maximumResultCount ; ",
  "16653": "for ( int i = 0 ; i < nbResultsToRemove ; i ++ ) { ",
  "16654": "results . remove ( 0 ) ; ",
  "16655": "} private Decimal calculateMaximumDrawdown ( TimeSeries series , CashFlow cashFlow ) { ",
  "16656": "Decimal maximumDrawdown = Decimal . ZERO ; ",
  "16657": "Decimal maxPeak = Decimal . ZERO ; ",
  "16658": "if ( ! series . isEmpty ( ) ) { ",
  "16659": "for ( int i = series . getBeginIndex ( ) ; i <= series . getEndIndex ( ) ; i ++ ) { ",
  "16660": "Decimal value = cashFlow . getValue ( i ) ; ",
  "16661": "if ( value . isGreaterThan ( maxPeak ) ) { ",
  "16662": "maxPeak = value ; ",
  "16663": "Decimal drawdown = maxPeak . minus ( value ) . dividedBy ( maxPeak ) ; ",
  "16664": "if ( drawdown . isGreaterThan ( maximumDrawdown ) ) { ",
  "16665": "maximumDrawdown = drawdown ; ",
  "16666": "return maximumDrawdown ; ",
  "16667": "} public Decimal plus ( Decimal augend ) { ",
  "16668": "if ( ( this == NaN ) || ( augend == NaN ) ) { ",
  "16669": "return new Decimal ( delegate . add ( augend . delegate , MATH_CONTEXT ) ) ; ",
  "16670": "} public Decimal minus ( Decimal subtrahend ) { ",
  "16671": "if ( ( this == NaN ) || ( subtrahend == NaN ) ) { ",
  "16672": "return new Decimal ( delegate . subtract ( subtrahend . delegate , MATH_CONTEXT ) ) ; ",
  "16673": "} public Decimal multipliedBy ( Decimal multiplicand ) { ",
  "16674": "if ( ( this == NaN ) || ( multiplicand == NaN ) ) { ",
  "16675": "return new Decimal ( delegate . multiply ( multiplicand . delegate , MATH_CONTEXT ) ) ; ",
  "16676": "} public Decimal dividedBy ( Decimal divisor ) { ",
  "16677": "if ( ( this == NaN ) || ( divisor == NaN ) || divisor . isZero ( ) ) { ",
  "16678": "return new Decimal ( delegate . divide ( divisor . delegate , MATH_CONTEXT ) ) ; ",
  "16679": "} public Decimal remainder ( Decimal divisor ) { ",
  "16680": "return new Decimal ( delegate . remainder ( divisor . delegate , MATH_CONTEXT ) ) ; ",
  "16681": "} public Decimal pow ( int n ) { ",
  "16682": "if ( this == NaN ) { ",
  "16683": "return new Decimal ( delegate . pow ( n , MATH_CONTEXT ) ) ; ",
  "16684": "} public Decimal min ( Decimal other ) { ",
  "16685": "if ( ( this == NaN ) || ( other == NaN ) ) { ",
  "16686": "return ( compareTo ( other ) <= 0 ? this : other ) ; ",
  "16687": "} public Decimal max ( Decimal other ) { ",
  "16688": "return ( compareTo ( other ) >= 0 ? this : other ) ; ",
  "16689": "} public double getTotalReturn ( ) { ",
  "16690": "Decimal totalProduct = Decimal . ONE ; ",
  "16691": "int completeTimeframes = ( getTimeSeries ( ) . getTickCount ( ) / timeFrame ) ; ",
  "16692": "for ( int i = 1 ; i <= completeTimeframes ; i ++ ) { ",
  "16693": "int index = i * timeFrame ; ",
  "16694": "Decimal currentReturn = getValue ( index ) ; ",
  "16695": "if ( currentReturn != Decimal . NaN ) { ",
  "16696": "currentReturn = currentReturn . plus ( Decimal . ONE ) ; ",
  "16697": "totalProduct = totalProduct . multipliedBy ( currentReturn ) ; ",
  "16698": "return ( Math . pow ( totalProduct . toDouble ( ) , ( 1.0 / completeTimeframes ) ) ) ; ",
  "16699": "} public static List < Integer > getSplitBeginIndexes ( TimeSeries series , Duration splitDuration ) { ",
  "16700": "ArrayList < Integer > beginIndexes = new ArrayList < > ( ) ; ",
  "16701": "int beginIndex = series . getBeginIndex ( ) ; ",
  "16702": "int endIndex = series . getEndIndex ( ) ; ",
  "16703": "beginIndexes . add ( beginIndex ) ; ",
  "16704": "ZonedDateTime beginInterval = series . getFirstTick ( ) . getEndTime ( ) ; ",
  "16705": "ZonedDateTime endInterval = beginInterval . plus ( splitDuration ) ; ",
  "16706": "for ( int i = beginIndex ; i <= endIndex ; i ++ ) { ",
  "16707": "ZonedDateTime tickTime = series . getTick ( i ) . getEndTime ( ) ; ",
  "16708": "if ( tickTime . isBefore ( beginInterval ) || ! tickTime . isBefore ( endInterval ) ) { ",
  "16709": "if ( ! endInterval . isAfter ( tickTime ) ) { ",
  "16710": "beginIndexes . add ( i ) ; ",
  "16711": "beginInterval = endInterval . isBefore ( tickTime ) ? tickTime : endInterval ; ",
  "16712": "endInterval = beginInterval . plus ( splitDuration ) ; ",
  "16713": "return beginIndexes ; ",
  "16714": "} public static TimeSeries subseries ( TimeSeries series , int beginIndex , Duration duration ) { ",
  "16715": "ZonedDateTime beginInterval = series . getTick ( beginIndex ) . getEndTime ( ) ; ",
  "16716": "ZonedDateTime endInterval = beginInterval . plus ( duration ) ; ",
  "16717": "int subseriesNbTicks = 0 ; ",
  "16718": "subseriesNbTicks ++ ; ",
  "16719": "return new BaseTimeSeries ( series , beginIndex , beginIndex + subseriesNbTicks - 1 ) ; ",
  "16720": "} public static List < TimeSeries > splitSeries ( TimeSeries series , Duration splitDuration , Duration sliceDuration ) { ",
  "16721": "ArrayList < TimeSeries > subseries = new ArrayList < > ( ) ; ",
  "16722": "if ( splitDuration != null && ! splitDuration . isZero ( ) ",
  "16723": "&& sliceDuration != null && ! sliceDuration . isZero ( ) ) { ",
  "16724": "List < Integer > beginIndexes = getSplitBeginIndexes ( series , splitDuration ) ; ",
  "16725": "for ( Integer subseriesBegin : beginIndexes ) { ",
  "16726": "subseries . add ( subseries ( series , subseriesBegin , sliceDuration ) ) ; ",
  "16727": "return subseries ; ",
  "16728": "} private void calculateRegressionLine ( int startIndex , int endIndex ) { ",
  "16729": "Decimal sumX = Decimal . ZERO ; ",
  "16730": "Decimal sumY = Decimal . ZERO ; ",
  "16731": "for ( int i = startIndex ; i <= endIndex ; i ++ ) { ",
  "16732": "sumX = sumX . plus ( Decimal . valueOf ( i ) ) ; ",
  "16733": "sumY = sumY . plus ( indicator . getValue ( i ) ) ; ",
  "16734": "Decimal nbObservations = Decimal . valueOf ( endIndex - startIndex + 1 ) ; ",
  "16735": "Decimal xBar = sumX . dividedBy ( nbObservations ) ; ",
  "16736": "Decimal yBar = sumY . dividedBy ( nbObservations ) ; ",
  "16737": "Decimal xxBar = Decimal . ZERO ; ",
  "16738": "Decimal xyBar = Decimal . ZERO ; ",
  "16739": "Decimal dX = Decimal . valueOf ( i ) . minus ( xBar ) ; ",
  "16740": "Decimal dY = indicator . getValue ( i ) . minus ( yBar ) ; ",
  "16741": "xxBar = xxBar . plus ( dX . multipliedBy ( dX ) ) ; ",
  "16742": "xyBar = xyBar . plus ( dX . multipliedBy ( dY ) ) ; ",
  "16743": "slope = xyBar . dividedBy ( xxBar ) ; ",
  "16744": "intercept = yBar . minus ( slope . multipliedBy ( xBar ) ) ; ",
  "16745": "} public Order operate ( int index , Decimal price , Decimal amount ) { ",
  "16746": "Order order = null ; ",
  "16747": "if ( isNew ( ) ) { ",
  "16748": "order = new Order ( index , startingType , price , amount ) ; ",
  "16749": "entry = order ; ",
  "16750": "} else if ( isOpened ( ) ) { ",
  "16751": "if ( index < entry . getIndex ( ) ) { ",
  "16752": "order = new Order ( index , startingType . complementType ( ) , price , amount ) ; ",
  "16753": "exit = order ; ",
  "16754": "return order ; ",
  "16755": "} private static org . jfree . data . time . TimeSeries buildChartTimeSeries ( TimeSeries tickSeries , Indicator < Decimal > indicator , String name ) { ",
  "16756": "org . jfree . data . time . TimeSeries chartTimeSeries = new org . jfree . data . time . TimeSeries ( name ) ; ",
  "16757": "for ( int i = 0 ; i < tickSeries . getTickCount ( ) ; i ++ ) { ",
  "16758": "Tick tick = tickSeries . getTick ( i ) ; ",
  "16759": "chartTimeSeries . add ( new Minute ( Date . from ( tick . getEndTime ( ) . toInstant ( ) ) ) , indicator . getValue ( i ) . toDouble ( ) ) ; ",
  "16760": "return chartTimeSeries ; ",
  "16761": "} private static void addBuySellSignals ( TimeSeries series , Strategy strategy , XYPlot plot ) { ",
  "16762": "TimeSeriesManager seriesManager = new TimeSeriesManager ( series ) ; ",
  "16763": "List < Trade > trades = seriesManager . run ( strategy ) . getTrades ( ) ; ",
  "16764": "for ( Trade trade : trades ) { ",
  "16765": "double buySignalTickTime = new Minute ( Date . from ( series . getTick ( trade . getEntry ( ) . getIndex ( ) ) . getEndTime ( ) . toInstant ( ) ) ) . getFirstMillisecond ( ) ; ",
  "16766": "Marker buyMarker = new ValueMarker ( buySignalTickTime ) ; ",
  "16767": "buyMarker . setPaint ( Color . GREEN ) ; ",
  "16768": "buyMarker . setLabel ( \"B\" ) ; ",
  "16769": "plot . addDomainMarker ( buyMarker ) ; ",
  "16770": "double sellSignalTickTime = new Minute ( Date . from ( series . getTick ( trade . getExit ( ) . getIndex ( ) ) . getEndTime ( ) . toInstant ( ) ) ) . getFirstMillisecond ( ) ; ",
  "16771": "Marker sellMarker = new ValueMarker ( sellSignalTickTime ) ; ",
  "16772": "sellMarker . setPaint ( Color . RED ) ; ",
  "16773": "sellMarker . setLabel ( \"S\" ) ; ",
  "16774": "plot . addDomainMarker ( sellMarker ) ; ",
  "16775": "} private static TimeSeries initMovingTimeSeries ( int maxTickCount ) { ",
  "16776": "TimeSeries series = CsvTradesLoader . loadBitstampSeries ( ) ; ",
  "16777": "series . setMaximumTickCount ( maxTickCount ) ; ",
  "16778": "LAST_TICK_CLOSE_PRICE = series . getTick ( series . getEndIndex ( ) ) . getClosePrice ( ) ; ",
  "16779": "} private static Decimal randDecimal ( Decimal min , Decimal max ) { ",
  "16780": "Decimal randomDecimal = null ; ",
  "16781": "if ( min != null && max != null && min . isLessThan ( max ) ) { ",
  "16782": "randomDecimal = max . minus ( min ) . multipliedBy ( Decimal . valueOf ( Math . random ( ) ) ) . plus ( min ) ; ",
  "16783": "return randomDecimal ; ",
  "16784": "} private static Tick generateRandomTick ( ) { ",
  "16785": "final Decimal maxRange = Decimal . valueOf ( \"0.03\" ) ; ",
  "16786": "Decimal openPrice = LAST_TICK_CLOSE_PRICE ; ",
  "16787": "Decimal minPrice = openPrice . minus ( openPrice . multipliedBy ( maxRange . multipliedBy ( Decimal . valueOf ( Math . random ( ) ) ) ) ) ; ",
  "16788": "Decimal maxPrice = openPrice . plus ( openPrice . multipliedBy ( maxRange . multipliedBy ( Decimal . valueOf ( Math . random ( ) ) ) ) ) ; ",
  "16789": "Decimal closePrice = randDecimal ( minPrice , maxPrice ) ; ",
  "16790": "LAST_TICK_CLOSE_PRICE = closePrice ; ",
  "16791": "return new BaseTick ( ZonedDateTime . now ( ) , openPrice , maxPrice , minPrice , closePrice , Decimal . ONE ) ; ",
  "16792": "} private double calculateProfit ( TimeSeries series , Trade trade ) { ",
  "16793": "Decimal profit = Decimal . ONE ; ",
  "16794": "if ( trade . isClosed ( ) ) { ",
  "16795": "Decimal exitClosePrice = series . getTick ( trade . getExit ( ) . getIndex ( ) ) . getClosePrice ( ) ; ",
  "16796": "Decimal entryClosePrice = series . getTick ( trade . getEntry ( ) . getIndex ( ) ) . getClosePrice ( ) ; ",
  "16797": "if ( trade . getEntry ( ) . isBuy ( ) ) { ",
  "16798": "profit = exitClosePrice . dividedBy ( entryClosePrice ) ; ",
  "16799": "profit = entryClosePrice . dividedBy ( exitClosePrice ) ; ",
  "16800": "return profit . toDouble ( ) ; ",
  "16801": "} private void incrementAcceleration ( ) { ",
  "16802": "if ( acceleration . isGreaterThanOrEqual ( ACCELERATION_THRESHOLD ) ) { ",
  "16803": "acceleration = MAX_ACCELERATION ; ",
  "16804": "acceleration = acceleration . plus ( ACCELERATION_INCREMENT ) ; ",
  "16805": "} private Decimal calculateSar ( int index ) { ",
  "16806": "Decimal previousSar = getValue ( index - 1 ) ; ",
  "16807": "return extremePoint . multipliedBy ( acceleration ) ",
  "16808": ". plus ( Decimal . ONE . minus ( acceleration ) . multipliedBy ( previousSar ) ) ; ",
  "16809": "} private void calculate ( Trade trade ) { ",
  "16810": "final int entryIndex = trade . getEntry ( ) . getIndex ( ) ; ",
  "16811": "int begin = entryIndex + 1 ; ",
  "16812": "if ( begin > values . size ( ) ) { ",
  "16813": "Decimal lastValue = values . get ( values . size ( ) - 1 ) ; ",
  "16814": "values . addAll ( Collections . nCopies ( begin - values . size ( ) , lastValue ) ) ; ",
  "16815": "int end = trade . getExit ( ) . getIndex ( ) ; ",
  "16816": "for ( int i = Math . max ( begin , 1 ) ; i <= end ; i ++ ) { ",
  "16817": "Decimal ratio ; ",
  "16818": "ratio = timeSeries . getTick ( i ) . getClosePrice ( ) . dividedBy ( timeSeries . getTick ( entryIndex ) . getClosePrice ( ) ) ; ",
  "16819": "ratio = timeSeries . getTick ( entryIndex ) . getClosePrice ( ) . dividedBy ( timeSeries . getTick ( i ) . getClosePrice ( ) ) ; ",
  "16820": "values . add ( values . get ( entryIndex ) . multipliedBy ( ratio ) ) ; ",
  "16821": "} private void fillToTheEnd ( ) { ",
  "16822": "if ( timeSeries . getEndIndex ( ) >= values . size ( ) ) { ",
  "16823": "values . addAll ( Collections . nCopies ( timeSeries . getEndIndex ( ) - values . size ( ) + 1 , lastValue ) ) ; ",
  "16824": "} private static void loadLoggerConfiguration ( ) { ",
  "16825": "LoggerContext context = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; ",
  "16826": "context . reset ( ) ; ",
  "16827": "configurator . setContext ( context ) ; ",
  "16828": "configurator . doConfigure ( LOGBACK_CONF_FILE ) ; ",
  "16829": "protected Decimal calculate ( int index ) { ",
  "16830": "if ( stopLossLimit . isNaN ( ) ) { ",
  "16831": "stopLossLimit = indicator . getValue ( 0 ) . minus ( stopLossDistance ) ; ",
  "16832": "Decimal currentValue = indicator . getValue ( index ) ; ",
  "16833": "Decimal referenceValue = stopLossLimit . plus ( stopLossDistance ) ; ",
  "16834": "if ( currentValue . isGreaterThan ( referenceValue ) ) { ",
  "16835": "stopLossLimit = currentValue . minus ( stopLossDistance ) ; ",
  "16836": "return stopLossLimit ; ",
  "16837": "} private void recordOrder ( Order order , boolean isEntry ) { ",
  "16838": "if ( order == null ) { ",
  "16839": "if ( isEntry ) { ",
  "16840": "entryOrders . add ( order ) ; ",
  "16841": "exitOrders . add ( order ) ; ",
  "16842": "orders . add ( order ) ; ",
  "16843": "if ( OrderType . BUY . equals ( order . getType ( ) ) ) { ",
  "16844": "buyOrders . add ( order ) ; ",
  "16845": "} else if ( OrderType . SELL . equals ( order . getType ( ) ) ) { ",
  "16846": "sellOrders . add ( order ) ; ",
  "16847": "if ( currentTrade . isClosed ( ) ) { ",
  "16848": "trades . add ( currentTrade ) ; ",
  "16849": "currentTrade = new Trade ( startingType ) ; ",
  "16850": "} public TradingRecord run ( Strategy strategy , OrderType orderType , int startIndex , int finishIndex ) { ",
  "16851": "return run ( strategy , orderType , Decimal . NaN , startIndex , finishIndex ) ; ",
  "16852": "} public TradingRecord run ( Strategy strategy , OrderType orderType , Decimal amount ) { ",
  "16853": "return run ( strategy , orderType , amount , timeSeries . getBeginIndex ( ) , timeSeries . getEndIndex ( ) ) ; ",
  "16854": "} public TradingRecord run ( Strategy strategy , OrderType orderType , Decimal amount , int startIndex , int finishIndex ) { ",
  "16855": "int runBeginIndex = Math . max ( startIndex , timeSeries . getBeginIndex ( ) ) ; ",
  "16856": "int runEndIndex = Math . min ( finishIndex , timeSeries . getEndIndex ( ) ) ; ",
  "16857": "TradingRecord tradingRecord = new BaseTradingRecord ( orderType ) ; ",
  "16858": "for ( int i = runBeginIndex ; i <= runEndIndex ; i ++ ) { ",
  "16859": "if ( strategy . shouldOperate ( i , tradingRecord ) ) { ",
  "16860": "tradingRecord . operate ( i , timeSeries . getTick ( i ) . getClosePrice ( ) , amount ) ; ",
  "16861": "if ( ! tradingRecord . isClosed ( ) ) { ",
  "16862": "int seriesMaxSize = Math . max ( timeSeries . getEndIndex ( ) + 1 , timeSeries . getTickData ( ) . size ( ) ) ; ",
  "16863": "for ( int i = runEndIndex + 1 ; i < seriesMaxSize ; i ++ ) { ",
  "16864": "return tradingRecord ; ",
  "16865": "} private static OHLCDataset createOHLCDataset ( TimeSeries series ) { ",
  "16866": "final int nbTicks = series . getTickCount ( ) ; ",
  "16867": "Date [ ] dates = new Date [ nbTicks ] ; ",
  "16868": "double [ ] opens = new double [ nbTicks ] ; ",
  "16869": "double [ ] highs = new double [ nbTicks ] ; ",
  "16870": "double [ ] lows = new double [ nbTicks ] ; ",
  "16871": "double [ ] closes = new double [ nbTicks ] ; ",
  "16872": "double [ ] volumes = new double [ nbTicks ] ; ",
  "16873": "for ( int i = 0 ; i < nbTicks ; i ++ ) { ",
  "16874": "Tick tick = series . getTick ( i ) ; ",
  "16875": "dates [ i ] = new Date ( tick . getEndTime ( ) . toEpochSecond ( ) * 1000 ) ; ",
  "16876": "opens [ i ] = tick . getOpenPrice ( ) . toDouble ( ) ; ",
  "16877": "highs [ i ] = tick . getMaxPrice ( ) . toDouble ( ) ; ",
  "16878": "lows [ i ] = tick . getMinPrice ( ) . toDouble ( ) ; ",
  "16879": "closes [ i ] = tick . getClosePrice ( ) . toDouble ( ) ; ",
  "16880": "volumes [ i ] = tick . getVolume ( ) . toDouble ( ) ; ",
  "16881": "OHLCDataset dataset = new DefaultHighLowDataset ( \"btc\" , dates , highs , lows , opens , closes , volumes ) ; ",
  "16882": "} private static TimeSeriesCollection createAdditionalDataset ( TimeSeries series ) { ",
  "16883": "ClosePriceIndicator indicator = new ClosePriceIndicator ( series ) ; ",
  "16884": "TimeSeriesCollection dataset = new TimeSeriesCollection ( ) ; ",
  "16885": "for ( int i = 0 ; i < series . getTickCount ( ) ; i ++ ) { ",
  "16886": "chartTimeSeries . add ( new Second ( new Date ( tick . getEndTime ( ) . toEpochSecond ( ) * 1000 ) ) , indicator . getValue ( i ) . toDouble ( ) ) ; ",
  "16887": "dataset . addSeries ( chartTimeSeries ) ; ",
  "16888": "} private static void addCashFlowAxis ( XYPlot plot , TimeSeriesCollection dataset ) { ",
  "16889": "cashAxis . setAutoRangeIncludesZero ( false ) ; ",
  "16890": "plot . setRangeAxis ( 1 , cashAxis ) ; ",
  "16891": "plot . setDataset ( 1 , dataset ) ; ",
  "16892": "plot . mapDatasetToRangeAxis ( 1 , 1 ) ; ",
  "16893": "final StandardXYItemRenderer cashFlowRenderer = new StandardXYItemRenderer ( ) ; ",
  "16894": "cashFlowRenderer . setSeriesPaint ( 0 , Color . blue ) ; ",
  "16895": "plot . setRenderer ( 1 , cashFlowRenderer ) ; ",
  "16896": "} private static void displayChart ( JFreeChart chart ) { ",
  "16897": "ChartPanel panel = new ChartPanel ( chart ) ; ",
  "16898": "panel . setFillZoomRectangle ( true ) ; ",
  "16899": "panel . setMouseWheelEnabled ( true ) ; ",
  "16900": "panel . setPreferredSize ( new Dimension ( 1024 , 400 ) ) ; ",
  "16901": "frame . setContentPane ( panel ) ; ",
  "16902": "RefineryUtilities . centerFrameOnScreen ( frame ) ; ",
  "16903": "} private void removeExceedingTicks ( ) { ",
  "16904": "int tickCount = ticks . size ( ) ; ",
  "16905": "if ( tickCount > maximumTickCount ) { ",
  "16906": "int nbTicksToRemove = tickCount - maximumTickCount ; ",
  "16907": "for ( int i = 0 ; i < nbTicksToRemove ; i ++ ) { ",
  "16908": "ticks . remove ( 0 ) ; ",
  "16909": "removedTicksCount += nbTicksToRemove ; ",
  "16910": "} private static List < Tick > buildEmptyTicks ( ZonedDateTime beginTime , ZonedDateTime endTime , int duration ) { ",
  "16911": "List < Tick > emptyTicks = new ArrayList < > ( ) ; ",
  "16912": "Duration tickDuration = Duration . ofSeconds ( duration ) ; ",
  "16913": "ZonedDateTime tickEndTime = beginTime ; ",
  "16914": "tickEndTime = tickEndTime . plus ( tickDuration ) ; ",
  "16915": "emptyTicks . add ( new BaseTick ( tickDuration , tickEndTime ) ) ; ",
  "16916": "} while ( tickEndTime . isBefore ( endTime ) ) ; ",
  "16917": "return emptyTicks ; ",
  "16918": "} private static void removeEmptyTicks ( List < Tick > ticks ) { ",
  "16919": "for ( int i = ticks . size ( ) - 1 ; i >= 0 ; i -- ) { ",
  "16920": "if ( ticks . get ( i ) . getTrades ( ) == 0 ) { ",
  "16921": "ticks . remove ( i ) ; ",
  "16922": "} final void signalEvent ( WatchEvent . Kind < Path > kind , Path context ) { ",
  "16923": "post ( new Event < > ( kind , 1 , context ) ) ; ",
  "16924": "signal ( ) ; ",
  "16925": "} public CompletableFuture < Void > watchAsync ( Executor executor ) { ",
  "16926": "return CompletableFuture . supplyAsync ( ",
  "16927": "( ) -> { ",
  "16928": "watch ( ) ; ",
  "16929": "executor ) ; ",
  "16930": "} public void watch ( ) { ",
  "16931": "if ( ! listener . isWatching ( ) ) { ",
  "16932": "key = watchService . take ( ) ; ",
  "16933": "WatchEvent . Kind < ? > kind = event . kind ( ) ; ",
  "16934": "WatchEvent < Path > ev = PathUtils . cast ( event ) ; ",
  "16935": "int count = ev . count ( ) ; ",
  "16936": "Path eventPath = ev . context ( ) ; ",
  "16937": "if ( ! keyRoots . containsKey ( key ) ) { ",
  "16938": "Path childPath = eventPath == null ? null : keyRoots . get ( key ) . resolve ( eventPath ) ; ",
  "16939": "listener . onEvent ( new DirectoryChangeEvent ( EventType . OVERFLOW , childPath , count ) ) ; ",
  "16940": "} else if ( eventPath == null ) { ",
  "16941": "} else if ( kind == ENTRY_CREATE ) { ",
  "16942": "if ( Files . isDirectory ( childPath , NOFOLLOW_LINKS ) ) { ",
  "16943": "if ( ! Boolean . TRUE . equals ( fileTreeSupported ) ) { ",
  "16944": "registerAll ( childPath ) ; ",
  "16945": "if ( ! isMac ) { ",
  "16946": "PathUtils . recursiveVisitFiles ( ",
  "16947": "childPath , ",
  "16948": "dir -> notifyCreateEvent ( dir , count ) , ",
  "16949": "file -> notifyCreateEvent ( file , count ) ) ; ",
  "16950": "notifyCreateEvent ( childPath , count ) ; ",
  "16951": "} else if ( kind == ENTRY_MODIFY ) { ",
  "16952": "if ( fileHasher != null || Files . isDirectory ( childPath ) ) { ",
  "16953": "HashCode existingHash = pathHashes . get ( childPath ) ; ",
  "16954": "HashCode newHash = PathUtils . hash ( fileHasher , childPath ) ; ",
  "16955": "if ( newHash != null && ! newHash . equals ( existingHash ) ) { ",
  "16956": "pathHashes . put ( childPath , newHash ) ; ",
  "16957": "listener . onEvent ( new DirectoryChangeEvent ( EventType . MODIFY , childPath , count ) ) ; ",
  "16958": "} else if ( newHash == null ) { ",
  "16959": "} else if ( kind == ENTRY_DELETE ) { ",
  "16960": "pathHashes . entrySet ( ) . removeIf ( e -> e . getKey ( ) . startsWith ( childPath ) ) ; ",
  "16961": "listener . onEvent ( new DirectoryChangeEvent ( EventType . DELETE , childPath , count ) ) ; ",
  "16962": "keyRoots . remove ( key ) ; ",
  "16963": "if ( keyRoots . isEmpty ( ) ) { ",
  "16964": "} private void register ( Path directory , boolean useFileTreeModifier ) throws IOException { ",
  "16965": "Watchable watchable = isMac ? new WatchablePath ( directory ) : directory ; ",
  "16966": "WatchEvent . Modifier [ ] modifiers = ",
  "16967": "useFileTreeModifier ",
  "16968": "? new WatchEvent . Modifier [ ] { ExtendedWatchEventModifier . FILE_TREE } ",
  "16969": ": new WatchEvent . Modifier [ ] { } ; ",
  "16970": "WatchEvent . Kind < ? > [ ] kinds = ",
  "16971": "new WatchEvent . Kind < ? > [ ] { ENTRY_CREATE , ENTRY_DELETE , ENTRY_MODIFY } ; ",
  "16972": "WatchKey watchKey = watchable . register ( watchService , kinds , modifiers ) ; ",
  "16973": "keyRoots . put ( watchKey , directory ) ; ",
  "16974": "} public LocalDate getCalendarServiceRangeStart ( ) { ",
  "16975": "int startDate = 0 ; ",
  "16976": "for ( Service service : feed . services . values ( ) ) { ",
  "16977": "if ( service . calendar == null ) ",
  "16978": "if ( startDate == 0 ) ",
  "16979": "DateTimeFormatter formatter = DateTimeFormatter . ofPattern ( \"yyyyMMdd\" ) ; ",
  "16980": "return LocalDate . parse ( String . valueOf ( startDate ) , formatter ) ; ",
  "16981": "} public int getDailyAverageHeadway ( LocalDate date , LocalTime from , LocalTime to ) { ",
  "16982": "OptionalDouble avg = feed . stops . values ( ) . stream ( ) ",
  "16983": ". map ( s -> this . stop . getAverageHeadwayForStop ( s . stop_id , date , from , to ) ) ",
  "16984": ". mapToDouble ( headway -> headway ) ",
  "16985": ". average ( ) ; ",
  "16986": "return ( int ) avg . getAsDouble ( ) ; ",
  "16987": "} public Rectangle2D getBounds ( ) { ",
  "16988": "Rectangle2D ret = null ; ",
  "16989": "for ( Stop stop : feed . stops . values ( ) ) { ",
  "16990": "if ( ! feed . stopCountByStopTime . containsKey ( stop . stop_id ) ) { ",
  "16991": "ret = new Rectangle2D . Double ( stop . stop_lon , stop . stop_lat , 0 , 0 ) ; ",
  "16992": "ret . add ( new Point2D . Double ( stop . stop_lon , stop . stop_lat ) ) ; ",
  "16993": "} private void checkShapeDistTraveled ( StopTime previous , StopTime current ) { ",
  "16994": "if ( ",
  "16995": "current . shape_dist_traveled != Entity . DOUBLE_MISSING && ",
  "16996": "previous . shape_dist_traveled == Entity . DOUBLE_MISSING || ",
  "16997": "current . shape_dist_traveled <= previous . shape_dist_traveled ",
  "16998": "registerError ( current , SHAPE_DIST_TRAVELED_NOT_INCREASING , current . shape_dist_traveled ) ; ",
  "16999": "} public void complete ( ValidationResult validationResult ) { ",
  "17000": "if ( ! allTravelTimesAreRounded ) storeErrors ( travelTimeZeroErrors ) ; ",
  "17001": "else registerError ( NewGTFSError . forFeed ( FEED_TRAVEL_TIMES_ROUNDED , null ) ) ; ",
  "17002": "} private boolean areTravelTimesRounded ( StopTime stopTime ) { ",
  "17003": "boolean bothTravelTimesAreRounded = stopTime . departure_time % 60 == 0 && stopTime . arrival_time % 60 == 0 ; ",
  "17004": "if ( ! bothTravelTimesAreRounded ) this . allTravelTimesAreRounded = false ; ",
  "17005": "return bothTravelTimesAreRounded ; ",
  "17006": "} private boolean checkDistanceAndTime ( double distanceMeters , double travelTimeSeconds , StopTime stopTime ) { ",
  "17007": "boolean good = true ; ",
  "17008": "if ( distanceMeters == 0 ) { ",
  "17009": "registerError ( stopTime , TRAVEL_DISTANCE_ZERO ) ; ",
  "17010": "good = false ; ",
  "17011": "if ( travelTimeSeconds < 0 ) { ",
  "17012": "registerError ( stopTime , TRAVEL_TIME_NEGATIVE , travelTimeSeconds ) ; ",
  "17013": "} else if ( travelTimeSeconds == 0 ) { ",
  "17014": "if ( ! allTravelTimesAreRounded ) registerError ( stopTime , TRAVEL_TIME_ZERO ) ; ",
  "17015": "else travelTimeZeroErrors . add ( createUnregisteredError ( stopTime , TRAVEL_TIME_ZERO ) ) ; ",
  "17016": "return good ; ",
  "17017": "public void setStatementParameters ( PreparedStatement statement , boolean setDefaultId ) throws SQLException { ",
  "17018": "int oneBasedIndex = 1 ; ",
  "17019": "if ( ! setDefaultId ) statement . setInt ( oneBasedIndex ++ , id ) ; ",
  "17020": "statement . setString ( oneBasedIndex ++ , pattern_id ) ; ",
  "17021": "statement . setString ( oneBasedIndex ++ , route_id ) ; ",
  "17022": "statement . setString ( oneBasedIndex ++ , name ) ; ",
  "17023": "setIntParameter ( statement , oneBasedIndex ++ , direction_id ) ; ",
  "17024": "setIntParameter ( statement , oneBasedIndex ++ , INT_MISSING ) ; ",
  "17025": "statement . setString ( oneBasedIndex ++ , associatedShapes . iterator ( ) . next ( ) ) ; ",
  "17026": "} public FeedLoadResult loadTables ( ) { ",
  "17027": "FeedLoadResult result = new FeedLoadResult ( ) ; ",
  "17028": "File gtfsFile = new File ( gtfsFilePath ) ; ",
  "17029": "this . zip = new ZipFile ( gtfsFilePath ) ; ",
  "17030": "this . tablePrefix = randomIdString ( ) ; ",
  "17031": "result . filename = gtfsFilePath ; ",
  "17032": "result . uniqueIdentifier = tablePrefix ; ",
  "17033": "createSchema ( connection , tablePrefix ) ; ",
  "17034": "this . errorStorage = new SQLErrorStorage ( connection , tablePrefix + \".\" , true ) ; ",
  "17035": "registerFeed ( gtfsFile ) ; ",
  "17036": "this . tablePrefix += \".\" ; ",
  "17037": "result . agency = load ( Table . AGENCY ) ; ",
  "17038": "result . calendar = load ( Table . CALENDAR ) ; ",
  "17039": "result . calendarDates = load ( Table . CALENDAR_DATES ) ; ",
  "17040": "result . routes = load ( Table . ROUTES ) ; ",
  "17041": "result . fareAttributes = load ( Table . FARE_ATTRIBUTES ) ; ",
  "17042": "result . fareRules = load ( Table . FARE_RULES ) ; ",
  "17043": "result . feedInfo = load ( Table . FEED_INFO ) ; ",
  "17044": "result . shapes = load ( Table . SHAPES ) ; ",
  "17045": "result . stops = load ( Table . STOPS ) ; ",
  "17046": "result . transfers = load ( Table . TRANSFERS ) ; ",
  "17047": "result . trips = load ( Table . TRIPS ) ; ",
  "17048": "result . frequencies = load ( Table . FREQUENCIES ) ; ",
  "17049": "result . stopTimes = load ( Table . STOP_TIMES ) ; ",
  "17050": "result . errorCount = errorStorage . getErrorCount ( ) ; ",
  "17051": "errorStorage . commitAndClose ( ) ; ",
  "17052": "zip . close ( ) ; ",
  "17053": "result . completionTime = System . currentTimeMillis ( ) ; ",
  "17054": "result . loadTimeMillis = result . completionTime - startTime ; ",
  "17055": "result . fatalException = ex . toString ( ) ; ",
  "17056": "} static void createSchema ( Connection connection , String schemaName ) { ",
  "17057": "Statement statement = connection . createStatement ( ) ; ",
  "17058": "DbUtils . closeQuietly ( connection ) ; ",
  "17059": "} private void registerFeed ( File gtfsFile ) { ",
  "17060": "CsvReader csvReader = Table . FEED_INFO . getCsvReader ( zip , errorStorage ) ; ",
  "17061": "String feedId = \"\" , feedVersion = \"\" ; ",
  "17062": "if ( csvReader != null ) { ",
  "17063": "csvReader . readRecord ( ) ; ",
  "17064": "feedId = csvReader . get ( \"feed_id\" ) ; ",
  "17065": "feedVersion = csvReader . get ( \"feed_version\" ) ; ",
  "17066": "csvReader . close ( ) ; ",
  "17067": "HashCode md5 = Files . hash ( gtfsFile , Hashing . md5 ( ) ) ; ",
  "17068": "String md5Hex = md5 . toString ( ) ; ",
  "17069": "HashCode sha1 = Files . hash ( gtfsFile , Hashing . sha1 ( ) ) ; ",
  "17070": "String shaHex = sha1 . toString ( ) ; ",
  "17071": "createFeedRegistryIfNotExists ( connection ) ; ",
  "17072": "PreparedStatement insertStatement = connection . prepareStatement ( ",
  "17073": "insertStatement . setString ( 1 , tablePrefix ) ; ",
  "17074": "insertStatement . setString ( 2 , md5Hex ) ; ",
  "17075": "insertStatement . setString ( 3 , shaHex ) ; ",
  "17076": "insertStatement . setString ( 4 , feedId . isEmpty ( ) ? null : feedId ) ; ",
  "17077": "insertStatement . setString ( 5 , feedVersion . isEmpty ( ) ? null : feedVersion ) ; ",
  "17078": "insertStatement . setString ( 6 , zip . getName ( ) ) ; ",
  "17079": "insertStatement . execute ( ) ; ",
  "17080": "connection . commit ( ) ; ",
  "17081": "} static void createFeedRegistryIfNotExists ( Connection connection ) throws SQLException { ",
  "17082": "} private TableLoadResult load ( Table table ) { ",
  "17083": "TableLoadResult tableLoadResult = new TableLoadResult ( ) ; ",
  "17084": "int initialErrorCount = errorStorage . getErrorCount ( ) ; ",
  "17085": "tableLoadResult . rowCount = loadInternal ( table ) ; ",
  "17086": "tableLoadResult . fileSize = getTableSize ( table ) ; ",
  "17087": "tableLoadResult . fatalException = ex . toString ( ) ; ",
  "17088": "connection . rollback ( ) ; ",
  "17089": "if ( tempTextFile != null ) { ",
  "17090": "tempTextFile . delete ( ) ; ",
  "17091": "int finalErrorCount = errorStorage . getErrorCount ( ) ; ",
  "17092": "tableLoadResult . errorCount = finalErrorCount - initialErrorCount ; ",
  "17093": "return tableLoadResult ; ",
  "17094": "} private int getTableSize ( Table table ) { ",
  "17095": "ZipEntry zipEntry = zip . getEntry ( table . name + \".txt\" ) ; ",
  "17096": "if ( zipEntry == null ) return 0 ; ",
  "17097": "return ( int ) zipEntry . getSize ( ) ; ",
  "17098": "} private int loadInternal ( Table table ) throws Exception { ",
  "17099": "CsvReader csvReader = table . getCsvReader ( zip , errorStorage ) ; ",
  "17100": "if ( csvReader == null ) { ",
  "17101": "if ( table . isRequired ( ) ) errorStorage . storeError ( NewGTFSError . forTable ( table , MISSING_TABLE ) ) ; ",
  "17102": "boolean postgresText = ( connection . getMetaData ( ) . getDatabaseProductName ( ) . equals ( \"PostgreSQL\" ) ) ; ",
  "17103": "Field [ ] fields = table . getFieldsFromFieldHeaders ( csvReader . getHeaders ( ) , errorStorage ) ; ",
  "17104": "int keyFieldIndex = table . getKeyFieldIndex ( fields ) ; ",
  "17105": "Field [ ] cleanFields = Arrays . stream ( fields ) . filter ( field -> field != null ) . toArray ( Field [ ] :: new ) ; ",
  "17106": "if ( cleanFields . length == 0 ) { ",
  "17107": "errorStorage . storeError ( NewGTFSError . forTable ( table , TABLE_MISSING_COLUMN_HEADERS ) ) ; ",
  "17108": "Table targetTable = new Table ( tablePrefix + table . name , table . entityClass , table . required , cleanFields ) ; ",
  "17109": "targetTable . createSqlTable ( connection ) ; ",
  "17110": "if ( postgresText ) { ",
  "17111": "tempTextFile = File . createTempFile ( targetTable . name , \"text\" ) ; ",
  "17112": "tempTextFileStream = new PrintStream ( new BufferedOutputStream ( new FileOutputStream ( tempTextFile ) ) ) ; ",
  "17113": "insertStatement = connection . prepareStatement ( targetTable . generateInsertSql ( ) ) ; ",
  "17114": "LOG . info ( insertStatement . toString ( ) ) ; ",
  "17115": "String [ ] transformedStrings = new String [ cleanFields . length + 1 ] ; ",
  "17116": "while ( csvReader . readRecord ( ) ) { ",
  "17117": "if ( csvReader . getCurrentRecord ( ) + 2 > Integer . MAX_VALUE ) { ",
  "17118": "errorStorage . storeError ( NewGTFSError . forTable ( table , TABLE_TOO_LONG ) ) ; ",
  "17119": "int lineNumber = ( ( int ) csvReader . getCurrentRecord ( ) ) + 2 ; ",
  "17120": "if ( csvReader . getColumnCount ( ) != fields . length ) { ",
  "17121": "errorStorage . storeError ( NewGTFSError . forLine ( table , lineNumber , WRONG_NUMBER_OF_FIELDS , badValues ) ) ; ",
  "17122": "String keyValue = csvReader . get ( keyFieldIndex ) ; ",
  "17123": "if ( postgresText ) transformedStrings [ 0 ] = Integer . toString ( lineNumber ) ; ",
  "17124": "else insertStatement . setInt ( 1 , lineNumber ) ; ",
  "17125": "int columnIndex = 0 ; ",
  "17126": "for ( int f = 0 ; f < fields . length ; f ++ ) { ",
  "17127": "Field field = fields [ f ] ; ",
  "17128": "if ( field == null ) continue ; ",
  "17129": "String string = csvReader . get ( f ) ; ",
  "17130": "Set < NewGTFSError > errors = referenceTracker ",
  "17131": ". checkReferencesAndUniqueness ( keyValue , lineNumber , field , string , table ) ; ",
  "17132": "table . name . equals ( \"calendar_dates\" ) && ",
  "17133": "\"service_id\" . equals ( field . name ) && ",
  "17134": "\"1\" . equals ( csvReader . get ( Field . getFieldIndex ( fields , \"exception_type\" ) ) ) ",
  "17135": "for ( NewGTFSError error : errors ) { ",
  "17136": "if ( NewGTFSErrorType . REFERENTIAL_INTEGRITY . equals ( error . errorType ) ) { ",
  "17137": "LOG . info ( ",
  "17138": "keyValue ",
  "17139": "errorStorage . storeError ( error ) ; ",
  "17140": "errorStorage . storeErrors ( errors ) ; ",
  "17141": "setValueForField ( table , columnIndex , lineNumber , field , string , postgresText , transformedStrings ) ; ",
  "17142": "columnIndex += 1 ; ",
  "17143": "tempTextFileStream . println ( String . join ( \"\\t\" , transformedStrings ) ) ; ",
  "17144": "insertStatement . addBatch ( ) ; ",
  "17145": "if ( lineNumber % INSERT_BATCH_SIZE == 0 ) insertStatement . executeBatch ( ) ; ",
  "17146": "int numberOfRecordsLoaded = ( int ) csvReader . getCurrentRecord ( ) ; ",
  "17147": "numberOfRecordsLoaded = numberOfRecordsLoaded + 1 ; ",
  "17148": "if ( table . isRequired ( ) && numberOfRecordsLoaded == 0 ) { ",
  "17149": "errorStorage . storeError ( NewGTFSError . forTable ( table , REQUIRED_TABLE_EMPTY ) ) ; ",
  "17150": "tempTextFileStream . close ( ) ; ",
  "17151": "copyFromFile ( connection , tempTextFile , targetTable . name ) ; ",
  "17152": "insertStatement . executeBatch ( ) ; ",
  "17153": "table . createIndexes ( connection , tablePrefix ) ; ",
  "17154": "LOG . info ( \"Done.\" ) ; ",
  "17155": "return numberOfRecordsLoaded ; ",
  "17156": "} public static void copyFromFile ( Connection connection , File file , String targetTableName ) throws IOException , SQLException { ",
  "17157": "InputStream stream = new BufferedInputStream ( new FileInputStream ( file . getAbsolutePath ( ) ) ) ; ",
  "17158": "CopyManager copyManager = new CopyManager ( connection . unwrap ( BaseConnection . class ) ) ; ",
  "17159": "copyManager . copyIn ( copySql , stream , 1024 * 1024 ) ; ",
  "17160": "} public void setValueForField ( Table table , int fieldIndex , int lineNumber , Field field , String string , boolean postgresText , String [ ] transformedStrings ) { ",
  "17161": "if ( string . isEmpty ( ) ) { ",
  "17162": "if ( field . isRequired ( ) && ! field . isEmptyValuePermitted ( ) && errorStorage != null ) { ",
  "17163": "errorStorage . storeError ( NewGTFSError . forLine ( table , lineNumber , MISSING_FIELD , field . name ) ) ; ",
  "17164": "setFieldToNull ( postgresText , transformedStrings , fieldIndex , field ) ; ",
  "17165": "Set < NewGTFSError > errors ; ",
  "17166": "ValidateFieldResult < String > result = field . validateAndConvert ( string ) ; ",
  "17167": "if ( result . clean == null ) setFieldToNull ( postgresText , transformedStrings , fieldIndex , field ) ; ",
  "17168": "else transformedStrings [ fieldIndex + 1 ] = result . clean ; ",
  "17169": "errors = result . errors ; ",
  "17170": "errors = field . setParameter ( insertStatement , fieldIndex + 2 , string ) ; ",
  "17171": "error . entityType = table . getEntityClass ( ) ; ",
  "17172": "error . lineNumber = lineNumber ; ",
  "17173": "if ( errorStorage != null ) errorStorage . storeError ( error ) ; ",
  "17174": "} catch ( StorageException ex ) { ",
  "17175": "if ( errorStorage != null ) { ",
  "17176": "errorStorage . storeError ( NewGTFSError . forLine ( table , lineNumber , ex . errorType , ex . badValue ) ) ; ",
  "17177": "} private void setFieldToNull ( boolean postgresText , String [ ] transformedStrings , int fieldIndex , Field field ) { ",
  "17178": "if ( postgresText ) transformedStrings [ fieldIndex + 1 ] = POSTGRES_NULL_TEXT ; ",
  "17179": "else try { ",
  "17180": "field . setNull ( insertStatement , fieldIndex + 2 ) ; ",
  "17181": "} public static String sanitize ( String string , SQLErrorStorage errorStorage ) { ",
  "17182": "String clean = string . replaceAll ( \"[^\\\\p{Alnum}_]\" , \"\" ) ; ",
  "17183": "if ( ! clean . equals ( string ) ) { ",
  "17184": "if ( errorStorage != null ) errorStorage . storeError ( NewGTFSError . forFeed ( COLUMN_NAME_UNSAFE , string ) ) ; ",
  "17185": "return clean ; ",
  "17186": "statement . setString ( oneBasedIndex ++ , fare_id ) ; ",
  "17187": "statement . setString ( oneBasedIndex ++ , origin_id ) ; ",
  "17188": "statement . setString ( oneBasedIndex ++ , destination_id ) ; ",
  "17189": "statement . setString ( oneBasedIndex ++ , contains_id ) ; ",
  "17190": "} public SnapshotResult copyTables ( ) { ",
  "17191": "SnapshotResult result = new SnapshotResult ( ) ; ",
  "17192": "registerSnapshot ( ) ; ",
  "17193": "result . agency = copy ( Table . AGENCY , true ) ; ",
  "17194": "result . calendar = copy ( Table . CALENDAR , true ) ; ",
  "17195": "result . calendarDates = copy ( Table . CALENDAR_DATES , true ) ; ",
  "17196": "result . fareAttributes = copy ( Table . FARE_ATTRIBUTES , true ) ; ",
  "17197": "result . fareRules = copy ( Table . FARE_RULES , true ) ; ",
  "17198": "result . feedInfo = copy ( Table . FEED_INFO , true ) ; ",
  "17199": "result . frequencies = copy ( Table . FREQUENCIES , true ) ; ",
  "17200": "result . routes = copy ( Table . ROUTES , true ) ; ",
  "17201": "copy ( Table . PATTERNS , true ) ; ",
  "17202": "copy ( Table . PATTERN_STOP , true ) ; ",
  "17203": "result . scheduleExceptions = createScheduleExceptionsTable ( ) ; ",
  "17204": "result . shapes = copy ( Table . SHAPES , true ) ; ",
  "17205": "result . stops = copy ( Table . STOPS , true ) ; ",
  "17206": "result . stopTimes = copy ( Table . STOP_TIMES , true ) ; ",
  "17207": "result . transfers = copy ( Table . TRANSFERS , true ) ; ",
  "17208": "result . trips = copy ( Table . TRIPS , true ) ; ",
  "17209": "} private TableLoadResult copy ( Table table , boolean createIndexes ) { ",
  "17210": "Table targetTable = new Table ( tablePrefix + table . name , table . entityClass , table . required , table . fields ) ; ",
  "17211": "boolean success ; ",
  "17212": "if ( feedIdToSnapshot == null ) { ",
  "17213": "success = targetTable . createSqlTable ( connection , true ) ; ",
  "17214": "String fromTableName = String . format ( \"%s.%s\" , feedIdToSnapshot , table . name ) ; ",
  "17215": "success = targetTable . createSqlTableFrom ( connection , fromTableName ) ; ",
  "17216": "if ( success && createIndexes ) { ",
  "17217": "addEditorSpecificFields ( connection , tablePrefix , table ) ; ",
  "17218": "populateDefaultEditorValues ( connection , tablePrefix , table ) ; ",
  "17219": "} private TableLoadResult createScheduleExceptionsTable ( ) { ",
  "17220": "boolean scheduleExceptionsTableExists = tableExists ( feedIdToSnapshot , \"schedule_exceptions\" ) ; ",
  "17221": "String scheduleExceptionsTableName = tablePrefix + \"schedule_exceptions\" ; ",
  "17222": "if ( scheduleExceptionsTableExists ) { ",
  "17223": "return copy ( Table . SCHEDULE_EXCEPTIONS , true ) ; ",
  "17224": "Table . SCHEDULE_EXCEPTIONS . createSqlTable ( ",
  "17225": "connection , ",
  "17226": "tablePrefix . replace ( \".\" , \"\" ) , ",
  "17227": "true ",
  "17228": "String sql = String . format ( ",
  "17229": "scheduleExceptionsTableName ",
  "17230": "PreparedStatement scheduleExceptionsStatement = connection . prepareStatement ( sql ) ; ",
  "17231": "final BatchTracker scheduleExceptionsTracker = new BatchTracker ( ",
  "17232": "\"schedule_exceptions\" , ",
  "17233": "scheduleExceptionsStatement ",
  "17234": "JDBCTableReader < CalendarDate > calendarDatesReader = new JDBCTableReader ( ",
  "17235": "Table . CALENDAR_DATES , ",
  "17236": "dataSource , ",
  "17237": "feedIdToSnapshot + \".\" , ",
  "17238": "EntityPopulator . CALENDAR_DATE ",
  "17239": "Iterable < CalendarDate > calendarDates = calendarDatesReader . getAll ( ) ; ",
  "17240": "Map < String , Calendar > calendarsByServiceId = new HashMap < > ( ) ; ",
  "17241": "Multimap < String , String > removedServiceForDate = HashMultimap . create ( ) ; ",
  "17242": "Multimap < String , String > addedServiceForDate = HashMultimap . create ( ) ; ",
  "17243": "for ( CalendarDate calendarDate : calendarDates ) { ",
  "17244": "if ( calendarDate . date == null ) { ",
  "17245": "String date = calendarDate . date . format ( DateTimeFormatter . BASIC_ISO_DATE ) ; ",
  "17246": "if ( calendarDate . exception_type == 1 ) { ",
  "17247": "addedServiceForDate . put ( date , calendarDate . service_id ) ; ",
  "17248": "Calendar calendar = calendarsByServiceId . getOrDefault ( calendarDate . service_id , new Calendar ( ) ) ; ",
  "17249": "calendar . service_id = calendarDate . service_id ; ",
  "17250": "if ( calendar . start_date == null || calendar . start_date . isAfter ( calendarDate . date ) ) { ",
  "17251": "calendar . start_date = calendarDate . date ; ",
  "17252": "if ( calendar . end_date == null || calendar . end_date . isBefore ( calendarDate . date ) ) { ",
  "17253": "calendar . end_date = calendarDate . date ; ",
  "17254": "calendarsByServiceId . put ( calendarDate . service_id , calendar ) ; ",
  "17255": "removedServiceForDate . put ( date , calendarDate . service_id ) ; ",
  "17256": "for ( String date : Sets . union ( removedServiceForDate . keySet ( ) , addedServiceForDate . keySet ( ) ) ) { ",
  "17257": "scheduleExceptionsStatement . setString ( 1 , date ) ; ",
  "17258": "String [ ] dates = { date } ; ",
  "17259": "scheduleExceptionsStatement . setArray ( 2 , connection . createArrayOf ( \"text\" , dates ) ) ; ",
  "17260": "scheduleExceptionsStatement . setInt ( 3 , 9 ) ; ",
  "17261": "scheduleExceptionsStatement . setArray ( ",
  "17262": "4 , ",
  "17263": "connection . createArrayOf ( \"text\" , addedServiceForDate . get ( date ) . toArray ( ) ) ",
  "17264": "5 , ",
  "17265": "connection . createArrayOf ( \"text\" , removedServiceForDate . get ( date ) . toArray ( ) ) ",
  "17266": "scheduleExceptionsTracker . addBatch ( ) ; ",
  "17267": "scheduleExceptionsTracker . executeRemaining ( ) ; ",
  "17268": "feedIdToSnapshot != null && ",
  "17269": "! tableExists ( feedIdToSnapshot , \"calendar\" ) && ",
  "17270": "calendarDatesReader . getRowCount ( ) > 0 ",
  "17271": "sql = String . format ( ",
  "17272": "tablePrefix + \"calendar\" ",
  "17273": "PreparedStatement calendarStatement = connection . prepareStatement ( sql ) ; ",
  "17274": "final BatchTracker calendarsTracker = new BatchTracker ( ",
  "17275": "\"calendar\" , ",
  "17276": "calendarStatement ",
  "17277": "for ( Calendar calendar : calendarsByServiceId . values ( ) ) { ",
  "17278": "calendarStatement . setString ( 1 , calendar . service_id ) ; ",
  "17279": "calendarStatement . setString ( ",
  "17280": "2 , ",
  "17281": "3 , ",
  "17282": "calendar . start_date . format ( DateTimeFormatter . BASIC_ISO_DATE ) ",
  "17283": "calendar . end_date . format ( DateTimeFormatter . BASIC_ISO_DATE ) ",
  "17284": "calendarsTracker . addBatch ( ) ; ",
  "17285": "calendarsTracker . executeRemaining ( ) ; ",
  "17286": "tableLoadResult . fatalException = e . toString ( ) ; ",
  "17287": "} catch ( SQLException ex ) { ",
  "17288": "} private boolean tableExists ( String namespace , String tableName ) { ",
  "17289": "if ( namespace == null || tableName == null ) return false ; ",
  "17290": "PreparedStatement tableExistsStatement = connection . prepareStatement ( ",
  "17291": "tableExistsStatement . setString ( 1 , namespace ) ; ",
  "17292": "tableExistsStatement . setString ( 2 , tableName ) ; ",
  "17293": "ResultSet resultSet = tableExistsStatement . executeQuery ( ) ; ",
  "17294": "resultSet . next ( ) ; ",
  "17295": "return resultSet . getBoolean ( 1 ) ; ",
  "17296": "} private void addEditorSpecificFields ( Connection connection , String tablePrefix , Table table ) throws SQLException { ",
  "17297": "for ( Field field : table . editorFields ( ) ) { ",
  "17298": "tablePrefix + table . name , ",
  "17299": "field . name , ",
  "17300": "field . getSqlTypeName ( ) ) ; ",
  "17301": "LOG . info ( addColumnSql ) ; ",
  "17302": "statement . execute ( addColumnSql ) ; ",
  "17303": "} private void populateDefaultEditorValues ( Connection connection , String tablePrefix , Table table ) throws SQLException { ",
  "17304": "if ( Table . ROUTES . name . equals ( table . name ) ) { ",
  "17305": "String updateStatusSql = String . format ( ",
  "17306": "tablePrefix ) ; ",
  "17307": "int updatedRoutes = statement . executeUpdate ( updateStatusSql ) ; ",
  "17308": "if ( Table . CALENDAR . name . equals ( table . name ) ) { ",
  "17309": "String [ ] daysOfWeek = new String [ ] { \"monday\" , \"tuesday\" , \"wednesday\" , \"thursday\" , \"friday\" , \"saturday\" , \"sunday\" } ; ",
  "17310": "Arrays . stream ( daysOfWeek ) ",
  "17311": ". map ( d -> String . format ( ",
  "17312": "d , ",
  "17313": "d . substring ( 0 , 1 ) . toUpperCase ( ) + d . substring ( 1 , 2 ) ) ) . toArray ( String [ ] :: new ) ) ; ",
  "17314": "String updateOtherSql = String . format ( ",
  "17315": "tablePrefix , ",
  "17316": "concatenatedDaysOfWeek ) ; ",
  "17317": "LOG . info ( updateOtherSql ) ; ",
  "17318": "int calendarsUpdated = statement . executeUpdate ( updateOtherSql ) ; ",
  "17319": "if ( Table . TRIPS . name . equals ( table . name ) ) { ",
  "17320": "String updatePatternsSql = String . format ( ",
  "17321": "LOG . info ( updatePatternsSql ) ; ",
  "17322": "int patternsUpdated = statement . executeUpdate ( updatePatternsSql ) ; ",
  "17323": "} private void registerSnapshot ( ) { ",
  "17324": "insertStatement . setString ( 2 , feedIdToSnapshot ) ; ",
  "17325": "DateField startDateField = ( DateField ) Table . CALENDAR . getFieldForName ( \"start_date\" ) ; ",
  "17326": "DateField endDateField = ( ( DateField ) Table . CALENDAR . getFieldForName ( \"end_date\" ) ) ; ",
  "17327": "statement . setString ( oneBasedIndex ++ , service_id ) ; ",
  "17328": "setIntParameter ( statement , oneBasedIndex ++ , monday ) ; ",
  "17329": "setIntParameter ( statement , oneBasedIndex ++ , tuesday ) ; ",
  "17330": "setIntParameter ( statement , oneBasedIndex ++ , wednesday ) ; ",
  "17331": "setIntParameter ( statement , oneBasedIndex ++ , thursday ) ; ",
  "17332": "setIntParameter ( statement , oneBasedIndex ++ , friday ) ; ",
  "17333": "setIntParameter ( statement , oneBasedIndex ++ , saturday ) ; ",
  "17334": "setIntParameter ( statement , oneBasedIndex ++ , sunday ) ; ",
  "17335": "startDateField . setParameter ( statement , oneBasedIndex ++ , start_date ) ; ",
  "17336": "endDateField . setParameter ( statement , oneBasedIndex ++ , end_date ) ; ",
  "17337": "statement . setString ( oneBasedIndex ++ , null ) ; ",
  "17338": "} public String getId ( ) { ",
  "17339": "sb . append ( trip_id ) ; ",
  "17340": "sb . append ( '_' ) ; ",
  "17341": "sb . append ( convertToGtfsTime ( start_time ) ) ; ",
  "17342": "sb . append ( \"_to_\" ) ; ",
  "17343": "sb . append ( convertToGtfsTime ( end_time ) ) ; ",
  "17344": "sb . append ( \"_every_\" ) ; ",
  "17345": "sb . append ( String . format ( \"%dm%02ds\" , headway_secs / 60 , headway_secs % 60 ) ) ; ",
  "17346": "if ( exact_times == 1 ) sb . append ( \"_exact\" ) ; ",
  "17347": "statement . setString ( oneBasedIndex ++ , trip_id ) ; ",
  "17348": "setIntParameter ( statement , oneBasedIndex ++ , start_time ) ; ",
  "17349": "setIntParameter ( statement , oneBasedIndex ++ , end_time ) ; ",
  "17350": "setIntParameter ( statement , oneBasedIndex ++ , headway_secs ) ; ",
  "17351": "setIntParameter ( statement , oneBasedIndex ++ , exact_times ) ; ",
  "17352": "} public int executeRemaining ( ) throws SQLException { ",
  "17353": "if ( currentBatchSize > 0 ) { ",
  "17354": "totalRecordsProcessed += currentBatchSize ; ",
  "17355": "preparedStatement . executeBatch ( ) ; ",
  "17356": "currentBatchSize = 0 ; ",
  "17357": "preparedStatement = null ; ",
  "17358": "return totalRecordsProcessed ; ",
  "17359": "} public static BooleanAsciiGrid forEarthPopulation ( ) { ",
  "17360": "InputStream gridStream = BooleanAsciiGrid . class . getResourceAsStream ( \"gpwv3-quarter-boolean.asc\" ) ; ",
  "17361": "return new BooleanAsciiGrid ( gridStream , false ) ; ",
  "17362": "} private void validateBlocks ( ) { ",
  "17363": "for ( String blockId : blockIntervals . keySet ( ) ) { ",
  "17364": "List < BlockInterval > intervals = blockIntervals . get ( blockId ) ; ",
  "17365": "intervals . sort ( Comparator . comparingInt ( i -> i . startTime ) ) ; ",
  "17366": "for ( int n = 0 ; n < intervals . size ( ) - 1 ; n ++ ) { ",
  "17367": "BlockInterval interval1 = intervals . get ( n ) ; ",
  "17368": "for ( BlockInterval interval2 : intervals . subList ( n + 1 , intervals . size ( ) ) ) { ",
  "17369": "if ( interval1 . lastStop . departure_time <= interval2 . firstStop . arrival_time || interval2 . lastStop . departure_time <= interval1 . firstStop . arrival_time ) { ",
  "17370": "if ( interval1 . trip . service_id . equals ( interval2 . trip . service_id ) ) { ",
  "17371": "registerError ( interval1 . trip , TRIP_OVERLAP_IN_BLOCK , interval2 . trip . trip_id ) ; ",
  "17372": "ServiceValidator . ServiceInfo info1 = serviceInfoForServiceId . get ( interval1 . trip . service_id ) ; ",
  "17373": "ServiceValidator . ServiceInfo info2 = serviceInfoForServiceId . get ( interval2 . trip . service_id ) ; ",
  "17374": "Set < LocalDate > overlappingDates = new HashSet < > ( info1 . datesActive ) ; ",
  "17375": "overlappingDates . retainAll ( info2 . datesActive ) ; ",
  "17376": "if ( overlappingDates . size ( ) > 0 ) { ",
  "17377": "} public FeedLoadResult exportTables ( ) { ",
  "17378": "zipOutputStream = new ZipOutputStream ( new FileOutputStream ( outFile ) ) ; ",
  "17379": "if ( ! connection . getMetaData ( ) . getDatabaseProductName ( ) . equals ( \"PostgreSQL\" ) ) { ",
  "17380": "result . agency = export ( Table . AGENCY , connection ) ; ",
  "17381": "if ( fromEditor ) { ",
  "17382": "result . calendar = export ( ",
  "17383": "Table . CALENDAR , ",
  "17384": "String . join ( ",
  "17385": "Table . CALENDAR . generateSelectSql ( feedIdToExport , Requirement . OPTIONAL ) , ",
  "17386": "result . calendar = export ( Table . CALENDAR , connection ) ; ",
  "17387": "GTFSFeed feed = new GTFSFeed ( ) ; ",
  "17388": "JDBCTableReader < ScheduleException > exceptionsReader = ",
  "17389": "new JDBCTableReader ( Table . SCHEDULE_EXCEPTIONS , dataSource , feedIdToExport + \".\" , ",
  "17390": "EntityPopulator . SCHEDULE_EXCEPTION ) ; ",
  "17391": "JDBCTableReader < Calendar > calendarsReader = ",
  "17392": "new JDBCTableReader ( Table . CALENDAR , dataSource , feedIdToExport + \".\" , ",
  "17393": "EntityPopulator . CALENDAR ) ; ",
  "17394": "Iterable < Calendar > calendars = calendarsReader . getAll ( ) ; ",
  "17395": "Iterable < ScheduleException > exceptionsIterator = exceptionsReader . getAll ( ) ; ",
  "17396": "List < ScheduleException > exceptions = new ArrayList < > ( ) ; ",
  "17397": "for ( ScheduleException exception : exceptionsIterator ) { ",
  "17398": "exceptions . add ( exception ) ; ",
  "17399": "if ( calendarsReader . getRowCount ( ) > 0 ) { ",
  "17400": "int calendarDateCount = 0 ; ",
  "17401": "for ( Calendar cal : calendars ) { ",
  "17402": "Service service = new Service ( cal . service_id ) ; ",
  "17403": "service . calendar = cal ; ",
  "17404": "for ( ScheduleException ex : exceptions ) { ",
  "17405": "if ( ex . exemplar . equals ( ScheduleException . ExemplarServiceDescriptor . SWAP ) && ",
  "17406": "( ! ex . addedService . contains ( cal . service_id ) && ! ex . removedService . contains ( cal . service_id ) ) ) { ",
  "17407": "for ( LocalDate date : ex . dates ) { ",
  "17408": "if ( date . isBefore ( cal . start_date ) || date . isAfter ( cal . end_date ) ) { ",
  "17409": "CalendarDate calendarDate = new CalendarDate ( ) ; ",
  "17410": "calendarDate . date = date ; ",
  "17411": "calendarDate . service_id = cal . service_id ; ",
  "17412": "calendarDate . exception_type = ex . serviceRunsOn ( cal ) ? 1 : 2 ; ",
  "17413": "if ( service . calendar_dates . containsKey ( date ) ) ",
  "17414": "service . calendar_dates . put ( date , calendarDate ) ; ",
  "17415": "calendarDateCount += 1 ; ",
  "17416": "feed . services . put ( cal . service_id , service ) ; ",
  "17417": "if ( calendarDateCount == 0 ) { ",
  "17418": "new CalendarDate . Writer ( feed ) . writeTable ( zipOutputStream ) ; ",
  "17419": "result . calendarDates = export ( Table . CALENDAR_DATES , connection ) ; ",
  "17420": "result . fareAttributes = export ( Table . FARE_ATTRIBUTES , connection ) ; ",
  "17421": "result . fareRules = export ( Table . FARE_RULES , connection ) ; ",
  "17422": "result . feedInfo = export ( Table . FEED_INFO , connection ) ; ",
  "17423": "result . frequencies = export ( ",
  "17424": "Table . FREQUENCIES , ",
  "17425": "Table . FREQUENCIES . generateSelectSql ( feedIdToExport , Requirement . OPTIONAL ) , ",
  "17426": "Table . FREQUENCIES . generateJoinSql ( Table . TRIPS , feedIdToExport ) , ",
  "17427": "Table . TRIPS . generateJoinSql ( ",
  "17428": "Table . ROUTES , ",
  "17429": "feedIdToExport , ",
  "17430": "\"route_id\" , ",
  "17431": ") , ",
  "17432": "whereRouteIsApproved ",
  "17433": "result . frequencies = export ( Table . FREQUENCIES , connection ) ; ",
  "17434": "result . routes = export ( ",
  "17435": "Table . ROUTES . generateSelectSql ( feedIdToExport , Requirement . OPTIONAL ) , ",
  "17436": "result . routes = export ( Table . ROUTES , connection ) ; ",
  "17437": "String shapeFieldsToExport = Table . commaSeparatedNames ( ",
  "17438": "Table . SHAPES . specFields ( ) , ",
  "17439": "String . join ( \".\" , feedIdToExport , Table . SHAPES . name + \".\" ) , ",
  "17440": "result . shapes = export ( ",
  "17441": "Table . SHAPES , ",
  "17442": "shapeFieldsToExport , ",
  "17443": "feedIdToExport ",
  "17444": "result . shapes = export ( Table . SHAPES , connection ) ; ",
  "17445": "result . stops = export ( Table . STOPS , connection ) ; ",
  "17446": "result . stopTimes = export ( ",
  "17447": "Table . STOP_TIMES , ",
  "17448": "Table . STOP_TIMES . generateSelectSql ( feedIdToExport , Requirement . OPTIONAL ) , ",
  "17449": "Table . STOP_TIMES . generateJoinSql ( Table . TRIPS , feedIdToExport ) , ",
  "17450": "result . stopTimes = export ( Table . STOP_TIMES , connection ) ; ",
  "17451": "result . transfers = export ( Table . TRANSFERS , connection ) ; ",
  "17452": "result . trips = export ( ",
  "17453": "Table . TRIPS , ",
  "17454": "Table . TRIPS . generateSelectSql ( feedIdToExport , Requirement . OPTIONAL ) , ",
  "17455": "result . trips = export ( Table . TRIPS , connection ) ; ",
  "17456": "zipOutputStream . close ( ) ; ",
  "17457": "cleanUpZipFile ( ) ; ",
  "17458": "} private void cleanUpZipFile ( ) { ",
  "17459": "Map < String , String > zip_properties = new HashMap < > ( ) ; ",
  "17460": "zip_properties . put ( \"create\" , \"false\" ) ; ",
  "17461": "URI zip_disk = URI . create ( \"jar:\" + new File ( outFile ) . toURI ( ) ) ; ",
  "17462": "try ( FileSystem fileSystem = FileSystems . newFileSystem ( zip_disk , zip_properties ) ) { ",
  "17463": "for ( String fileName : emptyTableList ) { ",
  "17464": "Path filePath = fileSystem . getPath ( fileName ) ; ",
  "17465": "Files . delete ( filePath ) ; ",
  "17466": "} private TableLoadResult export ( Table table , String filterSql ) { ",
  "17467": "if ( filterSql == null ) { ",
  "17468": "filterSql = String . format ( \"(%s)\" , filterSql ) ; ",
  "17469": "String textFileName = table . name + \".txt\" ; ",
  "17470": "ZipEntry zipEntry = new ZipEntry ( textFileName ) ; ",
  "17471": "zipOutputStream . putNextEntry ( zipEntry ) ; ",
  "17472": "OutputStream protectedOut = new FilterOutputStream ( zipOutputStream ) ; ",
  "17473": "LOG . info ( copySql ) ; ",
  "17474": "tableLoadResult . rowCount = ( int ) copyManager . copyOut ( copySql , protectedOut ) ; ",
  "17475": "if ( tableLoadResult . rowCount == 0 ) { ",
  "17476": "emptyTableList . add ( textFileName ) ; ",
  "17477": "zipOutputStream . closeEntry ( ) ; ",
  "17478": "} catch ( SQLException | IOException | IllegalArgumentException e ) { ",
  "17479": "statement . setString ( oneBasedIndex ++ , trip_headsign ) ; ",
  "17480": "statement . setString ( oneBasedIndex ++ , trip_short_name ) ; ",
  "17481": "statement . setString ( oneBasedIndex ++ , block_id ) ; ",
  "17482": "statement . setString ( oneBasedIndex ++ , shape_id ) ; ",
  "17483": "setIntParameter ( statement , oneBasedIndex ++ , wheelchair_accessible ) ; ",
  "17484": "setIntParameter ( statement , oneBasedIndex ++ , bikes_allowed ) ; ",
  "17485": "setIntParameter ( statement , oneBasedIndex ++ , shape_pt_sequence ) ; ",
  "17486": "statement . setDouble ( oneBasedIndex ++ , shape_pt_lat ) ; ",
  "17487": "statement . setDouble ( oneBasedIndex ++ , shape_pt_lon ) ; ",
  "17488": "statement . setDouble ( oneBasedIndex ++ , shape_dist_traveled ) ; ",
  "17489": "statement . setInt ( oneBasedIndex ++ , 0 ) ; ",
  "17490": "} public void registerError ( Entity entity , NewGTFSErrorType errorType ) { ",
  "17491": "errorStorage . storeError ( NewGTFSError . forEntity ( entity , errorType ) ) ; ",
  "17492": "} NewGTFSError createUnregisteredError ( Entity entity , NewGTFSErrorType errorType ) { ",
  "17493": "return NewGTFSError . forEntity ( entity , errorType ) ; ",
  "17494": "} public void registerError ( Entity entity , NewGTFSErrorType errorType , Object badValue ) { ",
  "17495": "errorStorage . storeError ( NewGTFSError . forEntity ( entity , errorType ) . setBadValue ( badValue . toString ( ) ) ) ; ",
  "17496": "} public static FeedLoadResult export ( String feedId , String outFile , DataSource dataSource , boolean fromEditor ) { ",
  "17497": "JdbcGtfsExporter exporter = new JdbcGtfsExporter ( feedId , outFile , dataSource , fromEditor ) ; ",
  "17498": "FeedLoadResult result = exporter . exportTables ( ) ; ",
  "17499": "} public static FeedLoadResult load ( String filePath , DataSource dataSource ) { ",
  "17500": "JdbcGtfsLoader loader = new JdbcGtfsLoader ( filePath , dataSource ) ; ",
  "17501": "FeedLoadResult result = loader . loadTables ( ) ; ",
  "17502": "} public static SnapshotResult makeSnapshot ( String feedId , DataSource dataSource ) { ",
  "17503": "JdbcGtfsSnapshotter snapshotter = new JdbcGtfsSnapshotter ( feedId , dataSource ) ; ",
  "17504": "SnapshotResult result = snapshotter . copyTables ( ) ; ",
  "17505": "} public static ValidationResult validate ( String feedId , DataSource dataSource ) { ",
  "17506": "Feed feed = new Feed ( dataSource , feedId ) ; ",
  "17507": "ValidationResult result = feed . validate ( ) ; ",
  "17508": "} public static void delete ( String feedId , DataSource dataSource ) throws SQLException , InvalidNamespaceException { ",
  "17509": "ensureValidNamespace ( feedId ) ; ",
  "17510": "PreparedStatement deleteFeedStatement = connection . prepareStatement ( deleteFeedEntrySql ) ; ",
  "17511": "deleteFeedStatement . setString ( 1 , feedId ) ; ",
  "17512": "deleteFeedStatement . executeUpdate ( ) ; ",
  "17513": "statement . executeUpdate ( dropSchemaSql ) ; ",
  "17514": "} catch ( InvalidNamespaceException | SQLException e ) { ",
  "17515": "if ( connection != null ) DbUtils . closeQuietly ( connection ) ; ",
  "17516": "} public static DataSource createDataSource ( String url , String username , String password ) { ",
  "17517": "String characterEncoding = Charset . defaultCharset ( ) . toString ( ) ; ",
  "17518": "if ( ! Charset . defaultCharset ( ) . equals ( StandardCharsets . UTF_8 ) ) { ",
  "17519": "ConnectionFactory connectionFactory = new DriverManagerConnectionFactory ( url , username , password ) ; ",
  "17520": "PoolableConnectionFactory poolableConnectionFactory = new PoolableConnectionFactory ( connectionFactory , null ) ; ",
  "17521": "GenericObjectPool connectionPool = new GenericObjectPool ( poolableConnectionFactory ) ; ",
  "17522": "connectionPool . setMaxTotal ( 300 ) ; ",
  "17523": "connectionPool . setMaxIdle ( 4 ) ; ",
  "17524": "connectionPool . setMinIdle ( 2 ) ; ",
  "17525": "poolableConnectionFactory . setPool ( connectionPool ) ; ",
  "17526": "poolableConnectionFactory . setDefaultAutoCommit ( false ) ; ",
  "17527": "return new PoolingDataSource ( connectionPool ) ; ",
  "17528": "Options options = getOptions ( ) ; ",
  "17529": "CommandLine cmd ; ",
  "17530": "cmd = new DefaultParser ( ) . parse ( options , args ) ; ",
  "17531": "printHelp ( options ) ; ",
  "17532": "if ( cmd . hasOption ( \"help\" ) ) { ",
  "17533": "if ( ! cmd . getArgList ( ) . isEmpty ( ) ) { ",
  "17534": "if ( ! ( cmd . hasOption ( \"export\" ) || cmd . hasOption ( \"snapshot\" ) || cmd . hasOption ( \"load\" ) || cmd . hasOption ( \"validate\" ) || cmd . hasOption ( \"delete\" ) ) ) { ",
  "17535": "boolean storeResults = cmd . hasOption ( \"json\" ) ; ",
  "17536": "ObjectMapper mapper = null ; ",
  "17537": "File directory = null ; ",
  "17538": "if ( storeResults ) { ",
  "17539": "mapper = new ObjectMapper ( ) ; ",
  "17540": "directory = cmd . getOptionValue ( \"json\" ) != null ? new File ( cmd . getOptionValue ( \"json\" ) ) : Files . createTempDir ( ) ; ",
  "17541": "String databaseUrl = cmd . getOptionValue ( \"database\" , DEFAULT_DATABASE_URL ) ; ",
  "17542": "String databaseUser = cmd . getOptionValue ( \"user\" ) ; ",
  "17543": "String databasePassword = cmd . getOptionValue ( \"password\" ) ; ",
  "17544": "DataSource dataSource = createDataSource ( databaseUrl , databaseUser , databasePassword ) ; ",
  "17545": "FeedLoadResult loadResult = null ; ",
  "17546": "if ( cmd . hasOption ( \"load\" ) ) { ",
  "17547": "String filePath = cmd . getOptionValue ( \"load\" ) ; ",
  "17548": "loadResult = load ( filePath , dataSource ) ; ",
  "17549": "File loadResultFile = new File ( directory , String . format ( \"%s-load.json\" , loadResult . uniqueIdentifier ) ) ; ",
  "17550": "mapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( loadResultFile , loadResult ) ; ",
  "17551": "if ( cmd . hasOption ( \"validate\" ) ) { ",
  "17552": "String feedToValidate = cmd . getOptionValue ( \"validate\" ) ; ",
  "17553": "if ( feedToValidate != null && loadResult != null ) { ",
  "17554": "feedToValidate , loadResult . uniqueIdentifier ) ; ",
  "17555": "if ( feedToValidate == null && loadResult != null ) { ",
  "17556": "feedToValidate = loadResult . uniqueIdentifier ; ",
  "17557": "if ( feedToValidate != null ) { ",
  "17558": "ValidationResult validationResult = validate ( feedToValidate , dataSource ) ; ",
  "17559": "File validationResultFile = new File ( directory , String . format ( \"%s-validation.json\" , feedToValidate ) ) ; ",
  "17560": "mapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( validationResultFile , validationResult ) ; ",
  "17561": "if ( cmd . hasOption ( \"snapshot\" ) ) { ",
  "17562": "String namespaceToSnapshot = cmd . getOptionValue ( \"snapshot\" ) ; ",
  "17563": "if ( namespaceToSnapshot == null && loadResult != null ) { ",
  "17564": "namespaceToSnapshot = loadResult . uniqueIdentifier ; ",
  "17565": "if ( namespaceToSnapshot != null ) { ",
  "17566": "FeedLoadResult snapshotResult = makeSnapshot ( namespaceToSnapshot , dataSource ) ; ",
  "17567": "File snapshotResultFile = new File ( directory , String . format ( \"%s-snapshot.json\" , snapshotResult . uniqueIdentifier ) ) ; ",
  "17568": "mapper . writerWithDefaultPrettyPrinter ( ) . writeValue ( snapshotResultFile , snapshotResult ) ; ",
  "17569": "if ( cmd . hasOption ( \"export\" ) ) { ",
  "17570": "String namespaceToExport = cmd . getOptionValue ( \"export\" ) ; ",
  "17571": "String outFile = cmd . getOptionValue ( \"outFile\" ) ; ",
  "17572": "if ( namespaceToExport == null && loadResult != null ) { ",
  "17573": "namespaceToExport = loadResult . uniqueIdentifier ; ",
  "17574": "if ( namespaceToExport != null ) { ",
  "17575": "FeedLoadResult exportResult = export ( namespaceToExport , outFile , dataSource , true ) ; ",
  "17576": "if ( cmd . hasOption ( \"delete\" ) ) { ",
  "17577": "String namespaceToDelete = cmd . getOptionValue ( \"delete\" ) ; ",
  "17578": "if ( namespaceToDelete != null ) { ",
  "17579": "delete ( namespaceToDelete , dataSource ) ; ",
  "17580": "} catch ( SQLException | InvalidNamespaceException e ) { ",
  "17581": "} private static Options getOptions ( ) { ",
  "17582": "Options options = new Options ( ) ; ",
  "17583": "options . addOption ( Option . builder ( ) ",
  "17584": ". longOpt ( \"export\" ) . hasArg ( ) ",
  "17585": ". argName ( \"namespace\" ) ",
  "17586": ". longOpt ( \"outFile\" ) . hasArg ( ) ",
  "17587": ". argName ( \"file\" ) ",
  "17588": ". longOpt ( \"load\" ) . hasArg ( ) ",
  "17589": ". longOpt ( \"validate\" ) . hasArg ( ) . optionalArg ( true ) ",
  "17590": ". longOpt ( \"snapshot\" ) . hasArg ( ) ",
  "17591": "options . addOption ( Option . builder ( \"d\" ) ",
  "17592": ". longOpt ( \"database\" ) . hasArg ( ) ",
  "17593": ". argName ( \"url\" ) ",
  "17594": "options . addOption ( Option . builder ( \"u\" ) . longOpt ( \"user\" ) . hasArg ( ) ",
  "17595": ". argName ( \"username\" ) ",
  "17596": "options . addOption ( Option . builder ( \"p\" ) ",
  "17597": ". longOpt ( \"password\" ) . hasArg ( ) ",
  "17598": ". argName ( \"password\" ) ",
  "17599": ". longOpt ( \"delete\" ) . hasArg ( ) ",
  "17600": ". longOpt ( \"json\" ) . hasArg ( ) . optionalArg ( true ) ",
  "17601": ". argName ( \"directory\" ) ",
  "17602": "return options ; ",
  "17603": "} public NewGTFSError addInfo ( String key , String value ) { ",
  "17604": "errorInfo . put ( key , value ) ; ",
  "17605": "} public static NewGTFSError forLine ( Table table , int lineNumber , NewGTFSErrorType errorType , String badValue ) { ",
  "17606": "NewGTFSError error = new NewGTFSError ( table . getEntityClass ( ) , errorType ) ; ",
  "17607": "error . badValue = badValue ; ",
  "17608": "} public static NewGTFSError forEntity ( Entity entity , NewGTFSErrorType errorType ) { ",
  "17609": "NewGTFSError error = new NewGTFSError ( entity . getClass ( ) , errorType ) ; ",
  "17610": "error . lineNumber = entity . id ; ",
  "17611": "error . entityId = entity . getId ( ) ; ",
  "17612": "error . entitySequenceNumber = entity . getSequenceNumber ( ) ; ",
  "17613": "} public static NewGTFSError forTable ( Table table , NewGTFSErrorType errorType ) { ",
  "17614": "return new NewGTFSError ( table . getEntityClass ( ) , errorType ) ; ",
  "17615": "} public static NewGTFSError forFeed ( NewGTFSErrorType errorType , String badValue ) { ",
  "17616": "return new NewGTFSError ( null , errorType ) . setBadValue ( badValue ) ; ",
  "17617": "} public NewGTFSError setSequence ( String sequenceAsString ) { ",
  "17618": "this . entitySequenceNumber = Integer . parseInt ( sequenceAsString ) ; ",
  "17619": "this . entitySequenceNumber = null ; ",
  "17620": "} public double getPatternSpeed ( String pattern_id , LocalDate date , LocalTime from , LocalTime to ) { ",
  "17621": "List < Trip > trips = getTripsForDate ( pattern_id , date ) ; ",
  "17622": "return getAverageSpeedForTrips ( trips , from , to ) ; ",
  "17623": "} public double getAverageSpeedForTrips ( Collection < Trip > trips , LocalTime from , LocalTime to ) { ",
  "17624": "TDoubleList speeds = new TDoubleArrayList ( ) ; ",
  "17625": "for ( Trip trip : trips ) { ",
  "17626": "StopTime firstStopTime = feed . stop_times . ceilingEntry ( Fun . t2 ( trip . trip_id , null ) ) . getValue ( ) ; ",
  "17627": "LocalTime tripBeginTime = LocalTime . ofSecondOfDay ( firstStopTime . departure_time % 86399 ) ; ",
  "17628": "if ( tripBeginTime . isAfter ( to ) || tripBeginTime . isBefore ( from ) ) { ",
  "17629": "double speed = feed . getTripSpeed ( trip . trip_id , true ) ; ",
  "17630": "if ( ! Double . isNaN ( speed ) ) { ",
  "17631": "speeds . add ( speed ) ; ",
  "17632": "if ( speeds . isEmpty ( ) ) return - 1 ; ",
  "17633": "return speeds . sum ( ) / speeds . size ( ) ; ",
  "17634": "} public LocalTime getStartTimeForTrips ( Collection < Trip > trips ) { ",
  "17635": "int earliestDeparture = Integer . MAX_VALUE ; ",
  "17636": "StopTime st = feed . getOrderedStopTimesForTrip ( trip . trip_id ) . iterator ( ) . next ( ) ; ",
  "17637": "int dep = st . departure_time ; ",
  "17638": "if ( dep > 86399 ) { ",
  "17639": "dep = dep % 86399 ; ",
  "17640": "if ( dep <= earliestDeparture ) { ",
  "17641": "earliestDeparture = dep ; ",
  "17642": "return LocalTime . ofSecondOfDay ( earliestDeparture ) ; ",
  "17643": "} public LocalTime getEndTimeForTrips ( Collection < Trip > trips ) { ",
  "17644": "int latestArrival = Integer . MIN_VALUE ; ",
  "17645": "if ( st . arrival_time >= latestArrival ) { ",
  "17646": "latestArrival = st . arrival_time ; ",
  "17647": "return LocalTime . ofSecondOfDay ( latestArrival % 86399 ) ; ",
  "17648": "} public long getTotalRevenueTimeForTrips ( Collection < Trip > trips ) { ",
  "17649": "TIntList times = new TIntArrayList ( ) ; ",
  "17650": "StopTime first ; ",
  "17651": "StopTime last ; ",
  "17652": "Spliterator < StopTime > stopTimes = feed . getOrderedStopTimesForTrip ( trip . trip_id ) . spliterator ( ) ; ; ",
  "17653": "first = StreamSupport . stream ( stopTimes , false ) ",
  "17654": ". orElse ( null ) ; ",
  "17655": "last = StreamSupport . stream ( stopTimes , false ) ",
  "17656": ". reduce ( ( a , b ) -> b ) ",
  "17657": "if ( last != null && first != null ) { ",
  "17658": "int time = last . arrival_time - first . departure_time ; ",
  "17659": "times . add ( time ) ; ",
  "17660": "return times . sum ( ) ; ",
  "17661": "} public double getTotalDistanceForTrips ( Collection < Trip > trips ) { ",
  "17662": "TDoubleList distances = new TDoubleArrayList ( ) ; ",
  "17663": "distances . add ( feed . getTripDistance ( trip . trip_id , false ) ) ; ",
  "17664": "return distances . sum ( ) ; ",
  "17665": "} public double getPatternDistance ( String pattern_id ) { ",
  "17666": "Pattern pattern = feed . patterns . get ( pattern_id ) ; ",
  "17667": "return feed . getTripDistance ( pattern . associatedTrips . iterator ( ) . next ( ) , false ) ; ",
  "17668": "} public double getAverageStopSpacing ( String pattern_id ) { ",
  "17669": "return getPatternDistance ( pattern_id ) / pattern . orderedStops . size ( ) ; ",
  "17670": "DateField dateField = ( DateField ) Table . CALENDAR_DATES . getFieldForName ( \"date\" ) ; ",
  "17671": "dateField . setParameter ( statement , oneBasedIndex ++ , date ) ; ",
  "17672": "setIntParameter ( statement , oneBasedIndex ++ , exception_type ) ; ",
  "17673": "DateField feedStartDateField = ( DateField ) Table . FEED_INFO . getFieldForName ( \"feed_start_date\" ) ; ",
  "17674": "DateField feedEndDateField = ( DateField ) Table . FEED_INFO . getFieldForName ( \"feed_end_date\" ) ; ",
  "17675": "String feedPublisherUrl = feed_publisher_url != null ? feed_publisher_url . toString ( ) : null ; ",
  "17676": "statement . setString ( oneBasedIndex ++ , feed_publisher_name ) ; ",
  "17677": "statement . setString ( oneBasedIndex ++ , feedPublisherUrl ) ; ",
  "17678": "statement . setString ( oneBasedIndex ++ , feed_lang ) ; ",
  "17679": "feedStartDateField . setParameter ( statement , oneBasedIndex ++ , feed_start_date ) ; ",
  "17680": "feedEndDateField . setParameter ( statement , oneBasedIndex ++ , feed_end_date ) ; ",
  "17681": "statement . setString ( oneBasedIndex ++ , feed_version ) ; ",
  "17682": "statement . setString ( oneBasedIndex ++ , from_stop_id ) ; ",
  "17683": "statement . setString ( oneBasedIndex ++ , to_stop_id ) ; ",
  "17684": "setIntParameter ( statement , oneBasedIndex ++ , transfer_type ) ; ",
  "17685": "setIntParameter ( statement , oneBasedIndex ++ , min_transfer_time ) ; ",
  "17686": "} public Set < NewGTFSError > checkReferencesAndUniqueness ( String keyValue , int lineNumber , ",
  "17687": "Field field , String value , Table table ) { ",
  "17688": "return checkReferencesAndUniqueness ( keyValue , lineNumber , field , value , table , ",
  "17689": "table . getKeyFieldName ( ) , table . getOrderFieldName ( ) ) ; ",
  "17690": "Field field , String value , Table table , String keyField , String orderField ) { ",
  "17691": "Set < NewGTFSError > errors = new HashSet < > ( ) ; ",
  "17692": "String uniqueKeyField = orderField != null ? orderField ",
  "17693": ": ! table . hasUniqueKeyField ? null : keyField ; ",
  "17694": "String transitId = String . join ( \":\" , keyField , keyValue ) ; ",
  "17695": "if ( ! field . isRequired ( ) && \"\" . equals ( value ) ) return Collections . emptySet ( ) ; ",
  "17696": "boolean isOrderField = field . name . equals ( orderField ) ; ",
  "17697": "if ( field . isForeignReference ( ) ) { ",
  "17698": "String referenceField = field . referenceTable . getKeyFieldName ( ) ; ",
  "17699": "String referenceTransitId = String . join ( \":\" , referenceField , value ) ; ",
  "17700": "if ( ! this . transitIds . contains ( referenceTransitId ) ) { ",
  "17701": "NewGTFSError referentialIntegrityError = NewGTFSError ",
  "17702": ". forLine ( table , lineNumber , REFERENTIAL_INTEGRITY , referenceTransitId ) ",
  "17703": ". setEntityId ( keyValue ) ; ",
  "17704": "if ( isOrderField ) referentialIntegrityError . setSequence ( value ) ; ",
  "17705": "errors . add ( referentialIntegrityError ) ; ",
  "17706": "Set < String > listOfUniqueIds = this . transitIds ; ",
  "17707": "String uniqueId = transitId ; ",
  "17708": "if ( field . name . equals ( uniqueKeyField ) ) { ",
  "17709": "if ( isOrderField ) { ",
  "17710": "listOfUniqueIds = this . transitIdsWithSequence ; ",
  "17711": "uniqueId = String . join ( \":\" , field . name , keyValue , value ) ; ",
  "17712": "boolean valueAlreadyExists = ! listOfUniqueIds . add ( uniqueId ) ; ",
  "17713": "if ( valueAlreadyExists ) { ",
  "17714": "NewGTFSError duplicateIdError = ",
  "17715": "NewGTFSError . forLine ( table , lineNumber , DUPLICATE_ID , uniqueId ) ",
  "17716": "if ( isOrderField ) { duplicateIdError . setSequence ( value ) ; } ",
  "17717": "errors . add ( duplicateIdError ) ; ",
  "17718": "} else if ( field . name . equals ( keyField ) && ! field . isForeignReference ( ) ) { ",
  "17719": "this . transitIds . add ( uniqueId ) ; ",
  "17720": "return errors ; ",
  "17721": "this . tablePrefix = this . namespace = randomIdString ( ) ; ",
  "17722": "registerFeed ( ) ; ",
  "17723": "this . errorStorage = new SQLErrorStorage ( connection , tablePrefix , true ) ; ",
  "17724": "List < Calendar > calendars = gtfsFeed . services . values ( ) ",
  "17725": ". map ( service -> service . calendar ) ",
  "17726": "List < CalendarDate > calendarDates = gtfsFeed . services . values ( ) ",
  "17727": ". map ( service -> service . calendar_dates . values ( ) ) ",
  "17728": ". flatMap ( Collection :: stream ) ",
  "17729": "List < FareAttribute > fareAttributes = gtfsFeed . fares . values ( ) ",
  "17730": ". map ( fare -> fare . fare_attribute ) ",
  "17731": "List < FareRule > fareRules = gtfsFeed . fares . values ( ) ",
  "17732": ". map ( fare -> fare . fare_rules ) ",
  "17733": "List < Frequency > frequencies = gtfsFeed . frequencies . stream ( ) ",
  "17734": ". map ( stringFrequencyTuple2 -> stringFrequencyTuple2 . b ) ",
  "17735": "copyEntityToSql ( gtfsFeed . agency . values ( ) , Table . AGENCY ) ; ",
  "17736": "copyEntityToSql ( calendars , Table . CALENDAR ) ; ",
  "17737": "copyEntityToSql ( calendarDates , Table . CALENDAR_DATES ) ; ",
  "17738": "copyEntityToSql ( gtfsFeed . routes . values ( ) , Table . ROUTES ) ; ",
  "17739": "copyEntityToSql ( gtfsFeed . patterns . values ( ) , Table . PATTERNS ) ; ",
  "17740": "copyEntityToSql ( fareAttributes , Table . FARE_ATTRIBUTES ) ; ",
  "17741": "copyEntityToSql ( fareRules , Table . FARE_RULES ) ; ",
  "17742": "copyEntityToSql ( gtfsFeed . feedInfo . values ( ) , Table . FEED_INFO ) ; ",
  "17743": "copyEntityToSql ( gtfsFeed . shape_points . values ( ) , Table . SHAPES ) ; ",
  "17744": "copyEntityToSql ( gtfsFeed . stops . values ( ) , Table . STOPS ) ; ",
  "17745": "copyEntityToSql ( gtfsFeed . transfers . values ( ) , Table . TRANSFERS ) ; ",
  "17746": "copyEntityToSql ( gtfsFeed . trips . values ( ) , Table . TRIPS ) ; ",
  "17747": "copyEntityToSql ( frequencies , Table . FREQUENCIES ) ; ",
  "17748": "copyEntityToSql ( gtfsFeed . stop_times . values ( ) , Table . STOP_TIMES ) ; ",
  "17749": "result . fatalException = ex . getMessage ( ) ; ",
  "17750": "} private void registerFeed ( ) { ",
  "17751": "FeedInfo feedInfo = gtfsFeed . feedInfo . isEmpty ( ) ? null : gtfsFeed . feedInfo . values ( ) . iterator ( ) . next ( ) ; ",
  "17752": "if ( feedInfo != null ) { ",
  "17753": "feedId = feedInfo . feed_id ; ",
  "17754": "feedVersion = feedInfo . feed_version ; ",
  "17755": "insertStatement . setString ( 2 , null ) ; ",
  "17756": "insertStatement . setString ( 3 , null ) ; ",
  "17757": "insertStatement . setString ( 6 , \"mapdb_gtfs_feed\" ) ; ",
  "17758": "} private < E extends Entity > void copyEntityToSql ( Iterable < E > entities , Table table ) throws SQLException { ",
  "17759": "table . createSqlTable ( connection , namespace , true ) ; ",
  "17760": "String entityInsertSql = table . generateInsertSql ( namespace , true ) ; ",
  "17761": "PreparedStatement insertStatement = connection . prepareStatement ( entityInsertSql ) ; ",
  "17762": "int count = 0 , batchSize = 0 ; ",
  "17763": "for ( E entity : entities ) { ",
  "17764": "entity . setStatementParameters ( insertStatement , true ) ; ",
  "17765": "batchSize ++ ; ",
  "17766": "if ( batchSize > JdbcGtfsLoader . INSERT_BATCH_SIZE ) { ",
  "17767": "batchSize = 0 ; ",
  "17768": "table . createIndexes ( connection , namespace ) ; ",
  "17769": "} public static ValidateFieldResult < String > from ( ValidateFieldResult result ) { ",
  "17770": "ValidateFieldResult < String > stringResult = new ValidateFieldResult < > ( ) ; ",
  "17771": "stringResult . clean = String . valueOf ( result . clean ) ; ",
  "17772": "stringResult . errors . addAll ( result . errors ) ; ",
  "17773": "return stringResult ; ",
  "17774": "} public int getErrorCount ( ) { ",
  "17775": "this . commit ( ) ; ",
  "17776": "ResultSet resultSet = statement . getResultSet ( ) ; ",
  "17777": "int count = resultSet . getInt ( 1 ) ; ",
  "17778": "throw new StorageException ( ex ) ; ",
  "17779": "} private void commit ( ) { ",
  "17780": "insertError . executeBatch ( ) ; ",
  "17781": "insertInfo . executeBatch ( ) ; ",
  "17782": "} public void commitAndClose ( ) { ",
  "17783": "public ValidateFieldResult < String > validateAndConvert ( String hhmmss ) { ",
  "17784": "return ValidateFieldResult . from ( getSeconds ( hhmmss ) ) ; ",
  "17785": "public String getColumnExpression ( String prefix , boolean csvOutput ) { ",
  "17786": "String columnName = super . getColumnExpression ( prefix , csvOutput ) ; ",
  "17787": "return csvOutput ",
  "17788": ": columnName ; ",
  "17789": "public int compareTo ( GTFSError o ) { ",
  "17790": "int compare = super . compareTo ( o ) ; ",
  "17791": "if ( compare != 0 ) return compare ; ",
  "17792": "return this . badReference . compareTo ( ( ( ( ReferentialIntegrityError ) o ) . badReference ) ) ; ",
  "17793": "public static int ",
  "17794": "getEPSGCodefromUTS ( Coordinate refLonLat ) { ",
  "17795": "int epsg_code = 32600 ; ",
  "17796": "if ( refLonLat . y < 0 ) { ",
  "17797": "epsg_code += 100 ; ",
  "17798": "epsg_code += getUTMZoneForLongitude ( refLonLat . x ) ; ",
  "17799": "return epsg_code ; ",
  "17800": "public static int getUTMZoneForLongitude ( double lon ) { ",
  "17801": "if ( lon < - 180 || lon > 180 ) ",
  "17802": "int lonZone = ( int ) ( ( lon + 180 ) / 6 ) ; ",
  "17803": "if ( lonZone == 60 ) ",
  "17804": "lonZone -- ; ",
  "17805": "return lonZone + 1 ; ",
  "17806": "} public static double getDistance ( LineString tripGeometry ) { ",
  "17807": "double distance = 0 ; ",
  "17808": "for ( int i = 0 ; i < tripGeometry . getNumPoints ( ) - 1 ; i ++ ) { ",
  "17809": "distance += JTS . orthodromicDistance ( tripGeometry . getCoordinateN ( i ) , tripGeometry . getCoordinateN ( i + 1 ) , DefaultGeographicCRS . WGS84 ) ; ",
  "17810": "} catch ( TransformException e ) { ",
  "17811": "return distance ; ",
  "17812": "} public static GraphQLFieldDefinition field ( String fieldName , String tableName ) { ",
  "17813": "return newFieldDefinition ( ) ",
  "17814": ". name ( fieldName ) ",
  "17815": ". type ( GraphQLInt ) ",
  "17816": ". dataFetcher ( new RowCountFetcher ( tableName ) ) ",
  "17817": "} public static GraphQLFieldDefinition groupedField ( String tableName , String groupByColumn ) { ",
  "17818": ". name ( groupByColumn ) ",
  "17819": ". type ( groupCountType ) ",
  "17820": ". argument ( stringArg ( \"pattern_id\" ) ) ",
  "17821": ". type ( new GraphQLList ( groupCountType ) ) ",
  "17822": ". dataFetcher ( new RowCountFetcher ( tableName , null , groupByColumn ) ) ",
  "17823": "} public int [ ] deduplicateIntArray ( int [ ] original ) { ",
  "17824": "if ( original == null ) return null ; ",
  "17825": "IntArray intArray = new IntArray ( original ) ; ",
  "17826": "IntArray canonical = canonicalIntArrays . get ( intArray ) ; ",
  "17827": "if ( canonical == null ) { ",
  "17828": "canonical = intArray ; ",
  "17829": "canonicalIntArrays . put ( canonical , canonical ) ; ",
  "17830": "return canonical . array ; ",
  "17831": "} public ValidationResult validate ( ) { ",
  "17832": "long validationStartTime = System . currentTimeMillis ( ) ; ",
  "17833": "ValidationResult validationResult = new ValidationResult ( ) ; ",
  "17834": "SQLErrorStorage errorStorage = null ; ",
  "17835": "errorStorage = new SQLErrorStorage ( dataSource . getConnection ( ) , tablePrefix , false ) ; ",
  "17836": "} catch ( SQLException | InvalidNamespaceException ex ) { ",
  "17837": "int errorCountBeforeValidation = errorStorage . getErrorCount ( ) ; ",
  "17838": "List < FeedValidator > feedValidators = Arrays . asList ( ",
  "17839": "new MisplacedStopValidator ( this , errorStorage , validationResult ) , ",
  "17840": "new DuplicateStopsValidator ( this , errorStorage ) , ",
  "17841": "new TimeZoneValidator ( this , errorStorage ) , ",
  "17842": "new NewTripTimesValidator ( this , errorStorage ) , ",
  "17843": "new NamesValidator ( this , errorStorage ) ) ; ",
  "17844": "for ( FeedValidator feedValidator : feedValidators ) { ",
  "17845": "String validatorName = feedValidator . getClass ( ) . getSimpleName ( ) ; ",
  "17846": "int errorCountBefore = errorStorage . getErrorCount ( ) ; ",
  "17847": "feedValidator . validate ( ) ; ",
  "17848": "String badValue = String . join ( \":\" , validatorName , e . toString ( ) ) ; ",
  "17849": "errorStorage . storeError ( NewGTFSError . forFeed ( VALIDATOR_FAILED , badValue ) ) ; ",
  "17850": "LOG . error ( e . toString ( ) ) ; ",
  "17851": "feedValidator . complete ( validationResult ) ; ",
  "17852": "String badValue = String . join ( \":\" , feedValidator . getClass ( ) . getSimpleName ( ) , e . toString ( ) ) ; ",
  "17853": "int totalValidationErrors = errorStorage . getErrorCount ( ) ; ",
  "17854": "long validationEndTime = System . currentTimeMillis ( ) ; ",
  "17855": "long totalValidationTime = validationEndTime - validationStartTime ; ",
  "17856": "validationResult . errorCount = totalValidationErrors ; ",
  "17857": "validationResult . validationTime = totalValidationTime ; ",
  "17858": "return validationResult ; ",
  "17859": "} public List < Trip > getTripsForDate ( String stop_id , LocalDate date ) { ",
  "17860": "List < String > tripIds = stats . getTripsForDate ( date ) . stream ( ) ",
  "17861": ". map ( trip -> trip . trip_id ) ",
  "17862": "return feed . getDistinctTripsForStop ( stop_id ) . stream ( ) ",
  "17863": ". filter ( t -> tripIds . contains ( t . trip_id ) ) ",
  "17864": "} public int getAverageHeadwayForStop ( String stop_id , LocalDate date , LocalTime from , LocalTime to ) { ",
  "17865": "List < Trip > tripsForStop = getTripsForDate ( stop_id , date ) ; ",
  "17866": "return getStopHeadwayForTrips ( stop_id , tripsForStop , from , to ) ; ",
  "17867": "} public Map < String , Integer > getRouteHeadwaysForStop ( String stop_id , LocalDate date , LocalTime from , LocalTime to ) { ",
  "17868": "Map < String , Integer > routeHeadwayMap = new HashMap < > ( ) ; ",
  "17869": "List < Route > routes = feed . patterns . values ( ) . stream ( ) ",
  "17870": ". filter ( p -> p . orderedStops . contains ( stop_id ) ) ",
  "17871": ". map ( p -> feed . routes . get ( p . route_id ) ) ",
  "17872": "for ( Route route : routes ) { ",
  "17873": "routeHeadwayMap . put ( route . route_id , getHeadwayForStopByRoute ( stop_id , route . route_id , date , from , to ) ) ; ",
  "17874": "return routeHeadwayMap ; ",
  "17875": "} public int getStopHeadwayForTrips ( String stop_id , List < Trip > trips , LocalTime from , LocalTime to ) { ",
  "17876": "TIntList timesAtStop = new TIntArrayList ( ) ; ",
  "17877": "Set < String > tripIds = trips . stream ( ) ",
  "17878": ". map ( t -> t . trip_id ) ",
  "17879": "List < StopTime > stopTimes = feed . getStopTimesForStop ( stop_id ) . stream ( ) ",
  "17880": ". filter ( st -> tripIds . contains ( st . trip_id ) ) ",
  "17881": "for ( StopTime st : stopTimes ) { ",
  "17882": "if ( st . departure_time > 86399 || st . departure_time < 0 ) continue ; ",
  "17883": "LocalTime timeAtStop = LocalTime . ofSecondOfDay ( st . departure_time ) ; ",
  "17884": "if ( timeAtStop . isAfter ( to ) || timeAtStop . isBefore ( from ) ) { ",
  "17885": "timesAtStop . add ( st . departure_time ) ; ",
  "17886": "timesAtStop . sort ( ) ; ",
  "17887": "TIntList deltas = new TIntArrayList ( ) ; ",
  "17888": "for ( int i = 0 ; i < timesAtStop . size ( ) - 1 ; i ++ ) { ",
  "17889": "int delta = timesAtStop . get ( i + 1 ) - timesAtStop . get ( i ) ; ",
  "17890": "if ( delta > 60 ) deltas . add ( delta ) ; ",
  "17891": "if ( deltas . isEmpty ( ) ) return - 1 ; ",
  "17892": "return deltas . sum ( ) / deltas . size ( ) ; ",
  "17893": "} public int getHeadwayForStopByRoute ( String stop_id , String route_id , LocalDate date , LocalTime from , LocalTime to ) { ",
  "17894": "List < Trip > tripsForStop = feed . getDistinctTripsForStop ( stop_id ) . stream ( ) ",
  "17895": ". filter ( trip -> feed . trips . get ( trip . trip_id ) . route_id . equals ( route_id ) ) ",
  "17896": ". filter ( trip -> feed . services . get ( trip . service_id ) . activeOn ( date ) ) ",
  "17897": "} public List < TransferPerformanceSummary > getTransferPerformance ( String stop_id , LocalDate date ) { ",
  "17898": "List < StopTime > stopTimes = feed . getStopTimesForStop ( stop_id ) ; ",
  "17899": "Map < String , List < StopTime > > routeStopTimeMap = new HashMap < > ( ) ; ",
  "17900": "List < TransferPerformanceSummary > transferPerformanceMap = new ArrayList < > ( ) ; ",
  "17901": "stopTimes . stream ( ) ",
  "17902": ". forEach ( st -> { ",
  "17903": "Trip trip = feed . trips . get ( st . trip_id ) ; ",
  "17904": "Service service = feed . services . get ( trip . service_id ) ; ",
  "17905": "if ( service != null && service . activeOn ( date ) ) { ",
  "17906": "Route route = feed . routes . get ( trip . route_id ) ; ",
  "17907": "List < StopTime > times = new ArrayList < > ( ) ; ",
  "17908": "if ( routeStopTimeMap . containsKey ( route . route_id ) ) { ",
  "17909": "times . addAll ( routeStopTimeMap . get ( route . route_id ) ) ; ",
  "17910": "times . add ( st ) ; ",
  "17911": "routeStopTimeMap . put ( route . route_id , times ) ; ",
  "17912": "Map < Fun . Tuple2 < String , String > , TIntList > waitTimesByRoute = new HashMap < > ( ) ; ",
  "17913": "Map < Fun . Tuple2 < String , String > , Set < Fun . Tuple2 < StopTime , StopTime > > > missedTransfers = new HashMap < > ( ) ; ",
  "17914": "for ( Map . Entry < String , List < StopTime > > entry : routeStopTimeMap . entrySet ( ) ) { ",
  "17915": "final int MISSED_TRANSFER_THRESHOLD = 60 * 10 ; ",
  "17916": "List < StopTime > currentTimes = entry . getValue ( ) ; ",
  "17917": "String currentRoute = entry . getKey ( ) ; ",
  "17918": "for ( StopTime currentTime : currentTimes ) { ",
  "17919": "if ( currentTime . arrival_time > 0 ) { ",
  "17920": "for ( Map . Entry < String , List < StopTime > > entry2 : routeStopTimeMap . entrySet ( ) ) { ",
  "17921": "List < StopTime > compareTimes = entry2 . getValue ( ) ; ",
  "17922": "String compareRoute = entry2 . getKey ( ) ; ",
  "17923": "Fun . Tuple2 < String , String > routeKey = new Fun . Tuple2 ( currentRoute , compareRoute ) ; ",
  "17924": "if ( compareRoute . equals ( currentRoute ) ) { ",
  "17925": "if ( ! waitTimesByRoute . containsKey ( routeKey ) ) { ",
  "17926": "waitTimesByRoute . put ( routeKey , new TIntArrayList ( ) ) ; ",
  "17927": "int shortestWait = Integer . MAX_VALUE ; ",
  "17928": "for ( StopTime compareTime : compareTimes ) { ",
  "17929": "if ( compareTime . departure_time > 0 ) { ",
  "17930": "int waitTime = compareTime . departure_time - currentTime . arrival_time ; ",
  "17931": "if ( waitTime >= 0 && waitTime < shortestWait ) { ",
  "17932": "shortestWait = waitTime ; ",
  "17933": "if ( waitTime < 0 && waitTime * - 1 <= MISSED_TRANSFER_THRESHOLD ) { ",
  "17934": "Fun . Tuple2 < StopTime , StopTime > missedTransfer = new Fun . Tuple2 ( compareTime , currentTime ) ; ",
  "17935": "if ( ! missedTransfers . containsKey ( routeKey ) ) { ",
  "17936": "missedTransfers . put ( routeKey , new HashSet < > ( ) ) ; ",
  "17937": "missedTransfers . get ( routeKey ) . add ( missedTransfer ) ; ",
  "17938": "if ( shortestWait < Integer . MAX_VALUE ) ",
  "17939": "waitTimesByRoute . get ( routeKey ) . add ( shortestWait ) ; ",
  "17940": "for ( Map . Entry < Fun . Tuple2 < String , String > , TIntList > entry : waitTimesByRoute . entrySet ( ) ) { ",
  "17941": "Fun . Tuple2 < String , String > routeKey = entry . getKey ( ) ; ",
  "17942": "TIntList waitTimes = entry . getValue ( ) ; ",
  "17943": "if ( waitTimes . isEmpty ( ) ) { ",
  "17944": "int min = waitTimes . min ( ) ; ",
  "17945": "int max = waitTimes . max ( ) ; ",
  "17946": "waitTimes . sort ( ) ; ",
  "17947": "int median = waitTimes . get ( waitTimes . size ( ) / 2 ) ; ",
  "17948": "TransferPerformanceSummary routeTransferPerformance = new TransferPerformanceSummary ( routeKey . a , routeKey . b , min , max , median , missedTransfers . get ( routeKey ) ) ; ",
  "17949": "transferPerformanceMap . add ( routeTransferPerformance ) ; ",
  "17950": "return transferPerformanceMap ; ",
  "17951": "} private static JsonNode getJsonNode ( String json ) throws IOException { ",
  "17952": "return mapper . readTree ( json ) ; ",
  "17953": "public String create ( String json , boolean autoCommit ) throws SQLException , IOException { ",
  "17954": "return update ( null , json , autoCommit ) ; ",
  "17955": "public String update ( Integer id , String json , boolean autoCommit ) throws SQLException , IOException { ",
  "17956": "final boolean isCreating = id == null ; ",
  "17957": "JsonNode jsonNode = getJsonNode ( json ) ; ",
  "17958": "if ( jsonNode . isArray ( ) ) { ",
  "17959": "List < String > updatedObjects = new ArrayList < > ( ) ; ",
  "17960": "for ( JsonNode node : jsonNode ) { ",
  "17961": "JsonNode idNode = node . get ( \"id\" ) ; ",
  "17962": "Integer nodeId = idNode == null || isCreating ? null : idNode . asInt ( ) ; ",
  "17963": "String updatedObject = update ( nodeId , node . toString ( ) , false ) ; ",
  "17964": "updatedObjects . add ( updatedObject ) ; ",
  "17965": "if ( autoCommit ) connection . commit ( ) ; ",
  "17966": "return mapper . writeValueAsString ( updatedObjects ) ; ",
  "17967": "ObjectNode jsonObject = ( ObjectNode ) jsonNode ; ",
  "17968": "ensureReferentialIntegrity ( jsonObject , tablePrefix , specTable , id ) ; ",
  "17969": "PreparedStatement preparedStatement = createPreparedUpdate ( id , isCreating , jsonObject , specTable , connection , false ) ; ",
  "17970": "long newId = handleStatementExecution ( preparedStatement , isCreating ) ; ",
  "17971": "Set < Table > referencingTables = getReferencingTables ( specTable ) ; ",
  "17972": "if ( specTable . name . equals ( \"patterns\" ) ) { ",
  "17973": "referencingTables . add ( Table . SHAPES ) ; ",
  "17974": "for ( Table referencingTable : referencingTables ) { ",
  "17975": "Table parentTable = referencingTable . getParentTable ( ) ; ",
  "17976": "if ( parentTable != null && parentTable . name . equals ( specTable . name ) || referencingTable . name . equals ( \"shapes\" ) ) { ",
  "17977": "JsonNode childEntities = jsonObject . get ( referencingTable . name ) ; ",
  "17978": "if ( childEntities == null || childEntities . isNull ( ) || ! childEntities . isArray ( ) ) { ",
  "17979": "int entityId = isCreating ? ( int ) newId : id ; ",
  "17980": "ArrayNode childEntitiesArray = ( ArrayNode ) childEntities ; ",
  "17981": "boolean referencedPatternUsesFrequencies = false ; ",
  "17982": "if ( jsonObject . has ( \"pattern_id\" ) && ! jsonObject . get ( \"pattern_id\" ) . isNull ( ) ) { ",
  "17983": "PreparedStatement statement = connection . prepareStatement ( String . format ( ",
  "17984": "Table . PATTERNS . name ",
  "17985": "statement . setString ( 1 , jsonObject . get ( \"pattern_id\" ) . asText ( ) ) ; ",
  "17986": "LOG . info ( statement . toString ( ) ) ; ",
  "17987": "ResultSet selectResults = statement . executeQuery ( ) ; ",
  "17988": "while ( selectResults . next ( ) ) { ",
  "17989": "referencedPatternUsesFrequencies = selectResults . getBoolean ( 1 ) ; ",
  "17990": "String keyValue = updateChildTable ( ",
  "17991": "childEntitiesArray , ",
  "17992": "entityId , ",
  "17993": "referencedPatternUsesFrequencies , ",
  "17994": "isCreating , ",
  "17995": "referencingTable , ",
  "17996": "connection ",
  "17997": "jsonObject . put ( referencingTable . getKeyFieldName ( ) , keyValue ) ; ",
  "17998": "switch ( specTable . name ) { ",
  "17999": "case \"routes\" : ",
  "18000": "updateLinkedFields ( ",
  "18001": "specTable , ",
  "18002": "jsonObject , ",
  "18003": "\"trips\" , ",
  "18004": "\"wheelchair_accessible\" ",
  "18005": "case \"patterns\" : ",
  "18006": "\"pattern_id\" , ",
  "18007": "\"direction_id\" , \"shape_id\" ",
  "18008": "if ( autoCommit ) { ",
  "18009": "jsonObject . put ( \"id\" , newId ) ; ",
  "18010": "return jsonObject . toString ( ) ; ",
  "18011": "} public int normalizeStopTimesForPattern ( int id , int beginWithSequence ) throws SQLException { ",
  "18012": "JDBCTableReader < PatternStop > patternStops = new JDBCTableReader ( ",
  "18013": "Table . PATTERN_STOP , ",
  "18014": "tablePrefix + \".\" , ",
  "18015": "EntityPopulator . PATTERN_STOP ",
  "18016": "String patternId = getValueForId ( id , \"pattern_id\" , tablePrefix , Table . PATTERNS , connection ) ; ",
  "18017": "List < PatternStop > patternStopsToNormalize = new ArrayList < > ( ) ; ",
  "18018": "for ( PatternStop patternStop : patternStops . getOrdered ( patternId ) ) { ",
  "18019": "if ( patternStop . stop_sequence >= beginWithSequence ) { ",
  "18020": "patternStopsToNormalize . add ( patternStop ) ; ",
  "18021": "int stopTimesUpdated = updateStopTimesForPatternStops ( patternStopsToNormalize ) ; ",
  "18022": "return stopTimesUpdated ; ",
  "18023": "} private void updateLinkedFields ( ",
  "18024": "Table referenceTable , ",
  "18025": "ObjectNode exemplarEntity , ",
  "18026": "String linkedTableName , ",
  "18027": "String keyField , ",
  "18028": "String ... linkedFieldsToUpdate ",
  "18029": "boolean updatingStopTimes = \"stop_times\" . equals ( linkedTableName ) ; ",
  "18030": "List < Field > fields = new ArrayList < > ( ) ; ",
  "18031": "List < JsonNode > values = new ArrayList < > ( ) ; ",
  "18032": "List < String > fieldStrings = new ArrayList < > ( ) ; ",
  "18033": "for ( String field : linkedFieldsToUpdate ) { ",
  "18034": "fields . add ( referenceTable . getFieldForName ( field ) ) ; ",
  "18035": "values . add ( exemplarEntity . get ( field ) ) ; ",
  "18036": "Field orderField = updatingStopTimes ? referenceTable . getFieldForName ( referenceTable . getOrderFieldName ( ) ) : null ; ",
  "18037": "String sql = updatingStopTimes ",
  "18038": "? String . format ( ",
  "18039": "setFields , ",
  "18040": "keyField , ",
  "18041": "orderField . name ",
  "18042": "PreparedStatement statement = connection . prepareStatement ( sql ) ; ",
  "18043": "Field field = fields . get ( i ) ; ",
  "18044": "String newValue = values . get ( i ) . isNull ( ) ? null : values . get ( i ) . asText ( ) ; ",
  "18045": "if ( newValue == null ) field . setNull ( statement , oneBasedIndex ++ ) ; ",
  "18046": "else field . setParameter ( statement , oneBasedIndex ++ , newValue ) ; ",
  "18047": "statement . setString ( oneBasedIndex ++ , exemplarEntity . get ( keyField ) . asText ( ) ) ; ",
  "18048": "if ( updatingStopTimes ) { ",
  "18049": "String orderValue = exemplarEntity . get ( orderField . name ) . asText ( ) ; ",
  "18050": "orderField . setParameter ( statement , oneBasedIndex ++ , orderValue ) ; ",
  "18051": "LOG . debug ( statement . toString ( ) ) ; ",
  "18052": "int entitiesUpdated = statement . executeUpdate ( ) ; ",
  "18053": "} private PreparedStatement createPreparedUpdate ( ",
  "18054": "Integer id , ",
  "18055": "boolean isCreating , ",
  "18056": "ObjectNode jsonObject , ",
  "18057": "Table table , ",
  "18058": "Connection connection , ",
  "18059": "boolean batch ",
  "18060": "String statementString ; ",
  "18061": "if ( isCreating ) { ",
  "18062": "statementString = table . generateInsertSql ( tablePrefix , true ) ; ",
  "18063": "statementString = table . generateUpdateSql ( tablePrefix , id ) ; ",
  "18064": "PreparedStatement preparedStatement = connection . prepareStatement ( ",
  "18065": "statementString , ",
  "18066": "Statement . RETURN_GENERATED_KEYS ) ; ",
  "18067": "if ( ! batch ) { ",
  "18068": "setStatementParameters ( jsonObject , table , preparedStatement , connection ) ; ",
  "18069": "return preparedStatement ; ",
  "18070": "} private void setStatementParameters ( ",
  "18071": "PreparedStatement preparedStatement , ",
  "18072": "Connection connection ",
  "18073": "List < String > missingFieldNames = new ArrayList < > ( ) ; ",
  "18074": "if ( ! jsonObject . has ( field . name ) ) { ",
  "18075": "missingFieldNames . add ( field . name ) ; ",
  "18076": "JsonNode value = jsonObject . get ( field . name ) ; ",
  "18077": "LOG . debug ( \"{}={}\" , field . name , value ) ; ",
  "18078": "if ( value == null || value . isNull ( ) ) { ",
  "18079": "if ( field . isRequired ( ) && ! field . isEmptyValuePermitted ( ) ) { ",
  "18080": "field . setNull ( preparedStatement , index ) ; ",
  "18081": "List < String > values = new ArrayList < > ( ) ; ",
  "18082": "if ( value . isArray ( ) ) { ",
  "18083": "for ( JsonNode node : value ) { ",
  "18084": "values . add ( node . asText ( ) ) ; ",
  "18085": "field . setParameter ( preparedStatement , index , String . join ( \",\" , values ) ) ; ",
  "18086": "field . setParameter ( preparedStatement , index , value . asText ( ) ) ; ",
  "18087": "} catch ( StorageException e ) { ",
  "18088": "if ( field . name . contains ( \"_time\" ) ) { ",
  "18089": "if ( field . isRequired ( ) ) { ",
  "18090": "preparedStatement . setInt ( index , Integer . parseInt ( value . asText ( ) ) ) ; ",
  "18091": "index += 1 ; ",
  "18092": "if ( missingFieldNames . size ( ) > 0 ) { ",
  "18093": "table . name , ",
  "18094": "missingFieldNames . toString ( ) ",
  "18095": "} private String updateChildTable ( ",
  "18096": "ArrayNode subEntities , ",
  "18097": "int id , ",
  "18098": "boolean referencedPatternUsesFrequencies , ",
  "18099": "boolean isCreatingNewEntity , ",
  "18100": "Table subTable , ",
  "18101": ") throws SQLException , IOException { ",
  "18102": "Field keyField = specTable . getFieldForName ( subTable . getKeyFieldName ( ) ) ; ",
  "18103": "String keyValue = getValueForId ( id , keyField . name , tablePrefix , specTable , connection ) ; ",
  "18104": "String childTableName = String . join ( \".\" , tablePrefix , subTable . name ) ; ",
  "18105": "if ( ! referencedPatternUsesFrequencies && subTable . name . equals ( Table . FREQUENCIES . name ) && subEntities . size ( ) > 0 ) { ",
  "18106": "if ( Table . PATTERN_STOP . name . equals ( subTable . name ) ) { ",
  "18107": "List < PatternStop > newPatternStops = new ArrayList < > ( ) ; ",
  "18108": "for ( JsonNode node : subEntities ) { ",
  "18109": "ObjectNode objectNode = ( ObjectNode ) node ; ",
  "18110": "if ( ! objectNode . get ( \"id\" ) . isNumber ( ) ) { ",
  "18111": "objectNode . put ( \"id\" , 0 ) ; ",
  "18112": "newPatternStops . add ( mapper . readValue ( objectNode . toString ( ) , PatternStop . class ) ) ; ",
  "18113": "reconcilePatternStops ( keyValue , newPatternStops , connection ) ; ",
  "18114": "if ( ! isCreatingNewEntity ) { ",
  "18115": "if ( Table . SHAPES . name . equals ( subTable . name ) ) { ",
  "18116": "PreparedStatement statement = connection . prepareStatement ( patternsForShapeIdSql ) ; ",
  "18117": "statement . setString ( 1 , keyValue ) ; ",
  "18118": "ResultSet resultSet = statement . executeQuery ( ) ; ",
  "18119": "int patternsForShapeId = 0 ; ",
  "18120": "patternsForShapeId ++ ; ",
  "18121": "if ( patternsForShapeId > 1 ) { ",
  "18122": "keyValue = UUID . randomUUID ( ) . toString ( ) ; ",
  "18123": "PreparedStatement updateStatement = connection . prepareStatement ( updatePatternShapeIdSql ) ; ",
  "18124": "updateStatement . setString ( 1 , keyValue ) ; ",
  "18125": "updateStatement . setInt ( 2 , id ) ; ",
  "18126": "LOG . info ( updateStatement . toString ( ) ) ; ",
  "18127": "updateStatement . executeUpdate ( ) ; ",
  "18128": "deleteChildEntities ( subTable , keyField , keyValue ) ; ",
  "18129": "int entityCount = 0 ; ",
  "18130": "PreparedStatement insertStatement = null ; ",
  "18131": "String orderFieldName = subTable . getOrderFieldName ( ) ; ",
  "18132": "boolean hasOrderField = orderFieldName != null ; ",
  "18133": "int previousOrder = - 1 ; ",
  "18134": "TIntSet orderValues = new TIntHashSet ( ) ; ",
  "18135": "Multimap < Table , String > referencesPerTable = HashMultimap . create ( ) ; ",
  "18136": "int cumulativeTravelTime = 0 ; ",
  "18137": "for ( JsonNode entityNode : subEntities ) { ",
  "18138": "ObjectNode subEntity = ( ObjectNode ) entityNode ; ",
  "18139": "subEntity . put ( keyField . name , keyValue ) ; ",
  "18140": "for ( Field field : subTable . specFields ( ) ) { ",
  "18141": "if ( field . referenceTable != null && ! field . referenceTable . name . equals ( specTable . name ) ) { ",
  "18142": "JsonNode refValueNode = subEntity . get ( field . name ) ; ",
  "18143": "if ( refValueNode . isNull ( ) && ! field . isRequired ( ) ) continue ; ",
  "18144": "String refValue = refValueNode . asText ( ) ; ",
  "18145": "referencesPerTable . put ( field . referenceTable , refValue ) ; ",
  "18146": "if ( entityCount == 0 ) { ",
  "18147": "insertStatement = createPreparedUpdate ( id , true , subEntity , subTable , connection , true ) ; ",
  "18148": "if ( \"pattern_stops\" . equals ( subTable . name ) ) { ",
  "18149": "if ( referencedPatternUsesFrequencies ) { ",
  "18150": "cumulativeTravelTime += updateStopTimesForPatternStop ( subEntity , cumulativeTravelTime ) ; ",
  "18151": "subTable , ",
  "18152": "subEntity , ",
  "18153": "\"stop_times\" , ",
  "18154": "\"timepoint\" , ",
  "18155": "\"drop_off_type\" , ",
  "18156": "\"pickup_type\" , ",
  "18157": "\"shape_dist_traveled\" ",
  "18158": "setStatementParameters ( subEntity , subTable , insertStatement , connection ) ; ",
  "18159": "if ( hasOrderField ) { ",
  "18160": "int orderValue = subEntity . get ( orderFieldName ) . asInt ( ) ; ",
  "18161": "boolean orderIsUnique = orderValues . add ( orderValue ) ; ",
  "18162": "boolean valuesAreIncrementing = ++ previousOrder == orderValue ; ",
  "18163": "if ( ! orderIsUnique || ! valuesAreIncrementing ) { ",
  "18164": "subTable . name , ",
  "18165": "orderFieldName , ",
  "18166": "entityCount , ",
  "18167": "previousOrder == 0 ? \"non-zero\" : ! valuesAreIncrementing ? \"non-incrementing\" : \"duplicate\" , ",
  "18168": "orderValue ",
  "18169": "if ( entityCount == 0 ) LOG . info ( insertStatement . toString ( ) ) ; ",
  "18170": "if ( ++ entityCount % INSERT_BATCH_SIZE == 0 ) { ",
  "18171": "int [ ] newIds = insertStatement . executeBatch ( ) ; ",
  "18172": "verifyReferencesExist ( subTable . name , referencesPerTable ) ; ",
  "18173": "if ( insertStatement != null ) { ",
  "18174": "return keyValue ; ",
  "18175": "} private void deleteChildEntities ( Table childTable , Field keyField , String keyValue ) throws SQLException { ",
  "18176": "String childTableName = String . join ( \".\" , tablePrefix , childTable . name ) ; ",
  "18177": "PreparedStatement deleteStatement = getUpdateReferencesStatement ( SqlMethod . DELETE , childTableName , keyField , keyValue , null ) ; ",
  "18178": "LOG . info ( deleteStatement . toString ( ) ) ; ",
  "18179": "int result = deleteStatement . executeUpdate ( ) ; ",
  "18180": "} private int updateStopTimesForPatternStop ( ObjectNode patternStop , int previousTravelTime ) throws SQLException { ",
  "18181": "tablePrefix ",
  "18182": "int travelTime = patternStop . get ( \"default_travel_time\" ) . asInt ( ) ; ",
  "18183": "int arrivalTime = previousTravelTime + travelTime ; ",
  "18184": "statement . setInt ( oneBasedIndex ++ , arrivalTime ) ; ",
  "18185": "int dwellTime = patternStop . get ( \"default_dwell_time\" ) . asInt ( ) ; ",
  "18186": "statement . setInt ( oneBasedIndex ++ , arrivalTime + dwellTime ) ; ",
  "18187": "statement . setString ( oneBasedIndex ++ , patternStop . get ( \"pattern_id\" ) . asText ( ) ) ; ",
  "18188": "statement . setInt ( oneBasedIndex ++ , patternStop . get ( \"stop_sequence\" ) . asInt ( ) ) ; ",
  "18189": "return travelTime + dwellTime ; ",
  "18190": "} private int updateStopTimesForPatternStops ( List < PatternStop > patternStops ) throws SQLException { ",
  "18191": "PatternStop firstPatternStop = patternStops . iterator ( ) . next ( ) ; ",
  "18192": "int firstStopSequence = firstPatternStop . stop_sequence ; ",
  "18193": "int previousStopSequence = firstStopSequence > 0 ? firstStopSequence - 1 : 0 ; ",
  "18194": "String timeField = firstStopSequence > 0 ? \"departure_time\" : \"arrival_time\" ; ",
  "18195": "String getFirstTravelTimeSql = String . format ( ",
  "18196": "timeField , ",
  "18197": "PreparedStatement statement = connection . prepareStatement ( getFirstTravelTimeSql ) ; ",
  "18198": "statement . setInt ( 1 , previousStopSequence ) ; ",
  "18199": "statement . setString ( 2 , firstPatternStop . pattern_id ) ; ",
  "18200": "Map < String , Integer > timesForTripIds = new HashMap < > ( ) ; ",
  "18201": "timesForTripIds . put ( resultSet . getString ( 1 ) , resultSet . getInt ( 2 ) ) ; ",
  "18202": "String updateTravelTimeSql = String . format ( ",
  "18203": "PreparedStatement updateStopTimeStatement = connection . prepareStatement ( updateTravelTimeSql ) ; ",
  "18204": "LOG . info ( updateStopTimeStatement . toString ( ) ) ; ",
  "18205": "final BatchTracker stopTimesTracker = new BatchTracker ( \"stop_times\" , updateStopTimeStatement ) ; ",
  "18206": "for ( String tripId : timesForTripIds . keySet ( ) ) { ",
  "18207": "int cumulativeTravelTime = timesForTripIds . get ( tripId ) ; ",
  "18208": "for ( PatternStop patternStop : patternStops ) { ",
  "18209": "int travelTime = patternStop . default_travel_time == Entity . INT_MISSING ? 0 : patternStop . default_travel_time ; ",
  "18210": "int dwellTime = patternStop . default_dwell_time == Entity . INT_MISSING ? 0 : patternStop . default_dwell_time ; ",
  "18211": "cumulativeTravelTime += travelTime ; ",
  "18212": "updateStopTimeStatement . setInt ( oneBasedIndex ++ , cumulativeTravelTime ) ; ",
  "18213": "cumulativeTravelTime += dwellTime ; ",
  "18214": "updateStopTimeStatement . setString ( oneBasedIndex ++ , tripId ) ; ",
  "18215": "updateStopTimeStatement . setInt ( oneBasedIndex ++ , patternStop . stop_sequence ) ; ",
  "18216": "stopTimesTracker . addBatch ( ) ; ",
  "18217": "return stopTimesTracker . executeRemaining ( ) ; ",
  "18218": "} private void verifyReferencesExist ( String referringTableName , Multimap < Table , String > referencesPerTable ) throws SQLException { ",
  "18219": "for ( Table referencedTable : referencesPerTable . keySet ( ) ) { ",
  "18220": "Collection < String > referenceStrings = referencesPerTable . get ( referencedTable ) ; ",
  "18221": "String referenceFieldName = referencedTable . getKeyFieldName ( ) ; ",
  "18222": "String checkCountSql = String . format ( ",
  "18223": "referenceFieldName , ",
  "18224": "referencedTable . name , ",
  "18225": "questionMarks ) ; ",
  "18226": "PreparedStatement preparedStatement = connection . prepareStatement ( checkCountSql ) ; ",
  "18227": "for ( String ref : referenceStrings ) { ",
  "18228": "preparedStatement . setString ( oneBasedIndex ++ , ref ) ; ",
  "18229": "LOG . info ( preparedStatement . toString ( ) ) ; ",
  "18230": "ResultSet resultSet = preparedStatement . executeQuery ( ) ; ",
  "18231": "Set < String > foundReferences = new HashSet < > ( ) ; ",
  "18232": "String referenceValue = resultSet . getString ( 1 ) ; ",
  "18233": "foundReferences . add ( referenceValue ) ; ",
  "18234": "referenceStrings . removeAll ( foundReferences ) ; ",
  "18235": "if ( referenceStrings . size ( ) > 0 ) { ",
  "18236": "referringTableName , ",
  "18237": "} private void reconcilePatternStops ( String patternId , List < PatternStop > newStops , Connection connection ) throws SQLException { ",
  "18238": "PreparedStatement getStopsStatement = connection . prepareStatement ( getStopIdsSql ) ; ",
  "18239": "getStopsStatement . setString ( 1 , patternId ) ; ",
  "18240": "LOG . info ( getStopsStatement . toString ( ) ) ; ",
  "18241": "ResultSet stopsResults = getStopsStatement . executeQuery ( ) ; ",
  "18242": "List < String > originalStopIds = new ArrayList < > ( ) ; ",
  "18243": "while ( stopsResults . next ( ) ) { ",
  "18244": "originalStopIds . add ( stopsResults . getString ( 1 ) ) ; ",
  "18245": "PreparedStatement getTripsStatement = connection . prepareStatement ( getTripIdsSql ) ; ",
  "18246": "getTripsStatement . setString ( 1 , patternId ) ; ",
  "18247": "ResultSet tripsResults = getTripsStatement . executeQuery ( ) ; ",
  "18248": "List < String > tripsForPattern = new ArrayList < > ( ) ; ",
  "18249": "while ( tripsResults . next ( ) ) { ",
  "18250": "tripsForPattern . add ( tripsResults . getString ( 1 ) ) ; ",
  "18251": "if ( tripsForPattern . size ( ) == 0 ) { ",
  "18252": "tablePrefix , tablePrefix , tablePrefix , patternId ) ; ",
  "18253": "if ( originalStopIds . size ( ) == newStops . size ( ) - 1 ) { ",
  "18254": "int differenceLocation = - 1 ; ",
  "18255": "for ( int i = 0 ; i < newStops . size ( ) ; i ++ ) { ",
  "18256": "if ( differenceLocation != - 1 ) { ",
  "18257": "if ( i < originalStopIds . size ( ) && ! originalStopIds . get ( i ) . equals ( newStops . get ( i + 1 ) . stop_id ) ) { ",
  "18258": "else if ( i == newStops . size ( ) - 1 || ! originalStopIds . get ( i ) . equals ( newStops . get ( i ) . stop_id ) ) { ",
  "18259": "differenceLocation = i ; ",
  "18260": "String updateSql = String . format ( ",
  "18261": "differenceLocation , ",
  "18262": "joinToTrips ",
  "18263": "LOG . info ( updateSql ) ; ",
  "18264": "PreparedStatement updateStatement = connection . prepareStatement ( updateSql ) ; ",
  "18265": "int updated = updateStatement . executeUpdate ( ) ; ",
  "18266": "insertBlankStopTimes ( tripsForPattern , newStops , differenceLocation , 1 , connection ) ; ",
  "18267": "else if ( originalStopIds . size ( ) == newStops . size ( ) + 1 ) { ",
  "18268": "for ( int i = 0 ; i < originalStopIds . size ( ) ; i ++ ) { ",
  "18269": "if ( ! originalStopIds . get ( i ) . equals ( newStops . get ( i - 1 ) . stop_id ) ) { ",
  "18270": "} else if ( i == originalStopIds . size ( ) - 1 || ! originalStopIds . get ( i ) . equals ( newStops . get ( i ) . stop_id ) ) { ",
  "18271": "String deleteSql = String . format ( ",
  "18272": "LOG . info ( deleteSql ) ; ",
  "18273": "PreparedStatement deleteStatement = connection . prepareStatement ( deleteSql ) ; ",
  "18274": "int deleted = deleteStatement . executeUpdate ( ) ; ",
  "18275": "String removedStopId = originalStopIds . get ( differenceLocation ) ; ",
  "18276": "else if ( originalStopIds . size ( ) == newStops . size ( ) ) { ",
  "18277": "int firstDifferentIndex = 0 ; ",
  "18278": "while ( originalStopIds . get ( firstDifferentIndex ) . equals ( newStops . get ( firstDifferentIndex ) . stop_id ) ) { ",
  "18279": "firstDifferentIndex ++ ; ",
  "18280": "if ( firstDifferentIndex == originalStopIds . size ( ) ) ",
  "18281": "int lastDifferentIndex = originalStopIds . size ( ) - 1 ; ",
  "18282": "while ( originalStopIds . get ( lastDifferentIndex ) . equals ( newStops . get ( lastDifferentIndex ) . stop_id ) ) { ",
  "18283": "lastDifferentIndex -- ; ",
  "18284": "if ( firstDifferentIndex == lastDifferentIndex ) { ",
  "18285": "String conditionalUpdate ; ",
  "18286": "int from , to ; ",
  "18287": "if ( originalStopIds . get ( firstDifferentIndex ) . equals ( newStops . get ( lastDifferentIndex ) . stop_id ) ) { ",
  "18288": "from = firstDifferentIndex ; ",
  "18289": "to = lastDifferentIndex ; ",
  "18290": "verifyInteriorStopsAreUnchanged ( originalStopIds , newStops , firstDifferentIndex , lastDifferentIndex , true ) ; ",
  "18291": "tablePrefix , from , to , from , to , tablePrefix , joinToTrips ) ; ",
  "18292": "} else if ( newStops . get ( firstDifferentIndex ) . stop_id . equals ( originalStopIds . get ( lastDifferentIndex ) ) ) { ",
  "18293": "from = lastDifferentIndex ; ",
  "18294": "to = firstDifferentIndex ; ",
  "18295": "verifyInteriorStopsAreUnchanged ( originalStopIds , newStops , firstDifferentIndex , lastDifferentIndex , false ) ; ",
  "18296": "PreparedStatement updateStatement = connection . prepareStatement ( conditionalUpdate ) ; ",
  "18297": "else if ( originalStopIds . size ( ) < newStops . size ( ) ) { ",
  "18298": "while ( ",
  "18299": "firstDifferentIndex < originalStopIds . size ( ) && ",
  "18300": "originalStopIds . get ( firstDifferentIndex ) . equals ( newStops . get ( firstDifferentIndex ) . stop_id ) ",
  "18301": "if ( firstDifferentIndex != originalStopIds . size ( ) ) ",
  "18302": "int stopsToInsert = newStops . size ( ) - firstDifferentIndex ; ",
  "18303": "insertBlankStopTimes ( tripsForPattern , newStops , firstDifferentIndex , stopsToInsert , connection ) ; ",
  "18304": "else throw new IllegalStateException ( RECONCILE_STOPS_ERROR_MSG ) ; ",
  "18305": "} private static void verifyInteriorStopsAreUnchanged ( ",
  "18306": "List < String > originalStopIds , ",
  "18307": "List < PatternStop > newStops , ",
  "18308": "int firstDifferentIndex , ",
  "18309": "int lastDifferentIndex , ",
  "18310": "boolean movedRight ",
  "18311": "List < String > newStopIds = newStops . stream ( ) . map ( s -> s . stop_id ) . collect ( Collectors . toList ( ) ) ; ",
  "18312": "int beginRegion = movedRight ? firstDifferentIndex : firstDifferentIndex + 1 ; ",
  "18313": "int endRegion = movedRight ? lastDifferentIndex - 1 : lastDifferentIndex ; ",
  "18314": "for ( int i = beginRegion ; i <= endRegion ; i ++ ) { ",
  "18315": "int shiftedIndex = movedRight ? i + 1 : i - 1 ; ",
  "18316": "String newStopId = newStopIds . get ( i ) ; ",
  "18317": "String originalStopId = originalStopIds . get ( shiftedIndex ) ; ",
  "18318": "if ( ! newStopId . equals ( originalStopId ) ) { ",
  "18319": "throw new IllegalStateException ( RECONCILE_STOPS_ERROR_MSG ) ; ",
  "18320": "} private void insertBlankStopTimes ( ",
  "18321": "List < String > tripIds , ",
  "18322": "int startingStopSequence , ",
  "18323": "int stopTimesToAdd , ",
  "18324": "if ( tripIds . isEmpty ( ) ) { ",
  "18325": "String insertSql = Table . STOP_TIMES . generateInsertSql ( tablePrefix , true ) ; ",
  "18326": "PreparedStatement insertStatement = connection . prepareStatement ( insertSql ) ; ",
  "18327": "int totalRowsUpdated = 0 ; ",
  "18328": "for ( int i = startingStopSequence ; i < stopTimesToAdd + startingStopSequence ; i ++ ) { ",
  "18329": "PatternStop patternStop = newStops . get ( i ) ; ",
  "18330": "StopTime stopTime = new StopTime ( ) ; ",
  "18331": "stopTime . stop_id = patternStop . stop_id ; ",
  "18332": "stopTime . drop_off_type = patternStop . drop_off_type ; ",
  "18333": "stopTime . pickup_type = patternStop . pickup_type ; ",
  "18334": "stopTime . timepoint = patternStop . timepoint ; ",
  "18335": "stopTime . shape_dist_traveled = patternStop . shape_dist_traveled ; ",
  "18336": "stopTime . stop_sequence = i ; ",
  "18337": "for ( String tripId : tripIds ) { ",
  "18338": "stopTime . trip_id = tripId ; ",
  "18339": "stopTime . setStatementParameters ( insertStatement , true ) ; ",
  "18340": "if ( count % INSERT_BATCH_SIZE == 0 ) { ",
  "18341": "int [ ] rowsUpdated = insertStatement . executeBatch ( ) ; ",
  "18342": "totalRowsUpdated += rowsUpdated . length ; ",
  "18343": "public int deleteWhere ( String fieldName , String value , boolean autoCommit ) throws SQLException { ",
  "18344": "String tableName = String . join ( \".\" , tablePrefix , specTable . name ) ; ",
  "18345": "TIntSet idsToDelete = getIdsForCondition ( tableName , fieldName , value , connection ) ; ",
  "18346": "TIntIterator iterator = idsToDelete . iterator ( ) ; ",
  "18347": "TIntList results = new TIntArrayList ( ) ; ",
  "18348": "int id = iterator . next ( ) ; ",
  "18349": "int result = delete ( id , false ) ; ",
  "18350": "if ( result != 1 ) { ",
  "18351": "results . add ( result ) ; ",
  "18352": "return results . size ( ) ; ",
  "18353": "public int delete ( Integer id , boolean autoCommit ) throws SQLException { ",
  "18354": "deleteFromReferencingTables ( tablePrefix , specTable , id ) ; ",
  "18355": "PreparedStatement statement = connection . prepareStatement ( specTable . generateDeleteSql ( tablePrefix ) ) ; ",
  "18356": "statement . setInt ( 1 , id ) ; ",
  "18357": "int result = statement . executeUpdate ( ) ; ",
  "18358": "if ( autoCommit ) connection . close ( ) ; ",
  "18359": "} private void deleteFromReferencingTables ( String namespace , Table table , int id ) throws SQLException { ",
  "18360": "updateReferencingTables ( namespace , table , id , null ) ; ",
  "18361": "} private static long handleStatementExecution ( PreparedStatement statement , boolean isCreating ) throws SQLException { ",
  "18362": "int affectedRows = statement . executeUpdate ( ) ; ",
  "18363": "String messageAction = isCreating ? \"Creating\" : \"Updating\" ; ",
  "18364": "if ( affectedRows == 0 ) { ",
  "18365": "try ( ResultSet generatedKeys = statement . getGeneratedKeys ( ) ) { ",
  "18366": "if ( generatedKeys . next ( ) ) { ",
  "18367": "long newId = generatedKeys . getLong ( 1 ) ; ",
  "18368": "return newId ; ",
  "18369": "} private void ensureReferentialIntegrity ( ",
  "18370": "String namespace , ",
  "18371": "Integer id ",
  "18372": "String keyField = table . getKeyFieldName ( ) ; ",
  "18373": "String tableName = String . join ( \".\" , namespace , table . name ) ; ",
  "18374": "if ( jsonObject . get ( keyField ) == null || jsonObject . get ( keyField ) . isNull ( ) ) { ",
  "18375": "if ( \"trip_id\" . equals ( keyField ) ) { ",
  "18376": "jsonObject . put ( keyField , UUID . randomUUID ( ) . toString ( ) ) ; ",
  "18377": "} else if ( \"agency_id\" . equals ( keyField ) ) { ",
  "18378": "int rowSize = getRowCount ( tableName , connection ) ; ",
  "18379": "if ( rowSize > 1 || ( isCreating && rowSize > 0 ) ) { ",
  "18380": "String keyValue = jsonObject . get ( keyField ) . asText ( ) ; ",
  "18381": "TIntSet uniqueIds = getIdsForCondition ( tableName , keyField , keyValue , connection ) ; ",
  "18382": "int size = uniqueIds . size ( ) ; ",
  "18383": "if ( size == 0 || ( size == 1 && id != null && uniqueIds . contains ( id ) ) ) { ",
  "18384": "if ( size == 0 && ! isCreating ) { ",
  "18385": "updateReferencingTables ( namespace , table , id , keyValue ) ; ",
  "18386": "table . entityClass . getSimpleName ( ) , ",
  "18387": "keyValue ) ",
  "18388": "if ( ! uniqueIds . contains ( id ) ) { ",
  "18389": "} else if ( size > 1 ) { ",
  "18390": "size , ",
  "18391": "keyValue ) ; ",
  "18392": "LOG . error ( message ) ; ",
  "18393": "throw new SQLException ( message ) ; ",
  "18394": "} private static int getRowCount ( String tableName , Connection connection ) throws SQLException { ",
  "18395": "LOG . info ( rowCountSql ) ; ",
  "18396": "ResultSet resultSet = statement . executeQuery ( rowCountSql ) ; ",
  "18397": "if ( resultSet . next ( ) ) return resultSet . getInt ( 1 ) ; ",
  "18398": "} private static TIntSet getIdsForCondition ( ",
  "18399": "String tableName , ",
  "18400": "String keyValue , ",
  "18401": "PreparedStatement statement = connection . prepareStatement ( idCheckSql ) ; ",
  "18402": "TIntSet uniqueIds = new TIntHashSet ( ) ; ",
  "18403": "int uniqueId = resultSet . getInt ( 1 ) ; ",
  "18404": "uniqueIds . add ( uniqueId ) ; ",
  "18405": "return uniqueIds ; ",
  "18406": "} private static Set < Table > getReferencingTables ( Table table ) { ",
  "18407": "Set < Table > referencingTables = new HashSet < > ( ) ; ",
  "18408": "for ( Table gtfsTable : Table . tablesInOrder ) { ",
  "18409": "if ( table . name . equals ( gtfsTable . name ) ) continue ; ",
  "18410": "for ( Field field : gtfsTable . fields ) { ",
  "18411": "if ( field . isForeignReference ( ) && field . referenceTable . name . equals ( table . name ) ) { ",
  "18412": "referencingTables . add ( gtfsTable ) ; ",
  "18413": "return referencingTables ; ",
  "18414": "} private static String getValueForId ( int id , String fieldName , String namespace , Table table , Connection connection ) throws SQLException { ",
  "18415": "LOG . info ( selectIdSql ) ; ",
  "18416": "Statement selectIdStatement = connection . createStatement ( ) ; ",
  "18417": "ResultSet selectResults = selectIdStatement . executeQuery ( selectIdSql ) ; ",
  "18418": "value = selectResults . getString ( 1 ) ; ",
  "18419": "} private void updateReferencingTables ( ",
  "18420": "String newKeyValue ",
  "18421": "Field keyField = table . getFieldForName ( table . getKeyFieldName ( ) ) ; ",
  "18422": "Class < ? extends Entity > entityClass = table . getEntityClass ( ) ; ",
  "18423": "SqlMethod sqlMethod = newKeyValue != null ? SqlMethod . UPDATE : SqlMethod . DELETE ; ",
  "18424": "Set < Table > referencingTables = getReferencingTables ( table ) ; ",
  "18425": "if ( referencingTables . size ( ) == 0 ) return ; ",
  "18426": "String keyValue = getValueForId ( id , keyField . name , namespace , table , connection ) ; ",
  "18427": "if ( keyValue == null ) { ",
  "18428": "String refTableName = String . join ( \".\" , namespace , referencingTable . name ) ; ",
  "18429": "for ( Field field : referencingTable . editorFields ( ) ) { ",
  "18430": "Table . TRIPS . name . equals ( referencingTable . name ) && ",
  "18431": "sqlMethod . equals ( SqlMethod . DELETE ) && ",
  "18432": "table . name . equals ( Table . PATTERNS . name ) ",
  "18433": "String stopTimesTable = String . join ( \".\" , namespace , \"stop_times\" ) ; ",
  "18434": "String frequenciesTable = String . join ( \".\" , namespace , \"frequencies\" ) ; ",
  "18435": "String tripsTable = String . join ( \".\" , namespace , \"trips\" ) ; ",
  "18436": "String deleteStopTimes = String . format ( ",
  "18437": "stopTimesTable , tripsTable , stopTimesTable , tripsTable , tripsTable ) ; ",
  "18438": "PreparedStatement deleteStopTimesStatement = connection . prepareStatement ( deleteStopTimes ) ; ",
  "18439": "deleteStopTimesStatement . setString ( 1 , keyValue ) ; ",
  "18440": "LOG . info ( deleteStopTimesStatement . toString ( ) ) ; ",
  "18441": "int deletedStopTimes = deleteStopTimesStatement . executeUpdate ( ) ; ",
  "18442": "String deleteFrequencies = String . format ( ",
  "18443": "frequenciesTable , tripsTable , frequenciesTable , tripsTable , tripsTable ) ; ",
  "18444": "PreparedStatement deleteFrequenciesStatement = connection . prepareStatement ( deleteFrequencies ) ; ",
  "18445": "deleteFrequenciesStatement . setString ( 1 , keyValue ) ; ",
  "18446": "LOG . info ( deleteFrequenciesStatement . toString ( ) ) ; ",
  "18447": "int deletedFrequencies = deleteFrequenciesStatement . executeUpdate ( ) ; ",
  "18448": "PreparedStatement updateStatement = getUpdateReferencesStatement ( sqlMethod , refTableName , field , keyValue , newKeyValue ) ; ",
  "18449": "int result = updateStatement . executeUpdate ( ) ; ",
  "18450": "if ( result > 0 ) { ",
  "18451": "if ( sqlMethod . equals ( SqlMethod . DELETE ) ) { ",
  "18452": "if ( table . isCascadeDeleteRestricted ( ) ) { ",
  "18453": "entityClass . getSimpleName ( ) , ",
  "18454": "keyField . name , ",
  "18455": "keyValue , ",
  "18456": "result , ",
  "18457": "referencingTable . name , ",
  "18458": "entityClass . getSimpleName ( ) ",
  "18459": "} private PreparedStatement getUpdateReferencesStatement ( ",
  "18460": "SqlMethod sqlMethod , ",
  "18461": "String refTableName , ",
  "18462": "Field keyField , ",
  "18463": "String sql ; ",
  "18464": "PreparedStatement statement ; ",
  "18465": "boolean isArrayField = keyField . getSqlType ( ) . equals ( JDBCType . ARRAY ) ; ",
  "18466": "switch ( sqlMethod ) { ",
  "18467": "case DELETE : ",
  "18468": "if ( isArrayField ) { ",
  "18469": "refTableName , ",
  "18470": "keyField . name ",
  "18471": "statement = connection . prepareStatement ( sql ) ; ",
  "18472": "return statement ; ",
  "18473": "case UPDATE : ",
  "18474": "statement . setString ( 2 , newKeyValue ) ; ",
  "18475": "String [ ] values = new String [ ] { keyValue } ; ",
  "18476": "statement . setArray ( 3 , connection . createArrayOf ( \"text\" , values ) ) ; ",
  "18477": "statement . setString ( 1 , newKeyValue ) ; ",
  "18478": "statement . setString ( 2 , keyValue ) ; ",
  "18479": "statement . setString ( oneBasedIndex ++ , agency_id ) ; ",
  "18480": "statement . setString ( oneBasedIndex ++ , agency_name ) ; ",
  "18481": "statement . setString ( oneBasedIndex ++ , agency_url != null ? agency_url . toString ( ) : null ) ; ",
  "18482": "statement . setString ( oneBasedIndex ++ , agency_timezone ) ; ",
  "18483": "statement . setString ( oneBasedIndex ++ , agency_lang ) ; ",
  "18484": "statement . setString ( oneBasedIndex ++ , agency_phone ) ; ",
  "18485": "statement . setString ( oneBasedIndex ++ , agency_branding_url != null ? agency_branding_url . toString ( ) : null ) ; ",
  "18486": "statement . setString ( oneBasedIndex ++ , agency_fare_url != null ? agency_fare_url . toString ( ) : null ) ; ",
  "18487": "statement . setString ( oneBasedIndex ++ , agency_email ) ; ",
  "18488": "} public T put ( String id , File feedFile ) throws Exception { ",
  "18489": "return put ( id , feedFile , null ) ; ",
  "18490": "} public T put ( Function < GTFSFeed , String > idGenerator , File feedFile ) throws Exception { ",
  "18491": "return put ( null , feedFile , idGenerator ) ; ",
  "18492": "} private T retrieveAndProcessFeed ( String originalId ) { ",
  "18493": "String id = cleanId ( originalId ) ; ",
  "18494": "String key = bucketFolder != null ? String . join ( \"/\" , bucketFolder , id ) : id ; ",
  "18495": "File dbFile = new File ( cacheDir , id + \".db\" ) ; ",
  "18496": "GTFSFeed feed ; ",
  "18497": "if ( dbFile . exists ( ) ) { ",
  "18498": "feed = new GTFSFeed ( dbFile . getAbsolutePath ( ) ) ; ",
  "18499": "if ( feed != null ) { ",
  "18500": "return processFeed ( feed ) ; ",
  "18501": "deleteLocalDBFiles ( id ) ; ",
  "18502": "if ( bucket != null ) { ",
  "18503": "S3Object db = s3 . getObject ( bucket , key + \".db\" ) ; ",
  "18504": "InputStream is = db . getObjectContent ( ) ; ",
  "18505": "FileOutputStream fos = new FileOutputStream ( dbFile ) ; ",
  "18506": "ByteStreams . copy ( is , fos ) ; ",
  "18507": "S3Object dbp = s3 . getObject ( bucket , key + \".db.p\" ) ; ",
  "18508": "InputStream isp = dbp . getObjectContent ( ) ; ",
  "18509": "FileOutputStream fosp = new FileOutputStream ( new File ( cacheDir , id + \".db.p\" ) ) ; ",
  "18510": "ByteStreams . copy ( isp , fosp ) ; ",
  "18511": "isp . close ( ) ; ",
  "18512": "fosp . close ( ) ; ",
  "18513": "} catch ( AmazonS3Exception e ) { ",
  "18514": "} catch ( ExecutionException | IOException e ) { ",
  "18515": "File feedFile = new File ( cacheDir , id + \".zip\" ) ; ",
  "18516": "if ( feedFile . exists ( ) ) { ",
  "18517": "if ( ! feedFile . exists ( ) && bucket != null ) { ",
  "18518": "S3Object gtfs = s3 . getObject ( bucket , key + \".zip\" ) ; ",
  "18519": "InputStream is = gtfs . getObjectContent ( ) ; ",
  "18520": "FileOutputStream fos = new FileOutputStream ( feedFile ) ; ",
  "18521": "return put ( originalId , feedFile ) ; ",
  "18522": "throw new NoSuchElementException ( originalId ) ; ",
  "18523": "} public boolean activeOn ( LocalDate date ) { ",
  "18524": "CalendarDate exception = calendar_dates . get ( date ) ; ",
  "18525": "if ( exception != null ) ",
  "18526": "return exception . exception_type == 1 ; ",
  "18527": "else if ( calendar == null ) ",
  "18528": "boolean outsideValidityRange = date . isAfter ( calendar . end_date ) || date . isBefore ( calendar . start_date ) ; ",
  "18529": "if ( outsideValidityRange ) return false ; ",
  "18530": "switch ( date . getDayOfWeek ( ) ) { ",
  "18531": "case MONDAY : ",
  "18532": "return calendar . monday == 1 ; ",
  "18533": "case TUESDAY : ",
  "18534": "return calendar . tuesday == 1 ; ",
  "18535": "case WEDNESDAY : ",
  "18536": "return calendar . wednesday == 1 ; ",
  "18537": "case THURSDAY : ",
  "18538": "return calendar . thursday == 1 ; ",
  "18539": "case FRIDAY : ",
  "18540": "return calendar . friday == 1 ; ",
  "18541": "case SATURDAY : ",
  "18542": "return calendar . saturday == 1 ; ",
  "18543": "case SUNDAY : ",
  "18544": "return calendar . sunday == 1 ; ",
  "18545": "setIntParameter ( statement , oneBasedIndex ++ , stop_sequence ) ; ",
  "18546": "statement . setString ( oneBasedIndex ++ , stop_id ) ; ",
  "18547": "setIntParameter ( statement , oneBasedIndex ++ , arrival_time ) ; ",
  "18548": "setIntParameter ( statement , oneBasedIndex ++ , departure_time ) ; ",
  "18549": "statement . setString ( oneBasedIndex ++ , stop_headsign ) ; ",
  "18550": "setIntParameter ( statement , oneBasedIndex ++ , pickup_type ) ; ",
  "18551": "setIntParameter ( statement , oneBasedIndex ++ , drop_off_type ) ; ",
  "18552": "setIntParameter ( statement , oneBasedIndex ++ , timepoint ) ; ",
  "18553": "statement . setString ( oneBasedIndex ++ , route_short_name ) ; ",
  "18554": "statement . setString ( oneBasedIndex ++ , route_long_name ) ; ",
  "18555": "statement . setString ( oneBasedIndex ++ , route_desc ) ; ",
  "18556": "setIntParameter ( statement , oneBasedIndex ++ , route_type ) ; ",
  "18557": "statement . setString ( oneBasedIndex ++ , route_url != null ? route_url . toString ( ) : null ) ; ",
  "18558": "statement . setString ( oneBasedIndex ++ , route_branding_url != null ? route_branding_url . toString ( ) : null ) ; ",
  "18559": "statement . setString ( oneBasedIndex ++ , route_color ) ; ",
  "18560": "statement . setString ( oneBasedIndex ++ , route_text_color ) ; ",
  "18561": "setIntParameter ( statement , oneBasedIndex ++ , 0 ) ; ",
  "18562": "setIntParameter ( statement , oneBasedIndex ++ , route_sort_order ) ; ",
  "18563": "} public static GraphQLFieldDefinition field ( String tableName ) { ",
  "18564": ". name ( tableName ) ",
  "18565": ". type ( new GraphQLList ( GraphQLGtfsSchema . routeType ) ) ",
  "18566": ". argument ( stringArg ( \"namespace\" ) ) ",
  "18567": ". argument ( multiStringArg ( \"route_id\" ) ) ",
  "18568": ". dataFetcher ( new JDBCFetcher ( tableName , null ) ) ",
  "18569": "public List < Map < String , Object > > get ( DataFetchingEnvironment environment ) { ",
  "18570": "Map < String , Object > parentEntityMap = environment . getSource ( ) ; ",
  "18571": "String namespace = ( String ) parentEntityMap . get ( \"namespace\" ) ; ",
  "18572": "List < String > parentJoinValues = new ArrayList < > ( ) ; ",
  "18573": "if ( parentJoinField != null ) { ",
  "18574": "Map < String , Object > enclosingEntity = environment . getSource ( ) ; ",
  "18575": "Object parentJoinValue = enclosingEntity . get ( parentJoinField ) ; ",
  "18576": "String parentJoinString = parentJoinValue == null ? null : parentJoinValue . toString ( ) ; ",
  "18577": "parentJoinValues . add ( parentJoinString ) ; ",
  "18578": "if ( parentJoinValue == null ) { ",
  "18579": "Map < String , Object > arguments = environment . getArguments ( ) ; ",
  "18580": "return getResults ( namespace , parentJoinValues , arguments ) ; ",
  "18581": "} List < Map < String , Object > > getResults ( ",
  "18582": "List < String > parentJoinValues , ",
  "18583": "Map < String , Object > graphQLQueryArguments ",
  "18584": "List < String > preparedStatementParameters = new ArrayList < > ( ) ; ",
  "18585": "List < Map < String , Object > > results = new ArrayList < > ( ) ; ",
  "18586": "if ( graphQLQueryArguments == null ) graphQLQueryArguments = new HashMap < > ( ) ; ",
  "18587": "validateNamespace ( namespace ) ; ",
  "18588": "StringBuilder sqlBuilder = new StringBuilder ( ) ; ",
  "18589": "Set < String > fromTables = new HashSet < > ( ) ; ",
  "18590": "fromTables . add ( String . join ( \".\" , namespace , tableName ) ) ; ",
  "18591": "List < String > whereConditions = new ArrayList < > ( ) ; ",
  "18592": "String sortBy = \"\" ; ",
  "18593": "if ( childJoinField != null && parentJoinValues != null && ! parentJoinValues . isEmpty ( ) ) { ",
  "18594": "if ( filterByExistingColumns ( namespace , childJoinField ) . contains ( childJoinField ) ) { ",
  "18595": "whereConditions . add ( ",
  "18596": "makeInClause ( childJoinField , parentJoinValues , preparedStatementParameters ) ",
  "18597": "LOG . warn ( ",
  "18598": "childJoinField , ",
  "18599": "namespace , ",
  "18600": "tableName ",
  "18601": "if ( sortField != null ) { ",
  "18602": "Set < String > argumentKeys = graphQLQueryArguments . keySet ( ) ; ",
  "18603": "for ( String key : argumentKeys ) { ",
  "18604": "if ( argsToSkip . contains ( key ) ) continue ; ",
  "18605": "if ( ID_ARG . equals ( key ) ) { ",
  "18606": "Integer value = ( Integer ) graphQLQueryArguments . get ( key ) ; ",
  "18607": "List < String > values = ( List < String > ) graphQLQueryArguments . get ( key ) ; ",
  "18608": "if ( values != null && ! values . isEmpty ( ) ) ",
  "18609": "whereConditions . add ( makeInClause ( key , values , preparedStatementParameters ) ) ; ",
  "18610": "if ( argumentKeys . containsAll ( boundingBoxArgs ) ) { ",
  "18611": "Set < String > boundsConditions = new HashSet < > ( ) ; ",
  "18612": "for ( String bound : boundingBoxArgs ) { ",
  "18613": "Double value = ( Double ) graphQLQueryArguments . get ( bound ) ; ",
  "18614": "String field = bound . toLowerCase ( ) . endsWith ( \"lon\" ) ? \"stop_lon\" : \"stop_lat\" ; ",
  "18615": "String fieldWithNamespace = String . join ( \".\" , namespace , \"stops\" , field ) ; ",
  "18616": "boundsConditions . add ( String . join ( delimiter , fieldWithNamespace , value . toString ( ) ) ) ; ",
  "18617": "if ( \"stops\" . equals ( tableName ) ) { ",
  "18618": "whereConditions . addAll ( boundsConditions ) ; ",
  "18619": "} else if ( \"patterns\" . equals ( tableName ) ) { ",
  "18620": "fromTables . add ( ",
  "18621": "namespace ",
  "18622": "if ( argumentKeys . contains ( DATE_ARG ) ) { ",
  "18623": "String tripsTable = String . format ( \"%s.trips\" , namespace ) ; ",
  "18624": "fromTables . add ( tripsTable ) ; ",
  "18625": "String date = getDateArgument ( graphQLQueryArguments ) ; ",
  "18626": "fromTables . add ( String . format ( ",
  "18627": "namespace ) ",
  "18628": "preparedStatementParameters . add ( 0 , date ) ; ",
  "18629": "if ( argumentKeys . contains ( FROM_ARG ) && argumentKeys . contains ( TO_ARG ) ) { ",
  "18630": "String timeFilteredTrips = \"trips_beginning_in_time_period\" ; ",
  "18631": "( int ) graphQLQueryArguments . get ( FROM_ARG ) , ",
  "18632": "( int ) graphQLQueryArguments . get ( TO_ARG ) , ",
  "18633": "timeFilteredTrips ) ) ; ",
  "18634": "if ( argumentKeys . contains ( SEARCH_ARG ) ) { ",
  "18635": "String value = ( String ) graphQLQueryArguments . get ( SEARCH_ARG ) ; ",
  "18636": "if ( ! value . isEmpty ( ) ) { ",
  "18637": "String [ ] searchColumns = new String [ ] { } ; ",
  "18638": "switch ( tableName ) { ",
  "18639": "case \"stops\" : ",
  "18640": "searchColumns = stopSearchColumns ; ",
  "18641": "searchColumns = routeSearchColumns ; ",
  "18642": "Set < String > searchFields = filterByExistingColumns ( namespace , searchColumns ) ; ",
  "18643": "List < String > searchClauses = new ArrayList < > ( ) ; ",
  "18644": "for ( String field : searchFields ) { ",
  "18645": "preparedStatementParameters . add ( String . format ( \"%%%s%%\" , value ) ) ; ",
  "18646": "if ( ! searchClauses . isEmpty ( ) ) { ",
  "18647": "if ( ! whereConditions . isEmpty ( ) ) { ",
  "18648": "sqlBuilder . append ( sortBy ) ; ",
  "18649": "Integer limit = ( Integer ) graphQLQueryArguments . get ( LIMIT_ARG ) ; ",
  "18650": "limit = autoLimit ? DEFAULT_ROWS_TO_FETCH : - 1 ; ",
  "18651": "if ( limit > MAX_ROWS_TO_FETCH ) { ",
  "18652": "limit = MAX_ROWS_TO_FETCH ; ",
  "18653": "if ( limit == - 1 ) { ",
  "18654": "Integer offset = ( Integer ) graphQLQueryArguments . get ( OFFSET_ARG ) ; ",
  "18655": "if ( offset != null && offset >= 0 ) { ",
  "18656": "connection = GTFSGraphQL . getConnection ( ) ; ",
  "18657": "PreparedStatement preparedStatement = connection . prepareStatement ( sqlBuilder . toString ( ) ) ; ",
  "18658": "for ( String parameter : preparedStatementParameters ) { ",
  "18659": "preparedStatement . setString ( oneBasedIndex ++ , parameter ) ; ",
  "18660": "if ( preparedStatement . execute ( ) ) { ",
  "18661": "ResultSet resultSet = preparedStatement . getResultSet ( ) ; ",
  "18662": "ResultSetMetaData meta = resultSet . getMetaData ( ) ; ",
  "18663": "int nColumns = meta . getColumnCount ( ) ; ",
  "18664": "Map < String , Object > resultMap = new HashMap < > ( ) ; ",
  "18665": "resultMap . put ( \"namespace\" , namespace ) ; ",
  "18666": "for ( int i = 1 ; i <= nColumns ; i ++ ) { ",
  "18667": "resultMap . put ( meta . getColumnName ( i ) , resultSet . getObject ( i ) ) ; ",
  "18668": "results . add ( resultMap ) ; ",
  "18669": "} private Set < String > filterByExistingColumns ( String namespace , String ... columnsToCheck ) { ",
  "18670": "Set < String > columnsForTable = new HashSet < > ( ) ; ",
  "18671": "ResultSet columns = connection ",
  "18672": ". getMetaData ( ) ",
  "18673": ". getColumns ( null , namespace , tableName , null ) ; ",
  "18674": "while ( columns . next ( ) ) { ",
  "18675": "String column = columns . getString ( 4 ) ; ",
  "18676": "columnsForTable . add ( column ) ; ",
  "18677": "columnsForTable . retainAll ( Arrays . asList ( columnsToCheck ) ) ; ",
  "18678": "return columnsForTable ; ",
  "18679": "} static String filterEquals ( String filterField , String string , List < String > parameters ) { ",
  "18680": "parameters . add ( string ) ; ",
  "18681": "} static String makeInClause ( String filterField , List < String > strings , List < String > parameters ) { ",
  "18682": "if ( strings . size ( ) == 1 ) { ",
  "18683": "return filterEquals ( filterField , strings . get ( 0 ) , parameters ) ; ",
  "18684": "parameters . addAll ( strings ) ; ",
  "18685": "} public static void initialize ( DataSource dataSource ) { ",
  "18686": "GTFSGraphQL . dataSource = dataSource ; ",
  "18687": "GRAPHQL = GraphQL . newGraphQL ( GraphQLGtfsSchema . feedBasedSchema ) ",
  "18688": "} public List < Field > editorFields ( ) { ",
  "18689": "List < Field > editorFields = new ArrayList < > ( ) ; ",
  "18690": "for ( Field f : fields ) if ( f . requirement == REQUIRED || f . requirement == OPTIONAL || f . requirement == EDITOR ) { ",
  "18691": "editorFields . add ( f ) ; ",
  "18692": "return editorFields ; ",
  "18693": "} public List < Field > requiredFields ( ) { ",
  "18694": "List < Field > requiredFields = new ArrayList < > ( ) ; ",
  "18695": "for ( Field f : fields ) if ( f . requirement == REQUIRED ) requiredFields . add ( f ) ; ",
  "18696": "return requiredFields ; ",
  "18697": "} public List < Field > specFields ( ) { ",
  "18698": "List < Field > specFields = new ArrayList < > ( ) ; ",
  "18699": "for ( Field f : fields ) if ( f . requirement == REQUIRED || f . requirement == OPTIONAL ) specFields . add ( f ) ; ",
  "18700": "return specFields ; ",
  "18701": "} public boolean createSqlTable ( Connection connection , String namespace , boolean makeIdSerial , String [ ] primaryKeyFields ) { ",
  "18702": "String tableName = namespace != null ? String . join ( \".\" , namespace , name ) : name ; ",
  "18703": "String fieldDeclarations = Arrays . stream ( fields ) ",
  "18704": ". map ( Field :: getSqlDeclaration ) ",
  "18705": "if ( primaryKeyFields != null ) { ",
  "18706": "String idFieldType = makeIdSerial ? \"serial\" : \"bigint\" ; ",
  "18707": "LOG . info ( dropSql ) ; ",
  "18708": "statement . execute ( dropSql ) ; ",
  "18709": "LOG . info ( createSql ) ; ",
  "18710": "return statement . execute ( createSql ) ; ",
  "18711": "} public String generateInsertSql ( String namespace , boolean setDefaultId ) { ",
  "18712": "String tableName = namespace == null ",
  "18713": ": String . join ( \".\" , namespace , name ) ; ",
  "18714": "String joinedFieldNames = commaSeparatedNames ( editorFields ( ) ) ; ",
  "18715": "String idValue = setDefaultId ? \"DEFAULT\" : \"?\" ; ",
  "18716": "tableName , ",
  "18717": "joinedFieldNames , ",
  "18718": "idValue , ",
  "18719": "} public CsvReader getCsvReader ( ZipFile zipFile , SQLErrorStorage sqlErrorStorage ) { ",
  "18720": "final String tableFileName = this . name + \".txt\" ; ",
  "18721": "ZipEntry entry = zipFile . getEntry ( tableFileName ) ; ",
  "18722": "Enumeration < ? extends ZipEntry > entries = zipFile . entries ( ) ; ",
  "18723": "ZipEntry e = entries . nextElement ( ) ; ",
  "18724": "if ( e . getName ( ) . endsWith ( tableFileName ) ) { ",
  "18725": "entry = e ; ",
  "18726": "if ( sqlErrorStorage != null ) sqlErrorStorage . storeError ( NewGTFSError . forTable ( this , TABLE_IN_SUBDIRECTORY ) ) ; ",
  "18727": "InputStream zipInputStream = zipFile . getInputStream ( entry ) ; ",
  "18728": "InputStream bomInputStream = new BOMInputStream ( zipInputStream ) ; ",
  "18729": "CsvReader csvReader = new CsvReader ( bomInputStream , ',' , Charset . forName ( \"UTF8\" ) ) ; ",
  "18730": "csvReader . readHeaders ( ) ; ",
  "18731": "return csvReader ; ",
  "18732": "} public static String commaSeparatedNames ( List < Field > fieldsToJoin , String prefix , boolean csvOutput ) { ",
  "18733": "return fieldsToJoin . stream ( ) ",
  "18734": ". map ( f -> f . getColumnExpression ( prefix , csvOutput ) ) ",
  "18735": "} public String generateUpdateSql ( String namespace , int id ) { ",
  "18736": "String joinedFieldNames = editorFields ( ) . stream ( ) ",
  "18737": "String tableName = namespace == null ? name : String . join ( \".\" , namespace , name ) ; ",
  "18738": "} public String generateSelectSql ( String namespace , Requirement minimumRequirement ) { ",
  "18739": "String fieldsString ; ",
  "18740": "String tableName = String . join ( \".\" , namespace , name ) ; ",
  "18741": "String fieldPrefix = tableName + \".\" ; ",
  "18742": "if ( minimumRequirement . equals ( EDITOR ) ) { ",
  "18743": "fieldsString = commaSeparatedNames ( editorFields ( ) , fieldPrefix , true ) ; ",
  "18744": "} else if ( minimumRequirement . equals ( OPTIONAL ) ) { ",
  "18745": "fieldsString = commaSeparatedNames ( specFields ( ) , fieldPrefix , true ) ; ",
  "18746": "} else if ( minimumRequirement . equals ( REQUIRED ) ) { ",
  "18747": "fieldsString = commaSeparatedNames ( requiredFields ( ) , fieldPrefix , true ) ; ",
  "18748": "} else fieldsString = \"*\" ; ",
  "18749": "} public String generateSelectAllExistingFieldsSql ( Connection connection , String namespace ) throws SQLException { ",
  "18750": "PreparedStatement statement = connection . prepareStatement ( ",
  "18751": "statement . setString ( 1 , namespace ) ; ",
  "18752": "statement . setString ( 2 , name ) ; ",
  "18753": "ResultSet result = statement . executeQuery ( ) ; ",
  "18754": "List < Field > existingFields = new ArrayList < > ( ) ; ",
  "18755": "while ( result . next ( ) ) { ",
  "18756": "String columnName = result . getString ( 1 ) ; ",
  "18757": "existingFields . add ( getFieldForName ( columnName ) ) ; ",
  "18758": "} public String generateJoinSql ( String optionalSelect , Table joinTable , String joinType , String namespace , String fieldName , boolean prefixTableName ) { ",
  "18759": "fieldName = getKeyFieldName ( ) ; ",
  "18760": "if ( joinType == null ) { ",
  "18761": "String joinTableQuery ; ",
  "18762": "String joinTableName ; ",
  "18763": "if ( optionalSelect != null ) { ",
  "18764": "joinTableName = joinTable . name ; ",
  "18765": "joinTableQuery = joinTableName = String . format ( \"%s.%s\" , namespace , joinTable . name ) ; ",
  "18766": "String tableName = prefixTableName ? String . format ( \"%s.%s\" , namespace , this . name ) : this . name ; ",
  "18767": "joinType , ",
  "18768": "joinTableQuery , ",
  "18769": "tableName , fieldName , ",
  "18770": "joinTableName , fieldName ) ; ",
  "18771": "} public String generateDeleteSql ( String namespace , String fieldName ) { ",
  "18772": "String whereField = fieldName == null ? \"id\" : fieldName ; ",
  "18773": "} public String getOrderFieldName ( ) { ",
  "18774": "String name = fields [ 1 ] . name ; ",
  "18775": "if ( name . contains ( \"_sequence\" ) || compoundKey ) return name ; ",
  "18776": "} public String getIndexFields ( ) { ",
  "18777": "String orderFieldName = getOrderFieldName ( ) ; ",
  "18778": "if ( orderFieldName == null ) return getKeyFieldName ( ) ; ",
  "18779": "else return String . join ( \",\" , getKeyFieldName ( ) , orderFieldName ) ; ",
  "18780": "} public void createIndexes ( Connection connection , String namespace ) throws SQLException { ",
  "18781": "if ( \"agency\" . equals ( name ) || \"feed_info\" . equals ( name ) ) { ",
  "18782": "String tableName ; ",
  "18783": "if ( namespace == null ) { ",
  "18784": "tableName = namespace . endsWith ( \".\" ) ? namespace + name : String . join ( \".\" , namespace , name ) ; ",
  "18785": "String indexColumns = getIndexFields ( ) ; ",
  "18786": "String indexName = String . join ( \"_\" , tableName . replace ( \".\" , \"_\" ) , \"idx\" ) ; ",
  "18787": "LOG . info ( indexSql ) ; ",
  "18788": "connection . createStatement ( ) . execute ( indexSql ) ; ",
  "18789": "if ( field . shouldBeIndexed ( ) ) { ",
  "18790": "String fieldIndex = String . join ( \"_\" , tableName . replace ( \".\" , \"_\" ) , field . name , \"idx\" ) ; ",
  "18791": "LOG . info ( sql ) ; ",
  "18792": "statement . execute ( sql ) ; ",
  "18793": "} public boolean createSqlTableFrom ( Connection connection , String tableToClone ) { ",
  "18794": "if ( tableToClone . endsWith ( \"stop_times\" ) ) { ",
  "18795": "normalizeAndCloneStopTimes ( statement , name , tableToClone ) ; ",
  "18796": "LOG . info ( createTableAsSql ) ; ",
  "18797": "statement . execute ( createTableAsSql ) ; ",
  "18798": "applyAutoIncrementingSequence ( statement ) ; ",
  "18799": "if ( usePrimaryKey ) { ",
  "18800": "LOG . info ( addPrimaryKeySql ) ; ",
  "18801": "statement . execute ( addPrimaryKeySql ) ; ",
  "18802": "createSqlTable ( connection , true ) ; ",
  "18803": "} private void normalizeAndCloneStopTimes ( Statement statement , String name , String tableToClone ) throws SQLException { ",
  "18804": "LOG . info ( createTableLikeSql ) ; ",
  "18805": "statement . execute ( createTableLikeSql ) ; ",
  "18806": "long normalizeStartTime = System . currentTimeMillis ( ) ; ",
  "18807": "List < String > columns = new ArrayList < > ( ) ; ",
  "18808": "ResultSetMetaData metadata = resultSet . getMetaData ( ) ; ",
  "18809": "int nColumns = metadata . getColumnCount ( ) ; ",
  "18810": "columns . add ( metadata . getColumnName ( i ) ) ; ",
  "18811": "LOG . info ( insertAllSql ) ; ",
  "18812": "statement . execute ( insertAllSql ) ; ",
  "18813": "} private void applyAutoIncrementingSequence ( Statement statement ) throws SQLException { ",
  "18814": "int maxID = 0 ; ",
  "18815": "LOG . info ( selectMaxSql ) ; ",
  "18816": "statement . execute ( selectMaxSql ) ; ",
  "18817": "ResultSet maxIdResult = statement . getResultSet ( ) ; ",
  "18818": "if ( maxIdResult . next ( ) ) { ",
  "18819": "maxID = maxIdResult . getInt ( 1 ) ; ",
  "18820": "if ( maxID < 1 ) { ",
  "18821": "maxID = 1 ; ",
  "18822": "String sequenceName = name + \"_id_seq\" ; ",
  "18823": "LOG . info ( createSequenceSql ) ; ",
  "18824": "statement . execute ( createSequenceSql ) ; ",
  "18825": "LOG . info ( alterColumnNextSql ) ; ",
  "18826": "statement . execute ( alterColumnNextSql ) ; ",
  "18827": "LOG . info ( alterColumnNotNullSql ) ; ",
  "18828": "statement . execute ( alterColumnNotNullSql ) ; ",
  "18829": "} public Field [ ] getFieldsFromFieldHeaders ( String [ ] headers , SQLErrorStorage errorStorage ) { ",
  "18830": "Field [ ] fields = new Field [ headers . length ] ; ",
  "18831": "Set < String > fieldsSeen = new HashSet < > ( ) ; ",
  "18832": "for ( int h = 0 ; h < headers . length ; h ++ ) { ",
  "18833": "String header = sanitize ( headers [ h ] , errorStorage ) ; ",
  "18834": "if ( fieldsSeen . contains ( header ) || \"id\" . equals ( header ) ) { ",
  "18835": "if ( errorStorage != null ) errorStorage . storeError ( NewGTFSError . forTable ( this , DUPLICATE_HEADER ) . setBadValue ( header ) ) ; ",
  "18836": "fields [ h ] = null ; ",
  "18837": "fields [ h ] = getFieldForName ( header ) ; ",
  "18838": "fieldsSeen . add ( header ) ; ",
  "18839": "} public int getKeyFieldIndex ( Field [ ] fields ) { ",
  "18840": "String keyField = getKeyFieldName ( ) ; ",
  "18841": "return Field . getFieldIndex ( fields , keyField ) ; ",
  "18842": "} public static String randomIdString ( ) { ",
  "18843": "MersenneTwister twister = new MersenneTwister ( ) ; ",
  "18844": "final int length = 27 ; ",
  "18845": "chars [ i ] = ( char ) ( 'a' + twister . nextInt ( 26 ) ) ; ",
  "18846": "chars [ 4 ] = '_' ; ",
  "18847": "} public static void ensureValidNamespace ( String namespace ) throws InvalidNamespaceException { ",
  "18848": "Pattern pattern = Pattern . compile ( \"[^a-zA-Z0-9_\\\\.]\" ) ; ",
  "18849": "Matcher matcher = pattern . matcher ( namespace ) ; ",
  "18850": "throw new InvalidNamespaceException ( ) ; ",
  "18851": "} public static int getFieldIndex ( Field [ ] fields , String name ) { ",
  "18852": "for ( int i = 0 ; i < fields . length ; i ++ ) if ( fields [ i ] . name . equals ( name ) ) return i ; ",
  "18853": "} public String getColumnExpression ( String prefix , boolean csvOutput ) { ",
  "18854": "return prefix != null ? String . format ( \"%s%s\" , prefix , name ) : name ; ",
  "18855": "public Set < Integer > keySet ( ) { ",
  "18856": "Set < Integer > ret = new LinkedHashSet < > ( ) ; ",
  "18857": "for ( Tuple2 < String , Integer > t : wrapped . keySet ( ) ) { ",
  "18858": "ret . add ( t . b ) ; ",
  "18859": "return Collections . unmodifiableSet ( ret ) ; ",
  "18860": "} public Set < NewGTFSError > setParameter ( PreparedStatement preparedStatement , int oneBasedIndex , LocalDate localDate ) { ",
  "18861": "if ( localDate == null ) setNull ( preparedStatement , oneBasedIndex ) ; ",
  "18862": "else preparedStatement . setString ( oneBasedIndex , localDate . format ( GTFS_DATE_FORMATTER ) ) ; ",
  "18863": "throw new StorageException ( e ) ; ",
  "18864": "} public void loadFromFile ( ZipFile zip , String fid ) throws Exception { ",
  "18865": "checksum = zip . stream ( ) . mapToLong ( ZipEntry :: getCrc ) . reduce ( ( l1 , l2 ) -> l1 ^ l2 ) . getAsLong ( ) ; ",
  "18866": "db . getAtomicLong ( \"checksum\" ) . set ( checksum ) ; ",
  "18867": "new FeedInfo . Loader ( this ) . loadTable ( zip ) ; ",
  "18868": "if ( fid != null ) { ",
  "18869": "feedId = fid ; ",
  "18870": "else if ( feedId == null || feedId . isEmpty ( ) ) { ",
  "18871": "feedId = new File ( zip . getName ( ) ) . getName ( ) . replaceAll ( \"\\\\.zip$\" , \"\" ) ; ",
  "18872": "db . getAtomicString ( \"feed_id\" ) . set ( feedId ) ; ",
  "18873": "new Agency . Loader ( this ) . loadTable ( zip ) ; ",
  "18874": "Map < String , Service > serviceTable = new HashMap < > ( ) ; ",
  "18875": "new Calendar . Loader ( this , serviceTable ) . loadTable ( zip ) ; ",
  "18876": "new CalendarDate . Loader ( this , serviceTable ) . loadTable ( zip ) ; ",
  "18877": "this . services . putAll ( serviceTable ) ; ",
  "18878": "serviceTable = null ; ",
  "18879": "Map < String , Fare > fares = new HashMap < > ( ) ; ",
  "18880": "new FareAttribute . Loader ( this , fares ) . loadTable ( zip ) ; ",
  "18881": "new FareRule . Loader ( this , fares ) . loadTable ( zip ) ; ",
  "18882": "this . fares . putAll ( fares ) ; ",
  "18883": "fares = null ; ",
  "18884": "new Route . Loader ( this ) . loadTable ( zip ) ; ",
  "18885": "new ShapePoint . Loader ( this ) . loadTable ( zip ) ; ",
  "18886": "new Stop . Loader ( this ) . loadTable ( zip ) ; ",
  "18887": "new Transfer . Loader ( this ) . loadTable ( zip ) ; ",
  "18888": "new Trip . Loader ( this ) . loadTable ( zip ) ; ",
  "18889": "new Frequency . Loader ( this ) . loadTable ( zip ) ; ",
  "18890": "new StopTime . Loader ( this ) . loadTable ( zip ) ; ",
  "18891": "for ( GTFSError error : errors ) { ",
  "18892": "LOG . info ( \"{}\" , error ) ; ",
  "18893": "Bind . histogram ( stop_times , stopCountByStopTime , ( key , stopTime ) -> stopTime . stop_id ) ; ",
  "18894": "Bind . secondaryKeys ( stop_times , stopStopTimeSet , ( key , stopTime ) -> new String [ ] { stopTime . stop_id } ) ; ",
  "18895": "Bind . secondaryKeys ( trips , tripsPerService , ( key , trip ) -> new String [ ] { trip . service_id } ) ; ",
  "18896": "Bind . secondaryKeys ( services , servicesPerDate , ( key , service ) -> { ",
  "18897": "LocalDate startDate = service . calendar != null ",
  "18898": "? service . calendar . start_date ",
  "18899": ": service . calendar_dates . keySet ( ) . stream ( ) . sorted ( ) . findFirst ( ) . get ( ) ; ",
  "18900": "LocalDate endDate = service . calendar != null ",
  "18901": "? service . calendar . end_date ",
  "18902": ": service . calendar_dates . keySet ( ) . stream ( ) . sorted ( ) . reduce ( ( first , second ) -> second ) . get ( ) ; ",
  "18903": "int daysOfService = ( int ) ChronoUnit . DAYS . between ( startDate , endDate . plus ( 1 , ChronoUnit . DAYS ) ) ; ",
  "18904": "return IntStream . range ( 0 , daysOfService ) ",
  "18905": ". mapToObj ( offset -> startDate . plusDays ( offset ) ) ",
  "18906": ". filter ( service :: activeOn ) ",
  "18907": ". map ( date -> date . format ( dateFormatter ) ) ",
  "18908": ". toArray ( size -> new String [ size ] ) ; ",
  "18909": "loaded = true ; ",
  "18910": "} public void validate ( boolean repair , Validator ... validators ) { ",
  "18911": "long startValidation = System . currentTimeMillis ( ) ; ",
  "18912": "for ( Validator validator : validators ) { ",
  "18913": "long startValidator = System . currentTimeMillis ( ) ; ",
  "18914": "long endValidator = System . currentTimeMillis ( ) ; ",
  "18915": "long diff = endValidator - startValidator ; ",
  "18916": "long endValidation = System . nanoTime ( ) ; ",
  "18917": "long total = endValidation - startValidation ; ",
  "18918": "} public static GTFSFeed fromFile ( String file , String feedId ) { ",
  "18919": "ZipFile zip ; ",
  "18920": "zip = new ZipFile ( file ) ; ",
  "18921": "if ( feedId == null ) { ",
  "18922": "feed . loadFromFile ( zip ) ; ",
  "18923": "feed . loadFromFile ( zip , feedId ) ; ",
  "18924": "return feed ; ",
  "18925": "} public STRtree getSpatialIndex ( ) { ",
  "18926": "if ( this . spatialIndex == null ) { ",
  "18927": "STRtree stopIndex = new STRtree ( ) ; ",
  "18928": "for ( Stop stop : this . stops . values ( ) ) { ",
  "18929": "if ( Double . isNaN ( stop . stop_lat ) || Double . isNaN ( stop . stop_lon ) ) { ",
  "18930": "Coordinate stopCoord = new Coordinate ( stop . stop_lat , stop . stop_lon ) ; ",
  "18931": "stopIndex . insert ( new Envelope ( stopCoord ) , stop ) ; ",
  "18932": "stopIndex . build ( ) ; ",
  "18933": "this . spatialIndex = stopIndex ; ",
  "18934": "return this . spatialIndex ; ",
  "18935": "} public void findPatterns ( ) { ",
  "18936": "PatternFinder patternFinder = new PatternFinder ( ) ; ",
  "18937": "for ( Trip trip : this . trips . values ( ) ) { ",
  "18938": "Iterable < StopTime > orderedStopTimesForTrip = this . getOrderedStopTimesForTrip ( trip . trip_id ) ; ",
  "18939": "patternFinder . processTrip ( trip , orderedStopTimesForTrip ) ; ",
  "18940": "Map < TripPatternKey , Pattern > patternObjects = patternFinder . createPatternObjects ( this . stops , null ) ; ",
  "18941": "this . patterns . putAll ( patternObjects . values ( ) . stream ( ) ",
  "18942": ". collect ( Collectors . toMap ( Pattern :: getId , pattern -> pattern ) ) ) ; ",
  "18943": "} public Iterable < StopTime > getInterpolatedStopTimesForTrip ( String trip_id ) throws FirstAndLastStopsDoNotHaveTimes { ",
  "18944": "StopTime [ ] stopTimes = StreamSupport . stream ( getOrderedStopTimesForTrip ( trip_id ) . spliterator ( ) , false ) ",
  "18945": ". map ( st -> st . clone ( ) ) ",
  "18946": ". toArray ( i -> new StopTime [ i ] ) ; ",
  "18947": "if ( stopTimes . length == 0 ) return Collections . emptyList ( ) ; ",
  "18948": "if ( st . arrival_time != Entity . INT_MISSING && st . departure_time == Entity . INT_MISSING ) { ",
  "18949": "st . departure_time = st . arrival_time ; ",
  "18950": "if ( st . arrival_time == Entity . INT_MISSING && st . departure_time != Entity . INT_MISSING ) { ",
  "18951": "st . arrival_time = st . departure_time ; ",
  "18952": "if ( stopTimes [ 0 ] . departure_time == Entity . INT_MISSING || stopTimes [ stopTimes . length - 1 ] . departure_time == Entity . INT_MISSING ) { ",
  "18953": "throw new FirstAndLastStopsDoNotHaveTimes ( ) ; ",
  "18954": "int startOfInterpolatedBlock = - 1 ; ",
  "18955": "for ( int stopTime = 0 ; stopTime < stopTimes . length ; stopTime ++ ) { ",
  "18956": "if ( stopTimes [ stopTime ] . departure_time == Entity . INT_MISSING && startOfInterpolatedBlock == - 1 ) { ",
  "18957": "startOfInterpolatedBlock = stopTime ; ",
  "18958": "else if ( stopTimes [ stopTime ] . departure_time != Entity . INT_MISSING && startOfInterpolatedBlock != - 1 ) { ",
  "18959": "int nInterpolatedStops = stopTime - startOfInterpolatedBlock ; ",
  "18960": "double totalLengthOfInterpolatedSection = 0 ; ",
  "18961": "double [ ] lengthOfInterpolatedSections = new double [ nInterpolatedStops ] ; ",
  "18962": "GeodeticCalculator calc = new GeodeticCalculator ( ) ; ",
  "18963": "for ( int stopTimeToInterpolate = startOfInterpolatedBlock , i = 0 ; stopTimeToInterpolate < stopTime ; stopTimeToInterpolate ++ , i ++ ) { ",
  "18964": "Stop start = stops . get ( stopTimes [ stopTimeToInterpolate - 1 ] . stop_id ) ; ",
  "18965": "Stop end = stops . get ( stopTimes [ stopTimeToInterpolate ] . stop_id ) ; ",
  "18966": "calc . setStartingGeographicPoint ( start . stop_lon , start . stop_lat ) ; ",
  "18967": "calc . setDestinationGeographicPoint ( end . stop_lon , end . stop_lat ) ; ",
  "18968": "double segLen = calc . getOrthodromicDistance ( ) ; ",
  "18969": "totalLengthOfInterpolatedSection += segLen ; ",
  "18970": "lengthOfInterpolatedSections [ i ] = segLen ; ",
  "18971": "Stop start = stops . get ( stopTimes [ stopTime - 1 ] . stop_id ) ; ",
  "18972": "Stop end = stops . get ( stopTimes [ stopTime ] . stop_id ) ; ",
  "18973": "totalLengthOfInterpolatedSection += calc . getOrthodromicDistance ( ) ; ",
  "18974": "int departureBeforeInterpolation = stopTimes [ startOfInterpolatedBlock - 1 ] . departure_time ; ",
  "18975": "int arrivalAfterInterpolation = stopTimes [ stopTime ] . arrival_time ; ",
  "18976": "int totalTime = arrivalAfterInterpolation - departureBeforeInterpolation ; ",
  "18977": "double lengthSoFar = 0 ; ",
  "18978": "lengthSoFar += lengthOfInterpolatedSections [ i ] ; ",
  "18979": "int time = ( int ) ( departureBeforeInterpolation + totalTime * ( lengthSoFar / totalLengthOfInterpolatedSection ) ) ; ",
  "18980": "stopTimes [ stopTimeToInterpolate ] . arrival_time = stopTimes [ stopTimeToInterpolate ] . departure_time = time ; ",
  "18981": "startOfInterpolatedBlock = - 1 ; ",
  "18982": "return Arrays . asList ( stopTimes ) ; ",
  "18983": "} public double getTripDistance ( String trip_id , boolean straightLine ) { ",
  "18984": "return straightLine ",
  "18985": "? GeoUtils . getDistance ( this . getStraightLineForStops ( trip_id ) ) ",
  "18986": ": GeoUtils . getDistance ( this . getTripGeometry ( trip_id ) ) ; ",
  "18987": "} public double getTripSpeed ( String trip_id , boolean straightLine ) { ",
  "18988": "StopTime firstStopTime = this . stop_times . ceilingEntry ( Fun . t2 ( trip_id , null ) ) . getValue ( ) ; ",
  "18989": "StopTime lastStopTime = this . stop_times . floorEntry ( Fun . t2 ( trip_id , Fun . HI ) ) . getValue ( ) ; ",
  "18990": "if ( ! firstStopTime . trip_id . equals ( trip_id ) || ! lastStopTime . trip_id . equals ( trip_id ) ) { ",
  "18991": "double distance = getTripDistance ( trip_id , straightLine ) ; ",
  "18992": "int time = lastStopTime . arrival_time - firstStopTime . departure_time ; ",
  "18993": "return distance / time ; ",
  "18994": "} public List < StopTime > getStopTimesForStop ( String stop_id ) { ",
  "18995": "SortedSet < Tuple2 < String , Tuple2 > > index = this . stopStopTimeSet ",
  "18996": ". subSet ( new Tuple2 < > ( stop_id , null ) , new Tuple2 ( stop_id , Fun . HI ) ) ; ",
  "18997": "return index . stream ( ) ",
  "18998": ". map ( tuple -> this . stop_times . get ( tuple . b ) ) ",
  "18999": "} public List < Service > getServicesForDate ( LocalDate date ) { ",
  "19000": "String dateString = date . format ( dateFormatter ) ; ",
  "19001": "SortedSet < Tuple2 < String , String > > index = this . servicesPerDate ",
  "19002": ". subSet ( new Tuple2 < > ( dateString , null ) , new Tuple2 ( dateString , Fun . HI ) ) ; ",
  "19003": ". map ( tuple -> this . services . get ( tuple . b ) ) ",
  "19004": "} public List < Trip > getDistinctTripsForStop ( String stop_id ) { ",
  "19005": "return getStopTimesForStop ( stop_id ) . stream ( ) ",
  "19006": ". map ( stopTime -> this . trips . get ( stopTime . trip_id ) ) ",
  "19007": ". distinct ( ) ",
  "19008": "} public ZoneId getAgencyTimeZoneForStop ( String stop_id ) { ",
  "19009": "StopTime stopTime = getStopTimesForStop ( stop_id ) . iterator ( ) . next ( ) ; ",
  "19010": "Trip trip = this . trips . get ( stopTime . trip_id ) ; ",
  "19011": "Route route = this . routes . get ( trip . route_id ) ; ",
  "19012": "Agency agency = route . agency_id != null ? this . agency . get ( route . agency_id ) : this . agency . get ( 0 ) ; ",
  "19013": "return ZoneId . of ( agency . agency_timezone ) ; ",
  "19014": "} public Geometry getMergedBuffers ( ) { ",
  "19015": "if ( this . mergedBuffers == null ) { ",
  "19016": "Collection < Geometry > polygons = new ArrayList < > ( ) ; ",
  "19017": "if ( getStopTimesForStop ( stop . stop_id ) . isEmpty ( ) ) { ",
  "19018": "if ( stop . stop_lat > - 1 && stop . stop_lat < 1 || stop . stop_lon > - 1 && stop . stop_lon < 1 ) { ",
  "19019": "Point stopPoint = gf . createPoint ( new Coordinate ( stop . stop_lon , stop . stop_lat ) ) ; ",
  "19020": "Polygon stopBuffer = ( Polygon ) stopPoint . buffer ( .01 ) ; ",
  "19021": "polygons . add ( stopBuffer ) ; ",
  "19022": "Geometry multiGeometry = gf . buildGeometry ( polygons ) ; ",
  "19023": "this . mergedBuffers = multiGeometry . union ( ) ; ",
  "19024": "if ( polygons . size ( ) > 100 ) { ",
  "19025": "this . mergedBuffers = DouglasPeuckerSimplifier . simplify ( this . mergedBuffers , .001 ) ; ",
  "19026": "return this . mergedBuffers ; ",
  "19027": "statement . setDouble ( oneBasedIndex ++ , price ) ; ",
  "19028": "statement . setString ( oneBasedIndex ++ , currency_type ) ; ",
  "19029": "setIntParameter ( statement , oneBasedIndex ++ , payment_method ) ; ",
  "19030": "setIntParameter ( statement , oneBasedIndex ++ , transfers ) ; ",
  "19031": "setIntParameter ( statement , oneBasedIndex ++ , transfer_duration ) ; ",
  "19032": "} public static Geometry getNetherlands ( ) { ",
  "19033": "CoordinateSequence netherlandsBoundaryCoordinates = new PackedCoordinateSequence . Double ( new double [ ] { ",
  "19034": "5.920645 , 50.748480 , ",
  "19035": "5.914113 , 50.747530 , ",
  "19036": "5.911786 , 50.752290 , ",
  "19037": "5.900865 , 50.748480 , ",
  "19038": "5.888615 , 50.753490 , ",
  "19039": "5.885185 , 50.766310 , ",
  "19040": "5.864401 , 50.760600 , ",
  "19041": "5.849655 , 50.750500 , ",
  "19042": "5.842990 , 50.761710 , ",
  "19043": "5.831393 , 50.755630 , ",
  "19044": "5.806889 , 50.753150 , ",
  "19045": "5.792512 , 50.766680 , ",
  "19046": "5.782796 , 50.764700 , ",
  "19047": "5.773869 , 50.780210 , ",
  "19048": "5.749096 , 50.768200 , ",
  "19049": "5.740229 , 50.754260 , ",
  "19050": "5.720635 , 50.760300 , ",
  "19051": "5.699182 , 50.752280 , ",
  "19052": "5.681583 , 50.754740 , ",
  "19053": "5.680362 , 50.763910 , ",
  "19054": "5.698492 , 50.782620 , ",
  "19055": "5.688232 , 50.795590 , ",
  "19056": "5.696357 , 50.805360 , ",
  "19057": "5.652121 , 50.817740 , ",
  "19058": "5.635965 , 50.846910 , ",
  "19059": "5.642047 , 50.873480 , ",
  "19060": "5.676125 , 50.883900 , ",
  "19061": "5.693287 , 50.899480 , ",
  "19062": "5.698111 , 50.913440 , ",
  "19063": "5.721419 , 50.911900 , ",
  "19064": "5.725882 , 50.927620 , ",
  "19065": "5.738869 , 50.937550 , ",
  "19066": "5.744784 , 50.949700 , ",
  "19067": "5.756042 , 50.953140 , ",
  "19068": "5.746100 , 50.958630 , ",
  "19069": "5.725894 , 50.952350 , ",
  "19070": "5.716823 , 50.961980 , ",
  "19071": "5.735358 , 50.980980 , ",
  "19072": "5.748154 , 50.984990 , ",
  "19073": "5.764667 , 51.000650 , ",
  "19074": "5.764155 , 51.013410 , ",
  "19075": "5.773253 , 51.022760 , ",
  "19076": "5.757832 , 51.028300 , ",
  "19077": "5.755501 , 51.035840 , ",
  "19078": "5.767694 , 51.049870 , ",
  "19079": "5.772074 , 51.064960 , ",
  "19080": "5.797835 , 51.062840 , ",
  "19081": "5.793751 , 51.072700 , ",
  "19082": "5.801836 , 51.079130 , ",
  "19083": "5.793118 , 51.086550 , ",
  "19084": "5.793639 , 51.093300 , ",
  "19085": "5.806251 , 51.099130 , ",
  "19086": "5.823016 , 51.095330 , ",
  "19087": "5.829870 , 51.098960 , ",
  "19088": "5.828523 , 51.103860 , ",
  "19089": "5.811779 , 51.105140 , ",
  "19090": "5.804669 , 51.113010 , ",
  "19091": "5.819013 , 51.129230 , ",
  "19092": "5.839765 , 51.134040 , ",
  "19093": "5.847521 , 51.144960 , ",
  "19094": "5.834189 , 51.151610 , ",
  "19095": "5.829746 , 51.160620 , ",
  "19096": "5.824630 , 51.164330 , ",
  "19097": "5.816153 , 51.156060 , ",
  "19098": "5.805567 , 51.159410 , ",
  "19099": "5.777226 , 51.148330 , ",
  "19100": "5.771871 , 51.153870 , ",
  "19101": "5.774877 , 51.160270 , ",
  "19102": "5.767215 , 51.163820 , ",
  "19103": "5.772426 , 51.177410 , ",
  "19104": "5.766246 , 51.180770 , ",
  "19105": "5.745984 , 51.186290 , ",
  "19106": "5.740733 , 51.181920 , ",
  "19107": "5.709280 , 51.177420 , ",
  "19108": "5.688692 , 51.182170 , ",
  "19109": "5.657367 , 51.181820 , ",
  "19110": "5.647189 , 51.192040 , ",
  "19111": "5.648135 , 51.196140 , ",
  "19112": "5.559201 , 51.219600 , ",
  "19113": "5.551906 , 51.244010 , ",
  "19114": "5.553776 , 51.264200 , ",
  "19115": "5.527008 , 51.279270 , ",
  "19116": "5.513870 , 51.292470 , ",
  "19117": "5.485651 , 51.296920 , ",
  "19118": "5.465753 , 51.281710 , ",
  "19119": "5.444162 , 51.279340 , ",
  "19120": "5.417866 , 51.259320 , ",
  "19121": "5.349209 , 51.272180 , ",
  "19122": "5.337141 , 51.260140 , ",
  "19123": "5.295677 , 51.258520 , ",
  "19124": "5.263199 , 51.263750 , ",
  "19125": "5.236915 , 51.258520 , ",
  "19126": "5.222979 , 51.268460 , ",
  "19127": "5.238275 , 51.303600 , ",
  "19128": "5.200519 , 51.319290 , ",
  "19129": "5.162749 , 51.307320 , ",
  "19130": "5.131953 , 51.313700 , ",
  "19131": "5.128835 , 51.345240 , ",
  "19132": "5.068350 , 51.392500 , ",
  "19133": "5.100715 , 51.431820 , ",
  "19134": "5.077345 , 51.468360 , ",
  "19135": "5.044581 , 51.468360 , ",
  "19136": "5.035358 , 51.477740 , ",
  "19137": "5.036552 , 51.484140 , ",
  "19138": "5.012929 , 51.469860 , ",
  "19139": "5.013917 , 51.454840 , ",
  "19140": "5.006537 , 51.441650 , ",
  "19141": "4.921044 , 51.390690 , ",
  "19142": "4.911727 , 51.392960 , ",
  "19143": "4.913135 , 51.398490 , ",
  "19144": "4.905760 , 51.405610 , ",
  "19145": "4.888757 , 51.412180 , ",
  "19146": "4.876084 , 51.412170 , ",
  "19147": "4.867381 , 51.406110 , ",
  "19148": "4.839025 , 51.411590 , ",
  "19149": "4.789316 , 51.405990 , ",
  "19150": "4.769536 , 51.412410 , ",
  "19151": "4.763576 , 51.430300 , ",
  "19152": "4.766441 , 51.433650 , ",
  "19153": "4.787077 , 51.435690 , ",
  "19154": "4.824689 , 51.426100 , ",
  "19155": "4.820426 , 51.449230 , ",
  "19156": "4.833136 , 51.460930 , ",
  "19157": "4.837352 , 51.478910 , ",
  "19158": "4.819916 , 51.480330 , ",
  "19159": "4.814349 , 51.491900 , ",
  "19160": "4.782196 , 51.496690 , ",
  "19161": "4.778101 , 51.501420 , ",
  "19162": "4.754141 , 51.497100 , ",
  "19163": "4.748593 , 51.487300 , ",
  "19164": "4.731148 , 51.481530 , ",
  "19165": "4.718609 , 51.466400 , ",
  "19166": "4.706865 , 51.464440 , ",
  "19167": "4.694952 , 51.449370 , ",
  "19168": "4.670006 , 51.442420 , ",
  "19169": "4.671392 , 51.423890 , ",
  "19170": "4.641470 , 51.419020 , ",
  "19171": "4.574917 , 51.429810 , ",
  "19172": "4.534364 , 51.420220 , ",
  "19173": "4.526970 , 51.450180 , ",
  "19174": "4.544128 , 51.472940 , ",
  "19175": "4.537175 , 51.479270 , ",
  "19176": "4.476857 , 51.475260 , ",
  "19177": "4.465859 , 51.468230 , ",
  "19178": "4.443222 , 51.465730 , ",
  "19179": "4.393420 , 51.449040 , ",
  "19180": "4.401744 , 51.434580 , ",
  "19181": "4.397519 , 51.425000 , ",
  "19182": "4.387858 , 51.419980 , ",
  "19183": "4.393899 , 51.410180 , ",
  "19184": "4.434043 , 51.376910 , ",
  "19185": "4.432594 , 51.361120 , ",
  "19186": "4.422241 , 51.362140 , ",
  "19187": "4.384498 , 51.351350 , ",
  "19188": "4.340371 , 51.354730 , ",
  "19189": "4.332372 , 51.374530 , ",
  "19190": "4.222024 , 51.371040 , ",
  "19191": "4.244665 , 51.352500 , ",
  "19192": "4.167273 , 51.290120 , ",
  "19193": "4.062695 , 51.241690 , ",
  "19194": "4.040278 , 51.238330 , ",
  "19195": "4.014192 , 51.241800 , ",
  "19196": "3.987056 , 51.230400 , ",
  "19197": "3.980126 , 51.222620 , ",
  "19198": "3.966785 , 51.221280 , ",
  "19199": "3.959444 , 51.212940 , ",
  "19200": "3.935476 , 51.208930 , ",
  "19201": "3.928753 , 51.215900 , ",
  "19202": "3.921538 , 51.214080 , ",
  "19203": "3.919711 , 51.204970 , ",
  "19204": "3.886517 , 51.197170 , ",
  "19205": "3.874627 , 51.207940 , ",
  "19206": "3.887993 , 51.219510 , ",
  "19207": "3.859817 , 51.207840 , ",
  "19208": "3.837323 , 51.210640 , ",
  "19209": "3.824674 , 51.205960 , ",
  "19210": "3.789446 , 51.211540 , ",
  "19211": "3.785459 , 51.226510 , ",
  "19212": "3.790882 , 51.254070 , ",
  "19213": "3.775507 , 51.260170 , ",
  "19214": "3.768807 , 51.256900 , ",
  "19215": "3.753589 , 51.266830 , ",
  "19216": "3.693150 , 51.273140 , ",
  "19217": "3.657541 , 51.287200 , ",
  "19218": "3.640011 , 51.285180 , ",
  "19219": "3.589920 , 51.301560 , ",
  "19220": "3.586048 , 51.298150 , ",
  "19221": "3.590697 , 51.291810 , ",
  "19222": "3.582435 , 51.283980 , ",
  "19223": "3.562355 , 51.292800 , ",
  "19224": "3.556428 , 51.286890 , ",
  "19225": "3.545540 , 51.288170 , ",
  "19226": "3.538944 , 51.280780 , ",
  "19227": "3.519408 , 51.284680 , ",
  "19228": "3.528826 , 51.243300 , ",
  "19229": "3.448568 , 51.238510 , ",
  "19230": "3.426458 , 51.241840 , ",
  "19231": "3.420358 , 51.253670 , ",
  "19232": "3.406010 , 51.254300 , ",
  "19233": "3.373119 , 51.275680 , ",
  "19234": "3.377565 , 51.285800 , ",
  "19235": "3.363010 , 51.298030 , ",
  "19236": "3.370756 , 51.302930 , ",
  "19237": "3.355429 , 51.315530 , ",
  "19238": "3.381920 , 51.335370 , ",
  "19239": "3.380865 , 51.339460 , ",
  "19240": "3.371422 , 51.347100 , ",
  "19241": "3.371675 , 51.358150 , ",
  "19242": "3.350258 , 51.376730 , ",
  "19243": "3.306017 , 51.431030 , ",
  "19244": "3.078404 , 51.551970 , ",
  "19245": "2.992192 , 51.633610 , ",
  "19246": "4.362889 , 53.305060 , ",
  "19247": "5.530069 , 54.017860 , ",
  "19248": "6.346609 , 53.728270 , ",
  "19249": "6.414744 , 53.697610 , ",
  "19250": "6.594984 , 53.595190 , ",
  "19251": "6.821311 , 53.496490 , ",
  "19252": "6.858844 , 53.471530 , ",
  "19253": "6.891564 , 53.468070 , ",
  "19254": "6.917659 , 53.459810 , ",
  "19255": "6.934755 , 53.439730 , ",
  "19256": "6.954578 , 53.395700 , ",
  "19257": "6.995954 , 53.350730 , ",
  "19258": "6.997671 , 53.334020 , ",
  "19259": "7.006850 , 53.329430 , ",
  "19260": "7.061512 , 53.327040 , ",
  "19261": "7.111054 , 53.334810 , ",
  "19262": "7.189534 , 53.334480 , ",
  "19263": "7.220022 , 53.214900 , ",
  "19264": "7.220549 , 53.197160 , ",
  "19265": "7.212982 , 53.189670 , ",
  "19266": "7.230455 , 53.180790 , ",
  "19267": "7.205009 , 53.173520 , ",
  "19268": "7.194018 , 53.160900 , ",
  "19269": "7.192205 , 53.146470 , ",
  "19270": "7.182299 , 53.135820 , ",
  "19271": "7.188436 , 53.122690 , ",
  "19272": "7.205696 , 53.114170 , ",
  "19273": "7.202251 , 53.081510 , ",
  "19274": "7.215711 , 53.012480 , ",
  "19275": "7.220429 , 53.006720 , ",
  "19276": "7.211986 , 52.998620 , ",
  "19277": "7.183969 , 52.939860 , ",
  "19278": "7.090966 , 52.849050 , ",
  "19279": "7.095411 , 52.836830 , ",
  "19280": "7.074470 , 52.809300 , ",
  "19281": "7.057560 , 52.641040 , ",
  "19282": "7.039568 , 52.629710 , ",
  "19283": "6.975989 , 52.643210 , ",
  "19284": "6.953745 , 52.636000 , ",
  "19285": "6.918933 , 52.636860 , ",
  "19286": "6.912264 , 52.644010 , ",
  "19287": "6.872838 , 52.650240 , ",
  "19288": "6.821407 , 52.644690 , ",
  "19289": "6.784084 , 52.649540 , ",
  "19290": "6.743337 , 52.642560 , ",
  "19291": "6.717383 , 52.627770 , ",
  "19292": "6.730256 , 52.615370 , ",
  "19293": "6.722265 , 52.590200 , ",
  "19294": "6.768056 , 52.566190 , ",
  "19295": "6.769131 , 52.559890 , ",
  "19296": "6.752295 , 52.556040 , ",
  "19297": "6.727875 , 52.559800 , ",
  "19298": "6.716428 , 52.545530 , ",
  "19299": "6.687630 , 52.549380 , ",
  "19300": "6.708209 , 52.521860 , ",
  "19301": "6.700986 , 52.488160 , ",
  "19302": "6.753652 , 52.466990 , ",
  "19303": "6.774899 , 52.462600 , ",
  "19304": "6.854735 , 52.462670 , ",
  "19305": "6.856230 , 52.453520 , ",
  "19306": "6.941407 , 52.438530 , ",
  "19307": "6.959788 , 52.446690 , ",
  "19308": "6.975400 , 52.467790 , ",
  "19309": "6.988624 , 52.472590 , ",
  "19310": "6.996353 , 52.467220 , ",
  "19311": "7.013247 , 52.431210 , ",
  "19312": "7.024209 , 52.425000 , ",
  "19313": "7.037172 , 52.405650 , ",
  "19314": "7.060917 , 52.401460 , ",
  "19315": "7.075066 , 52.373840 , ",
  "19316": "7.074867 , 52.350400 , ",
  "19317": "7.059279 , 52.336640 , ",
  "19318": "7.050042 , 52.322630 , ",
  "19319": "7.050009 , 52.313690 , ",
  "19320": "7.029410 , 52.290960 , ",
  "19321": "7.031167 , 52.275610 , ",
  "19322": "7.044544 , 52.258330 , ",
  "19323": "7.068264 , 52.242930 , ",
  "19324": "7.063317 , 52.232510 , ",
  "19325": "7.026832 , 52.222750 , ",
  "19326": "6.989159 , 52.223250 , ",
  "19327": "6.953173 , 52.178760 , ",
  "19328": "6.910407 , 52.173560 , ",
  "19329": "6.907694 , 52.167660 , ",
  "19330": "6.884791 , 52.155000 , ",
  "19331": "6.875589 , 52.128170 , ",
  "19332": "6.856423 , 52.117620 , ",
  "19333": "6.763181 , 52.115770 , ",
  "19334": "6.758851 , 52.095340 , ",
  "19335": "6.748639 , 52.091730 , ",
  "19336": "6.754072 , 52.085770 , ",
  "19337": "6.750768 , 52.080660 , ",
  "19338": "6.736213 , 52.071730 , ",
  "19339": "6.699834 , 52.067700 , ",
  "19340": "6.690838 , 52.053740 , ",
  "19341": "6.690935 , 52.042880 , ",
  "19342": "6.714943 , 52.042950 , ",
  "19343": "6.753837 , 52.031280 , ",
  "19344": "6.814332 , 51.997460 , ",
  "19345": "6.828034 , 51.996170 , ",
  "19346": "6.835752 , 51.973060 , ",
  "19347": "6.830667 , 51.962000 , ",
  "19348": "6.801478 , 51.956260 , ",
  "19349": "6.799999 , 51.941300 , ",
  "19350": "6.790685 , 51.927210 , ",
  "19351": "6.771269 , 51.913460 , ",
  "19352": "6.722739 , 51.893160 , ",
  "19353": "6.693687 , 51.911890 , ",
  "19354": "6.681975 , 51.914160 , ",
  "19355": "6.634806 , 51.898070 , ",
  "19356": "6.586462 , 51.891150 , ",
  "19357": "6.561388 , 51.879320 , ",
  "19358": "6.544918 , 51.881310 , ",
  "19359": "6.505764 , 51.865820 , ",
  "19360": "6.501361 , 51.859470 , ",
  "19361": "6.472824 , 51.850840 , ",
  "19362": "6.449746 , 51.862380 , ",
  "19363": "6.431991 , 51.856420 , ",
  "19364": "6.425879 , 51.862940 , ",
  "19365": "6.392888 , 51.869980 , ",
  "19366": "6.390379 , 51.864800 , ",
  "19367": "6.411849 , 51.854130 , ",
  "19368": "6.405673 , 51.843820 , ",
  "19369": "6.411140 , 51.835980 , ",
  "19370": "6.407495 , 51.825030 , ",
  "19371": "6.380975 , 51.831870 , ",
  "19372": "6.366882 , 51.830600 , ",
  "19373": "6.360515 , 51.833680 , ",
  "19374": "6.358099 , 51.843710 , ",
  "19375": "6.346470 , 51.847750 , ",
  "19376": "6.305316 , 51.846210 , ",
  "19377": "6.295315 , 51.865260 , ",
  "19378": "6.279113 , 51.871180 , ",
  "19379": "6.262056 , 51.865150 , ",
  "19380": "6.209305 , 51.866150 , ",
  "19381": "6.181319 , 51.880520 , ",
  "19382": "6.179351 , 51.887170 , ",
  "19383": "6.185248 , 51.889760 , ",
  "19384": "6.156526 , 51.902040 , ",
  "19385": "6.116557 , 51.895290 , ",
  "19386": "6.138796 , 51.888300 , ",
  "19387": "6.147601 , 51.871940 , ",
  "19388": "6.169398 , 51.863420 , ",
  "19389": "6.167472 , 51.837860 , ",
  "19390": "6.100394 , 51.846090 , ",
  "19391": "6.064946 , 51.861680 , ",
  "19392": "6.057291 , 51.850110 , ",
  "19393": "6.036744 , 51.839840 , ",
  "19394": "6.028512 , 51.841750 , ",
  "19395": "5.994722 , 51.827930 , ",
  "19396": "5.963244 , 51.833400 , ",
  "19397": "5.950530 , 51.824140 , ",
  "19398": "5.960760 , 51.818410 , ",
  "19399": "5.957302 , 51.812950 , ",
  "19400": "5.981246 , 51.799710 , ",
  "19401": "5.978057 , 51.788780 , ",
  "19402": "5.992548 , 51.785320 , ",
  "19403": "5.987021 , 51.775330 , ",
  "19404": "5.995037 , 51.770670 , ",
  "19405": "5.991943 , 51.763650 , ",
  "19406": "5.956302 , 51.748090 , ",
  "19407": "5.956064 , 51.742220 , ",
  "19408": "5.994732 , 51.741260 , ",
  "19409": "6.046624 , 51.719400 , ",
  "19410": "6.043521 , 51.710750 , ",
  "19411": "6.029834 , 51.708290 , ",
  "19412": "6.034777 , 51.692680 , ",
  "19413": "6.033234 , 51.679120 , ",
  "19414": "6.037929 , 51.675530 , ",
  "19415": "6.119859 , 51.658390 , ",
  "19416": "6.120054 , 51.649660 , ",
  "19417": "6.110479 , 51.640020 , ",
  "19418": "6.095011 , 51.607500 , ",
  "19419": "6.123231 , 51.595190 , ",
  "19420": "6.132643 , 51.583300 , ",
  "19421": "6.158656 , 51.569100 , ",
  "19422": "6.178861 , 51.540980 , ",
  "19423": "6.201415 , 51.529990 , ",
  "19424": "6.214704 , 51.514740 , ",
  "19425": "6.215800 , 51.492330 , ",
  "19426": "6.226676 , 51.468740 , ",
  "19427": "6.209491 , 51.403570 , ",
  "19428": "6.229287 , 51.401730 , ",
  "19429": "6.218449 , 51.386690 , ",
  "19430": "6.229390 , 51.360290 , ",
  "19431": "6.194644 , 51.338740 , ",
  "19432": "6.195852 , 51.332350 , ",
  "19433": "6.172269 , 51.330150 , ",
  "19434": "6.156020 , 51.305400 , ",
  "19435": "6.131365 , 51.283730 , ",
  "19436": "6.126709 , 51.272700 , ",
  "19437": "6.077269 , 51.241140 , ",
  "19438": "6.088301 , 51.220720 , ",
  "19439": "6.071111 , 51.218870 , ",
  "19440": "6.076000 , 51.184150 , ",
  "19441": "6.083935 , 51.174430 , ",
  "19442": "6.105466 , 51.175170 , ",
  "19443": "6.165647 , 51.197330 , ",
  "19444": "6.182602 , 51.188700 , ",
  "19445": "6.183035 , 51.184450 , ",
  "19446": "6.147734 , 51.172980 , ",
  "19447": "6.177047 , 51.160980 , ",
  "19448": "6.177587 , 51.156390 , ",
  "19449": "6.164554 , 51.145950 , ",
  "19450": "6.126782 , 51.141710 , ",
  "19451": "6.093797 , 51.131760 , ",
  "19452": "6.088709 , 51.122140 , ",
  "19453": "6.061897 , 51.113350 , ",
  "19454": "6.038192 , 51.094000 , ",
  "19455": "5.999214 , 51.081580 , ",
  "19456": "5.973847 , 51.059610 , ",
  "19457": "5.971765 , 51.045220 , ",
  "19458": "5.958617 , 51.031850 , ",
  "19459": "5.936460 , 51.032630 , ",
  "19460": "5.913405 , 51.063380 , ",
  "19461": "5.893022 , 51.050310 , ",
  "19462": "5.869790 , 51.048620 , ",
  "19463": "5.880831 , 51.038650 , ",
  "19464": "5.878007 , 51.028400 , ",
  "19465": "5.881900 , 51.019230 , ",
  "19466": "5.897435 , 51.013490 , ",
  "19467": "5.898569 , 51.006870 , ",
  "19468": "5.908300 , 51.003290 , ",
  "19469": "5.906599 , 50.986330 , ",
  "19470": "5.899490 , 50.977780 , ",
  "19471": "5.955096 , 50.991420 , ",
  "19472": "5.967899 , 50.982380 , ",
  "19473": "5.981279 , 50.986220 , ",
  "19474": "6.027451 , 50.986120 , ",
  "19475": "6.029409 , 50.979820 , ",
  "19476": "6.012523 , 50.957300 , ",
  "19477": "6.019548 , 50.953960 , ",
  "19478": "6.020674 , 50.937290 , ",
  "19479": "6.051754 , 50.932770 , ",
  "19480": "6.058370 , 50.924710 , ",
  "19481": "6.097096 , 50.921280 , ",
  "19482": "6.080364 , 50.898360 , ",
  "19483": "6.079201 , 50.890810 , ",
  "19484": "6.089250 , 50.881000 , ",
  "19485": "6.091101 , 50.872330 , ",
  "19486": "6.079903 , 50.858810 , ",
  "19487": "6.076394 , 50.844520 , ",
  "19488": "6.055450 , 50.848330 , ",
  "19489": "6.053880 , 50.853070 , ",
  "19490": "6.021010 , 50.843360 , ",
  "19491": "6.019818 , 50.833840 , ",
  "19492": "6.028167 , 50.828600 , ",
  "19493": "6.027036 , 50.811900 , ",
  "19494": "6.004115 , 50.798500 , ",
  "19495": "5.985312 , 50.807300 , ",
  "19496": "5.978653 , 50.801100 , ",
  "19497": "6.029923 , 50.776130 , ",
  "19498": "6.021710 , 50.762600 , ",
  "19499": "6.023293 , 50.752340 , ",
  "19500": "5.982748 , 50.749850 , ",
  "19501": "5.958986 , 50.759260 , ",
  "19502": "5.920645 , 50.748480 } , 2 ) ; ",
  "19503": "Polygon boundary = geometryFactory . createPolygon ( netherlandsBoundaryCoordinates ) ; ",
  "19504": "return boundary ; ",
  "19505": "} public void processTrip ( Trip trip , Iterable < StopTime > orderedStopTimes ) { ",
  "19506": "if ( ++ nTripsProcessed % 100000 == 0 ) { ",
  "19507": "TripPatternKey key = new TripPatternKey ( trip . route_id ) ; ",
  "19508": "for ( StopTime st : orderedStopTimes ) { ",
  "19509": "key . addStopTime ( st ) ; ",
  "19510": "tripsForPattern . put ( key , trip ) ; ",
  "19511": "} public Map < TripPatternKey , Pattern > createPatternObjects ( Map < String , Stop > stopById , SQLErrorStorage errorStorage ) { ",
  "19512": "int nextPatternId = 1 ; ",
  "19513": "Map < TripPatternKey , Pattern > patterns = new HashMap < > ( ) ; ",
  "19514": "for ( TripPatternKey key : tripsForPattern . keySet ( ) ) { ",
  "19515": "Collection < Trip > trips = tripsForPattern . get ( key ) ; ",
  "19516": "Pattern pattern = new Pattern ( key . stops , trips , null ) ; ",
  "19517": "pattern . pattern_id = Integer . toString ( nextPatternId ++ ) ; ",
  "19518": "pattern . associatedShapes = new HashSet < > ( ) ; ",
  "19519": "trips . stream ( ) . forEach ( trip -> pattern . associatedShapes . add ( trip . shape_id ) ) ; ",
  "19520": "if ( pattern . associatedShapes . size ( ) > 1 && errorStorage != null ) { ",
  "19521": "errorStorage . storeError ( NewGTFSError . forEntity ( ",
  "19522": "pattern , ",
  "19523": "NewGTFSErrorType . MULTIPLE_SHAPES_FOR_PATTERN ) ",
  "19524": ". setBadValue ( pattern . associatedShapes . toString ( ) ) ) ; ",
  "19525": "patterns . put ( key , pattern ) ; ",
  "19526": "renamePatterns ( patterns . values ( ) , stopById ) ; ",
  "19527": "return patterns ; ",
  "19528": "} public static void renamePatterns ( Collection < Pattern > patterns , Map < String , Stop > stopById ) { ",
  "19529": "Map < String , PatternNamingInfo > namingInfoForRoute = new HashMap < > ( ) ; ",
  "19530": "for ( Pattern pattern : patterns ) { ",
  "19531": "if ( pattern . associatedTrips . isEmpty ( ) || pattern . orderedStops . isEmpty ( ) ) continue ; ",
  "19532": "PatternNamingInfo namingInfo = namingInfoForRoute . get ( pattern . route_id ) ; ",
  "19533": "if ( namingInfo == null ) { ",
  "19534": "namingInfo = new PatternNamingInfo ( ) ; ",
  "19535": "namingInfoForRoute . put ( pattern . route_id , namingInfo ) ; ",
  "19536": "String fromName = stopById . get ( pattern . orderedStops . get ( 0 ) ) . stop_name ; ",
  "19537": "String toName = stopById . get ( pattern . orderedStops . get ( pattern . orderedStops . size ( ) - 1 ) ) . stop_name ; ",
  "19538": "namingInfo . fromStops . put ( fromName , pattern ) ; ",
  "19539": "namingInfo . toStops . put ( toName , pattern ) ; ",
  "19540": "for ( String stopId : pattern . orderedStops ) { ",
  "19541": "Stop stop = stopById . get ( stopId ) ; ",
  "19542": "if ( fromName . equals ( stop . stop_name ) || toName . equals ( stop . stop_name ) ) continue ; ",
  "19543": "namingInfo . vias . put ( stop . stop_name , pattern ) ; ",
  "19544": "namingInfo . patternsOnRoute . add ( pattern ) ; ",
  "19545": "for ( PatternNamingInfo info : namingInfoForRoute . values ( ) ) { ",
  "19546": "for ( Pattern pattern : info . patternsOnRoute ) { ",
  "19547": "pattern . name = null ; ",
  "19548": "Set < Pattern > intersection = new HashSet < > ( info . fromStops . get ( fromName ) ) ; ",
  "19549": "intersection . retainAll ( info . toStops . get ( toName ) ) ; ",
  "19550": "if ( intersection . size ( ) == 1 ) { ",
  "19551": "pattern . orderedStops . stream ( ) . map ( stopById :: get ) . forEach ( stop -> { ",
  "19552": "Set < Pattern > viaIntersection = new HashSet < > ( intersection ) ; ",
  "19553": "viaIntersection . retainAll ( info . vias . get ( stop . stop_name ) ) ; ",
  "19554": "if ( viaIntersection . size ( ) == 1 ) { ",
  "19555": "if ( pattern . name == null ) { ",
  "19556": "if ( intersection . size ( ) == 2 ) { ",
  "19557": "Iterator < Pattern > it = intersection . iterator ( ) ; ",
  "19558": "Pattern p0 = it . next ( ) ; ",
  "19559": "Pattern p1 = it . next ( ) ; ",
  "19560": "if ( p0 . orderedStops . size ( ) > p1 . orderedStops . size ( ) ) { ",
  "19561": "} else if ( p1 . orderedStops . size ( ) > p0 . orderedStops . size ( ) ) { ",
  "19562": "pattern . orderedStops . size ( ) , pattern . name , pattern . associatedTrips . size ( ) ) ; ",
  "19563": "int wheelchairBoarding = 0 ; ",
  "19564": "wheelchairBoarding = Integer . parseInt ( wheelchair_boarding ) ; ",
  "19565": "statement . setString ( oneBasedIndex ++ , stop_code ) ; ",
  "19566": "statement . setString ( oneBasedIndex ++ , stop_name ) ; ",
  "19567": "statement . setString ( oneBasedIndex ++ , stop_desc ) ; ",
  "19568": "statement . setDouble ( oneBasedIndex ++ , stop_lat ) ; ",
  "19569": "statement . setDouble ( oneBasedIndex ++ , stop_lon ) ; ",
  "19570": "statement . setString ( oneBasedIndex ++ , zone_id ) ; ",
  "19571": "statement . setString ( oneBasedIndex ++ , stop_url != null ? stop_url . toString ( ) : null ) ; ",
  "19572": "setIntParameter ( statement , oneBasedIndex ++ , location_type ) ; ",
  "19573": "statement . setString ( oneBasedIndex ++ , parent_station ) ; ",
  "19574": "statement . setString ( oneBasedIndex ++ , stop_timezone ) ; ",
  "19575": "setIntParameter ( statement , oneBasedIndex ++ , wheelchairBoarding ) ; ",
  "19576": "} public ValidateFieldResult < String > validateAndConvert ( String string ) { ",
  "19577": "ValidateFieldResult < String > result = new ValidateFieldResult < > ( string ) ; ",
  "19578": "if ( string . length ( ) != 6 ) { ",
  "19579": "result . errors . add ( NewGTFSError . forFeed ( NewGTFSErrorType . COLOR_FORMAT , string ) ) ; ",
  "19580": "int integer = Integer . parseInt ( string , 16 ) ; ",
  "19581": "throw new StorageException ( NewGTFSErrorType . COLOR_FORMAT , string ) ; ",
  "19582": "public void complete ( ValidationResult validationResult ) { ",
  "19583": "Map < String , Stop > stopById = new HashMap < > ( ) ; ",
  "19584": "for ( Stop stop : feed . stops ) { ",
  "19585": "stopById . put ( stop . stop_id , stop ) ; ",
  "19586": "Map < TripPatternKey , Pattern > patterns = patternFinder . createPatternObjects ( stopById , errorStorage ) ; ",
  "19587": "connection = feed . getConnection ( ) ; ",
  "19588": "String tripsTableName = feed . tablePrefix + \"trips\" ; ",
  "19589": "String patternsTableName = feed . tablePrefix + \"patterns\" ; ",
  "19590": "String patternStopsTableName = feed . tablePrefix + \"pattern_stops\" ; ",
  "19591": "Table patternsTable = new Table ( patternsTableName , Pattern . class , Requirement . EDITOR , Table . PATTERNS . fields ) ; ",
  "19592": "Table patternStopsTable = new Table ( patternStopsTableName , PatternStop . class , Requirement . EDITOR , ",
  "19593": "Table . PATTERN_STOP . fields ) ; ",
  "19594": "patternsTable . createSqlTable ( connection , null , true ) ; ",
  "19595": "patternStopsTable . createSqlTable ( connection , null , true ) ; ",
  "19596": "String insertPatternSql = patternsTable . generateInsertSql ( true ) ; ",
  "19597": "String insertPatternStopSql = patternStopsTable . generateInsertSql ( true ) ; ",
  "19598": "PreparedStatement insertPatternStatement = connection . prepareStatement ( insertPatternSql ) ; ",
  "19599": "BatchTracker patternTracker = new BatchTracker ( \"pattern\" , insertPatternStatement ) ; ",
  "19600": "PreparedStatement insertPatternStopStatement = connection . prepareStatement ( insertPatternStopSql ) ; ",
  "19601": "int currentPatternIndex = 0 ; ",
  "19602": "tempPatternForTripsTable = \"pattern_for_trips\" ; ",
  "19603": "tempPatternForTripsTextFile = File . createTempFile ( tempPatternForTripsTable , \"text\" ) ; ",
  "19604": "LOG . info ( createTempSql ) ; ",
  "19605": "statement . execute ( createTempSql ) ; ",
  "19606": "patternForTripsFileStream = new PrintStream ( new BufferedOutputStream ( new FileOutputStream ( tempPatternForTripsTextFile ) ) ) ; ",
  "19607": "for ( Map . Entry < TripPatternKey , Pattern > entry : patterns . entrySet ( ) ) { ",
  "19608": "Pattern pattern = entry . getValue ( ) ; ",
  "19609": "TripPatternKey key = entry . getKey ( ) ; ",
  "19610": "pattern . setStatementParameters ( insertPatternStatement , true ) ; ",
  "19611": "patternTracker . addBatch ( ) ; ",
  "19612": "int lastValidDeparture = key . departureTimes . get ( 0 ) ; ",
  "19613": "for ( int i = 0 ; i < key . stops . size ( ) ; i ++ ) { ",
  "19614": "int travelTime = 0 ; ",
  "19615": "String stopId = key . stops . get ( i ) ; ",
  "19616": "int arrival = key . arrivalTimes . get ( i ) ; ",
  "19617": "int prevDeparture = key . departureTimes . get ( i - 1 ) ; ",
  "19618": "if ( prevDeparture != INT_MISSING ) { ",
  "19619": "lastValidDeparture = prevDeparture ; ",
  "19620": "travelTime = arrival == INT_MISSING || lastValidDeparture == INT_MISSING ",
  "19621": "? INT_MISSING ",
  "19622": ": arrival - lastValidDeparture ; ",
  "19623": "int departure = key . departureTimes . get ( i ) ; ",
  "19624": "int dwellTime = arrival == INT_MISSING || departure == INT_MISSING ",
  "19625": ": departure - arrival ; ",
  "19626": "insertPatternStopStatement . setString ( 1 , pattern . pattern_id ) ; ",
  "19627": "setIntParameter ( insertPatternStopStatement , 2 , i ) ; ",
  "19628": "insertPatternStopStatement . setString ( 3 , stopId ) ; ",
  "19629": "setIntParameter ( insertPatternStopStatement , 4 , travelTime ) ; ",
  "19630": "setIntParameter ( insertPatternStopStatement , 5 , dwellTime ) ; ",
  "19631": "setIntParameter ( insertPatternStopStatement , 6 , key . dropoffTypes . get ( i ) ) ; ",
  "19632": "setIntParameter ( insertPatternStopStatement , 7 , key . pickupTypes . get ( i ) ) ; ",
  "19633": "setDoubleParameter ( insertPatternStopStatement , 8 , key . shapeDistances . get ( i ) ) ; ",
  "19634": "setIntParameter ( insertPatternStopStatement , 9 , key . timepoints . get ( i ) ) ; ",
  "19635": "patternStopTracker . addBatch ( ) ; ",
  "19636": "PreparedStatement updateTripStatement = connection . prepareStatement ( ",
  "19637": "updateTripStatement . setString ( oneBasedIndex ++ , pattern . pattern_id ) ; ",
  "19638": "for ( String tripId : pattern . associatedTrips ) { ",
  "19639": "String [ ] strings = new String [ ] { tripId , pattern . pattern_id } ; ",
  "19640": "patternForTripsFileStream . println ( String . join ( \"\\t\" , strings ) ) ; ",
  "19641": "updateTripStatement . setString ( oneBasedIndex ++ , tripId ) ; ",
  "19642": "if ( ! postgresText ) { ",
  "19643": "updateTripStatement . executeUpdate ( ) ; ",
  "19644": "currentPatternIndex += 1 ; ",
  "19645": "patternTracker . executeRemaining ( ) ; ",
  "19646": "patternStopTracker . executeRemaining ( ) ; ",
  "19647": "patternForTripsFileStream . close ( ) ; ",
  "19648": "copyFromFile ( connection , tempPatternForTripsTextFile , tempPatternForTripsTable ) ; ",
  "19649": "LOG . info ( patternForTripsIndexSql ) ; ",
  "19650": "statement . execute ( patternForTripsIndexSql ) ; ",
  "19651": "LOG . info ( updateTripsSql ) ; ",
  "19652": "statement . executeUpdate ( updateTripsSql ) ; ",
  "19653": "tempPatternForTripsTextFile . delete ( ) ; ",
  "19654": "} catch ( SQLException | IOException e ) { ",
  "19655": "DbUtils . rollbackAndCloseQuietly ( connection ) ; ",
  "19656": "ValidateFieldResult < String > result = cleanString ( string ) ; ",
  "19657": "new URL ( result . clean ) ; ",
  "19658": "result . errors . add ( NewGTFSError . forFeed ( NewGTFSErrorType . URL_FORMAT , string ) ) ; ",
  "19659": "} public void restoreState ( Bundle state , View v ) { ",
  "19660": "Parcelable [ ] messages = state . getParcelableArray ( SAVED_MSGS ) ; ",
  "19661": "boolean showImmediately = true ; ",
  "19662": "for ( Parcelable message : messages ) { ",
  "19663": "showSnack ( ( Snack ) message , v , null , showImmediately ) ; ",
  "19664": "showImmediately = false ; ",
  "19665": "} private int getPxFromDp ( int dp ) { ",
  "19666": "Resources rs = getResources ( ) ; ",
  "19667": "int pxConverter = ( int ) TypedValue . applyDimension ( TypedValue . COMPLEX_UNIT_DIP , 1 , rs . getDisplayMetrics ( ) ) ; ",
  "19668": "int px = pxConverter * dp ; ",
  "19669": "return px ; ",
  "19670": "} public void writeToParcel ( Parcel out , int flags ) { ",
  "19671": "out . writeString ( mMessage ) ; ",
  "19672": "out . writeString ( mActionMessage ) ; ",
  "19673": "out . writeInt ( mActionIcon ) ; ",
  "19674": "out . writeParcelable ( mToken , 0 ) ; ",
  "19675": "out . writeInt ( ( int ) mDuration ) ; ",
  "19676": "out . writeParcelable ( mBtnTextColor , 0 ) ; ",
  "19677": "out . writeParcelable ( mBackgroundColor , 0 ) ; ",
  "19678": "out . writeInt ( mHeight ) ; ",
  "19679": "out . writeValue ( mTypeface ) ; ",
  "19680": "} public int getHeight ( ) { ",
  "19681": "mParentView . measure ( View . MeasureSpec . makeMeasureSpec ( mParentView . getWidth ( ) , View . MeasureSpec . EXACTLY ) , ",
  "19682": "View . MeasureSpec . makeMeasureSpec ( mParentView . getHeight ( ) , View . MeasureSpec . AT_MOST ) ) ; ",
  "19683": "return mParentView . getMeasuredHeight ( ) ; ",
  "19684": "} public static boolean parseStringToBooleanDefaultingToFalse ( final String stringToParse ) { ",
  "19685": "if ( \"true\" . equals ( stringToParse ) ) { ",
  "19686": "} else if ( \"false\" . equals ( stringToParse ) ) { ",
  "19687": "} else if ( null == stringToParse ) { ",
  "19688": "} static void throwIfUnrecognizedParamName ( final Enumeration initParamNames ) { ",
  "19689": "final Set < String > recognizedParameterNames = new HashSet < String > ( ) ; ",
  "19690": "recognizedParameterNames . add ( INIT_PARAM_ENABLE_CACHE_CONTROL ) ; ",
  "19691": "recognizedParameterNames . add ( INIT_PARAM_ENABLE_XCONTENT_OPTIONS ) ; ",
  "19692": "recognizedParameterNames . add ( INIT_PARAM_ENABLE_STRICT_TRANSPORT_SECURITY ) ; ",
  "19693": "recognizedParameterNames . add ( INIT_PARAM_ENABLE_STRICT_XFRAME_OPTIONS ) ; ",
  "19694": "recognizedParameterNames . add ( INIT_PARAM_STRICT_XFRAME_OPTIONS ) ; ",
  "19695": "recognizedParameterNames . add ( INIT_PARAM_CONTENT_SECURITY_POLICY ) ; ",
  "19696": "recognizedParameterNames . add ( LOGGER_HANDLER_CLASS_NAME ) ; ",
  "19697": "recognizedParameterNames . add ( INIT_PARAM_ENABLE_XSS_PROTECTION ) ; ",
  "19698": "recognizedParameterNames . add ( INIT_PARAM_XSS_PROTECTION ) ; ",
  "19699": "while ( initParamNames . hasMoreElements ( ) ) { ",
  "19700": "final String initParamName = ( String ) initParamNames . nextElement ( ) ; ",
  "19701": "if ( ! recognizedParameterNames . contains ( initParamName ) ) { ",
  "19702": "} static void throwIfUnrecognizedParamName ( Enumeration initParamNames ) throws ServletException { ",
  "19703": "recognizedParameterNames . add ( ALLOW_MULTI_VALUED_PARAMETERS ) ; ",
  "19704": "recognizedParameterNames . add ( PARAMETERS_TO_CHECK ) ; ",
  "19705": "recognizedParameterNames . add ( ONLY_POST_PARAMETERS ) ; ",
  "19706": "recognizedParameterNames . add ( CHARACTERS_TO_FORBID ) ; ",
  "19707": "} static Set < String > parseParametersList ( final String initParamValue , final boolean allowWildcard ) { ",
  "19708": "final Set < String > parameterNames = new HashSet < String > ( ) ; ",
  "19709": "if ( null == initParamValue ) { ",
  "19710": "return parameterNames ; ",
  "19711": "final String [ ] tokens = initParamValue . split ( \"\\\\s+\" ) ; ",
  "19712": "if ( 0 == tokens . length ) { ",
  "19713": "FilterUtils . logException ( LOGGER , new IllegalArgumentException ( \"[\" + initParamValue + ",
  "19714": "if ( 1 == tokens . length && \"*\" . equals ( tokens [ 0 ] ) && allowWildcard ) { ",
  "19715": "for ( final String parameterName : tokens ) { ",
  "19716": "if ( \"*\" . equals ( parameterName ) ) { ",
  "19717": "parameterNames . add ( parameterName ) ; ",
  "19718": "} static Set < Character > parseCharactersToForbid ( String paramValue ) { ",
  "19719": "final Set < Character > charactersToForbid = new HashSet < Character > ( ) ; ",
  "19720": "if ( null == paramValue ) { ",
  "19721": "paramValue = DEFAULT_CHARACTERS_BLOCKED ; ",
  "19722": "if ( \"none\" . equals ( paramValue ) ) { ",
  "19723": "return charactersToForbid ; ",
  "19724": "final String [ ] tokens = paramValue . split ( \"\\\\s+\" ) ; ",
  "19725": "if ( token . length ( ) > 1 ) { ",
  "19726": "final Character character = token . charAt ( 0 ) ; ",
  "19727": "charactersToForbid . add ( character ) ; ",
  "19728": "} static void enforceParameterContentCharacterRestrictions ( ",
  "19729": "final Set < String > parametersToCheck , final Set < Character > charactersToForbid , final Map parameterMap ) { ",
  "19730": "if ( charactersToForbid . isEmpty ( ) ) { ",
  "19731": "for ( final String parameterToCheck : parametersToCheck ) { ",
  "19732": "final String [ ] parameterValues = ( String [ ] ) parameterMap . get ( parameterToCheck ) ; ",
  "19733": "if ( null != parameterValues ) { ",
  "19734": "for ( final String parameterValue : parameterValues ) { ",
  "19735": "for ( final Character forbiddenCharacter : charactersToForbid ) { ",
  "19736": "final StringBuilder characterAsStringBuilder = new StringBuilder ( ) ; ",
  "19737": "characterAsStringBuilder . append ( forbiddenCharacter ) ; ",
  "19738": "if ( parameterValue . contains ( characterAsStringBuilder ) ) { ",
  "19739": "+ parameterToCheck + \"]\" ) ) ; ",
  "19740": "} static void checkOnlyPostParameters ( final String method , final Map parameterMap , final Set < String > onlyPostParameters ) { ",
  "19741": "if ( ! \"POST\" . equals ( method ) ) { ",
  "19742": "Set < String > names = parameterMap . keySet ( ) ; ",
  "19743": "for ( String onlyPostParameter : onlyPostParameters ) { ",
  "19744": "if ( names . contains ( onlyPostParameter ) ) { ",
  "19745": "} public float [ ] predict ( FVec feat , boolean output_margin , int ntree_limit ) { ",
  "19746": "float [ ] preds = predictRaw ( feat , ntree_limit ) ; ",
  "19747": "if ( ! output_margin ) { ",
  "19748": "preds = obj . predTransform ( preds ) ; ",
  "19749": "return preds ; ",
  "19750": "} public float predictSingle ( FVec feat , boolean output_margin , int ntree_limit ) { ",
  "19751": "float pred = predictSingleRaw ( feat , ntree_limit ) ; ",
  "19752": "pred = obj . predTransform ( pred ) ; ",
  "19753": "return pred ; ",
  "19754": "} public static ObjFunction fromName ( String name ) { ",
  "19755": "ObjFunction result = FUNCTIONS . get ( name ) ; ",
  "19756": "} public static void useFastMathExp ( boolean useJafama ) { ",
  "19757": "if ( useJafama ) { ",
  "19758": "register ( \"binary:logistic\" , new RegLossObjLogistic_Jafama ( ) ) ; ",
  "19759": "register ( \"multi:softprob\" , new SoftmaxMultiClassObjProb_Jafama ( ) ) ; ",
  "19760": "register ( \"binary:logistic\" , new RegLossObjLogistic ( ) ) ; ",
  "19761": "register ( \"multi:softprob\" , new SoftmaxMultiClassObjProb ( ) ) ; ",
  "19762": "} public void loadModel ( ModelReader reader ) throws IOException { ",
  "19763": "param = new Param ( reader ) ; ",
  "19764": "nodes = new Node [ param . num_nodes ] ; ",
  "19765": "for ( int i = 0 ; i < param . num_nodes ; i ++ ) { ",
  "19766": "nodes [ i ] = new Node ( reader ) ; ",
  "19767": "stats = new RTreeNodeStat [ param . num_nodes ] ; ",
  "19768": "stats [ i ] = new RTreeNodeStat ( reader ) ; ",
  "19769": "public int getLeafIndex ( FVec feat , int root_id ) { ",
  "19770": "int pid = root_id ; ",
  "19771": "Node n ; ",
  "19772": "while ( ! ( n = nodes [ pid ] ) . _isLeaf ) { ",
  "19773": "pid = n . next ( feat ) ; ",
  "19774": "return pid ; ",
  "19775": "public float getLeafValue ( FVec feat , int root_id ) { ",
  "19776": "Node n = nodes [ root_id ] ; ",
  "19777": "while ( ! n . _isLeaf ) { ",
  "19778": "n = nodes [ n . next ( feat ) ] ; ",
  "19779": "return n . leaf_value ; ",
  "19780": "} public JsonUnflattener withSeparator ( char separator ) { ",
  "19781": "isTrue ( ! Character . toString ( separator ) . matches ( \"[\\\"\\\\s]\" ) , ",
  "19782": "Character . toString ( separator ) ) ; ",
  "19783": "isTrue ( ! leftBracket . equals ( separator ) && ! rightBracket . equals ( separator ) , ",
  "19784": "this . separator = separator ; ",
  "19785": "} public JsonUnflattener withLeftAndRightBrackets ( char leftBracket , ",
  "19786": "char rightBracket ) { ",
  "19787": "isTrue ( ! Character . toString ( leftBracket ) . matches ( illegalBracketsRegex ( ) ) , ",
  "19788": "Character . toString ( leftBracket ) ) ; ",
  "19789": "isTrue ( ! Character . toString ( rightBracket ) . matches ( illegalBracketsRegex ( ) ) , ",
  "19790": "Character . toString ( rightBracket ) ) ; ",
  "19791": "this . leftBracket = leftBracket ; ",
  "19792": "this . rightBracket = rightBracket ; ",
  "19793": "} public String unflatten ( ) { ",
  "19794": "if ( root . isArray ( ) ) { ",
  "19795": "unflattenArray ( root . asArray ( ) ) . writeTo ( sw , getWriterConfig ( ) ) ; ",
  "19796": "if ( ! root . isObject ( ) ) { ",
  "19797": "return root . toString ( ) ; ",
  "19798": "JsonObject flattened = root . asObject ( ) ; ",
  "19799": "JsonValue unflattened = flattened . names ( ) . isEmpty ( ) ? Json . object ( ) : null ; ",
  "19800": "for ( String key : flattened . names ( ) ) { ",
  "19801": "JsonValue currentVal = unflattened ; ",
  "19802": "String objKey = null ; ",
  "19803": "Integer aryIdx = null ; ",
  "19804": "Matcher matcher = keyPartPattern ( ) . matcher ( key ) ; ",
  "19805": "String keyPart = matcher . group ( ) ; ",
  "19806": "if ( objKey != null ^ aryIdx != null ) { ",
  "19807": "if ( isJsonArray ( keyPart ) ) { ",
  "19808": "currentVal = findOrCreateJsonArray ( currentVal , objKey , aryIdx ) ; ",
  "19809": "objKey = null ; ",
  "19810": "aryIdx = extractIndex ( keyPart ) ; ",
  "19811": "if ( flattened . get ( key ) . isArray ( ) ) { ",
  "19812": "flattened . set ( key , unflattenArray ( flattened . get ( key ) . asArray ( ) ) ) ; ",
  "19813": "currentVal = findOrCreateJsonObject ( currentVal , objKey , aryIdx ) ; ",
  "19814": "objKey = extractKey ( keyPart ) ; ",
  "19815": "aryIdx = null ; ",
  "19816": "if ( objKey == null && aryIdx == null ) { ",
  "19817": "if ( currentVal == null ) currentVal = Json . array ( ) ; ",
  "19818": "if ( currentVal == null ) currentVal = Json . object ( ) ; ",
  "19819": "if ( unflattened == null ) unflattened = currentVal ; ",
  "19820": "setUnflattenedValue ( flattened , key , currentVal , objKey , aryIdx ) ; ",
  "19821": "unflattened . writeTo ( sw , getWriterConfig ( ) ) ; ",
  "19822": "} public static < T > IndexedPeekIterator < T > newIndexedPeekIterator ( ",
  "19823": "Iterable < T > iter ) { ",
  "19824": "return new IndexedPeekIterator < T > ( iter . iterator ( ) ) ; ",
  "19825": "} public JsonFlattener withSeparator ( char separator ) { ",
  "19826": "flattenedMap = null ; ",
  "19827": "} public JsonFlattener withLeftAndRightBrackets ( char leftBracket , ",
  "19828": "} public String flatten ( ) { ",
  "19829": "flattenAsMap ( ) ; ",
  "19830": "if ( source . isObject ( ) || isObjectifiableArray ( ) ) ",
  "19831": "return flattenedMap . toString ( printMode ) ; ",
  "19832": "return javaObj2Json ( flattenedMap . get ( ROOT ) ) ; ",
  "19833": "} public Map < String , Object > flattenAsMap ( ) { ",
  "19834": "if ( flattenedMap != null ) return flattenedMap ; ",
  "19835": "flattenedMap = newJsonifyLinkedHashMap ( ) ; ",
  "19836": "reduce ( source ) ; ",
  "19837": "while ( ! elementIters . isEmpty ( ) ) { ",
  "19838": "IndexedPeekIterator < ? > deepestIter = elementIters . getLast ( ) ; ",
  "19839": "if ( ! deepestIter . hasNext ( ) ) { ",
  "19840": "elementIters . removeLast ( ) ; ",
  "19841": "} else if ( deepestIter . peek ( ) instanceof Member ) { ",
  "19842": "Member mem = ( Member ) deepestIter . next ( ) ; ",
  "19843": "reduce ( mem . getValue ( ) ) ; ",
  "19844": "JsonValue val = ( JsonValue ) deepestIter . next ( ) ; ",
  "19845": "reduce ( val ) ; ",
  "19846": "return flattenedMap ; ",
  "19847": "} public static String format ( Locale locale , Messages message , Object ... args ) { ",
  "19848": "String formatString = message . getFormatString ( locale ) ; ",
  "19849": "Object [ ] sortArgs = sortArgs ( formatString , args ) ; ",
  "19850": "String printfString = Stream . of ( formatString . split ( \"%%\" ) ) ",
  "19851": ". map ( part -> placeholderPattern . matcher ( part ) . replaceAll ( \"%s\" ) ) ",
  "19852": ". collect ( Collectors . joining ( \"%%\" ) ) ; ",
  "19853": "return String . format ( printfString , sortArgs ) ; ",
  "19854": "} public CoderResult encode ( CharBuffer input , CharBuffer output , boolean endOfInput ) { ",
  "19855": "if ( input . hasRemaining ( ) ) { ",
  "19856": "if ( input . hasArray ( ) && output . hasArray ( ) ) { ",
  "19857": "return encodeArrays ( input , output , endOfInput ) ; ",
  "19858": "return encodeBuffers ( input , output , endOfInput ) ; ",
  "19859": "return CoderResult . UNDERFLOW ; ",
  "19860": "} static CoderResult overflow ( CharBuffer input , int i , CharBuffer output , int j ) { ",
  "19861": "input . position ( i - input . arrayOffset ( ) ) ; ",
  "19862": "output . position ( j - output . arrayOffset ( ) ) ; ",
  "19863": "return CoderResult . OVERFLOW ; ",
  "19864": "} static CoderResult underflow ( CharBuffer input , int i , CharBuffer output , int j ) { ",
  "19865": "} ASCIIBits clear ( String chars ) { ",
  "19866": "for ( int i = 0 , n = chars . length ( ) ; i < n ; ++ i ) { ",
  "19867": "char ch = chars . charAt ( i ) ; ",
  "19868": "if ( ch < 64 ) { ",
  "19869": "_lowerMask &= ~ ( 1L << ch ) ; ",
  "19870": "_upperMask &= ~ ( 1L << ch ) ; ",
  "19871": "} ASCIIBits set ( int min , int max ) { ",
  "19872": "int i = min ; ",
  "19873": "for ( int n = Math . min ( max , 63 ) ; i <= n ; ++ i ) { ",
  "19874": "_lowerMask |= ( 1L << i ) ; ",
  "19875": "for ( ; i <= max ; ++ i ) { ",
  "19876": "_upperMask |= ( 1L << i ) ; ",
  "19877": "} protected CoderResult encodeArrays ( CharBuffer input , CharBuffer output , boolean endOfInput ) { ",
  "19878": "final char [ ] in = input . array ( ) ; ",
  "19879": "final char [ ] out = output . array ( ) ; ",
  "19880": "int i = input . arrayOffset ( ) + input . position ( ) ; ",
  "19881": "final int n = input . arrayOffset ( ) + input . limit ( ) ; ",
  "19882": "int j = output . arrayOffset ( ) + output . position ( ) ; ",
  "19883": "final int m = output . arrayOffset ( ) + output . limit ( ) ; ",
  "19884": "for ( ; i < n ; ++ i ) { ",
  "19885": "final char ch = in [ i ] ; ",
  "19886": "if ( ch < Unicode . DEL ) { ",
  "19887": "if ( ch > '>' || ( ( _validMask & ( 1L << ch ) ) != 0 ) ) { ",
  "19888": "if ( j >= m ) { ",
  "19889": "return overflow ( input , i , output , j ) ; ",
  "19890": "out [ j ++ ] = ch ; ",
  "19891": "if ( j + AMP_LENGTH > m ) { ",
  "19892": "out [ j ++ ] = '&' ; ",
  "19893": "out [ j ++ ] = 'a' ; ",
  "19894": "out [ j ++ ] = 'm' ; ",
  "19895": "out [ j ++ ] = 'p' ; ",
  "19896": "out [ j ++ ] = ';' ; ",
  "19897": "if ( j + LT_LENGTH > m ) { ",
  "19898": "out [ j ++ ] = 'l' ; ",
  "19899": "out [ j ++ ] = 't' ; ",
  "19900": "if ( j + GT_LENGTH > m ) { ",
  "19901": "out [ j ++ ] = 'g' ; ",
  "19902": "if ( j + APOS_LENGTH > m ) { ",
  "19903": "out [ j ++ ] = '#' ; ",
  "19904": "out [ j ++ ] = '3' ; ",
  "19905": "out [ j ++ ] = '9' ; ",
  "19906": "if ( j + QUOT_LENGTH > m ) { ",
  "19907": "out [ j ++ ] = '4' ; ",
  "19908": "out [ j ++ ] = INVALID_CHARACTER_REPLACEMENT ; ",
  "19909": "} else if ( ch < Character . MIN_HIGH_SURROGATE ) { ",
  "19910": "if ( ch > Unicode . MAX_C1_CTRL_CHAR || ch == Unicode . NEL ) { ",
  "19911": "} else if ( ch <= Character . MAX_HIGH_SURROGATE ) { ",
  "19912": "if ( i + 1 < n ) { ",
  "19913": "if ( Character . isLowSurrogate ( in [ i + 1 ] ) ) { ",
  "19914": "int cp = Character . toCodePoint ( ch , in [ i + 1 ] ) ; ",
  "19915": "if ( Unicode . isNonCharacter ( cp ) ) { ",
  "19916": "if ( j + 1 >= m ) { ",
  "19917": "out [ j ++ ] = in [ ++ i ] ; ",
  "19918": "} else if ( endOfInput ) { ",
  "19919": "ch <= Character . MAX_LOW_SURROGATE ",
  "19920": "|| ch > '\ufffd' ",
  "19921": "|| ( '\ufdd0' <= ch && ch <= '\ufdef' ) ) ",
  "19922": "return underflow ( input , i , output , j ) ; ",
  "19923": "} public static void forHtmlUnquotedAttribute ( Writer out , String input ) ",
  "19924": "encode ( Encoders . HTML_UNQUOTED_ATTRIBUTE_ENCODER , out , input ) ; ",
  "19925": "} public static void forCssString ( Writer out , String input ) ",
  "19926": "encode ( Encoders . CSS_STRING_ENCODER , out , input ) ; ",
  "19927": "} public static void forCssUrl ( Writer out , String input ) ",
  "19928": "encode ( Encoders . CSS_URL_ENCODER , out , input ) ; ",
  "19929": "} @ Deprecated public static void forUri ( Writer out , String input ) ",
  "19930": "encode ( Encoders . URI_ENCODER , out , input ) ; ",
  "19931": "} public static void forUriComponent ( Writer out , String input ) ",
  "19932": "encode ( Encoders . URI_COMPONENT_ENCODER , out , input ) ; ",
  "19933": "} public static void forXml ( Writer out , String input ) ",
  "19934": "encode ( Encoders . XML_ENCODER , out , input ) ; ",
  "19935": "} public static void forXmlContent ( Writer out , String input ) ",
  "19936": "encode ( Encoders . XML_CONTENT_ENCODER , out , input ) ; ",
  "19937": "} public static void forXmlAttribute ( Writer out , String input ) ",
  "19938": "encode ( Encoders . XML_ATTRIBUTE_ENCODER , out , input ) ; ",
  "19939": "} public static void forXmlComment ( Writer out , String input ) ",
  "19940": "encode ( Encoders . XML_COMMENT_ENCODER , out , input ) ; ",
  "19941": "} public static void forCDATA ( Writer out , String input ) ",
  "19942": "encode ( Encoders . CDATA_ENCODER , out , input ) ; ",
  "19943": "} public static void forJava ( Writer out , String input ) ",
  "19944": "encode ( Encoders . JAVA_ENCODER , out , input ) ; ",
  "19945": "} public static void forJavaScript ( Writer out , String input ) ",
  "19946": "encode ( Encoders . JAVASCRIPT_ENCODER , out , input ) ; ",
  "19947": "} public static void forJavaScriptAttribute ( Writer out , String input ) ",
  "19948": "encode ( Encoders . JAVASCRIPT_ATTRIBUTE_ENCODER , out , input ) ; ",
  "19949": "} public static void forJavaScriptBlock ( Writer out , String input ) ",
  "19950": "encode ( Encoders . JAVASCRIPT_BLOCK_ENCODER , out , input ) ; ",
  "19951": "} public static void forJavaScriptSource ( Writer out , String input ) ",
  "19952": "encode ( Encoders . JAVASCRIPT_SOURCE_ENCODER , out , input ) ; ",
  "19953": "} static String encode ( Encoder encoder , String str ) { ",
  "19954": "str = \"null\" ; ",
  "19955": "final int n = str . length ( ) ; ",
  "19956": "int j = encoder . firstEncodedOffset ( str , 0 , n ) ; ",
  "19957": "if ( j == n ) { ",
  "19958": "return new Buffer ( ) . encode ( encoder , str , j ) ; ",
  "19959": "} static void encode ( Encoder encoder , Writer out , String str ) ",
  "19960": "out . write ( str ) ; ",
  "19961": "new Buffer ( ) . encode ( encoder , out , str , j ) ; ",
  "19962": "} private static < T extends Encoder > T map ( String name , T encoder ) { ",
  "19963": "Encoder old = ENCODERS_MAP . put ( name , encoder ) ; ",
  "19964": "assert old == null ; ",
  "19965": "return encoder ; ",
  "19966": "} public static Encoder forName ( String contextName ) throws NullPointerException , UnsupportedContextException { ",
  "19967": "Encoder encoder = ENCODERS_MAP . get ( contextName ) ; ",
  "19968": "throw new UnsupportedContextException ( contextName ) ; ",
  "19969": "} static int append ( char [ ] src , char [ ] out , int j ) { ",
  "19970": "System . arraycopy ( src , 0 , out , j , src . length ) ; ",
  "19971": "return j + src . length ; ",
  "19972": "} static int encode ( int codePoint , char [ ] out , int j ) { ",
  "19973": "if ( codePoint >= 1000 ) { ",
  "19974": "out [ j ++ ] = ( char ) ( codePoint / 1000 % 10 + '0' ) ; ",
  "19975": "if ( codePoint >= 100 ) { ",
  "19976": "out [ j ++ ] = ( char ) ( codePoint / 100 % 10 + '0' ) ; ",
  "19977": "if ( codePoint >= 10 ) { ",
  "19978": "out [ j ++ ] = ( char ) ( codePoint / 10 % 10 + '0' ) ; ",
  "19979": "out [ j ++ ] = ( char ) ( codePoint % 10 + '0' ) ; ",
  "19980": "return j ; ",
  "19981": "} public String encode ( String str ) { ",
  "19982": "int n = str . length ( ) ; ",
  "19983": "int j = _first . firstEncodedOffset ( str , 0 , n ) ; ",
  "19984": "return Encode . encode ( _last , str ) ; ",
  "19985": "final int remaining = n - j ; ",
  "19986": "final int m = j + _first . maxEncodedLength ( n ) ; ",
  "19987": "CharBuffer input = CharBuffer . allocate ( m ) ; ",
  "19988": "str . getChars ( 0 , j , input . array ( ) , 0 ) ; ",
  "19989": "str . getChars ( j , n , input . array ( ) , m - remaining ) ; ",
  "19990": "input . limit ( m ) . position ( m - remaining ) ; ",
  "19991": "CharBuffer tmp = input . duplicate ( ) ; ",
  "19992": "tmp . position ( j ) ; ",
  "19993": "CoderResult cr = _first . encode ( input , tmp , true ) ; ",
  "19994": "CharBuffer output = CharBuffer . allocate ( _last . maxEncodedLength ( tmp . position ( ) ) ) ; ",
  "19995": "tmp . flip ( ) ; ",
  "19996": "cr = _last . encode ( tmp , output , true ) ; ",
  "19997": "return new String ( output . array ( ) , 0 , output . position ( ) ) ; ",
  "19998": "public CoderResult encode ( CharBuffer input , CharBuffer output , boolean endOfInput ) { ",
  "19999": "CoderResult cr1 = _first . encode ( input , _buffer , endOfInput ) ; ",
  "20000": "_buffer . flip ( ) ; ",
  "20001": "CoderResult cr2 = _last . encode ( _buffer , output , endOfInput && cr1 . isUnderflow ( ) ) ; ",
  "20002": "_buffer . compact ( ) ; ",
  "20003": "if ( cr2 . isOverflow ( ) ) { ",
  "20004": "return cr2 ; ",
  "20005": "if ( cr1 . isUnderflow ( ) ) { ",
  "20006": "} private void flushBufferToWriter ( ) throws IOException { ",
  "20007": "_out . write ( _buffer . array ( ) , 0 , _buffer . position ( ) ) ; ",
  "20008": "_buffer . clear ( ) ; ",
  "20009": "} private void flushLeftOver ( CharBuffer input ) throws IOException { ",
  "20010": "if ( ! _hasLeftOver ) { ",
  "20011": "if ( input != null && input . hasRemaining ( ) ) { ",
  "20012": "_leftOverBuffer . put ( input . get ( ) ) ; ",
  "20013": "_leftOverBuffer . flip ( ) ; ",
  "20014": "CoderResult cr = _encoder . encode ( _leftOverBuffer , _buffer , input == null ) ; ",
  "20015": "if ( cr . isUnderflow ( ) ) { ",
  "20016": "if ( _leftOverBuffer . hasRemaining ( ) ) { ",
  "20017": "_leftOverBuffer . compact ( ) ; ",
  "20018": "if ( cr . isOverflow ( ) ) { ",
  "20019": "flushBufferToWriter ( ) ; ",
  "20020": "_hasLeftOver = false ; ",
  "20021": "_leftOverBuffer . clear ( ) ; ",
  "20022": "} public static Predicate < ReactiveSensorEvent > filterSensorChanged ( ) { ",
  "20023": "return new Predicate < ReactiveSensorEvent > ( ) { ",
  "20024": "@ Override public boolean test ( ReactiveSensorEvent event ) throws Exception { ",
  "20025": "return event . isSensorChanged ( ) ; ",
  "20026": "} public static Predicate < ReactiveSensorEvent > filterAccuracyChanged ( ) { ",
  "20027": "return event . isAccuracyChanged ( ) ; ",
  "20028": "} public Flowable < ReactiveSensorEvent > observeSensor ( int sensorType , final int samplingPeriodInUs , ",
  "20029": "final Handler handler , final BackpressureStrategy strategy ) { ",
  "20030": "if ( ! hasSensor ( sensorType ) ) { ",
  "20031": "String message = String . format ( Locale . getDefault ( ) , format , sensorType ) ; ",
  "20032": "return Flowable . error ( new SensorNotFoundException ( message ) ) ; ",
  "20033": "final Sensor sensor = sensorManager . getDefaultSensor ( sensorType ) ; ",
  "20034": "final SensorEventListenerWrapper wrapper = new SensorEventListenerWrapper ( ) ; ",
  "20035": "final SensorEventListener listener = wrapper . create ( ) ; ",
  "20036": "return Flowable . create ( new FlowableOnSubscribe < ReactiveSensorEvent > ( ) { ",
  "20037": "@ Override public void subscribe ( final FlowableEmitter < ReactiveSensorEvent > emitter ) ",
  "20038": "wrapper . setEmitter ( emitter ) ; ",
  "20039": "if ( handler == null ) { ",
  "20040": "sensorManager . registerListener ( listener , sensor , samplingPeriodInUs ) ; ",
  "20041": "sensorManager . registerListener ( listener , sensor , samplingPeriodInUs , handler ) ; ",
  "20042": "} , strategy ) . doOnCancel ( new Action ( ) { ",
  "20043": "@ Override public void run ( ) throws Exception { ",
  "20044": "sensorManager . unregisterListener ( listener ) ; ",
  "20045": "} private void updateDialogMetaData ( Map < String , Object > dialogMetaData , Object dialogAppData , HASipDialog haSipDialog , boolean recreation ) throws ParseException , ",
  "20046": "PeerUnavailableException { ",
  "20047": "haSipDialog . setMetaDataToReplicate ( dialogMetaData , recreation ) ; ",
  "20048": "haSipDialog . setApplicationDataToReplicate ( dialogAppData ) ; ",
  "20049": "final String contactStringified = ( String ) dialogMetaData . get ( AbstractHASipDialog . CONTACT_HEADER ) ; ",
  "20050": "if ( logger . isLoggingEnabled ( StackLogger . TRACE_DEBUG ) ) { ",
  "20051": "if ( contactStringified != null ) { ",
  "20052": "Address contactAddress = SipFactory . getInstance ( ) . createAddressFactory ( ) . createAddress ( contactStringified ) ; ",
  "20053": "ContactHeader contactHeader = SipFactory . getInstance ( ) . createHeaderFactory ( ) . createContactHeader ( contactAddress ) ; ",
  "20054": "haSipDialog . setContactHeader ( contactHeader ) ; ",
  "20055": "} private void updateServerTransactionMetaData ( Map < String , Object > transactionMetaData , Object transactionAppData , MobicentsHASIPServerTransaction haServerTransaction , boolean recreation ) throws ParseException , ",
  "20056": "haServerTransaction . setMetaDataToReplicate ( transactionMetaData , recreation ) ; ",
  "20057": "haServerTransaction . setApplicationDataToReplicate ( transactionAppData ) ; ",
  "20058": "} public SIPDialog getDialog ( String dialogId ) throws SipCacheException { ",
  "20059": "Node dialogNode = ( ( Node ) dialogRootNode . getChild ( Fqn . fromString ( dialogId ) ) ) ; ",
  "20060": "if ( dialogNode != null ) { ",
  "20061": "return ( SIPDialog ) dialogNode . get ( dialogId ) ; ",
  "20062": "} catch ( CacheException e ) { ",
  "20063": "} public void updateDialog ( SIPDialog sipDialog ) throws SipCacheException { ",
  "20064": "Node dialogNode = ( ( Node ) dialogRootNode . getChild ( Fqn . fromString ( sipDialog . getDialogId ( ) ) ) ) ; ",
  "20065": "sipDialog = ( SIPDialog ) dialogNode . get ( sipDialog . getDialogId ( ) ) ; ",
  "20066": "} public void putDialog ( SIPDialog dialog ) throws SipCacheException { ",
  "20067": "UserTransaction tx = null ; ",
  "20068": "prop . put ( Context . INITIAL_CONTEXT_FACTORY , \"org.jboss.cache.transaction.DummyContextFactory\" ) ; ",
  "20069": "tx = ( UserTransaction ) new InitialContext ( prop ) . lookup ( \"UserTransaction\" ) ; ",
  "20070": "tx . begin ( ) ; ",
  "20071": "Node dialogNode = dialogRootNode . addChild ( Fqn . fromString ( dialog . getDialogId ( ) ) ) ; ",
  "20072": "dialogNode . put ( dialog . getDialogId ( ) , dialog ) ; ",
  "20073": "tx . commit ( ) ; ",
  "20074": "try { tx . rollback ( ) ; } catch ( Throwable t ) { } ",
  "20075": "} public void removeDialog ( String dialogId ) throws SipCacheException { ",
  "20076": "dialogRootNode . removeChild ( dialogId ) ; ",
  "20077": "public void stop ( ) throws SipCacheException { ",
  "20078": "if ( configProperties . getProperty ( ManagedMobicentsSipCache . STANDALONE ) != null || \"true\" . equals ( configProperties . getProperty ( ManagedMobicentsSipCache . STANDALONE ) ) ) { ",
  "20079": "} private Address createAddress ( String balancerDescription ) { ",
  "20080": "String host = balancerDescription ; ",
  "20081": "int sipPort = LoadBalancerHeartBeatingServiceImpl . DEFAULT_LB_SIP_PORT ; ",
  "20082": "if ( balancerDescription ",
  "20083": ". indexOf ( LoadBalancerHeartBeatingServiceImpl . BALANCER_SIP_PORT_CHAR_SEPARATOR ) != - 1 ) { ",
  "20084": "String [ ] balancerDescriptionSplitted = balancerDescription ",
  "20085": ". split ( LoadBalancerHeartBeatingServiceImpl . BALANCER_SIP_PORT_CHAR_SEPARATOR ) ; ",
  "20086": "host = balancerDescriptionSplitted [ 0 ] ; ",
  "20087": "sipPort = Integer . parseInt ( balancerDescriptionSplitted [ 1 ] ) ; ",
  "20088": "logger . logError ( ",
  "20089": "+ balancerDescriptionSplitted [ 1 ] , e ) ; ",
  "20090": "return createAddress ( host , sipPort ) ; ",
  "20091": "} private Address createAddress ( String host , int port ) { ",
  "20092": "SipUri sipUri = new SipUri ( ) ; ",
  "20093": "sipUri . setHost ( host ) ; ",
  "20094": "sipUri . setPort ( port ) ; ",
  "20095": "return addressFactory . createAddress ( sipUri ) ; ",
  "20096": "} public void loadBalancerRemoved ( SipLoadBalancer balancerDescription ) { ",
  "20097": "Address address = createAddress ( balancerDescription . getAddress ( ) ",
  "20098": ". getHostName ( ) , balancerDescription . getSipPort ( ) ) ; ",
  "20099": "if ( address != null ) { ",
  "20100": "removeLoadBalancer ( address ) ; ",
  "20101": "} public void setService ( LoadBalancerHeartBeatingService service ) throws IllegalStateException , NullPointerException { ",
  "20102": "if ( addressFactory == null || logger == null ) { ",
  "20103": "this . service = service ; ",
  "20104": "service . addLoadBalancerHeartBeatingListener ( this ) ; ",
  "20105": "for ( SipLoadBalancer balancer : service . getLoadBalancers ( ) ) { ",
  "20106": "addLoadBalancer ( balancer ) ; ",
  "20107": "} public void passivateDialog ( HASipDialog dialog ) { ",
  "20108": "String dialogId = dialog . getDialogIdToReplicate ( ) ; ",
  "20109": "sipCache . evictDialog ( dialogId ) ; ",
  "20110": "String mergeId = dialog . getMergeId ( ) ; ",
  "20111": "if ( mergeId != null ) { ",
  "20112": "serverDialogMergeTestTable . remove ( mergeId ) ; ",
  "20113": "dialogTable . remove ( dialogId ) ; ",
  "20114": "public void start ( ) throws ProviderDoesNotExistException , SipException { ",
  "20115": "sipCache . start ( ) ; ",
  "20116": "if ( loadBalancerHeartBeatingService != null ) { ",
  "20117": "loadBalancerHeartBeatingService . start ( ) ; ",
  "20118": "sipCache . stop ( ) ; ",
  "20119": "loadBalancerHeartBeatingService . stop ( ) ; ",
  "20120": "public SIPDialog createDialog ( SIPTransaction transaction ) { ",
  "20121": "if ( sipCache . inLocalMode ( ) ) { ",
  "20122": "return super . createDialog ( transaction ) ; ",
  "20123": "SIPDialog retval = null ; ",
  "20124": "if ( transaction instanceof SIPClientTransaction ) { ",
  "20125": "final String dialogId = ( ( SIPRequest ) transaction . getRequest ( ) ) . getDialogId ( false ) ; ",
  "20126": "retval = this . earlyDialogTable . get ( dialogId ) ; ",
  "20127": "if ( retval == null || ( retval . getState ( ) != null && retval . getState ( ) != DialogState . EARLY ) ) { ",
  "20128": "retval = ( SIPDialog ) HASipDialogFactory . createHASipDialog ( replicationStrategy , transaction ) ; ",
  "20129": "this . earlyDialogTable . put ( dialogId , retval ) ; ",
  "20130": "public SIPDialog createDialog ( SIPClientTransaction transaction , SIPResponse sipResponse ) { ",
  "20131": "return super . createDialog ( transaction , sipResponse ) ; ",
  "20132": "SIPDialog retval = this . earlyDialogTable . get ( dialogId ) ; ",
  "20133": "if ( retval != null && sipResponse . isFinalResponse ( ) ) { ",
  "20134": "this . earlyDialogTable . remove ( dialogId ) ; ",
  "20135": "retval = ( SIPDialog ) HASipDialogFactory . createHASipDialog ( replicationStrategy , transaction , sipResponse ) ; ",
  "20136": "public SIPDialog createDialog ( SipProviderImpl sipProvider , ",
  "20137": "SIPResponse sipResponse ) { ",
  "20138": "return super . createDialog ( sipProvider , sipResponse ) ; ",
  "20139": "return ( SIPDialog ) HASipDialogFactory . createHASipDialog ( replicationStrategy , sipProvider , sipResponse ) ; ",
  "20140": "public SIPDialog getDialog ( String dialogId ) { ",
  "20141": "return super . getDialog ( dialogId ) ; ",
  "20142": "if ( getStackLogger ( ) . isLoggingEnabled ( StackLogger . TRACE_DEBUG ) ) { ",
  "20143": "SIPDialog sipDialog = super . getDialog ( dialogId ) ; ",
  "20144": "int nbToken = new StringTokenizer ( dialogId , Separators . COLON ) . countTokens ( ) ; ",
  "20145": "if ( nbToken >= 3 ) { ",
  "20146": "if ( sipDialog == null ) { ",
  "20147": "sipDialog = getDialogFromDistributedCache ( dialogId ) ; ",
  "20148": "if ( sipDialog != null ) { ",
  "20149": "SIPDialog existingDialog = super . putDialog ( sipDialog ) ; ",
  "20150": "if ( existingDialog != null ) { ",
  "20151": "sipDialog = existingDialog ; ",
  "20152": "if ( sipDialog . getState ( ) == DialogState . CONFIRMED ) { ",
  "20153": "sipCache . updateDialog ( sipDialog ) ; ",
  "20154": "} catch ( SipCacheException e ) { ",
  "20155": "return sipDialog ; ",
  "20156": "public void removeDialog ( SIPDialog dialog ) { ",
  "20157": "if ( ! sipCache . inLocalMode ( ) ) { ",
  "20158": "removeDialogFromDistributedCache ( dialog . getDialogId ( ) ) ; ",
  "20159": "super . removeDialog ( dialog ) ; ",
  "20160": "} public void remoteDialogRemoval ( String dialogId ) { ",
  "20161": "SIPDialog sipDialog = super . dialogTable . remove ( dialogId ) ; ",
  "20162": "String mergeId = sipDialog . getMergeId ( ) ; ",
  "20163": "super . serverDialogMergeTestTable . remove ( mergeId ) ; ",
  "20164": "} protected SIPDialog getDialogFromDistributedCache ( String dialogId ) { ",
  "20165": "SIPDialog sipDialog = null ; ",
  "20166": "sipDialog = sipCache . getDialog ( dialogId ) ; ",
  "20167": "( ( HASipDialog ) sipDialog ) . initAfterLoad ( this ) ; ",
  "20168": "} protected void putDialogIntoDistributedCache ( SIPDialog dialog ) { ",
  "20169": "String dialogId = dialog . getDialogId ( ) ; ",
  "20170": "sipCache . putDialog ( dialog ) ; ",
  "20171": "} protected void removeDialogFromDistributedCache ( String dialogId ) { ",
  "20172": "sipCache . removeDialog ( dialogId ) ; ",
  "20173": "public SIPTransaction findTransaction ( String transactionId , boolean isServer ) { ",
  "20174": "if ( sipCache . inLocalMode ( ) || replicationStrategy != ReplicationStrategy . EarlyDialog ) { ",
  "20175": "return super . findTransaction ( transactionId , isServer ) ; ",
  "20176": "final String txId = transactionId . toLowerCase ( ) ; ",
  "20177": "SIPTransaction sipTransaction = super . findTransaction ( txId , isServer ) ; ",
  "20178": "if ( sipTransaction == null && transactionFactory != null ) { ",
  "20179": "sipTransaction = sipCache . getServerTransaction ( txId ) ; ",
  "20180": "if ( sipTransaction != null ) { ",
  "20181": "SIPServerTransaction retval = serverTransactionTable . putIfAbsent ( txId , ( SIPServerTransaction ) sipTransaction ) ; ",
  "20182": "if ( retval != null ) { ",
  "20183": "sipTransaction = retval ; ",
  "20184": "sipTransaction = sipCache . getClientTransaction ( txId ) ; ",
  "20185": "SIPClientTransaction retval = clientTransactionTable . putIfAbsent ( txId , ( SIPClientTransaction ) sipTransaction ) ; ",
  "20186": "( ( MobicentsHASIPClientTransaction ) sipTransaction ) . startTransactionTimerOnFailover ( ) ; ",
  "20187": "return sipTransaction ; ",
  "20188": "} public void remoteServerTransactionRemoval ( String transactionId ) { ",
  "20189": "SIPServerTransaction sipServerTransaction = super . serverTransactionTable . remove ( txId ) ; ",
  "20190": "if ( sipServerTransaction != null ) { ",
  "20191": "super . removeFromMergeTable ( sipServerTransaction ) ; ",
  "20192": "super . removePendingTransaction ( sipServerTransaction ) ; ",
  "20193": "super . removeTransactionPendingAck ( sipServerTransaction ) ; ",
  "20194": "} public void remoteClientTransactionRemoval ( String transactionId ) { ",
  "20195": "SIPClientTransaction sipClientTransaction = super . clientTransactionTable . remove ( txId ) ; ",
  "20196": "} private void updateClientTransactionMetaData ( Map < String , Object > transactionMetaData , Object transactionAppData , MobicentsHASIPClientTransaction haClientTransaction , boolean recreation ) throws ParseException , ",
  "20197": "haClientTransaction . setMetaDataToReplicate ( transactionMetaData , recreation ) ; ",
  "20198": "haClientTransaction . setApplicationDataToReplicate ( transactionAppData ) ; ",
  "20199": "int next = ( current == balancers . size ( ) ? 1 : current + 1 ) ; ",
  "20200": "} public void start ( ) throws SipCacheException { ",
  "20201": "cluster . getMobicentsCache ( ) . startCache ( ) ; ",
  "20202": "dialogsCacheData = new SIPDialogCacheData ( Fqn . fromElements ( name , SipCache . DIALOG_PARENT_FQN_ELEMENT ) , cluster . getMobicentsCache ( ) , clusteredSipStack ) ; ",
  "20203": "dialogsCacheData . create ( ) ; ",
  "20204": "dialogDataRemovalListener = new DialogDataRemovalListener ( dialogsCacheData . getNodeFqn ( ) , clusteredSipStack ) ; ",
  "20205": "cluster . addDataRemovalListener ( dialogDataRemovalListener ) ; ",
  "20206": "if ( clusteredSipStack . getReplicationStrategy ( ) == ReplicationStrategy . EarlyDialog ) { ",
  "20207": "serverTransactionCacheData = new ServerTransactionCacheData ( Fqn . fromElements ( name , SipCache . SERVER_TX_PARENT_FQN_ELEMENT ) , cluster . getMobicentsCache ( ) , clusteredSipStack ) ; ",
  "20208": "serverTransactionCacheData . create ( ) ; ",
  "20209": "serverTransactionDataRemovalListener = new ServerTransactionDataRemovalListener ( serverTransactionCacheData . getNodeFqn ( ) , clusteredSipStack ) ; ",
  "20210": "cluster . addDataRemovalListener ( serverTransactionDataRemovalListener ) ; ",
  "20211": "clientTransactionCacheData = new ClientTransactionCacheData ( Fqn . fromElements ( name , SipCache . CLIENT_TX_PARENT_FQN_ELEMENT ) , cluster . getMobicentsCache ( ) , clusteredSipStack ) ; ",
  "20212": "clientTransactionCacheData . create ( ) ; ",
  "20213": "clientTransactionDataRemovalListener = new ClientTransactionDataRemovalListener ( clientTransactionCacheData . getNodeFqn ( ) , clusteredSipStack ) ; ",
  "20214": "cluster . addDataRemovalListener ( clientTransactionDataRemovalListener ) ; ",
  "20215": "if ( serializationClassLoader != null ) { ",
  "20216": "Region region = getMobicentsCache ( ) . getJBossCache ( ) . getRegion ( dialogsCacheData . getNodeFqn ( ) , true ) ; ",
  "20217": "region . registerContextClassLoader ( serializationClassLoader ) ; ",
  "20218": "region . activate ( ) ; ",
  "20219": "Region stxRegion = getMobicentsCache ( ) . getJBossCache ( ) . getRegion ( serverTransactionCacheData . getNodeFqn ( ) , true ) ; ",
  "20220": "stxRegion . registerContextClassLoader ( serializationClassLoader ) ; ",
  "20221": "stxRegion . activate ( ) ; ",
  "20222": "Region ctxRegion = getMobicentsCache ( ) . getJBossCache ( ) . getRegion ( clientTransactionCacheData . getNodeFqn ( ) , true ) ; ",
  "20223": "ctxRegion . registerContextClassLoader ( serializationClassLoader ) ; ",
  "20224": "ctxRegion . activate ( ) ; ",
  "20225": "} public void stop ( ) throws SipCacheException { ",
  "20226": "dialogsCacheData . remove ( ) ; ",
  "20227": "cluster . removeDataRemovalListener ( dialogDataRemovalListener ) ; ",
  "20228": "serverTransactionCacheData . remove ( ) ; ",
  "20229": "cluster . removeDataRemovalListener ( serverTransactionDataRemovalListener ) ; ",
  "20230": "clientTransactionCacheData . remove ( ) ; ",
  "20231": "cluster . removeDataRemovalListener ( clientTransactionDataRemovalListener ) ; ",
  "20232": "} public SIPClientTransaction createClientTransaction ( SIPRequest sipRequest , ",
  "20233": "MessageChannel encapsulatedMessageChannel ) { ",
  "20234": "MobicentsHASIPClientTransaction ct = new MobicentsHASIPClientTransaction ( sipStack , ",
  "20235": "encapsulatedMessageChannel ) ; ",
  "20236": "ct . setOriginalRequest ( sipRequest ) ; ",
  "20237": "} public void initAfterLoad ( ClusteredSipStack sipStackImpl ) { ",
  "20238": "String transport = getLastResponseTopMostVia ( ) . getTransport ( ) ; ",
  "20239": "Iterator < SipProviderImpl > providers = sipStackImpl . getSipProviders ( ) ; ",
  "20240": "boolean providerNotFound = true ; ",
  "20241": "while ( providers . hasNext ( ) ) { ",
  "20242": "SipProviderImpl providerImpl = providers . next ( ) ; ",
  "20243": "if ( providerImpl . getListeningPoint ( transport ) != null ) { ",
  "20244": "setSipProvider ( providerImpl ) ; ",
  "20245": "providerNotFound = false ; ",
  "20246": "if ( providerNotFound ) { ",
  "20247": "setStack ( ( SIPTransactionStack ) sipStackImpl ) ; ",
  "20248": "setAssigned ( ) ; ",
  "20249": "firstTransactionPort = getSipProvider ( ) . getListeningPoint ( getLastResponseTopMostVia ( ) . getTransport ( ) ) . getPort ( ) ; ",
  "20250": "ackProcessed = true ; ",
  "20251": "public boolean addTransaction ( SIPTransaction transaction ) { ",
  "20252": "if ( transaction instanceof ServerTransaction ) { ",
  "20253": "isLatestTxServer = true ; ",
  "20254": "isLatestTxServer = false ; ",
  "20255": "return super . addTransaction ( transaction ) ; ",
  "20256": "} protected void replicateState ( ) { ",
  "20257": "final DialogState dialogState = getState ( ) ; ",
  "20258": "final ReplicationStrategy replicationStrategy = ( ( ClusteredSipStack ) getStack ( ) ) . getReplicationStrategy ( ) ; ",
  "20259": "boolean replicationStateVsDialogStateOK = false ; ",
  "20260": "if ( dialogState == DialogState . CONFIRMED && ( replicationStrategy == ReplicationStrategy . ConfirmedDialog || replicationStrategy == ReplicationStrategy . ConfirmedDialogNoApplicationData ) ) { ",
  "20261": "replicationStateVsDialogStateOK = true ; ",
  "20262": "if ( ( dialogState == DialogState . EARLY || dialogState == DialogState . CONFIRMED || ",
  "20263": "dialogState == DialogState . TERMINATED ) ",
  "20264": "&& replicationStrategy == ReplicationStrategy . EarlyDialog ) { ",
  "20265": "if ( replicationStateVsDialogStateOK && isCreated && super . dialogId != null && isRemoteTagSet ( ) && isLocalTagSet ( ) && getStack ( ) . getDialog ( getDialogIdToReplicate ( ) ) != null ) { ",
  "20266": "( ( ClusteredSipStack ) getStack ( ) ) . getSipCache ( ) . putDialog ( this ) ; ",
  "20267": "} public void setHeartBeatInterval ( long heartBeatInterval ) { ",
  "20268": "if ( heartBeatInterval < 100 ) ",
  "20269": "this . heartBeatInterval = heartBeatInterval ; ",
  "20270": "this . hearBeatTaskToRun . cancel ( ) ; ",
  "20271": "this . hearBeatTaskToRun = new BalancerPingTimerTask ( ) ; ",
  "20272": "this . heartBeatTimer . scheduleAtFixedRate ( this . hearBeatTaskToRun , 0 , ",
  "20273": "this . heartBeatInterval ) ; ",
  "20274": "} protected ArrayList < SIPNode > getReachableSIPNodeInfo ( InetAddress balancerAddr , ArrayList < SIPNode > info ) { ",
  "20275": "if ( balancerAddr . isLoopbackAddress ( ) ) { ",
  "20276": "ArrayList < SIPNode > rv = new ArrayList < SIPNode > ( ) ; ",
  "20277": "for ( SIPNode node : info ) { ",
  "20278": "if ( logger . isLoggingEnabled ( StackLogger . TRACE_TRACE ) ) { ",
  "20279": "NetworkInterface ni = NetworkInterface . getByInetAddress ( InetAddress . getByName ( node . getIp ( ) ) ) ; ",
  "20280": "boolean b = balancerAddr . isReachable ( ni , 5 , 900 ) ; ",
  "20281": "rv . add ( node ) ; ",
  "20282": "logger . logError ( \"IOException\" , e ) ; ",
  "20283": "} public void sendSwitchoverInstruction ( SipLoadBalancer sipLoadBalancer , String fromJvmRoute , String toJvmRoute ) { ",
  "20284": "if ( logger . isLoggingEnabled ( StackLogger . TRACE_INFO ) ) { ",
  "20285": "if ( fromJvmRoute == null || toJvmRoute == null ) { ",
  "20286": "Thread . currentThread ( ) . setContextClassLoader ( NodeRegisterRMIStub . class . getClassLoader ( ) ) ; ",
  "20287": "Registry registry = LocateRegistry . getRegistry ( sipLoadBalancer . getAddress ( ) . getHostAddress ( ) , sipLoadBalancer . getRmiPort ( ) ) ; ",
  "20288": "NodeRegisterRMIStub reg = ( NodeRegisterRMIStub ) registry . lookup ( \"SIPBalancer\" ) ; ",
  "20289": "reg . switchover ( fromJvmRoute , toJvmRoute ) ; ",
  "20290": "sipLoadBalancer . setDisplayWarning ( true ) ; ",
  "20291": "if ( logger . isLoggingEnabled ( StackLogger . TRACE_INFO ) && ! sipLoadBalancer . isAvailable ( ) ) { ",
  "20292": "sipLoadBalancer . setAvailable ( false ) ; ",
  "20293": "if ( sipLoadBalancer . isDisplayWarning ( ) ) { ",
  "20294": "sipLoadBalancer . setDisplayWarning ( false ) ; ",
  "20295": "if ( sipNodes . isEmpty ( ) ) { ",
  "20296": "updateConnectorsAsSIPNode ( ) ; ",
  "20297": "} public boolean addBalancer ( String addr , int sipPort , int httpPort , int rmiPort ) { ",
  "20298": "if ( addr == null ) ",
  "20299": "address = InetAddress . getByName ( addr ) ; ",
  "20300": "String balancerName = address . getCanonicalHostName ( ) + \":\" + rmiPort ; ",
  "20301": "if ( register . get ( balancerName ) != null ) { ",
  "20302": "SipLoadBalancer sipLoadBalancer = new SipLoadBalancer ( this , address , sipPort , httpPort , rmiPort ) ; ",
  "20303": "register . put ( balancerName , sipLoadBalancer ) ; ",
  "20304": "for ( LoadBalancerHeartBeatingListener loadBalancerHeartBeatingListener : loadBalancerHeartBeatingListeners ) { ",
  "20305": "loadBalancerHeartBeatingListener . loadBalancerAdded ( sipLoadBalancer ) ; ",
  "20306": "} public boolean addBalancer ( String hostName , int sipPort , int httpPort , int index , int rmiPort ) { ",
  "20307": "return this . addBalancer ( fetchHostAddress ( hostName , index ) ",
  "20308": ". getHostAddress ( ) , sipPort , httpPort , rmiPort ) ; ",
  "20309": "} public boolean removeBalancer ( String addr , int sipPort , int httpPort , int rmiPort ) { ",
  "20310": "String keyToRemove = null ; ",
  "20311": "Iterator < String > keyIterator = register . keySet ( ) . iterator ( ) ; ",
  "20312": "while ( keyIterator . hasNext ( ) && keyToRemove == null ) { ",
  "20313": "String key = keyIterator . next ( ) ; ",
  "20314": "if ( register . get ( key ) . equals ( sipLoadBalancer ) ) { ",
  "20315": "keyToRemove = key ; ",
  "20316": "if ( keyToRemove != null ) { ",
  "20317": "register . remove ( keyToRemove ) ; ",
  "20318": "loadBalancerHeartBeatingListener . loadBalancerRemoved ( sipLoadBalancer ) ; ",
  "20319": "} public boolean removeBalancer ( String hostName , int sipPort , int httpPort , int index , int rmiPort ) { ",
  "20320": "InetAddress [ ] hostAddr = null ; ",
  "20321": "hostAddr = InetAddress . getAllByName ( hostName ) ; ",
  "20322": "} catch ( UnknownHostException uhe ) { ",
  "20323": "uhe ) ; ",
  "20324": "if ( index < 0 || index >= hostAddr . length ) { ",
  "20325": "InetAddress address = hostAddr [ index ] ; ",
  "20326": "return this . removeBalancer ( address . getHostAddress ( ) , sipPort , httpPort , rmiPort ) ; ",
  "20327": "} protected ArrayList < SIPNode > getReachableSIPNodeInfo ( SipLoadBalancer balancer , ArrayList < SIPNode > info ) { ",
  "20328": "InetAddress balancerAddr = balancer . getAddress ( ) ; ",
  "20329": "if ( balancer . getCustomInfo ( ) != null && ! balancer . getCustomInfo ( ) . isEmpty ( ) ) { ",
  "20330": "for ( Entry < Object , Object > entry : balancer . getCustomInfo ( ) . entrySet ( ) ) { ",
  "20331": "node . getProperties ( ) . put ( ( String ) entry . getKey ( ) , ( String ) entry . getValue ( ) ) ; ",
  "20332": "} public static Geometry readGeometry ( ByteReader reader ) { ",
  "20333": "Geometry geometry = readGeometry ( reader , null ) ; ",
  "20334": "return geometry ; ",
  "20335": "} public static < T extends Geometry > T readGeometry ( ByteReader reader , ",
  "20336": "Class < T > expectedType ) { ",
  "20337": "ByteOrder originalByteOrder = reader . getByteOrder ( ) ; ",
  "20338": "GeometryTypeInfo geometryTypeInfo = readGeometryType ( reader ) ; ",
  "20339": "GeometryType geometryType = geometryTypeInfo . getGeometryType ( ) ; ",
  "20340": "boolean hasZ = geometryTypeInfo . hasZ ( ) ; ",
  "20341": "boolean hasM = geometryTypeInfo . hasM ( ) ; ",
  "20342": "Geometry geometry = null ; ",
  "20343": "switch ( geometryType ) { ",
  "20344": "case GEOMETRY : ",
  "20345": "geometry = readPoint ( reader , hasZ , hasM ) ; ",
  "20346": "case LINESTRING : ",
  "20347": "geometry = readLineString ( reader , hasZ , hasM ) ; ",
  "20348": "geometry = readPolygon ( reader , hasZ , hasM ) ; ",
  "20349": "case MULTIPOINT : ",
  "20350": "geometry = readMultiPoint ( reader , hasZ , hasM ) ; ",
  "20351": "case MULTILINESTRING : ",
  "20352": "geometry = readMultiLineString ( reader , hasZ , hasM ) ; ",
  "20353": "case MULTIPOLYGON : ",
  "20354": "geometry = readMultiPolygon ( reader , hasZ , hasM ) ; ",
  "20355": "case GEOMETRYCOLLECTION : ",
  "20356": "case MULTICURVE : ",
  "20357": "case MULTISURFACE : ",
  "20358": "geometry = readGeometryCollection ( reader , hasZ , hasM ) ; ",
  "20359": "case CIRCULARSTRING : ",
  "20360": "geometry = readCircularString ( reader , hasZ , hasM ) ; ",
  "20361": "case COMPOUNDCURVE : ",
  "20362": "geometry = readCompoundCurve ( reader , hasZ , hasM ) ; ",
  "20363": "case CURVEPOLYGON : ",
  "20364": "geometry = readCurvePolygon ( reader , hasZ , hasM ) ; ",
  "20365": "case CURVE : ",
  "20366": "case SURFACE : ",
  "20367": "case POLYHEDRALSURFACE : ",
  "20368": "geometry = readPolyhedralSurface ( reader , hasZ , hasM ) ; ",
  "20369": "case TIN : ",
  "20370": "geometry = readTIN ( reader , hasZ , hasM ) ; ",
  "20371": "case TRIANGLE : ",
  "20372": "geometry = readTriangle ( reader , hasZ , hasM ) ; ",
  "20373": "+ geometryType ) ; ",
  "20374": "if ( expectedType != null && geometry != null ",
  "20375": "&& ! expectedType . isAssignableFrom ( geometry . getClass ( ) ) ) { ",
  "20376": "+ geometry . getClass ( ) . getSimpleName ( ) ) ; ",
  "20377": "reader . setByteOrder ( originalByteOrder ) ; ",
  "20378": "T result = ( T ) geometry ; ",
  "20379": "} public static GeometryTypeInfo readGeometryType ( ByteReader reader ) { ",
  "20380": "byte byteOrderValue = reader . readByte ( ) ; ",
  "20381": "ByteOrder byteOrder = byteOrderValue == 0 ? ByteOrder . BIG_ENDIAN ",
  "20382": "reader . setByteOrder ( byteOrder ) ; ",
  "20383": "long unsignedGeometryTypeCode = reader . readUnsignedInt ( ) ; ",
  "20384": "boolean hasZ = false ; ",
  "20385": "if ( unsignedGeometryTypeCode > WKB25D ) { ",
  "20386": "hasZ = true ; ",
  "20387": "unsignedGeometryTypeCode -= WKB25D ; ",
  "20388": "int geometryTypeCode = ( int ) unsignedGeometryTypeCode ; ",
  "20389": "GeometryType geometryType = GeometryCodes ",
  "20390": ". getGeometryType ( geometryTypeCode ) ; ",
  "20391": "if ( ! hasZ ) { ",
  "20392": "hasZ = GeometryCodes . hasZ ( geometryTypeCode ) ; ",
  "20393": "boolean hasM = GeometryCodes . hasM ( geometryTypeCode ) ; ",
  "20394": "GeometryTypeInfo geometryInfo = new GeometryTypeInfo ( geometryTypeCode , ",
  "20395": "geometryType , hasZ , hasM ) ; ",
  "20396": "return geometryInfo ; ",
  "20397": "} public static Point readPoint ( ByteReader reader , boolean hasZ , boolean hasM ) { ",
  "20398": "double x = reader . readDouble ( ) ; ",
  "20399": "double y = reader . readDouble ( ) ; ",
  "20400": "Point point = new Point ( hasZ , hasM , x , y ) ; ",
  "20401": "if ( hasZ ) { ",
  "20402": "double z = reader . readDouble ( ) ; ",
  "20403": "point . setZ ( z ) ; ",
  "20404": "if ( hasM ) { ",
  "20405": "double m = reader . readDouble ( ) ; ",
  "20406": "point . setM ( m ) ; ",
  "20407": "} public static LineString readLineString ( ByteReader reader , boolean hasZ , ",
  "20408": "boolean hasM ) { ",
  "20409": "LineString lineString = new LineString ( hasZ , hasM ) ; ",
  "20410": "int numPoints = reader . readInt ( ) ; ",
  "20411": "for ( int i = 0 ; i < numPoints ; i ++ ) { ",
  "20412": "Point point = readPoint ( reader , hasZ , hasM ) ; ",
  "20413": "lineString . addPoint ( point ) ; ",
  "20414": "return lineString ; ",
  "20415": "} public static Polygon readPolygon ( ByteReader reader , boolean hasZ , ",
  "20416": "Polygon polygon = new Polygon ( hasZ , hasM ) ; ",
  "20417": "int numRings = reader . readInt ( ) ; ",
  "20418": "for ( int i = 0 ; i < numRings ; i ++ ) { ",
  "20419": "LineString ring = readLineString ( reader , hasZ , hasM ) ; ",
  "20420": "polygon . addRing ( ring ) ; ",
  "20421": "return polygon ; ",
  "20422": "} public static MultiPoint readMultiPoint ( ByteReader reader , boolean hasZ , ",
  "20423": "MultiPoint multiPoint = new MultiPoint ( hasZ , hasM ) ; ",
  "20424": "Point point = readGeometry ( reader , Point . class ) ; ",
  "20425": "multiPoint . addPoint ( point ) ; ",
  "20426": "return multiPoint ; ",
  "20427": "} public static MultiLineString readMultiLineString ( ByteReader reader , ",
  "20428": "boolean hasZ , boolean hasM ) { ",
  "20429": "MultiLineString multiLineString = new MultiLineString ( hasZ , hasM ) ; ",
  "20430": "int numLineStrings = reader . readInt ( ) ; ",
  "20431": "for ( int i = 0 ; i < numLineStrings ; i ++ ) { ",
  "20432": "LineString lineString = readGeometry ( reader , LineString . class ) ; ",
  "20433": "multiLineString . addLineString ( lineString ) ; ",
  "20434": "return multiLineString ; ",
  "20435": "} public static MultiPolygon readMultiPolygon ( ByteReader reader , ",
  "20436": "MultiPolygon multiPolygon = new MultiPolygon ( hasZ , hasM ) ; ",
  "20437": "int numPolygons = reader . readInt ( ) ; ",
  "20438": "for ( int i = 0 ; i < numPolygons ; i ++ ) { ",
  "20439": "Polygon polygon = readGeometry ( reader , Polygon . class ) ; ",
  "20440": "multiPolygon . addPolygon ( polygon ) ; ",
  "20441": "return multiPolygon ; ",
  "20442": "} public static GeometryCollection < Geometry > readGeometryCollection ( ",
  "20443": "ByteReader reader , boolean hasZ , boolean hasM ) { ",
  "20444": "GeometryCollection < Geometry > geometryCollection = new GeometryCollection < Geometry > ( ",
  "20445": "hasZ , hasM ) ; ",
  "20446": "int numGeometries = reader . readInt ( ) ; ",
  "20447": "for ( int i = 0 ; i < numGeometries ; i ++ ) { ",
  "20448": "Geometry geometry = readGeometry ( reader , Geometry . class ) ; ",
  "20449": "geometryCollection . addGeometry ( geometry ) ; ",
  "20450": "return geometryCollection ; ",
  "20451": "} public static CircularString readCircularString ( ByteReader reader , ",
  "20452": "CircularString circularString = new CircularString ( hasZ , hasM ) ; ",
  "20453": "circularString . addPoint ( point ) ; ",
  "20454": "return circularString ; ",
  "20455": "} public static CompoundCurve readCompoundCurve ( ByteReader reader , ",
  "20456": "CompoundCurve compoundCurve = new CompoundCurve ( hasZ , hasM ) ; ",
  "20457": "compoundCurve . addLineString ( lineString ) ; ",
  "20458": "return compoundCurve ; ",
  "20459": "} public static CurvePolygon < Curve > readCurvePolygon ( ByteReader reader , ",
  "20460": "CurvePolygon < Curve > curvePolygon = new CurvePolygon < Curve > ( hasZ , hasM ) ; ",
  "20461": "Curve ring = readGeometry ( reader , Curve . class ) ; ",
  "20462": "curvePolygon . addRing ( ring ) ; ",
  "20463": "return curvePolygon ; ",
  "20464": "} public static PolyhedralSurface readPolyhedralSurface ( ByteReader reader , ",
  "20465": "PolyhedralSurface polyhedralSurface = new PolyhedralSurface ( hasZ , hasM ) ; ",
  "20466": "polyhedralSurface . addPolygon ( polygon ) ; ",
  "20467": "return polyhedralSurface ; ",
  "20468": "} public static TIN readTIN ( ByteReader reader , boolean hasZ , boolean hasM ) { ",
  "20469": "TIN tin = new TIN ( hasZ , hasM ) ; ",
  "20470": "tin . addPolygon ( polygon ) ; ",
  "20471": "return tin ; ",
  "20472": "} public static Triangle readTriangle ( ByteReader reader , boolean hasZ , ",
  "20473": "Triangle triangle = new Triangle ( hasZ , hasM ) ; ",
  "20474": "triangle . addRing ( ring ) ; ",
  "20475": "return triangle ; ",
  "20476": "} public static void writeGeometry ( ByteWriter writer , Geometry geometry ) ",
  "20477": "byte byteOrder = writer . getByteOrder ( ) == ByteOrder . BIG_ENDIAN ? ( byte ) 0 ",
  "20478": ": ( byte ) 1 ; ",
  "20479": "writer . writeByte ( byteOrder ) ; ",
  "20480": "writer . writeInt ( GeometryCodes . getCode ( geometry ) ) ; ",
  "20481": "GeometryType geometryType = geometry . getGeometryType ( ) ; ",
  "20482": "writePoint ( writer , ( Point ) geometry ) ; ",
  "20483": "writeLineString ( writer , ( LineString ) geometry ) ; ",
  "20484": "writePolygon ( writer , ( Polygon ) geometry ) ; ",
  "20485": "writeMultiPoint ( writer , ( MultiPoint ) geometry ) ; ",
  "20486": "writeMultiLineString ( writer , ( MultiLineString ) geometry ) ; ",
  "20487": "writeMultiPolygon ( writer , ( MultiPolygon ) geometry ) ; ",
  "20488": "writeGeometryCollection ( writer , ( GeometryCollection < ? > ) geometry ) ; ",
  "20489": "writeCircularString ( writer , ( CircularString ) geometry ) ; ",
  "20490": "writeCompoundCurve ( writer , ( CompoundCurve ) geometry ) ; ",
  "20491": "writeCurvePolygon ( writer , ( CurvePolygon < ? > ) geometry ) ; ",
  "20492": "writePolyhedralSurface ( writer , ( PolyhedralSurface ) geometry ) ; ",
  "20493": "writeTIN ( writer , ( TIN ) geometry ) ; ",
  "20494": "writeTriangle ( writer , ( Triangle ) geometry ) ; ",
  "20495": "} public static void writePoint ( ByteWriter writer , Point point ) ",
  "20496": "writer . writeDouble ( point . getX ( ) ) ; ",
  "20497": "writer . writeDouble ( point . getY ( ) ) ; ",
  "20498": "if ( point . hasZ ( ) ) { ",
  "20499": "writer . writeDouble ( point . getZ ( ) ) ; ",
  "20500": "if ( point . hasM ( ) ) { ",
  "20501": "writer . writeDouble ( point . getM ( ) ) ; ",
  "20502": "} public static void writeLineString ( ByteWriter writer , LineString lineString ) ",
  "20503": "writer . writeInt ( lineString . numPoints ( ) ) ; ",
  "20504": "for ( Point point : lineString . getPoints ( ) ) { ",
  "20505": "writePoint ( writer , point ) ; ",
  "20506": "} public static void writePolygon ( ByteWriter writer , Polygon polygon ) ",
  "20507": "writer . writeInt ( polygon . numRings ( ) ) ; ",
  "20508": "for ( LineString ring : polygon . getRings ( ) ) { ",
  "20509": "writeLineString ( writer , ring ) ; ",
  "20510": "} public static void writeMultiPoint ( ByteWriter writer , MultiPoint multiPoint ) ",
  "20511": "writer . writeInt ( multiPoint . numPoints ( ) ) ; ",
  "20512": "for ( Point point : multiPoint . getPoints ( ) ) { ",
  "20513": "writeGeometry ( writer , point ) ; ",
  "20514": "} public static void writeMultiLineString ( ByteWriter writer , ",
  "20515": "MultiLineString multiLineString ) throws IOException { ",
  "20516": "writer . writeInt ( multiLineString . numLineStrings ( ) ) ; ",
  "20517": "for ( LineString lineString : multiLineString . getLineStrings ( ) ) { ",
  "20518": "writeGeometry ( writer , lineString ) ; ",
  "20519": "} public static void writeMultiPolygon ( ByteWriter writer , ",
  "20520": "MultiPolygon multiPolygon ) throws IOException { ",
  "20521": "writer . writeInt ( multiPolygon . numPolygons ( ) ) ; ",
  "20522": "for ( Polygon polygon : multiPolygon . getPolygons ( ) ) { ",
  "20523": "writeGeometry ( writer , polygon ) ; ",
  "20524": "} public static void writeGeometryCollection ( ByteWriter writer , ",
  "20525": "GeometryCollection < ? > geometryCollection ) throws IOException { ",
  "20526": "writer . writeInt ( geometryCollection . numGeometries ( ) ) ; ",
  "20527": "for ( Geometry geometry : geometryCollection . getGeometries ( ) ) { ",
  "20528": "writeGeometry ( writer , geometry ) ; ",
  "20529": "} public static void writeCircularString ( ByteWriter writer , ",
  "20530": "CircularString circularString ) throws IOException { ",
  "20531": "writer . writeInt ( circularString . numPoints ( ) ) ; ",
  "20532": "for ( Point point : circularString . getPoints ( ) ) { ",
  "20533": "} public static void writeCompoundCurve ( ByteWriter writer , ",
  "20534": "CompoundCurve compoundCurve ) throws IOException { ",
  "20535": "writer . writeInt ( compoundCurve . numLineStrings ( ) ) ; ",
  "20536": "for ( LineString lineString : compoundCurve . getLineStrings ( ) ) { ",
  "20537": "} public static void writeCurvePolygon ( ByteWriter writer , ",
  "20538": "CurvePolygon < ? > curvePolygon ) throws IOException { ",
  "20539": "writer . writeInt ( curvePolygon . numRings ( ) ) ; ",
  "20540": "for ( Curve ring : curvePolygon . getRings ( ) ) { ",
  "20541": "writeGeometry ( writer , ring ) ; ",
  "20542": "} public static void writePolyhedralSurface ( ByteWriter writer , ",
  "20543": "PolyhedralSurface polyhedralSurface ) throws IOException { ",
  "20544": "writer . writeInt ( polyhedralSurface . numPolygons ( ) ) ; ",
  "20545": "for ( Polygon polygon : polyhedralSurface . getPolygons ( ) ) { ",
  "20546": "} public static void writeTIN ( ByteWriter writer , TIN tin ) throws IOException { ",
  "20547": "writer . writeInt ( tin . numPolygons ( ) ) ; ",
  "20548": "for ( Polygon polygon : tin . getPolygons ( ) ) { ",
  "20549": "} public static void writeTriangle ( ByteWriter writer , Triangle triangle ) ",
  "20550": "writer . writeInt ( triangle . numRings ( ) ) ; ",
  "20551": "for ( LineString ring : triangle . getRings ( ) ) { ",
  "20552": "} public static int getCode ( Geometry geometry ) { ",
  "20553": "int code = getCode ( geometry . getGeometryType ( ) ) ; ",
  "20554": "if ( geometry . hasZ ( ) ) { ",
  "20555": "code += 1000 ; ",
  "20556": "if ( geometry . hasM ( ) ) { ",
  "20557": "code += 2000 ; ",
  "20558": "return code ; ",
  "20559": "} public static int getCode ( GeometryType geometryType ) { ",
  "20560": "code = 0 ; ",
  "20561": "code = 1 ; ",
  "20562": "code = 2 ; ",
  "20563": "code = 3 ; ",
  "20564": "code = 4 ; ",
  "20565": "code = 5 ; ",
  "20566": "code = 6 ; ",
  "20567": "code = 7 ; ",
  "20568": "code = 8 ; ",
  "20569": "code = 9 ; ",
  "20570": "code = 10 ; ",
  "20571": "code = 11 ; ",
  "20572": "code = 12 ; ",
  "20573": "code = 13 ; ",
  "20574": "code = 14 ; ",
  "20575": "code = 15 ; ",
  "20576": "code = 16 ; ",
  "20577": "code = 17 ; ",
  "20578": "throw new SFException ( ",
  "20579": "} public static GeometryType getGeometryType ( int code ) { ",
  "20580": "int geometryTypeCode = code % 1000 ; ",
  "20581": "GeometryType geometryType = null ; ",
  "20582": "switch ( geometryTypeCode ) { ",
  "20583": "geometryType = GeometryType . GEOMETRY ; ",
  "20584": "geometryType = GeometryType . POINT ; ",
  "20585": "geometryType = GeometryType . LINESTRING ; ",
  "20586": "geometryType = GeometryType . POLYGON ; ",
  "20587": "geometryType = GeometryType . MULTIPOINT ; ",
  "20588": "geometryType = GeometryType . MULTILINESTRING ; ",
  "20589": "geometryType = GeometryType . MULTIPOLYGON ; ",
  "20590": "geometryType = GeometryType . GEOMETRYCOLLECTION ; ",
  "20591": "geometryType = GeometryType . CIRCULARSTRING ; ",
  "20592": "geometryType = GeometryType . COMPOUNDCURVE ; ",
  "20593": "geometryType = GeometryType . CURVEPOLYGON ; ",
  "20594": "geometryType = GeometryType . MULTICURVE ; ",
  "20595": "geometryType = GeometryType . MULTISURFACE ; ",
  "20596": "geometryType = GeometryType . CURVE ; ",
  "20597": "geometryType = GeometryType . SURFACE ; ",
  "20598": "geometryType = GeometryType . POLYHEDRALSURFACE ; ",
  "20599": "geometryType = GeometryType . TIN ; ",
  "20600": "geometryType = GeometryType . TRIANGLE ; ",
  "20601": "return geometryType ; ",
  "20602": "} public static boolean hasZ ( int code ) { ",
  "20603": "int mode = getGeometryMode ( code ) ; ",
  "20604": "return hasZ ; ",
  "20605": "} public static boolean hasM ( int code ) { ",
  "20606": "boolean hasM = false ; ",
  "20607": "hasM = true ; ",
  "20608": "return hasM ; ",
  "20609": "} public static < T > Filter < T > filter ( final Path . Filter filter , final Content . Type < T > contentType ) { ",
  "20610": "return new Filter < T > ( ) { ",
  "20611": "public boolean matches ( Path . ID id , Content . Type < T > ct ) { ",
  "20612": "return ct == contentType && filter . matches ( id ) ; ",
  "20613": "public boolean matchesSubpath ( Path . ID id ) { ",
  "20614": "return filter . matchesSubpath ( id ) ; ",
  "20615": "return filter . toString ( ) ; ",
  "20616": "} public static < T > Filter < T > or ( final Filter < T > f1 , final Filter < T > f2 ) { ",
  "20617": "return f1 . matches ( id , ct ) || f2 . matches ( id , ct ) ; ",
  "20618": "return f1 . matchesSubpath ( id ) || f2 . matchesSubpath ( id ) ; ",
  "20619": "return f1 . toString ( ) + \"|\" + f2 . toString ( ) ; ",
  "20620": "} public ConfigFile read ( ) { ",
  "20621": "List < Declaration > declarations = new ArrayList < > ( ) ; ",
  "20622": "skipWhiteSpace ( ) ; ",
  "20623": "while ( index < tokens . size ( ) ) { ",
  "20624": "Token lookahead = tokens . get ( index ) ; ",
  "20625": "if ( lookahead . kind == LeftSquare ) { ",
  "20626": "declarations . add ( parseSection ( ) ) ; ",
  "20627": "declarations . add ( parseKeyValuePair ( ) ) ; ",
  "20628": "file . setDeclarations ( new Tuple < > ( declarations ) ) ; ",
  "20629": "} private void checkNotEof ( ) { ",
  "20630": "if ( index >= tokens . size ( ) ) { ",
  "20631": "} private boolean isLineSpace ( Token token ) { ",
  "20632": "return token . kind == Token . Kind . Indent || token . kind == Token . Kind . LineComment ; ",
  "20633": "} protected String parseString ( String v ) { ",
  "20634": "v = v . substring ( 1 , v . length ( ) - 1 ) ; ",
  "20635": "StringBuffer result = new StringBuffer ( ) ; ",
  "20636": "for ( int i = 0 ; i < v . length ( ) ; i ++ ) { ",
  "20637": "if ( v . charAt ( i ) == '\\\\' ) { ",
  "20638": "if ( v . length ( ) <= i + 1 ) { ",
  "20639": "char replace = 0 ; ",
  "20640": "int len = 2 ; ",
  "20641": "switch ( v . charAt ( i + 1 ) ) { ",
  "20642": "replace = '\\b' ; ",
  "20643": "replace = '\\t' ; ",
  "20644": "replace = '\\n' ; ",
  "20645": "replace = '\\f' ; ",
  "20646": "replace = '\\r' ; ",
  "20647": "replace = '\\\"' ; ",
  "20648": "replace = '\\'' ; ",
  "20649": "replace = '\\\\' ; ",
  "20650": "len = 6 ; ",
  "20651": "String unicode = v . substring ( i + 2 , i + 6 ) ; ",
  "20652": "replace = ( char ) Integer . parseInt ( unicode , 16 ) ; ",
  "20653": "i = i + 5 ; ",
  "20654": "result = result . append ( replace ) ; ",
  "20655": "i = i + 1 ; ",
  "20656": "result = result . append ( v . charAt ( i ) ) ; ",
  "20657": "} public List < Token > scan ( ) throws Error { ",
  "20658": "ArrayList < Token > tokens = new ArrayList < > ( ) ; ",
  "20659": "while ( pos < input . length ( ) ) { ",
  "20660": "for ( int i = 0 ; i != rules . length ; ++ i ) { ",
  "20661": "Rule rule = rules [ i ] ; ",
  "20662": "int left = input . length ( ) - pos ; ",
  "20663": "if ( left >= rule . lookahead ( ) ) { ",
  "20664": "Token t = rule . match ( input , pos ) ; ",
  "20665": "tokens . add ( t ) ; ",
  "20666": "pos = pos + t . text . length ( ) ; ",
  "20667": "if ( pos == start ) { ",
  "20668": "} private static boolean matchString ( StringBuffer input , int pos , ",
  "20669": "java . lang . String syntax ) { ",
  "20670": "int diff = input . length ( ) - pos ; ",
  "20671": "if ( syntax . length ( ) > diff ) { ",
  "20672": "for ( int i = 0 ; i != syntax . length ( ) ; ++ i ) { ",
  "20673": "if ( syntax . charAt ( i ) != input . charAt ( pos + i ) ) { ",
  "20674": "} protected Command . Template parse ( Command . Descriptor root , String [ ] args , int index ) { ",
  "20675": "ArrayList < Command . Option > options = new ArrayList < > ( ) ; ",
  "20676": "ArrayList < String > arguments = new ArrayList < > ( ) ; ",
  "20677": "Command . Template sub = null ; ",
  "20678": "while ( index < args . length ) { ",
  "20679": "String arg = args [ index ] ; ",
  "20680": "if ( isLongOption ( arg ) ) { ",
  "20681": "options . add ( parseLongOption ( root , args [ index ] ) ) ; ",
  "20682": "} else if ( isCommand ( arg , root . getCommands ( ) ) ) { ",
  "20683": "Command . Descriptor cmd = getCommandDescriptor ( arg , root . getCommands ( ) ) ; ",
  "20684": "sub = parse ( cmd , args , index + 1 ) ; ",
  "20685": "arguments . add ( arg ) ; ",
  "20686": "index = index + 1 ; ",
  "20687": "Command . Options optionMap = new OptionsMap ( options , root . getOptionDescriptors ( ) ) ; ",
  "20688": "return new ConcreteTemplate ( root , optionMap , arguments , sub ) ; ",
  "20689": "} private static Pair < String , Object > parseOption ( String arg ) { ",
  "20690": "arg = arg . substring ( 2 ) ; ",
  "20691": "String [ ] split = arg . split ( \"=\" ) ; ",
  "20692": "Object data = null ; ",
  "20693": "if ( split . length > 1 ) { ",
  "20694": "data = parseData ( split [ 1 ] ) ; ",
  "20695": "return new Pair < > ( split [ 0 ] , data ) ; ",
  "20696": "} private static Object parseData ( String str ) { ",
  "20697": "if ( str . equals ( \"true\" ) ) { ",
  "20698": "} else if ( str . equals ( \"false\" ) ) { ",
  "20699": "} else if ( Character . isDigit ( str . charAt ( 0 ) ) ) { ",
  "20700": "return Integer . parseInt ( str ) ; ",
  "20701": "} protected void printUsage ( ) { ",
  "20702": "List < Command . Descriptor > descriptors = project . getParent ( ) . getCommandDescriptors ( ) ; ",
  "20703": "int maxWidth = determineCommandNameWidth ( descriptors ) ; ",
  "20704": "out . println ( \"Commands:\" ) ; ",
  "20705": "for ( Command . Descriptor d : descriptors ) { ",
  "20706": "out . print ( rightPad ( d . getName ( ) , maxWidth ) ) ; ",
  "20707": "} private static int determineCommandNameWidth ( List < Command . Descriptor > descriptors ) { ",
  "20708": "max = Math . max ( max , d . getName ( ) . length ( ) ) ; ",
  "20709": "} private List < Path . Entry < ? > > determinePackageContents ( ) throws IOException { ",
  "20710": "ArrayList < Path . Entry < ? > > files = new ArrayList < > ( ) ; ",
  "20711": "Path . Root root = project . getParent ( ) . getLocalRoot ( ) ; ",
  "20712": "for ( int i = 0 ; i != includes . length ; ++ i ) { ",
  "20713": "Content . Filter filter = createFilter ( includes [ i ] . toString ( ) ) ; ",
  "20714": "files . addAll ( root . get ( filter ) ) ; ",
  "20715": "return files ; ",
  "20716": "} private ZipFile createZipFile ( List < Path . Entry < ? > > files ) throws IOException { ",
  "20717": "HashSet < Path . ID > paths = new HashSet < > ( ) ; ",
  "20718": "ZipFile zf = new ZipFile ( ) ; ",
  "20719": "for ( int i = 0 ; i != files . size ( ) ; ++ i ) { ",
  "20720": "Path . Entry < ? > file = files . get ( i ) ; ",
  "20721": "addPaths ( file . id ( ) . parent ( ) , paths , zf ) ; ",
  "20722": "String filename = file . id ( ) . toString ( ) + \".\" + file . contentType ( ) . getSuffix ( ) ; ",
  "20723": "byte [ ] contents = readFileContents ( file ) ; ",
  "20724": "zf . add ( new ZipEntry ( filename ) , contents ) ; ",
  "20725": "return zf ; ",
  "20726": "} private void addPaths ( Path . ID path , HashSet < Path . ID > paths , ZipFile zf ) { ",
  "20727": "if ( path . size ( ) > 0 && ! paths . contains ( path ) ) { ",
  "20728": "addPaths ( path . parent ( ) , paths , zf ) ; ",
  "20729": "String directory = path . toString ( ) + \"/\" ; ",
  "20730": "zf . add ( new ZipEntry ( directory ) , new byte [ 0 ] ) ; ",
  "20731": "paths . add ( path ) ; ",
  "20732": "} private byte [ ] readFileContents ( Path . Entry < ? > file ) throws IOException { ",
  "20733": "InputStream in = file . inputStream ( ) ; ",
  "20734": "int nRead ; ",
  "20735": "byte [ ] data = new byte [ 1024 ] ; ",
  "20736": "while ( ( nRead = in . read ( data , 0 , data . length ) ) != - 1 ) { ",
  "20737": "buffer . write ( data , 0 , nRead ) ; ",
  "20738": "buffer . flush ( ) ; ",
  "20739": "return buffer . toByteArray ( ) ; ",
  "20740": "} private Path . Entry < ZipFile > getPackageFile ( ) throws IOException { ",
  "20741": "Value . UTF8 name = configuration . get ( Value . UTF8 . class , Trie . fromString ( \"package/name\" ) ) ; ",
  "20742": "Value . UTF8 version = configuration . get ( Value . UTF8 . class , Trie . fromString ( \"package/version\" ) ) ; ",
  "20743": "Trie pkg = Trie . fromString ( name + \"-v\" + version ) ; ",
  "20744": "return project . getRepositoryRoot ( ) . create ( pkg , ZipFile . ContentType ) ; ",
  "20745": "} private Content . Filter createFilter ( String filter ) { ",
  "20746": "String [ ] split = filter . split ( \"\\\\.\" ) ; ",
  "20747": "Content . Type contentType = getContentType ( split [ 1 ] ) ; ",
  "20748": "return Content . filter ( split [ 0 ] , contentType ) ; ",
  "20749": "} private Content . Type getContentType ( String suffix ) { ",
  "20750": "List < Content . Type < ? > > cts = project . getParent ( ) . getContentTypes ( ) ; ",
  "20751": "for ( int i = 0 ; i != cts . size ( ) ; ++ i ) { ",
  "20752": "Content . Type < ? > ct = cts . get ( i ) ; ",
  "20753": "if ( ct . getSuffix ( ) . equals ( suffix ) ) { ",
  "20754": "public void write ( int i ) throws IOException { ",
  "20755": "output . write ( i & 0xFF ) ; ",
  "20756": "write_un ( i & 0xFF , 8 ) ; ",
  "20757": "} public void write_u32 ( int w ) throws IOException { ",
  "20758": "write_u8 ( ( w > > 24 ) & 0xFF ) ; ",
  "20759": "write_u8 ( ( w > > 16 ) & 0xFF ) ; ",
  "20760": "write_u8 ( ( w > > 8 ) & 0xFF ) ; ",
  "20761": "write_u8 ( w & 0xFF ) ; ",
  "20762": "} public void write_uv ( int w ) throws IOException { ",
  "20763": "int t = w & 7 ; ",
  "20764": "w = w > > 3 ; ",
  "20765": "write_un ( 8 | t , 4 ) ; ",
  "20766": "write_un ( t , 4 ) ; ",
  "20767": "} while ( w != 0 ) ; ",
  "20768": "} public void write_un ( int bits , int n ) throws IOException { ",
  "20769": "int mask = 1 ; ",
  "20770": "for ( int i = 0 ; i < n ; ++ i ) { ",
  "20771": "boolean bit = ( bits & mask ) != 0 ; ",
  "20772": "write_bit ( bit ) ; ",
  "20773": "mask = mask << 1 ; ",
  "20774": "} public static void printSyntacticMarkers ( PrintStream output , Collection < Path . Entry < ? > > sources , Path . Entry < ? > target ) throws IOException { ",
  "20775": "List < SyntacticItem . Marker > items = extractSyntacticMarkers ( target ) ; ",
  "20776": "for ( int i = 0 ; i != items . size ( ) ; ++ i ) { ",
  "20777": "printSyntacticMarkers ( output , sources , items . get ( i ) ) ; ",
  "20778": "} private static void printSyntacticMarkers ( PrintStream output , Collection < Path . Entry < ? > > sources , SyntacticItem . Marker marker ) { ",
  "20779": "Path . Entry < ? > source = getSourceEntry ( sources , marker . getSource ( ) ) ; ",
  "20780": "Span span = marker . getTarget ( ) . getAncestor ( AbstractCompilationUnit . Attribute . Span . class ) ; ",
  "20781": "EnclosingLine line = readEnclosingLine ( source , span ) ; ",
  "20782": "if ( line != null ) { ",
  "20783": "printLineHighlight ( output , line ) ; ",
  "20784": "} private static List < SyntacticItem . Marker > extractSyntacticMarkers ( Path . Entry < ? > ... binaries ) throws IOException { ",
  "20785": "List < SyntacticItem . Marker > annotated = new ArrayList < > ( ) ; ",
  "20786": "for ( Path . Entry < ? > binary : binaries ) { ",
  "20787": "Object o = binary . read ( ) ; ",
  "20788": "if ( o instanceof SyntacticHeap ) { ",
  "20789": "SyntacticHeap h = ( SyntacticHeap ) o ; ",
  "20790": "extractSyntacticMarkers ( h . getRootItem ( ) , annotated , new BitSet ( ) ) ; ",
  "20791": "return annotated ; ",
  "20792": "} public Path . Root getPackageRoot ( String name , SemanticVersion version ) throws IOException { ",
  "20793": "Path . ID path = Trie . ROOT . append ( name ) . append ( version . toString ( ) ) ; ",
  "20794": "return root . createRelativeRoot ( path ) ; ",
  "20795": "public < T extends SyntacticItem > T getParent ( Class < T > kind ) { ",
  "20796": "return parent . getParent ( this , kind ) ; ",
  "20797": "public < T extends SyntacticItem > List < T > getParents ( Class < T > kind ) { ",
  "20798": "return parent . getParents ( this , kind ) ; ",
  "20799": "public < T extends SyntacticItem > T getAncestor ( Class < T > kind ) { ",
  "20800": "return parent . getAncestor ( this , kind ) ; ",
  "20801": "} private int compareData ( Object leftData , Object rightData ) { ",
  "20802": "if ( leftData == null || rightData == null ) { ",
  "20803": "if ( leftData == rightData ) { ",
  "20804": "} else if ( leftData == null ) { ",
  "20805": "int leftKind = getDataKind ( leftData ) ; ",
  "20806": "int rightKind = getDataKind ( rightData ) ; ",
  "20807": "if ( leftKind != rightKind ) { ",
  "20808": "return leftKind - rightKind ; ",
  "20809": "switch ( leftKind ) { ",
  "20810": "return ( ( Boolean ) leftData ) . compareTo ( ( Boolean ) rightData ) ; ",
  "20811": "return ( ( BigInteger ) leftData ) . compareTo ( ( BigInteger ) rightData ) ; ",
  "20812": "return ( ( String ) leftData ) . compareTo ( ( String ) rightData ) ; ",
  "20813": "byte [ ] leftBytes = ( byte [ ] ) leftData ; ",
  "20814": "byte [ ] rightBytes = ( byte [ ] ) rightData ; ",
  "20815": "if ( leftBytes . length != rightBytes . length ) { ",
  "20816": "return leftBytes . length - rightBytes . length ; ",
  "20817": "for ( int i = 0 ; i != leftBytes . length ; ++ i ) { ",
  "20818": "int c = Byte . compare ( leftBytes [ i ] , rightBytes [ i ] ) ; ",
  "20819": "if ( c != 0 ) { ",
  "20820": "} public static int [ ] range ( int start , int end ) { ",
  "20821": "if ( end <= start ) { ",
  "20822": "int [ ] rs = new int [ Math . abs ( end - start ) ] ; ",
  "20823": "for ( int i = start ; i < end ; ++ i ) { ",
  "20824": "rs [ i - start ] = i ; ",
  "20825": "} public static int [ ] append ( int lhs , int [ ] rhs ) { ",
  "20826": "int [ ] rs = new int [ rhs . length + 1 ] ; ",
  "20827": "rs [ 0 ] = lhs ; ",
  "20828": "System . arraycopy ( rhs , 0 , rs , 1 , rhs . length ) ; ",
  "20829": "} public static int [ ] append ( int first , int second , int [ ] rhs ) { ",
  "20830": "int [ ] rs = new int [ rhs . length + 2 ] ; ",
  "20831": "rs [ 0 ] = first ; ",
  "20832": "rs [ 1 ] = second ; ",
  "20833": "System . arraycopy ( rhs , 0 , rs , 2 , rhs . length ) ; ",
  "20834": "} public static int [ ] append ( int [ ] lhs , int [ ] rhs ) { ",
  "20835": "int [ ] rs = java . util . Arrays . copyOf ( lhs , lhs . length + rhs . length ) ; ",
  "20836": "System . arraycopy ( rhs , 0 , rs , lhs . length , rhs . length ) ; ",
  "20837": "} public static < T > T [ ] append ( Class < T > type , T lhs , T ... rhs ) { ",
  "20838": "T [ ] rs = ( T [ ] ) Array . newInstance ( type , rhs . length + 1 ) ; ",
  "20839": "} public static < T > void addAll ( T [ ] lhs , Collection < T > rhs ) { ",
  "20840": "for ( int i = 0 ; i != lhs . length ; ++ i ) { ",
  "20841": "rhs . add ( lhs [ i ] ) ; ",
  "20842": "} public static String [ ] toStringArray ( Collection < String > items ) { ",
  "20843": "String [ ] result = new String [ items . size ( ) ] ; ",
  "20844": "for ( String s : items ) { ",
  "20845": "result [ i ++ ] = s ; ",
  "20846": "} public static int [ ] toIntArray ( Collection < Integer > items ) { ",
  "20847": "int [ ] result = new int [ items . size ( ) ] ; ",
  "20848": "for ( Integer v : items ) { ",
  "20849": "result [ i ++ ] = v ; ",
  "20850": "} public static < T , S > T [ ] toArray ( Class < T > type , S [ ] src ) { ",
  "20851": "T [ ] dest = ( T [ ] ) Array . newInstance ( type , src . length ) ; ",
  "20852": "System . arraycopy ( src , 0 , dest , 0 , src . length ) ; ",
  "20853": "return dest ; ",
  "20854": "public static < T , S > T [ ] toArray ( Class < T > type , Collection < S > src ) { ",
  "20855": "T [ ] dest = ( T [ ] ) Array . newInstance ( type , src . size ( ) ) ; ",
  "20856": "for ( S s : src ) { ",
  "20857": "dest [ i ++ ] = ( T ) s ; ",
  "20858": "} public static < T > T [ ] removeDuplicates ( T [ ] items ) { ",
  "20859": "BitSet duplicates = new BitSet ( items . length ) ; ",
  "20860": "for ( int i = 0 ; i != items . length ; ++ i ) { ",
  "20861": "T ith = items [ i ] ; ",
  "20862": "for ( int j = i + 1 ; j < items . length ; ++ j ) { ",
  "20863": "T jth = items [ j ] ; ",
  "20864": "if ( ith == null ) { ",
  "20865": "if ( jth == null ) { ",
  "20866": "duplicates . set ( i ) ; ",
  "20867": "count = count + 1 ; ",
  "20868": "} else if ( ith . equals ( jth ) ) { ",
  "20869": "return items ; ",
  "20870": "T [ ] nItems = Arrays . copyOf ( items , items . length - count ) ; ",
  "20871": "for ( int i = 0 , j = 0 ; i != items . length ; ++ i ) { ",
  "20872": "if ( duplicates . get ( i ) ) { ",
  "20873": "nItems [ j ++ ] = items [ i ] ; ",
  "20874": "return nItems ; ",
  "20875": "} public static < T extends S , S extends Comparable < S > > T [ ] sortAndRemoveDuplicates ( T [ ] children ) { ",
  "20876": "int r = isSortedAndUnique ( children ) ; ",
  "20877": "switch ( r ) { ",
  "20878": "return ArrayUtils . sortedRemoveDuplicates ( children ) ; ",
  "20879": "children = Arrays . copyOf ( children , children . length ) ; ",
  "20880": "Arrays . sort ( children ) ; ",
  "20881": "} public static < T extends Comparable < T > > int isSortedAndUnique ( T [ ] children ) { ",
  "20882": "int r = 0 ; ",
  "20883": "for ( int i = 1 ; i < children . length ; ++ i ) { ",
  "20884": "int c = children [ i - 1 ] . compareTo ( children [ i ] ) ; ",
  "20885": "if ( c == 0 ) { ",
  "20886": "r = 1 ; ",
  "20887": "} else if ( c > 0 ) { ",
  "20888": "} public static < T > T [ ] removeAll ( T [ ] items , T item ) { ",
  "20889": "if ( ith == item || ( item != null && item . equals ( ith ) ) ) { ",
  "20890": "nItems [ j ++ ] = ith ; ",
  "20891": "} public static < S , T extends Comparable < S > > int compareTo ( T [ ] lhs , T [ ] rhs ) { ",
  "20892": "if ( lhs . length != rhs . length ) { ",
  "20893": "return lhs . length - rhs . length ; ",
  "20894": "int r = lhs [ i ] . compareTo ( ( S ) rhs [ i ] ) ; ",
  "20895": "} public static < T > int firstIndexOf ( T [ ] items , T item ) { ",
  "20896": "if ( ith == item || ( ith != null && ith . equals ( item ) ) ) { ",
  "20897": "} public Configuration . Schema getBuildSchema ( ) { ",
  "20898": "Configuration . Schema [ ] schemas = new Configuration . Schema [ buildPlatforms . size ( ) + 1 ] ; ",
  "20899": "schemas [ 0 ] = LOCAL_CONFIG_SCHEMA ; ",
  "20900": "for ( int i = 0 ; i != buildPlatforms . size ( ) ; ++ i ) { ",
  "20901": "wybs . lang . Build . Platform platform = buildPlatforms . get ( i ) ; ",
  "20902": "schemas [ i + 1 ] = platform . getConfigurationSchema ( ) ; ",
  "20903": "return Configuration . toCombinedSchema ( schemas ) ; ",
  "20904": "} private void createTemplateExtensionPoint ( ) { ",
  "20905": "context . create ( Command . Descriptor . class , new Module . ExtensionPoint < Command . Descriptor > ( ) { ",
  "20906": "public void register ( Command . Descriptor command ) { ",
  "20907": "commandDescriptors . add ( command ) ; ",
  "20908": "} private void createContentTypeExtensionPoint ( ) { ",
  "20909": "context . create ( Content . Type . class , new Module . ExtensionPoint < Content . Type > ( ) { ",
  "20910": "public void register ( Content . Type contentType ) { ",
  "20911": "contentTypes . add ( contentType ) ; ",
  "20912": "} private void createBuildPlatformExtensionPoint ( ) { ",
  "20913": "context . create ( wybs . lang . Build . Platform . class , new Module . ExtensionPoint < wybs . lang . Build . Platform > ( ) { ",
  "20914": "public void register ( wybs . lang . Build . Platform platform ) { ",
  "20915": "buildPlatforms . add ( platform ) ; ",
  "20916": "} private void activateDefaultPlugins ( Configuration global ) { ",
  "20917": "List < Path . ID > plugins = global . matchAll ( Trie . fromString ( \"plugins/*\" ) ) ; ",
  "20918": "for ( Path . ID id : plugins ) { ",
  "20919": "UTF8 activator = global . get ( UTF8 . class , id ) ; ",
  "20920": "Class < ? > c = Class . forName ( activator . toString ( ) ) ; ",
  "20921": "Module . Activator instance = ( Module . Activator ) c . newInstance ( ) ; ",
  "20922": "instance . start ( context ) ; ",
  "20923": "String systemDir = determineSystemRoot ( ) ; ",
  "20924": "String globalDir = determineGlobalRoot ( ) ; ",
  "20925": "String localDir = determineLocalRoot ( ) ; ",
  "20926": "new WyMain ( systemDir , globalDir , localDir ) . execute ( args ) ; ",
  "20927": "} private static String determineSystemRoot ( ) throws IOException { ",
  "20928": "String whileyhome = System . getenv ( \"WHILEYHOME\" ) ; ",
  "20929": "if ( whileyhome == null ) { ",
  "20930": "return whileyhome ; ",
  "20931": "} private static String determineGlobalRoot ( ) throws IOException { ",
  "20932": "String userhome = System . getProperty ( \"user.home\" ) ; ",
  "20933": "String whileydir = userhome + File . separator + \".whiley\" ; ",
  "20934": "return whileydir ; ",
  "20935": "} private static String determineLocalRoot ( ) throws IOException { ",
  "20936": "File dir = new File ( \".\" ) ; ",
  "20937": "while ( dir != null && dir . exists ( ) && dir . isDirectory ( ) ) { ",
  "20938": "File wyf = new File ( dir + File . separator + \"wy.toml\" ) ; ",
  "20939": "if ( wyf . exists ( ) ) { ",
  "20940": "return dir . getPath ( ) ; ",
  "20941": "return \".\" ; ",
  "20942": "} private static Configuration readConfigFile ( String name , String dir , Configuration . Schema ... schemas ) throws IOException { ",
  "20943": "DirectoryRoot root = new DirectoryRoot ( dir , BOOT_REGISTRY ) ; ",
  "20944": "Path . Entry < ConfigFile > config = root . get ( Trie . fromString ( name ) , ConfigFile . ContentType ) ; ",
  "20945": "return Configuration . EMPTY ; ",
  "20946": "ConfigFile cf = config . read ( ) ; ",
  "20947": "return cf . toConfiguration ( Configuration . toCombinedSchema ( schemas ) ) ; ",
  "20948": "} catch ( SyntacticException e ) { ",
  "20949": "e . outputSourceError ( System . out , false ) ; ",
  "20950": "} private static void printStackTrace ( PrintStream out , Throwable err ) { ",
  "20951": "for ( StackTraceElement ste : err . getStackTrace ( ) ) { ",
  "20952": "if ( err . getCause ( ) != null ) { ",
  "20953": "printStackTrace ( out , err . getCause ( ) ) ; ",
  "20954": "} public < T extends Module > T getInstance ( Class < T > module ) { ",
  "20955": "return ( T ) instances . get ( module ) ; ",
  "20956": "URL [ ] urls = new URL [ modules . size ( ) ] ; ",
  "20957": "for ( int i = 0 ; i != modules . size ( ) ; ++ i ) { ",
  "20958": "urls [ i ] = modules . get ( i ) . getLocation ( ) ; ",
  "20959": "URLClassLoader loader = new URLClassLoader ( urls ) ; ",
  "20960": "activateModules ( loader ) ; ",
  "20961": "} private void activateModules ( URLClassLoader loader ) { ",
  "20962": "Descriptor module = modules . get ( i ) ; ",
  "20963": "Class c = loader . loadClass ( module . getActivator ( ) ) ; ",
  "20964": "Module . Activator self = ( Module . Activator ) c . newInstance ( ) ; ",
  "20965": "Module instance = self . start ( context ) ; ",
  "20966": "instances . put ( c , instance ) ; ",
  "20967": "} public void outputSourceError ( PrintStream output , boolean brief ) { ",
  "20968": "Attribute . Span span ; ",
  "20969": "if ( entry == null || element == null ) { ",
  "20970": "} else if ( element instanceof Attribute . Span ) { ",
  "20971": "span = ( Attribute . Span ) element ; ",
  "20972": "SyntacticHeap parent = element . getHeap ( ) ; ",
  "20973": "span = parent . getParent ( element , Attribute . Span . class ) ; ",
  "20974": "EnclosingLine enclosing = ( span == null ) ? null : readEnclosingLine ( entry , span ) ; ",
  "20975": "if ( enclosing == null ) { ",
  "20976": "} else if ( brief ) { ",
  "20977": "printBriefError ( output , entry , enclosing , getMessage ( ) ) ; ",
  "20978": "printFullError ( output , entry , enclosing , getMessage ( ) ) ; ",
  "20979": "} private boolean ready ( Build . Task task ) { ",
  "20980": "Path . Entry < ? > target = task . getTarget ( ) ; ",
  "20981": "for ( Path . Entry < ? > s : task . getSources ( ) ) { ",
  "20982": "if ( s . lastModified ( ) > target . lastModified ( ) ) { ",
  "20983": "} public static Map < String , Object > parseOptions ( List < String > args , OptArg ... options ) { ",
  "20984": "HashMap < String , Object > result = new HashMap < > ( ) ; ",
  "20985": "HashMap < String , OptArg > optmap = new HashMap < > ( ) ; ",
  "20986": "for ( OptArg opt : options ) { ",
  "20987": "if ( opt . defaultValue != null ) { ",
  "20988": "result . put ( opt . option , opt . defaultValue ) ; ",
  "20989": "optmap . put ( opt . option , opt ) ; ",
  "20990": "optmap . put ( opt . shortForm , opt ) ; ",
  "20991": "Iterator < String > iter = args . iterator ( ) ; ",
  "20992": "String arg = iter . next ( ) ; ",
  "20993": "if ( arg . startsWith ( \"-\" ) ) { ",
  "20994": "arg = arg . substring ( 1 , arg . length ( ) ) ; ",
  "20995": "OptArg opt = optmap . get ( arg ) ; ",
  "20996": "if ( opt != null ) { ",
  "20997": "Kind k = opt . argument ; ",
  "20998": "if ( k != null ) { ",
  "20999": "String param = iter . next ( ) ; ",
  "21000": "k . process ( opt . option , param , result ) ; ",
  "21001": "result . put ( opt . option , null ) ; ",
  "21002": "} private static Map < String , Object > splitConfig ( String str ) { ",
  "21003": "HashMap < String , Object > options = new HashMap < > ( ) ; ",
  "21004": "String [ ] splits = str . split ( \",\" ) ; ",
  "21005": "for ( String s : splits ) { ",
  "21006": "String [ ] p = s . split ( \"=\" ) ; ",
  "21007": "options . put ( p [ 0 ] , parseValue ( p [ 1 ] ) ) ; ",
  "21008": "} public void refresh ( ) throws IOException { ",
  "21009": "root . refresh ( ) ; ",
  "21010": "for ( Build . Rule rule : rules ) { ",
  "21011": "rule . apply ( executor ) ; ",
  "21012": "public < T extends SyntacticItem > T getParent ( SyntacticItem child , Class < T > kind ) { ",
  "21013": "for ( int i = 0 ; i != syntacticItems . size ( ) ; ++ i ) { ",
  "21014": "SyntacticItem parent = syntacticItems . get ( i ) ; ",
  "21015": "if ( kind . isInstance ( parent ) ) { ",
  "21016": "for ( int j = 0 ; j != parent . size ( ) ; ++ j ) { ",
  "21017": "if ( parent . get ( j ) == child ) { ",
  "21018": "return ( T ) parent ; ",
  "21019": "public < T extends SyntacticItem > T getAncestor ( SyntacticItem child , Class < T > kind ) { ",
  "21020": "if ( kind . isInstance ( child ) ) { ",
  "21021": "return ( T ) child ; ",
  "21022": "if ( parent . get ( j ) == child && ! ( parent instanceof AbstractCompilationUnit . Ref ) ) { ",
  "21023": "T tmp = getAncestor ( parent , kind ) ; ",
  "21024": "if ( tmp != null ) { ",
  "21025": "} public static SyntacticItem substitute ( SyntacticItem item , SyntacticItem from , SyntacticItem to ) { ",
  "21026": "SyntacticItem nItem = substitute ( item , from , to , new IdentityHashMap < > ( ) ) ; ",
  "21027": "if ( nItem != item ) { ",
  "21028": "item . getHeap ( ) . allocate ( nItem ) ; ",
  "21029": "return nItem ; ",
  "21030": "} private static SyntacticItem substitute ( SyntacticItem item , SyntacticItem from , SyntacticItem to , ",
  "21031": "Map < SyntacticItem , SyntacticItem > mapping ) { ",
  "21032": "SyntacticItem sItem = mapping . get ( item ) ; ",
  "21033": "if ( sItem != null ) { ",
  "21034": "return sItem ; ",
  "21035": "} else if ( item == from ) { ",
  "21036": "SyntacticItem nItem = item ; ",
  "21037": "SyntacticItem [ ] children = item . getAll ( ) ; ",
  "21038": "SyntacticItem [ ] nChildren = children ; ",
  "21039": "if ( children != null ) { ",
  "21040": "for ( int i = 0 ; i != children . length ; ++ i ) { ",
  "21041": "SyntacticItem child = children [ i ] ; ",
  "21042": "SyntacticItem nChild = substitute ( child , from , to , mapping ) ; ",
  "21043": "if ( nChild != child && children == nChildren ) { ",
  "21044": "nChildren = Arrays . copyOf ( children , children . length ) ; ",
  "21045": "nChildren [ i ] = nChild ; ",
  "21046": "if ( children != nChildren ) { ",
  "21047": "nItem = item . clone ( nChildren ) ; ",
  "21048": "mapping . put ( item , nItem ) ; ",
  "21049": "} private Content . Type < ? > getContentType ( String file ) { ",
  "21050": "String suffix = \".\" + ct . getSuffix ( ) ; ",
  "21051": "if ( file . endsWith ( suffix ) ) { ",
  "21052": "return Content . BinaryFile ; ",
  "21053": "} public Path . Entry < ? > getEntry ( String file , Content . Type < ? > ct ) throws IOException { ",
  "21054": "file = file . replace ( \".\" + ct . getSuffix ( ) , \"\" ) ; ",
  "21055": "Path . ID id = Trie . fromString ( file ) ; ",
  "21056": "return project . getParent ( ) . getLocalRoot ( ) . get ( id , ct ) ; ",
  "21057": "} private void inspect ( Path . Entry < ? > entry , Content . Type < ? > ct , boolean garbage ) throws IOException { ",
  "21058": "Object o = entry . read ( ) ; ",
  "21059": "new SyntacticHeapPrinter ( new PrintWriter ( out ) , garbage ) . print ( ( SyntacticHeap ) o ) ; ",
  "21060": "inspectBinaryFile ( readAllBytes ( entry . inputStream ( ) ) ) ; ",
  "21061": "} private void inspectBinaryFile ( byte [ ] bytes ) { ",
  "21062": "for ( int i = 0 ; i < bytes . length ; i += width ) { ",
  "21063": "for ( int j = 0 ; j < width ; ++ j ) { ",
  "21064": "if ( j + i < bytes . length ) { ",
  "21065": "char c = ( char ) bytes [ i + j ] ; ",
  "21066": "if ( c >= 32 && c < 128 ) { ",
  "21067": "out . print ( c ) ; ",
  "21068": "out . print ( \".\" ) ; ",
  "21069": "} protected Pair < Integer , SyntacticItem [ ] > readItems ( ) throws IOException { ",
  "21070": "checkHeader ( ) ; ",
  "21071": "int size = in . read_uv ( ) ; ",
  "21072": "int root = in . read_uv ( ) ; ",
  "21073": "Bytecode [ ] items = new Bytecode [ size ] ; ",
  "21074": "items [ i ] = readItem ( ) ; ",
  "21075": "return new Pair < > ( root , constructItems ( items ) ) ; ",
  "21076": "} public static Trie fromString ( String str ) { ",
  "21077": "String [ ] components = str . split ( \"/\" ) ; ",
  "21078": "Trie r = ROOT ; ",
  "21079": "for ( int i = 0 ; i != components . length ; ++ i ) { ",
  "21080": "r = r . append ( components [ i ] ) ; ",
  "21081": "} public static Trie fromString ( Path . ID id ) { ",
  "21082": "if ( id instanceof Trie ) { ",
  "21083": "return ( ( Trie ) id ) ; ",
  "21084": "for ( int i = 0 ; i != id . size ( ) ; ++ i ) { ",
  "21085": "r = r . append ( id . get ( i ) ) ; ",
  "21086": "} private boolean match ( Path . ID id , int idIndex , int myIndex , boolean submatch ) { ",
  "21087": "int mySize = depth + 1 ; ",
  "21088": "if ( myIndex == mySize && idIndex == id . size ( ) ) { ",
  "21089": "} else if ( idIndex == id . size ( ) ) { ",
  "21090": "return submatch ; ",
  "21091": "} else if ( myIndex == mySize ) { ",
  "21092": "String myComponent = get ( myIndex ) ; ",
  "21093": "if ( myComponent . equals ( \"*\" ) ) { ",
  "21094": "return match ( id , idIndex + 1 , myIndex + 1 , submatch ) ; ",
  "21095": "} else if ( myComponent . equals ( \"**\" ) ) { ",
  "21096": "myIndex ++ ; ",
  "21097": "for ( int i = idIndex ; i <= id . size ( ) ; ++ i ) { ",
  "21098": "if ( match ( id , i , myIndex , submatch ) ) { ",
  "21099": "return myComponent . equals ( id . get ( idIndex ) ) ",
  "21100": "&& match ( id , idIndex + 1 , myIndex + 1 , submatch ) ; ",
  "21101": "} public static Command . Descriptor DESCRIPTOR ( List < Command . Descriptor > descriptors ) { ",
  "21102": "return new Command . Descriptor ( ) { ",
  "21103": "public Schema getConfigurationSchema ( ) { ",
  "21104": "public List < Option . Descriptor > getOptionDescriptors ( ) { ",
  "21105": "return Arrays . asList ( ",
  "21106": "public Command initialise ( Command environment , Configuration configuration ) { ",
  "21107": "return new WyProject ( ( WyMain ) environment , configuration , System . out , System . err ) ; ",
  "21108": "return \"wy\" ; ",
  "21109": "public List < Command . Descriptor > getCommands ( ) { ",
  "21110": "} public List < wybs . lang . Build . Platform > getTargetPlatforms ( ) { ",
  "21111": "ArrayList < Build . Platform > targetPlatforms = new ArrayList < > ( ) ; ",
  "21112": "if ( configuration . hasKey ( BUILD_PLATFORMS ) ) { ",
  "21113": "Value . UTF8 [ ] targetPlatformNames = configuration . get ( Value . Array . class , BUILD_PLATFORMS ) . toArray ( Value . UTF8 . class ) ; ",
  "21114": "List < wybs . lang . Build . Platform > platforms = environment . getBuildPlatforms ( ) ; ",
  "21115": "for ( int i = 0 ; i != platforms . size ( ) ; ++ i ) { ",
  "21116": "Build . Platform platform = platforms . get ( i ) ; ",
  "21117": "Value . UTF8 name = new Value . UTF8 ( platform . getName ( ) . getBytes ( ) ) ; ",
  "21118": "if ( ArrayUtils . firstIndexOf ( targetPlatformNames , name ) >= 0 ) { ",
  "21119": "targetPlatforms . add ( platform ) ; ",
  "21120": "return targetPlatforms ; ",
  "21121": "} public Path . Root getRepositoryRoot ( ) throws IOException { ",
  "21122": "Path . Root root = environment . getGlobalRoot ( ) . createRelativeRoot ( REPOSITORY_PATH ) ; ",
  "21123": "} private void resolvePackageDependencies ( ) throws IOException { ",
  "21124": "Configuration . Schema buildSchema = environment . getBuildSchema ( ) ; ",
  "21125": "Path . Root repository = getRepositoryRoot ( ) ; ",
  "21126": "List < Path . ID > deps = configuration . matchAll ( Trie . fromString ( \"dependencies/**\" ) ) ; ",
  "21127": "for ( int i = 0 ; i != deps . size ( ) ; ++ i ) { ",
  "21128": "Path . ID dep = deps . get ( i ) ; ",
  "21129": "String name = dep . get ( 1 ) ; ",
  "21130": "UTF8 version = configuration . get ( UTF8 . class , dep ) ; ",
  "21131": "Trie root = Trie . fromString ( name + \"-v\" + version ) ; ",
  "21132": "if ( ! repository . exists ( root , ZipFile . ContentType ) ) { ",
  "21133": "Path . Entry < ZipFile > zipfile = repository . get ( root , ZipFile . ContentType ) ; ",
  "21134": "Path . Root pkgRoot = new ZipFileRoot ( zipfile , environment . getContentRegistry ( ) ) ; ",
  "21135": "Path . Entry < ConfigFile > entry = pkgRoot . get ( Trie . fromString ( \"wy\" ) , ConfigFile . ContentType ) ; ",
  "21136": "ConfigFile pkgcfg = pkgRoot . get ( Trie . fromString ( \"wy\" ) , ConfigFile . ContentType ) . read ( ) ; ",
  "21137": "Build . Package pkg = new Package ( pkgRoot , pkgcfg . toConfiguration ( buildSchema ) ) ; ",
  "21138": "project . getPackages ( ) . add ( pkg ) ; ",
  "21139": "} private void initialisePlatforms ( ) throws IOException { ",
  "21140": "List < Build . Platform > platforms = getTargetPlatforms ( ) ; ",
  "21141": "platform . initialise ( configuration , project ) ; ",
  "21142": "} public < T > List < Path . Entry < T > > find ( List < File > files , ",
  "21143": "Content . Type < T > contentType ) ",
  "21144": "ArrayList < Path . Entry < T > > sources = new ArrayList < > ( ) ; ",
  "21145": "String suffix = \".\" + contentTypes . suffix ( contentType ) ; ",
  "21146": "String location = location ( ) . getCanonicalPath ( ) ; ",
  "21147": "String filePath = file . getCanonicalPath ( ) ; ",
  "21148": "if ( filePath . startsWith ( location ) ) { ",
  "21149": "int end = location . length ( ) ; ",
  "21150": "if ( end > 1 ) { ",
  "21151": "end ++ ; ",
  "21152": "String module = filePath . substring ( end ) . replace ( ",
  "21153": "File . separatorChar , '/' ) ; ",
  "21154": "if ( module . endsWith ( suffix ) ) { ",
  "21155": "module = module . substring ( 0 , ",
  "21156": "module . length ( ) - suffix . length ( ) ) ; ",
  "21157": "Path . ID mid = Trie . fromString ( module ) ; ",
  "21158": "Path . Entry < T > entry = this . get ( mid , contentType ) ; ",
  "21159": "sources . add ( entry ) ; ",
  "21160": "return sources ; ",
  "21161": "} public List < Token > scan ( ) { ",
  "21162": "char c = input . charAt ( pos ) ; ",
  "21163": "tokens . add ( scanNumericConstant ( ) ) ; ",
  "21164": "tokens . add ( scanStringConstant ( ) ) ; ",
  "21165": "} else if ( c == '\\'' ) { ",
  "21166": "tokens . add ( scanCharacterConstant ( ) ) ; ",
  "21167": "} else if ( isOperatorStart ( c ) ) { ",
  "21168": "tokens . add ( scanOperator ( ) ) ; ",
  "21169": "} else if ( Character . isLetter ( c ) || c == '_' ) { ",
  "21170": "tokens . add ( scanIdentifier ( ) ) ; ",
  "21171": "scanWhiteSpace ( tokens ) ; ",
  "21172": "} public Token scanNumericConstant ( ) { ",
  "21173": "while ( pos < input . length ( ) && Character . isDigit ( input . charAt ( pos ) ) ) { ",
  "21174": "pos = pos + 1 ; ",
  "21175": "return new Token ( Token . Kind . IntValue , input . substring ( start , pos ) , ",
  "21176": "start ) ; ",
  "21177": "} public Token scanCharacterConstant ( ) { ",
  "21178": "char c = input . charAt ( pos ++ ) ; ",
  "21179": "switch ( input . charAt ( pos ++ ) ) { ",
  "21180": "c = '\\b' ; ",
  "21181": "c = '\\\"' ; ",
  "21182": "c = '\\'' ; ",
  "21183": "c = '\\\\' ; ",
  "21184": "if ( input . charAt ( pos ) != '\\'' ) { ",
  "21185": "return new Token ( Token . Kind . CharValue , input . substring ( start , pos ) , ",
  "21186": "} private void syntaxError ( String msg , int index ) { ",
  "21187": "throw new SyntacticException ( msg , entry , new ConfigFile . Attribute . Span ( null , index , index ) ) ; ",
  "21188": "} protected void insert ( Path . Item item ) throws IOException { ",
  "21189": "if ( item . id ( ) . parent ( ) != id ) { ",
  "21190": "updateContents ( ) ; ",
  "21191": "Path . ID id = item . id ( ) ; ",
  "21192": "int index = binarySearch ( contents , nentries , id ) ; ",
  "21193": "index = - index - 1 ; ",
  "21194": "insert ( index , item ) ; ",
  "21195": "} @ FormatMethod ",
  "21196": "public void log ( String format , @ Nullable Object ... args ) { ",
  "21197": "System . out . print ( getIndentString ( ) ) ; ",
  "21198": "System . out . printf ( format , args ) ; ",
  "21199": "} public void logStackTrace ( ) { ",
  "21200": "Throwable t = new Throwable ( ) ; ",
  "21201": "t . fillInStackTrace ( ) ; ",
  "21202": "StackTraceElement [ ] ste_arr = t . getStackTrace ( ) ; ",
  "21203": "for ( int ii = 2 ; ii < ste_arr . length ; ii ++ ) { ",
  "21204": "StackTraceElement ste = ste_arr [ ii ] ; ",
  "21205": "} private String getIndentString ( ) { ",
  "21206": "assert enabled ; ",
  "21207": "if ( indentString == null ) { ",
  "21208": "for ( int i = indentStrings . size ( ) ; i <= indentLevel ; i ++ ) { ",
  "21209": "indentStrings . add ( indentStrings . get ( i - 1 ) + INDENT_STR_ONE_LEVEL ) ; ",
  "21210": "indentString = indentStrings . get ( indentLevel ) ; ",
  "21211": "return indentString ; ",
  "21212": "} private void circulationPump ( ",
  "21213": "final MethodGen m , ",
  "21214": "final ControlFlowGraph cfg , ",
  "21215": "final InstructionContext start , ",
  "21216": "final Frame vanillaFrame , ",
  "21217": "final InstConstraintVisitor icv , ",
  "21218": "final ExecutionVisitor ev ) { ",
  "21219": "final Random random = new Random ( ) ; ",
  "21220": "final InstructionContextQueue icq = new InstructionContextQueue ( ) ; ",
  "21221": "execute ( start , vanillaFrame , new ArrayList < InstructionContext > ( ) , icv , ev ) ; ",
  "21222": "icq . add ( start , new ArrayList < InstructionContext > ( ) ) ; ",
  "21223": "while ( ! icq . isEmpty ( ) ) { ",
  "21224": "InstructionContext u ; ",
  "21225": "ArrayList < InstructionContext > ec ; ",
  "21226": "if ( ! DEBUG ) { ",
  "21227": "final int r = random . nextInt ( icq . size ( ) ) ; ",
  "21228": "u = icq . getIC ( r ) ; ",
  "21229": "ec = icq . getEC ( r ) ; ",
  "21230": "icq . remove ( r ) ; ",
  "21231": "u = icq . getIC ( 0 ) ; ",
  "21232": "ec = icq . getEC ( 0 ) ; ",
  "21233": "icq . remove ( 0 ) ; ",
  "21234": "final ArrayList < InstructionContext > oldchain = ( ArrayList < InstructionContext > ) ( ec . clone ( ) ) ; ",
  "21235": "final ArrayList < InstructionContext > newchain = ( ArrayList < InstructionContext > ) ( ec . clone ( ) ) ; ",
  "21236": "newchain . add ( u ) ; ",
  "21237": "if ( ( u . getInstruction ( ) . getInstruction ( ) ) instanceof RET ) { ",
  "21238": "final RET ret = ( RET ) ( u . getInstruction ( ) . getInstruction ( ) ) ; ",
  "21239": "final ReturnaddressType t = ",
  "21240": "( ReturnaddressType ) u . getOutFrame ( oldchain ) . getLocals ( ) . get ( ret . getIndex ( ) ) ; ",
  "21241": "final InstructionContext theSuccessor = cfg . contextOf ( t . getTarget ( ) ) ; ",
  "21242": "InstructionContext lastJSR = null ; ",
  "21243": "int skip_jsr = 0 ; ",
  "21244": "for ( int ss = oldchain . size ( ) - 1 ; ss >= 0 ; ss -- ) { ",
  "21245": "if ( skip_jsr < 0 ) { ",
  "21246": "if ( ( oldchain . get ( ss ) ) . getInstruction ( ) . getInstruction ( ) instanceof JsrInstruction ) { ",
  "21247": "if ( skip_jsr == 0 ) { ",
  "21248": "lastJSR = oldchain . get ( ss ) ; ",
  "21249": "skip_jsr -- ; ",
  "21250": "if ( ( oldchain . get ( ss ) ) . getInstruction ( ) . getInstruction ( ) instanceof RET ) { ",
  "21251": "skip_jsr ++ ; ",
  "21252": "if ( lastJSR == null ) { ",
  "21253": "throw new AssertionViolatedException ( ",
  "21254": "final JsrInstruction jsr = ( JsrInstruction ) ( lastJSR . getInstruction ( ) . getInstruction ( ) ) ; ",
  "21255": "if ( theSuccessor != ( cfg . contextOf ( jsr . physicalSuccessor ( ) ) ) ) { ",
  "21256": "+ u . getInstruction ( ) ",
  "21257": "+ theSuccessor ",
  "21258": "+ cfg . contextOf ( jsr . physicalSuccessor ( ) ) ",
  "21259": "+ \"'?\" ) ; ",
  "21260": "if ( execute ( theSuccessor , u . getOutFrame ( oldchain ) , newchain , icv , ev ) ) { ",
  "21261": "@ SuppressWarnings ( ",
  "21262": "\"unchecked\" ) ",
  "21263": "final ArrayList < InstructionContext > newchainClone = ",
  "21264": "( ArrayList < InstructionContext > ) newchain . clone ( ) ; ",
  "21265": "icq . add ( theSuccessor , newchainClone ) ; ",
  "21266": "final InstructionContext [ ] succs = u . getSuccessors ( ) ; ",
  "21267": "for ( final InstructionContext v : succs ) { ",
  "21268": "if ( execute ( v , u . getOutFrame ( oldchain ) , newchain , icv , ev ) ) { ",
  "21269": "icq . add ( v , newchainClone ) ; ",
  "21270": "final ExceptionHandler [ ] exc_hds = u . getExceptionHandlers ( ) ; ",
  "21271": "for ( final ExceptionHandler exc_hd : exc_hds ) { ",
  "21272": "final InstructionContext v = cfg . contextOf ( exc_hd . getHandlerStart ( ) ) ; ",
  "21273": "if ( execute ( ",
  "21274": "v , ",
  "21275": "new Frame ( ",
  "21276": "u . getOutFrame ( oldchain ) . getLocals ( ) , ",
  "21277": "new OperandStack ( ",
  "21278": "u . getOutFrame ( oldchain ) . getStack ( ) . maxStack ( ) , ",
  "21279": "exc_hd . getExceptionType ( ) == null ",
  "21280": "? Type . THROWABLE ",
  "21281": ": exc_hd . getExceptionType ( ) ) ) , ",
  "21282": "new ArrayList < InstructionContext > ( ) , ",
  "21283": "icv , ",
  "21284": "ev ) ) { ",
  "21285": "icq . add ( v , new ArrayList < InstructionContext > ( ) ) ; ",
  "21286": "InstructionHandle ih = start . getInstruction ( ) ; ",
  "21287": "if ( ( ih . getInstruction ( ) instanceof ReturnInstruction ) && ( ! ( cfg . isDead ( ih ) ) ) ) { ",
  "21288": "final InstructionContext ic = cfg . contextOf ( ih ) ; ",
  "21289": "final Frame f = ic . getOutFrame ( new ArrayList < InstructionContext > ( ) ) ; ",
  "21290": "final LocalVariables lvs = f . getLocals ( ) ; ",
  "21291": "for ( int i = 0 ; i < lvs . maxLocals ( ) ; i ++ ) { ",
  "21292": "if ( lvs . get ( i ) instanceof UninitializedObjectType ) { ",
  "21293": "this . addMessage ( ",
  "21294": "+ ic ",
  "21295": "+ lvs ",
  "21296": "+ \"'.\" ) ; ",
  "21297": "final OperandStack os = f . getStack ( ) ; ",
  "21298": "for ( int i = 0 ; i < os . size ( ) ; i ++ ) { ",
  "21299": "if ( os . peek ( i ) instanceof UninitializedObjectType ) { ",
  "21300": "+ os ",
  "21301": "} while ( ( ih = ih . getNext ( ) ) != null ) ; ",
  "21302": "} public VerificationResult do_stack_ver ( MethodGen mg ) { ",
  "21303": "final ConstantPoolGen constantPoolGen = mg . getConstantPool ( ) ; ",
  "21304": "final InstConstraintVisitor icv = new NoConstraintsVisitor ( ) ; ",
  "21305": "icv . setConstantPoolGen ( constantPoolGen ) ; ",
  "21306": "final ExecutionVisitor ev = new ExecutionVisitor ( ) ; ",
  "21307": "ev . setConstantPoolGen ( constantPoolGen ) ; ",
  "21308": "stack_types = new StackTypes ( mg ) ; ",
  "21309": "icv . setMethodGen ( mg ) ; ",
  "21310": "if ( ! ( mg . isAbstract ( ) || mg . isNative ( ) ) ) { ",
  "21311": "final ControlFlowGraph cfg = new ControlFlowGraph ( mg , false ) ; ",
  "21312": "final Frame f = new Frame ( mg . getMaxLocals ( ) , mg . getMaxStack ( ) ) ; ",
  "21313": "if ( ! mg . isStatic ( ) ) { ",
  "21314": "if ( mg . getName ( ) . equals ( Const . CONSTRUCTOR_NAME ) ) { ",
  "21315": "Frame . setThis ( new UninitializedObjectType ( new ObjectType ( mg . getClassName ( ) ) ) ) ; ",
  "21316": "f . getLocals ( ) . set ( 0 , Frame . getThis ( ) ) ; ",
  "21317": "@ SuppressWarnings ( \"nullness\" ) ",
  "21318": "@ NonNull UninitializedObjectType dummy = null ; ",
  "21319": "Frame . setThis ( dummy ) ; ",
  "21320": "f . getLocals ( ) . set ( 0 , new ObjectType ( mg . getClassName ( ) ) ) ; ",
  "21321": "final Type [ ] argtypes = mg . getArgumentTypes ( ) ; ",
  "21322": "int twoslotoffset = 0 ; ",
  "21323": "for ( int j = 0 ; j < argtypes . length ; j ++ ) { ",
  "21324": "if ( argtypes [ j ] == Type . SHORT ",
  "21325": "|| argtypes [ j ] == Type . BYTE ",
  "21326": "|| argtypes [ j ] == Type . CHAR ",
  "21327": "|| argtypes [ j ] == Type . BOOLEAN ) { ",
  "21328": "argtypes [ j ] = Type . INT ; ",
  "21329": "f . getLocals ( ) . set ( twoslotoffset + j + ( mg . isStatic ( ) ? 0 : 1 ) , argtypes [ j ] ) ; ",
  "21330": "if ( argtypes [ j ] . getSize ( ) == 2 ) { ",
  "21331": "twoslotoffset ++ ; ",
  "21332": "f . getLocals ( ) . set ( twoslotoffset + j + ( mg . isStatic ( ) ? 0 : 1 ) , Type . UNKNOWN ) ; ",
  "21333": "circulationPump ( mg , cfg , cfg . contextOf ( mg . getInstructionList ( ) . getStart ( ) ) , f , icv , ev ) ; ",
  "21334": "} catch ( final VerifierConstraintViolatedException ce ) { ",
  "21335": "return new VerificationResult ( VerificationResult . VERIFIED_REJECTED , ce . getMessage ( ) ) ; ",
  "21336": "} catch ( final RuntimeException re ) { ",
  "21337": "final StringWriter sw = new StringWriter ( ) ; ",
  "21338": "final PrintWriter pw = new PrintWriter ( sw ) ; ",
  "21339": "re . printStackTrace ( pw ) ; ",
  "21340": "+ mg . getClassName ( ) ",
  "21341": "+ mg ",
  "21342": "+ sw ",
  "21343": "+ \"---\\n\" , ",
  "21344": "re ) ; ",
  "21345": "return VerificationResult . VR_OK ; ",
  "21346": "} boolean execute ( ",
  "21347": "InstructionContext ic , ",
  "21348": "Frame inFrame , ",
  "21349": "ArrayList < InstructionContext > executionPredecessors , ",
  "21350": "InstConstraintVisitor icv , ",
  "21351": "ExecutionVisitor ev ) { ",
  "21352": "stack_types . set ( ic . getInstruction ( ) . getPosition ( ) , inFrame ) ; ",
  "21353": "return ic . execute ( inFrame , executionPredecessors , icv , ev ) ; ",
  "21354": "} protected String [ ] add_string ( String [ ] arr , String new_string ) { ",
  "21355": "String [ ] new_arr = new String [ arr . length + 1 ] ; ",
  "21356": "for ( int ii = 0 ; ii < arr . length ; ii ++ ) { ",
  "21357": "new_arr [ ii ] = arr [ ii ] ; ",
  "21358": "new_arr [ arr . length ] = new_string ; ",
  "21359": "return new_arr ; ",
  "21360": "} @ Pure ",
  "21361": "protected final String get_attribute_name ( Attribute a ) { ",
  "21362": "int con_index = a . getNameIndex ( ) ; ",
  "21363": "Constant c = pool . getConstant ( con_index ) ; ",
  "21364": "String att_name = ( ( ConstantUtf8 ) c ) . getBytes ( ) ; ",
  "21365": "return att_name ; ",
  "21366": "protected final @ Nullable Attribute get_stack_map_table_attribute ( MethodGen mgen ) { ",
  "21367": "for ( Attribute a : mgen . getCodeAttributes ( ) ) { ",
  "21368": "if ( is_stack_map_table ( a ) ) { ",
  "21369": "protected final @ Nullable Attribute get_local_variable_type_table_attribute ( MethodGen mgen ) { ",
  "21370": "if ( is_local_variable_type_table ( a ) ) { ",
  "21371": "} protected final void update_stack_map_offset ( int position , int delta ) { ",
  "21372": "running_offset = - 1 ; ",
  "21373": "for ( int i = 0 ; i < stack_map_table . length ; i ++ ) { ",
  "21374": "running_offset = stack_map_table [ i ] . getByteCodeOffset ( ) + running_offset + 1 ; ",
  "21375": "if ( running_offset > position ) { ",
  "21376": "stack_map_table [ i ] . updateByteCodeOffset ( delta ) ; ",
  "21377": "} protected final StackMapEntry find_stack_map_equal ( int offset ) { ",
  "21378": "if ( running_offset > offset ) { ",
  "21379": "if ( running_offset == offset ) { ",
  "21380": "return stack_map_table [ i ] ; ",
  "21381": "} protected final int find_stack_map_index_before ( int offset ) { ",
  "21382": "number_active_locals = initial_locals_count ; ",
  "21383": "running_offset = running_offset + stack_map_table [ i ] . getByteCodeOffset ( ) + 1 ; ",
  "21384": "if ( running_offset >= offset ) { ",
  "21385": "running_offset = running_offset - stack_map_table [ i ] . getByteCodeOffset ( ) - 1 ; ",
  "21386": "return i - 1 ; ",
  "21387": "int frame_type = stack_map_table [ i ] . getFrameType ( ) ; ",
  "21388": "if ( frame_type >= Const . APPEND_FRAME && frame_type <= Const . APPEND_FRAME_MAX ) { ",
  "21389": "number_active_locals += frame_type - 251 ; ",
  "21390": "} else if ( frame_type >= Const . CHOP_FRAME && frame_type <= Const . CHOP_FRAME_MAX ) { ",
  "21391": "number_active_locals -= 251 - frame_type ; ",
  "21392": "} else if ( frame_type == Const . FULL_FRAME ) { ",
  "21393": "number_active_locals = stack_map_table [ i ] . getNumberOfLocals ( ) ; ",
  "21394": "if ( stack_map_table . length == 0 ) { ",
  "21395": "return stack_map_table . length - 1 ; ",
  "21396": "} protected final @ IndexOrLow ( \"stack_map_table\" ) int find_stack_map_index_after ( int offset ) { ",
  "21397": "} protected final void modify_stack_maps_for_switches ( InstructionHandle ih , InstructionList il ) { ",
  "21398": "Instruction inst ; ",
  "21399": "short opcode ; ",
  "21400": "if ( ! needStackMap ) { ",
  "21401": "il . setPositions ( ) ; ",
  "21402": "while ( ih != null ) { ",
  "21403": "inst = ih . getInstruction ( ) ; ",
  "21404": "opcode = inst . getOpcode ( ) ; ",
  "21405": "if ( opcode == Const . TABLESWITCH || opcode == Const . LOOKUPSWITCH ) { ",
  "21406": "int current_offset = ih . getPosition ( ) ; ",
  "21407": "int index = find_stack_map_index_after ( current_offset ) ; ",
  "21408": "if ( index == - 1 ) { ",
  "21409": "StackMapEntry stack_map = stack_map_table [ index ] ; ",
  "21410": "int delta = ( current_offset + inst . getLength ( ) ) - running_offset ; ",
  "21411": "if ( delta != 0 ) { ",
  "21412": "stack_map . updateByteCodeOffset ( delta ) ; ",
  "21413": "ih = ih . getNext ( ) ; ",
  "21414": "} protected final int gen_temp_locals ( MethodGen mgen , int offset ) { ",
  "21415": "int live_start = 0 ; ",
  "21416": "Type live_type = null ; ",
  "21417": "InstructionList il = mgen . getInstructionList ( ) ; ",
  "21418": "int locals_offset_height = 0 ; ",
  "21419": "int byte_code_offset = - 1 ; ",
  "21420": "LocalVariableGen new_lvg ; ",
  "21421": "int min_size = 3 ; ",
  "21422": "StackMapType [ ] types_of_active_locals = new StackMapType [ number_active_locals ] ; ",
  "21423": "for ( int ii = 0 ; ii < number_active_locals ; ii ++ ) { ",
  "21424": "types_of_active_locals [ ii ] = initial_type_list [ ii ] ; ",
  "21425": "locals_offset_height += getSize ( initial_type_list [ ii ] ) ; ",
  "21426": "for ( StackMapEntry smte : stack_map_table ) { ",
  "21427": "int frame_type = smte . getFrameType ( ) ; ",
  "21428": "byte_code_offset += smte . getByteCodeOffset ( ) + 1 ; ",
  "21429": "types_of_active_locals = ",
  "21430": "Arrays . copyOf ( types_of_active_locals , number_active_locals + frame_type - 251 ) ; ",
  "21431": "for ( StackMapType smt : smte . getTypesOfLocals ( ) ) { ",
  "21432": "types_of_active_locals [ number_active_locals ++ ] = smt ; ",
  "21433": "locals_offset_height += getSize ( smt ) ; ",
  "21434": "int number_to_chop = 251 - frame_type ; ",
  "21435": "while ( number_to_chop > 0 ) { ",
  "21436": "locals_offset_height -= getSize ( types_of_active_locals [ -- number_active_locals ] ) ; ",
  "21437": "number_to_chop -- ; ",
  "21438": "types_of_active_locals = Arrays . copyOf ( types_of_active_locals , number_active_locals ) ; ",
  "21439": "locals_offset_height = 0 ; ",
  "21440": "number_active_locals = 0 ; ",
  "21441": "types_of_active_locals = new StackMapType [ smte . getNumberOfLocals ( ) ] ; ",
  "21442": "if ( live_start == 0 ) { ",
  "21443": "if ( offset < locals_offset_height ) { ",
  "21444": "live_start = byte_code_offset ; ",
  "21445": "int running_offset = 0 ; ",
  "21446": "for ( StackMapType smt : types_of_active_locals ) { ",
  "21447": "live_type = generate_Type_from_StackMapType ( smt ) ; ",
  "21448": "running_offset += getSize ( smt ) ; ",
  "21449": "if ( live_type == null ) { ",
  "21450": "live_start = 0 ; ",
  "21451": "if ( offset >= locals_offset_height ) { ",
  "21452": "new_lvg = ",
  "21453": "mgen . addLocalVariable ( ",
  "21454": "\"DaIkOnTeMp\" + offset , ",
  "21455": "live_type , ",
  "21456": "il . findHandle ( live_start ) , ",
  "21457": "il . findHandle ( byte_code_offset ) ) ; ",
  "21458": "debug_instrument . log ( ",
  "21459": "new_lvg . getIndex ( ) , ",
  "21460": "new_lvg . getStart ( ) . getPosition ( ) , ",
  "21461": "new_lvg . getEnd ( ) . getPosition ( ) , ",
  "21462": "new_lvg . getName ( ) , ",
  "21463": "new_lvg . getType ( ) ) ; ",
  "21464": "min_size = Math . min ( min_size , live_type . getSize ( ) ) ; ",
  "21465": "live_type = null ; ",
  "21466": "if ( live_start != 0 ) { ",
  "21467": "\"DaIkOnTeMp\" + offset , live_type , offset , il . findHandle ( live_start ) , null ) ; ",
  "21468": "il . getEnd ( ) . getPosition ( ) , ",
  "21469": "if ( min_size == 3 ) { ",
  "21470": "if ( byte_code_offset == - 1 ) { ",
  "21471": "byte_code_offset = 0 ; ",
  "21472": "\"DaIkOnTeMp\" + offset , Type . OBJECT , offset , il . findHandle ( byte_code_offset ) , null ) ; ",
  "21473": "min_size = Math . min ( min_size , Type . OBJECT . getSize ( ) ) ; ",
  "21474": "return offset + min_size ; ",
  "21475": "} protected final void build_unitialized_NEW_map ( InstructionList il ) { ",
  "21476": "uninitialized_NEW_map . clear ( ) ; ",
  "21477": "if ( ( frame_type >= Const . SAME_LOCALS_1_STACK_ITEM_FRAME ",
  "21478": "&& frame_type <= Const . SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED ) ",
  "21479": "|| ( frame_type >= Const . APPEND_FRAME && frame_type <= Const . APPEND_FRAME_MAX ) ",
  "21480": "|| ( frame_type == Const . FULL_FRAME ) ) { ",
  "21481": "if ( smte . getNumberOfLocals ( ) > 0 ) { ",
  "21482": "if ( smt . getType ( ) == Const . ITEM_NewObject ) { ",
  "21483": "int i = smt . getIndex ( ) ; ",
  "21484": "uninitialized_NEW_map . put ( il . findHandle ( i ) , i ) ; ",
  "21485": "if ( smte . getNumberOfStackItems ( ) > 0 ) { ",
  "21486": "for ( StackMapType smt : smte . getTypesOfStackItems ( ) ) { ",
  "21487": "} private final void update_NEW_object_stack_map_entries ( int old_offset , int new_offset ) { ",
  "21488": "if ( old_offset == smt . getIndex ( ) ) { ",
  "21489": "smt . setIndex ( new_offset ) ; ",
  "21490": "} protected final void update_uninitialized_NEW_offsets ( InstructionList il ) { ",
  "21491": "for ( Map . Entry < InstructionHandle , Integer > e : uninitialized_NEW_map . entrySet ( ) ) { ",
  "21492": "InstructionHandle ih = e . getKey ( ) ; ",
  "21493": "int old_offset = e . getValue ( ) . intValue ( ) ; ",
  "21494": "int new_offset = ih . getPosition ( ) ; ",
  "21495": "if ( old_offset != new_offset ) { ",
  "21496": "update_NEW_object_stack_map_entries ( old_offset , new_offset ) ; ",
  "21497": "e . setValue ( new_offset ) ; ",
  "21498": "} protected final void adjust_code_for_locals_change ( ",
  "21499": "MethodGen mgen , int index_first_moved_local , int size ) { ",
  "21500": "for ( InstructionHandle ih = il . getStart ( ) ; ih != null ; ih = ih . getNext ( ) ) { ",
  "21501": "Instruction inst = ih . getInstruction ( ) ; ",
  "21502": "int orig_length = inst . getLength ( ) ; ",
  "21503": "int operand ; ",
  "21504": "if ( ( inst instanceof RET ) || ( inst instanceof IINC ) ) { ",
  "21505": "IndexedInstruction index_inst = ( IndexedInstruction ) inst ; ",
  "21506": "if ( index_inst . getIndex ( ) >= index_first_moved_local ) { ",
  "21507": "index_inst . setIndex ( index_inst . getIndex ( ) + size ) ; ",
  "21508": "} else if ( inst instanceof LocalVariableInstruction ) { ",
  "21509": "operand = ( ( LocalVariableInstruction ) inst ) . getIndex ( ) ; ",
  "21510": "if ( operand >= index_first_moved_local ) { ",
  "21511": "( ( LocalVariableInstruction ) inst ) . setIndex ( operand + size ) ; ",
  "21512": "int delta = inst . getLength ( ) - orig_length ; ",
  "21513": "if ( delta > 0 ) { ",
  "21514": "update_stack_map_offset ( ih . getPosition ( ) , delta ) ; ",
  "21515": "modify_stack_maps_for_switches ( ih , il ) ; ",
  "21516": "} @ EnsuresNonNull ( { \"stack_map_table\" } ) ",
  "21517": "protected final void set_current_stack_map_table ( MethodGen mgen , int java_class_version ) { ",
  "21518": "smta = ( StackMap ) get_stack_map_table_attribute ( mgen ) ; ",
  "21519": "if ( smta != null ) { ",
  "21520": "stack_map_table = ( ( StackMap ) ( smta . copy ( smta . getConstantPool ( ) ) ) ) . getStackMap ( ) ; ",
  "21521": "needStackMap = true ; ",
  "21522": "smta . getTag ( ) , smta . getLength ( ) , smta . getNameIndex ( ) ) ; ",
  "21523": "mgen . removeCodeAttribute ( smta ) ; ",
  "21524": "stack_map_table = empty_stack_map_table ; ",
  "21525": "if ( java_class_version > Const . MAJOR_1_6 ) { ",
  "21526": "print_stack_map_table ( \"Original\" ) ; ",
  "21527": "} protected final void print_stack_map_table ( String prefix ) { ",
  "21528": "} protected final void create_new_stack_map_attribute ( MethodGen mgen ) throws IOException { ",
  "21529": "if ( stack_map_table == empty_stack_map_table ) { ",
  "21530": "print_stack_map_table ( \"Final\" ) ; ",
  "21531": "StackMap map_table = ",
  "21532": "new StackMap ( pool . addUtf8 ( \"StackMapTable\" ) , 0 , null , pool . getConstantPool ( ) ) ; ",
  "21533": "map_table . setStackMap ( stack_map_table ) ; ",
  "21534": "mgen . addCodeAttribute ( map_table ) ; ",
  "21535": "} @ SuppressWarnings ( \"signature\" ) ",
  "21536": "protected static @ ClassGetName String typeToClassGetName ( Type t ) { ",
  "21537": "if ( t instanceof ObjectType ) { ",
  "21538": "return ( ( ObjectType ) t ) . getClassName ( ) ; ",
  "21539": "} else if ( t instanceof BasicType ) { ",
  "21540": "return t . toString ( ) ; ",
  "21541": "return t . getSignature ( ) . replace ( '/' , '.' ) ; ",
  "21542": "} protected final StackMapType generate_StackMapType_from_Type ( Type t ) { ",
  "21543": "case Const . T_BOOLEAN : ",
  "21544": "case Const . T_CHAR : ",
  "21545": "case Const . T_BYTE : ",
  "21546": "case Const . T_SHORT : ",
  "21547": "case Const . T_INT : ",
  "21548": "return new StackMapType ( Const . ITEM_Integer , - 1 , pool . getConstantPool ( ) ) ; ",
  "21549": "case Const . T_FLOAT : ",
  "21550": "return new StackMapType ( Const . ITEM_Float , - 1 , pool . getConstantPool ( ) ) ; ",
  "21551": "case Const . T_DOUBLE : ",
  "21552": "return new StackMapType ( Const . ITEM_Double , - 1 , pool . getConstantPool ( ) ) ; ",
  "21553": "case Const . T_LONG : ",
  "21554": "return new StackMapType ( Const . ITEM_Long , - 1 , pool . getConstantPool ( ) ) ; ",
  "21555": "case Const . T_ARRAY : ",
  "21556": "case Const . T_OBJECT : ",
  "21557": "return new StackMapType ( ",
  "21558": "Const . ITEM_Object , pool . addClass ( typeToClassGetName ( t ) ) , pool . getConstantPool ( ) ) ; ",
  "21559": "case Const . T_UNKNOWN : ",
  "21560": "return new StackMapType ( Const . ITEM_NewObject , 0 , pool . getConstantPool ( ) ) ; ",
  "21561": "} protected final Type generate_Type_from_StackMapType ( StackMapType smt ) { ",
  "21562": "switch ( smt . getType ( ) ) { ",
  "21563": "case Const . ITEM_Integer : ",
  "21564": "case Const . ITEM_Bogus : ",
  "21565": "return Type . INT ; ",
  "21566": "case Const . ITEM_Float : ",
  "21567": "return Type . FLOAT ; ",
  "21568": "case Const . ITEM_Double : ",
  "21569": "return Type . DOUBLE ; ",
  "21570": "case Const . ITEM_Long : ",
  "21571": "return Type . LONG ; ",
  "21572": "case Const . ITEM_Object : ",
  "21573": "return Type . OBJECT ; ",
  "21574": "Thread . dumpStack ( ) ; ",
  "21575": "} protected final void update_full_frame_stack_map_entries ( ",
  "21576": "int offset , Type type_new_var , LocalVariableGen [ ] locals ) { ",
  "21577": "@ NonNegative int index ; ",
  "21578": "if ( stack_map_table [ i ] . getFrameType ( ) == Const . FULL_FRAME ) { ",
  "21579": "int num_locals = stack_map_table [ i ] . getNumberOfLocals ( ) ; ",
  "21580": "StackMapType [ ] new_local_types = new StackMapType [ num_locals + 1 ] ; ",
  "21581": "StackMapType [ ] old_local_types = stack_map_table [ i ] . getTypesOfLocals ( ) ; ",
  "21582": "for ( index = 0 ; index < num_locals ; index ++ ) { ",
  "21583": "if ( index >= locals . length ) { ",
  "21584": "if ( locals [ index ] . getIndex ( ) >= offset ) { ",
  "21585": "new_local_types [ index ] = old_local_types [ index ] ; ",
  "21586": "new_local_types [ index ++ ] = generate_StackMapType_from_Type ( type_new_var ) ; ",
  "21587": "while ( index <= num_locals ) { ",
  "21588": "new_local_types [ index ] = old_local_types [ index - 1 ] ; ",
  "21589": "stack_map_table [ i ] . setTypesOfLocals ( new_local_types ) ; ",
  "21590": "protected final LocalVariableGen add_new_argument ( ",
  "21591": "MethodGen mgen , String arg_name , Type arg_type ) { ",
  "21592": "return add_new_parameter ( mgen , arg_name , arg_type ) ; ",
  "21593": "} protected final LocalVariableGen add_new_parameter ( ",
  "21594": "LocalVariableGen arg_new = null ; ",
  "21595": "LocalVariableGen [ ] locals = mgen . getLocalVariables ( ) ; ",
  "21596": "Type [ ] arg_types = mgen . getArgumentTypes ( ) ; ",
  "21597": "int new_index = 0 ; ",
  "21598": "int new_offset = 0 ; ",
  "21599": "boolean has_code = ( mgen . getInstructionList ( ) != null ) ; ",
  "21600": "if ( has_code ) { ",
  "21601": "if ( ! mgen . isStatic ( ) ) { ",
  "21602": "new_index ++ ; ",
  "21603": "new_offset ++ ; ",
  "21604": "if ( arg_types . length > 0 ) { ",
  "21605": "LocalVariableGen last_arg ; ",
  "21606": "new_index = new_index + arg_types . length ; ",
  "21607": "last_arg = locals [ new_index - 1 ] ; ",
  "21608": "new_offset = last_arg . getIndex ( ) + ( last_arg . getType ( ) ) . getSize ( ) ; ",
  "21609": "arg_new = mgen . addLocalVariable ( arg_name , arg_type , new_offset , null , null ) ; ",
  "21610": "first_local_index ++ ; ",
  "21611": "initial_locals_count ++ ; ",
  "21612": "arg_types = BcelUtil . postpendToArray ( arg_types , arg_type ) ; ",
  "21613": "String [ ] arg_names = add_string ( mgen . getArgumentNames ( ) , arg_name ) ; ",
  "21614": "mgen . setArgumentTypes ( arg_types ) ; ",
  "21615": "mgen . setArgumentNames ( arg_names ) ; ",
  "21616": "for ( int i = new_index ; i < locals . length ; i ++ ) { ",
  "21617": "LocalVariableGen lv = locals [ i ] ; ",
  "21618": "lv . setIndex ( lv . getIndex ( ) + arg_type . getSize ( ) ) ; ",
  "21619": "mgen . setMaxLocals ( mgen . getMaxLocals ( ) + arg_type . getSize ( ) ) ; ",
  "21620": "adjust_code_for_locals_change ( mgen , new_offset , arg_type . getSize ( ) ) ; ",
  "21621": "update_full_frame_stack_map_entries ( new_offset , arg_type , locals ) ; ",
  "21622": "return arg_new ; ",
  "21623": "} protected final LocalVariableGen create_method_scope_local ( ",
  "21624": "MethodGen mgen , String local_name , Type local_type ) { ",
  "21625": "LocalVariableGen lv_new ; ",
  "21626": "int max_offset = 0 ; ",
  "21627": "int new_offset = - 1 ; ",
  "21628": "@ IndexOrLow ( \"locals\" ) int compiler_temp_i = - 1 ; ",
  "21629": "int new_index = - 1 ; ",
  "21630": "for ( i = 0 ; i < locals . length ; i ++ ) { ",
  "21631": "if ( i >= first_local_index ) { ",
  "21632": "if ( lv . getStart ( ) . getPosition ( ) != 0 ) { ",
  "21633": "if ( new_offset == - 1 ) { ",
  "21634": "if ( compiler_temp_i != - 1 ) { ",
  "21635": "new_offset = locals [ compiler_temp_i ] . getIndex ( ) ; ",
  "21636": "new_index = compiler_temp_i ; ",
  "21637": "new_offset = lv . getIndex ( ) ; ",
  "21638": "new_index = i ; ",
  "21639": "max_offset = lv . getIndex ( ) + lv . getType ( ) . getSize ( ) ; ",
  "21640": "if ( lv . getName ( ) . startsWith ( \"DaIkOnTeMp\" ) ) { ",
  "21641": "if ( compiler_temp_i == - 1 ) { ",
  "21642": "compiler_temp_i = i ; ",
  "21643": "compiler_temp_i = - 1 ; ",
  "21644": "if ( ( new_offset == - 1 ) && ( compiler_temp_i != - 1 ) ) { ",
  "21645": "new_offset = max_offset ; ",
  "21646": "if ( new_offset < mgen . getMaxLocals ( ) ) { ",
  "21647": "mgen . setMaxLocals ( mgen . getMaxLocals ( ) + local_type . getSize ( ) ) ; ",
  "21648": "lv_new = mgen . addLocalVariable ( local_name , local_type , new_offset , null , null ) ; ",
  "21649": "for ( i = new_index ; i < locals . length ; i ++ ) { ",
  "21650": "lv . setIndex ( lv . getIndex ( ) + local_type . getSize ( ) ) ; ",
  "21651": "adjust_code_for_locals_change ( mgen , new_offset , local_type . getSize ( ) ) ; ",
  "21652": "update_full_frame_stack_map_entries ( new_offset , local_type , locals ) ; ",
  "21653": "return lv_new ; ",
  "21654": "} protected final void fix_local_variable_table ( MethodGen mgen ) { ",
  "21655": "if ( il == null ) { ",
  "21656": "first_local_index = 0 ; ",
  "21657": "LocalVariableGen l ; ",
  "21658": "for ( int ii = 0 ; ii < locals . length ; ii ++ ) { ",
  "21659": "locals [ ii ] = ( LocalVariableGen ) ( locals [ ii ] . clone ( ) ) ; ",
  "21660": "int loc_index = 0 ; ",
  "21661": "mgen . setMaxLocals ( ) ; ",
  "21662": "int max_locals = mgen . getMaxLocals ( ) ; ",
  "21663": "mgen . removeLocalVariables ( ) ; ",
  "21664": "mgen . setMaxLocals ( 0 ) ; ",
  "21665": "first_local_index = arg_types . length ; ",
  "21666": "l = locals [ 0 ] ; ",
  "21667": "new_lvg = mgen . addLocalVariable ( l . getName ( ) , l . getType ( ) , l . getIndex ( ) , null , null ) ; ",
  "21668": "loc_index = 1 ; ",
  "21669": "offset = 1 ; ",
  "21670": "for ( int ii = 0 ; ii < arg_types . length ; ii ++ ) { ",
  "21671": "if ( ( loc_index >= locals . length ) || ( offset != locals [ loc_index ] . getIndex ( ) ) ) { ",
  "21672": "new_lvg = mgen . addLocalVariable ( \"$hidden$\" + offset , arg_types [ ii ] , offset , null , null ) ; ",
  "21673": "l = locals [ loc_index ] ; ",
  "21674": "loc_index ++ ; ",
  "21675": "offset += arg_types [ ii ] . getSize ( ) ; ",
  "21676": "LocalVariableGen [ ] initial_locals = mgen . getLocalVariables ( ) ; ",
  "21677": "initial_locals_count = initial_locals . length ; ",
  "21678": "initial_type_list = new StackMapType [ initial_locals_count ] ; ",
  "21679": "for ( int ii = 0 ; ii < initial_locals_count ; ii ++ ) { ",
  "21680": "initial_type_list [ ii ] = generate_StackMapType_from_Type ( initial_locals [ ii ] . getType ( ) ) ; ",
  "21681": "for ( int ii = first_local_index ; ii < locals . length ; ii ++ ) { ",
  "21682": "l = locals [ ii ] ; ",
  "21683": "if ( l . getIndex ( ) > offset ) { ",
  "21684": "offset = gen_temp_locals ( mgen , offset ) ; ",
  "21685": "ii -- ; ",
  "21686": "mgen . addLocalVariable ( l . getName ( ) , l . getType ( ) , l . getIndex ( ) , l . getStart ( ) , l . getEnd ( ) ) ; ",
  "21687": "offset = new_lvg . getIndex ( ) + ( new_lvg . getType ( ) ) . getSize ( ) ; ",
  "21688": "while ( offset < max_locals ) { ",
  "21689": "} protected final StackTypes bcel_calc_stack_types ( MethodGen mg ) { ",
  "21690": "StackVer stackver = new StackVer ( ) ; ",
  "21691": "VerificationResult vr ; ",
  "21692": "vr = stackver . do_stack_ver ( mg ) ; ",
  "21693": "if ( vr != VerificationResult . VR_OK ) { ",
  "21694": "System . out . printf ( ",
  "21695": "return stackver . get_stack_types ( ) ; ",
  "21696": "} public static String methodDeclarationToString ( Method m ) { ",
  "21697": "String flags = accessFlagsToString ( m ) ; ",
  "21698": "boolean argsExist = false ; ",
  "21699": "if ( flags != null && ! flags . isEmpty ( ) ) { ",
  "21700": "for ( Type at : m . getArgumentTypes ( ) ) { ",
  "21701": "argsExist = true ; ",
  "21702": "if ( argsExist ) { ",
  "21703": "sb . setLength ( sb . length ( ) - 2 ) ; ",
  "21704": "sb . append ( \")\" ) ; ",
  "21705": "} static String accessFlagsToString ( Method m ) { ",
  "21706": "int flags = m . getAccessFlags ( ) ; ",
  "21707": "for ( int i = 0 , pow = 1 ; i <= Const . MAX_ACC_FLAG ; i ++ ) { ",
  "21708": "if ( ( flags & pow ) != 0 ) { ",
  "21709": "if ( buf . length ( ) > 0 ) { ",
  "21710": "if ( i < Const . ACCESS_NAMES_LENGTH ) { ",
  "21711": "buf . append ( Const . getAccessName ( i ) ) ; ",
  "21712": "buf . append ( String . format ( \"ACC_BIT(%x)\" , pow ) ) ; ",
  "21713": "pow <<= 1 ; ",
  "21714": "} public static String instructionListToString ( InstructionList il , ConstantPoolGen pool ) { ",
  "21715": "StringBuilder out = new StringBuilder ( ) ; ",
  "21716": "for ( Iterator < InstructionHandle > i = il . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "21717": "InstructionHandle handle = i . next ( ) ; ",
  "21718": "out . append ( handle . getInstruction ( ) . toString ( pool . getConstantPool ( ) ) + \"\\n\" ) ; ",
  "21719": "} public static String localVariablesToString ( MethodGen mg ) { ",
  "21720": "LocalVariableGen [ ] lvgs = mg . getLocalVariables ( ) ; ",
  "21721": "if ( ( lvgs != null ) && ( lvgs . length > 0 ) ) { ",
  "21722": "for ( LocalVariableGen lvg : lvgs ) { ",
  "21723": "} public static String attributeNameToString ( Attribute a ) { ",
  "21724": "ConstantPool pool = a . getConstantPool ( ) ; ",
  "21725": "int conIndex = a . getNameIndex ( ) ; ",
  "21726": "Constant c = pool . getConstant ( conIndex ) ; ",
  "21727": "String attName = ( ( ConstantUtf8 ) c ) . getBytes ( ) ; ",
  "21728": "return attName ; ",
  "21729": "} public static boolean isConstructor ( MethodGen mg ) { ",
  "21730": "if ( mg . getName ( ) . equals ( \"\" ) ) { ",
  "21731": "return mg . getName ( ) . equals ( \"<init>\" ) ; ",
  "21732": "} public static boolean isConstructor ( Method m ) { ",
  "21733": "if ( m . getName ( ) . equals ( \"\" ) ) { ",
  "21734": "return m . getName ( ) . equals ( \"<init>\" ) ; ",
  "21735": "} public static boolean inJdk ( @ ClassGetName String classname ) { ",
  "21736": "return classname . startsWith ( \"java.\" ) ",
  "21737": "|| classname . startsWith ( \"com.oracle.\" ) ",
  "21738": "|| classname . startsWith ( \"com.sun.\" ) ",
  "21739": "|| classname . startsWith ( \"javax.\" ) ",
  "21740": "|| classname . startsWith ( \"jdk.\" ) ",
  "21741": "|| classname . startsWith ( \"org.ietf.\" ) ",
  "21742": "|| classname . startsWith ( \"org.jcp.\" ) ",
  "21743": "|| classname . startsWith ( \"org.omg.\" ) ",
  "21744": "|| classname . startsWith ( \"org.w3c.\" ) ",
  "21745": "|| classname . startsWith ( \"org.xml.\" ) ",
  "21746": "|| classname . startsWith ( \"sun.\" ) ",
  "21747": "|| classname . startsWith ( \"sunw.\" ) ; ",
  "21748": "} public static boolean inJdkInternalform ( @ InternalForm String classname ) { ",
  "21749": "return classname . startsWith ( \"java/\" ) ",
  "21750": "|| classname . startsWith ( \"com/oracle/\" ) ",
  "21751": "|| classname . startsWith ( \"com/sun/\" ) ",
  "21752": "|| classname . startsWith ( \"javax/\" ) ",
  "21753": "|| classname . startsWith ( \"jdk/\" ) ",
  "21754": "|| classname . startsWith ( \"org/ietj/\" ) ",
  "21755": "|| classname . startsWith ( \"org/jcp/\" ) ",
  "21756": "|| classname . startsWith ( \"org/omg/\" ) ",
  "21757": "|| classname . startsWith ( \"org/w3c/\" ) ",
  "21758": "|| classname . startsWith ( \"org/xml/\" ) ",
  "21759": "|| classname . startsWith ( \"sun/\" ) ",
  "21760": "|| classname . startsWith ( \"sunw/\" ) ; ",
  "21761": "} public static boolean isMain ( MethodGen mg ) { ",
  "21762": "Type [ ] argTypes = mg . getArgumentTypes ( ) ; ",
  "21763": "return mg . isStatic ( ) ",
  "21764": "&& ( mg . getReturnType ( ) == Type . VOID ) ",
  "21765": "&& mg . getName ( ) . equals ( \"main\" ) ",
  "21766": "&& ( argTypes . length == 1 ) ",
  "21767": "&& argTypes [ 0 ] . equals ( stringArray ) ; ",
  "21768": "} public static void checkMgen ( MethodGen mgen ) { ",
  "21769": "if ( skipChecks ) { ",
  "21770": "mgen . toString ( ) ; ",
  "21771": "mgen . getLineNumberTable ( mgen . getConstantPool ( ) ) ; ",
  "21772": "InstructionList ilist = mgen . getInstructionList ( ) ; ",
  "21773": "if ( ilist == null || ilist . getStart ( ) == null ) { ",
  "21774": "CodeExceptionGen [ ] exceptionHandlers = mgen . getExceptionHandlers ( ) ; ",
  "21775": "for ( CodeExceptionGen gen : exceptionHandlers ) { ",
  "21776": "assert ilist . contains ( gen . getStartPC ( ) ) ",
  "21777": "+ gen ",
  "21778": "+ mgen . getClassName ( ) ",
  "21779": "+ \".\" ",
  "21780": "+ mgen . getName ( ) ; ",
  "21781": "MethodGen nmg = new MethodGen ( mgen . getMethod ( ) , mgen . getClassName ( ) , mgen . getConstantPool ( ) ) ; ",
  "21782": "nmg . getLineNumberTable ( mgen . getConstantPool ( ) ) ; ",
  "21783": "Error e = ",
  "21784": "new Error ( ",
  "21785": "t ) ; ",
  "21786": "} public static void checkMgens ( final ClassGen gen ) { ",
  "21787": "Method [ ] methods = gen . getMethods ( ) ; ",
  "21788": "Method method = methods [ i ] ; ",
  "21789": "checkMgen ( new MethodGen ( method , gen . getClassName ( ) , gen . getConstantPool ( ) ) ) ; ",
  "21790": "dumpStackTrace ( ) ; ",
  "21791": "dumpMethods ( gen ) ; ",
  "21792": "} public static void dumpStackTrace ( ) { ",
  "21793": "StackTraceElement [ ] ste = Thread . currentThread ( ) . getStackTrace ( ) ; ",
  "21794": "if ( ste . length < 3 ) { ",
  "21795": "StackTraceElement caller = ste [ 2 ] ; ",
  "21796": "caller . getClassName ( ) , ",
  "21797": "caller . getMethodName ( ) , ",
  "21798": "caller . getFileName ( ) , ",
  "21799": "caller . getLineNumber ( ) ) ; ",
  "21800": "for ( int ii = 3 ; ii < ste . length ; ii ++ ) { ",
  "21801": "System . out . printf ( \"%n\" ) ; ",
  "21802": "} static void dumpMethods ( ClassGen gen ) { ",
  "21803": "for ( Method m : gen . getMethods ( ) ) { ",
  "21804": "} public static void dump ( JavaClass jc , File dumpDir ) { ",
  "21805": "dumpDir . mkdir ( ) ; ",
  "21806": "File path = new File ( dumpDir , jc . getClassName ( ) + \".bcel\" ) ; ",
  "21807": "PrintStream p = new PrintStream ( path ) ; ",
  "21808": "String [ ] inames = jc . getInterfaceNames ( ) ; ",
  "21809": "if ( ( inames != null ) && ( inames . length > 0 ) ) { ",
  "21810": "for ( String iname : inames ) { ",
  "21811": "p . printf ( \"%s\" , iname ) ; ",
  "21812": "p . printf ( \"%n\" ) ; ",
  "21813": "p . printf ( \"%nFields%n\" ) ; ",
  "21814": "for ( Field f : jc . getFields ( ) ) { ",
  "21815": "p . printf ( \"%nMethods%n\" ) ; ",
  "21816": "for ( Method m : jc . getMethods ( ) ) { ",
  "21817": "Code code = m . getCode ( ) ; ",
  "21818": "if ( code != null ) { ",
  "21819": "ConstantPool cp = jc . getConstantPool ( ) ; ",
  "21820": "Constant [ ] constants = cp . getConstantPool ( ) ; ",
  "21821": "for ( int ii = 0 ; ii < constants . length ; ii ++ ) { ",
  "21822": "throw new Error ( ",
  "21823": "} public static void addToStart ( MethodGen mg , InstructionList newList ) { ",
  "21824": "InstructionList il = mg . getInstructionList ( ) ; ",
  "21825": "InstructionHandle oldStart = il . getStart ( ) ; ",
  "21826": "InstructionHandle newStart = il . insert ( newList ) ; ",
  "21827": "if ( oldStart . hasTargeters ( ) ) { ",
  "21828": "for ( InstructionTargeter it : oldStart . getTargeters ( ) ) { ",
  "21829": "if ( ( it instanceof LineNumberGen ) || ( it instanceof LocalVariableGen ) ) { ",
  "21830": "it . updateTarget ( oldStart , newStart ) ; ",
  "21831": "mg . setMaxStack ( ) ; ",
  "21832": "mg . setMaxLocals ( ) ; ",
  "21833": "} public static String getConstantString ( ConstantPool pool , int index ) { ",
  "21834": "Constant c = pool . getConstant ( index ) ; ",
  "21835": "if ( c instanceof ConstantUtf8 ) { ",
  "21836": "return ( ( ConstantUtf8 ) c ) . getBytes ( ) ; ",
  "21837": "} else if ( c instanceof ConstantClass ) { ",
  "21838": "ConstantClass cc = ( ConstantClass ) c ; ",
  "21839": "} public static void resetLocalsToFormals ( MethodGen mg ) { ",
  "21840": "@ SuppressWarnings ( \"nullness\" ",
  "21841": "Type @ SameLen ( { \"argTypes\" , \"mg.getArgumentTypes()\" } ) [ ] argTypes = mg . getArgumentTypes ( ) ; ",
  "21842": "String @ SameLen ( { \"argTypes\" , \"argNames\" , \"mg.getArgumentTypes()\" , \"mg.getArgumentNames()\" } ) [ ] ",
  "21843": "argNames = mg . getArgumentNames ( ) ; ",
  "21844": "mg . setMaxLocals ( 0 ) ; ",
  "21845": "mg . removeLocalVariables ( ) ; ",
  "21846": "mg . addLocalVariable ( \"this\" , new ObjectType ( mg . getClassName ( ) ) , null , null ) ; ",
  "21847": "for ( int ii = 0 ; ii < argNames . length ; ii ++ ) { ",
  "21848": "mg . addLocalVariable ( argNames [ ii ] , argTypes [ ii ] , null , null ) ; ",
  "21849": "} public static void makeMethodBodyEmpty ( MethodGen mg ) { ",
  "21850": "mg . setInstructionList ( new InstructionList ( new RETURN ( ) ) ) ; ",
  "21851": "mg . removeExceptionHandlers ( ) ; ",
  "21852": "mg . removeLineNumbers ( ) ; ",
  "21853": "} public static void removeLocalVariableTypeTables ( MethodGen mg ) { ",
  "21854": "for ( Attribute a : mg . getCodeAttributes ( ) ) { ",
  "21855": "if ( isLocalVariableTypeTable ( a , mg . getConstantPool ( ) ) ) { ",
  "21856": "mg . removeCodeAttribute ( a ) ; ",
  "21857": "} public static @ ClassGetName String typeToClassgetname ( Type type ) { ",
  "21858": "String signature = type . getSignature ( ) ; ",
  "21859": "return Signatures . fieldDescriptorToClassGetName ( signature ) ; ",
  "21860": "} public static Class < ? > typeToClass ( Type type ) { ",
  "21861": "String classname = typeToClassgetname ( type ) ; ",
  "21862": "return ReflectionPlume . classForName ( classname ) ; ",
  "21863": "} public static Type [ ] postpendToArray ( Type [ ] types , Type newType ) { ",
  "21864": "if ( types . length == Integer . MAX_VALUE ) { ",
  "21865": "Type [ ] newTypes = new Type [ types . length + 1 ] ; ",
  "21866": "System . arraycopy ( types , 0 , newTypes , 0 , types . length ) ; ",
  "21867": "newTypes [ types . length ] = newType ; ",
  "21868": "return newTypes ; ",
  "21869": "} public static Type classnameToType ( @ BinaryName String classname ) { ",
  "21870": "classname = classname . intern ( ) ; ",
  "21871": "if ( classname == \"int\" ) { ",
  "21872": "} else if ( classname == \"boolean\" ) { ",
  "21873": "return Type . BOOLEAN ; ",
  "21874": "} else if ( classname == \"byte\" ) { ",
  "21875": "return Type . BYTE ; ",
  "21876": "} else if ( classname == \"char\" ) { ",
  "21877": "return Type . CHAR ; ",
  "21878": "} else if ( classname == \"double\" ) { ",
  "21879": "} else if ( classname == \"float\" ) { ",
  "21880": "} else if ( classname == \"long\" ) { ",
  "21881": "} else if ( classname == \"short\" ) { ",
  "21882": "return Type . SHORT ; ",
  "21883": "return new ObjectType ( classname ) ; ",
  "21884": "} public void set ( @ IndexFor ( { \"loc_arr\" , \"os_arr\" } ) int offset , Frame f ) { ",
  "21885": "OperandStack os = f . getStack ( ) ; ",
  "21886": "loc_arr [ offset ] = ( LocalVariables ) ( f . getLocals ( ) . clone ( ) ) ; ",
  "21887": "os_arr [ offset ] = ( OperandStack ) ( os . clone ( ) ) ; ",
  "21888": "public static @ FieldDescriptor String binaryNameToFieldDescriptor ( @ BinaryName String classname ) { ",
  "21889": "int dims = 0 ; ",
  "21890": "String sansArray = classname ; ",
  "21891": "while ( sansArray . endsWith ( \"[]\" ) ) { ",
  "21892": "dims ++ ; ",
  "21893": "sansArray = sansArray . substring ( 0 , sansArray . length ( ) - 2 ) ; ",
  "21894": "String result = primitiveClassesJvm . get ( sansArray ) ; ",
  "21895": "result = \"L\" + sansArray + \";\" ; ",
  "21896": "for ( int i = 0 ; i < dims ; i ++ ) { ",
  "21897": "result = \"[\" + result ; ",
  "21898": "return result . replace ( '.' , '/' ) ; ",
  "21899": "} public static @ FieldDescriptor String primitiveTypeNameToFieldDescriptor ( String primitiveName ) { ",
  "21900": "String result = primitiveClassesJvm . get ( primitiveName ) ; ",
  "21901": "public static @ ClassGetName String binaryNameToClassGetName ( String bn ) { ",
  "21902": "if ( bn . endsWith ( \"[]\" ) ) { ",
  "21903": "return binaryNameToFieldDescriptor ( bn ) . replace ( '/' , '.' ) ; ",
  "21904": "return bn ; ",
  "21905": "public static @ ClassGetName String fieldDescriptorToClassGetName ( String fd ) { ",
  "21906": "if ( fd . startsWith ( \"[\" ) ) { ",
  "21907": "return fd . replace ( '/' , '.' ) ; ",
  "21908": "return fieldDescriptorToBinaryName ( fd ) ; ",
  "21909": "} public static String arglistToJvm ( String arglist ) { ",
  "21910": "if ( ! ( arglist . startsWith ( \"(\" ) && arglist . endsWith ( \")\" ) ) ) { ",
  "21911": "String result = \"(\" ; ",
  "21912": "String commaSepArgs = arglist . substring ( 1 , arglist . length ( ) - 1 ) ; ",
  "21913": "StringTokenizer argsTokenizer = new StringTokenizer ( commaSepArgs , \",\" , false ) ; ",
  "21914": "while ( argsTokenizer . hasMoreTokens ( ) ) { ",
  "21915": "@ SuppressWarnings ( \"signature\" ) ",
  "21916": "@ BinaryName String arg = argsTokenizer . nextToken ( ) . trim ( ) ; ",
  "21917": "result += binaryNameToFieldDescriptor ( arg ) ; ",
  "21918": "result += \")\" ; ",
  "21919": "public static @ BinaryName String fieldDescriptorToBinaryName ( String classname ) { ",
  "21920": "if ( classname . equals ( \"\" ) ) { ",
  "21921": "while ( classname . startsWith ( \"[\" ) ) { ",
  "21922": "classname = classname . substring ( 1 ) ; ",
  "21923": "if ( classname . startsWith ( \"L\" ) && classname . endsWith ( \";\" ) ) { ",
  "21924": "result = classname . substring ( 1 , classname . length ( ) - 1 ) ; ",
  "21925": "result = primitiveClassesFromJvm . get ( classname ) ; ",
  "21926": "result += \"[]\" ; ",
  "21927": "return result . replace ( '/' , '.' ) ; ",
  "21928": "} public static String arglistFromJvm ( String arglist ) { ",
  "21929": "@ Positive int pos = 1 ; ",
  "21930": "while ( pos < arglist . length ( ) - 1 ) { ",
  "21931": "if ( pos > 1 ) { ",
  "21932": "int nonarrayPos = pos ; ",
  "21933": "while ( arglist . charAt ( nonarrayPos ) == '[' ) { ",
  "21934": "nonarrayPos ++ ; ",
  "21935": "if ( nonarrayPos >= arglist . length ( ) ) { ",
  "21936": "char c = arglist . charAt ( nonarrayPos ) ; ",
  "21937": "if ( c == 'L' ) { ",
  "21938": "int semicolonPos = arglist . indexOf ( ';' , nonarrayPos ) ; ",
  "21939": "if ( semicolonPos == - 1 ) { ",
  "21940": "String fieldDescriptor = arglist . substring ( pos , semicolonPos + 1 ) ; ",
  "21941": "result += fieldDescriptorToBinaryName ( fieldDescriptor ) ; ",
  "21942": "pos = semicolonPos + 1 ; ",
  "21943": "String maybe = fieldDescriptorToBinaryName ( arglist . substring ( pos , nonarrayPos + 1 ) ) ; ",
  "21944": "if ( maybe == null ) { ",
  "21945": "result += maybe ; ",
  "21946": "pos = nonarrayPos + 1 ; ",
  "21947": "return result + \")\" ; ",
  "21948": "} protected final void append_inst ( InstructionList il , Instruction inst ) { ",
  "21949": "if ( inst instanceof LOOKUPSWITCH ) { ",
  "21950": "LOOKUPSWITCH ls = ( LOOKUPSWITCH ) inst ; ",
  "21951": "il . append ( new LOOKUPSWITCH ( ls . getMatchs ( ) , ls . getTargets ( ) , ls . getTarget ( ) ) ) ; ",
  "21952": "} else if ( inst instanceof TABLESWITCH ) { ",
  "21953": "TABLESWITCH ts = ( TABLESWITCH ) inst ; ",
  "21954": "il . append ( new TABLESWITCH ( ts . getMatchs ( ) , ts . getTargets ( ) , ts . getTarget ( ) ) ) ; ",
  "21955": "} else if ( inst instanceof IfInstruction ) { ",
  "21956": "IfInstruction ifi = ( IfInstruction ) inst ; ",
  "21957": "il . append ( InstructionFactory . createBranchInstruction ( inst . getOpcode ( ) , ifi . getTarget ( ) ) ) ; ",
  "21958": "il . append ( inst ) ; ",
  "21959": "} protected final void insert_at_method_start ( MethodGen mg , InstructionList new_il ) { ",
  "21960": "insert_before_handle ( mg , il . getStart ( ) , new_il , false ) ; ",
  "21961": "} protected final void insert_before_handle ( ",
  "21962": "MethodGen mg , ",
  "21963": "InstructionHandle ih , ",
  "21964": "@ Nullable InstructionList new_il , ",
  "21965": "boolean redirect_branches ) { ",
  "21966": "if ( new_il == null ) { ",
  "21967": "boolean at_start = ( ih . getPrev ( ) == null ) ; ",
  "21968": "new_il . setPositions ( ) ; ",
  "21969": "InstructionHandle new_end = new_il . getEnd ( ) ; ",
  "21970": "int new_length = new_end . getPosition ( ) + new_end . getInstruction ( ) . getLength ( ) ; ",
  "21971": "InstructionHandle new_start = il . insert ( ih , new_il ) ; ",
  "21972": "if ( redirect_branches ) { ",
  "21973": "il . redirectBranches ( ih , new_start ) ; ",
  "21974": "if ( ih . hasTargeters ( ) ) { ",
  "21975": "for ( InstructionTargeter it : ih . getTargeters ( ) ) { ",
  "21976": "if ( ( it instanceof LineNumberGen ) && redirect_branches ) { ",
  "21977": "it . updateTarget ( ih , new_start ) ; ",
  "21978": "} else if ( it instanceof LocalVariableGen ) { ",
  "21979": "LocalVariableGen lvg = ( LocalVariableGen ) it ; ",
  "21980": "if ( ( lvg . getStart ( ) == ih ) && at_start ) { ",
  "21981": "} else if ( ( it instanceof CodeExceptionGen ) && redirect_branches ) { ",
  "21982": "CodeExceptionGen exc = ( CodeExceptionGen ) it ; ",
  "21983": "if ( exc . getStartPC ( ) == ih ) exc . updateTarget ( ih , new_start ) ; ",
  "21984": "else if ( exc . getHandlerPC ( ) == ih ) exc . setHandlerPC ( new_start ) ; ",
  "21985": "update_stack_map_offset ( new_start . getPosition ( ) - ( redirect_branches ? 0 : 1 ) , new_length ) ; ",
  "21986": "modify_stack_maps_for_switches ( new_start , il ) ; ",
  "21987": "} private void print_il ( InstructionHandle start , String label ) { ",
  "21988": "if ( debug_instrument . enabled ( ) ) { ",
  "21989": "print_stack_map_table ( label ) ; ",
  "21990": "InstructionHandle tih = start ; ",
  "21991": "while ( tih != null ) { ",
  "21992": "if ( tih . hasTargeters ( ) ) { ",
  "21993": "for ( InstructionTargeter it : tih . getTargeters ( ) ) { ",
  "21994": "tih = tih . getNext ( ) ; ",
  "21995": "} protected final InstructionList build_il ( Instruction ... instructions ) { ",
  "21996": "InstructionList il = new InstructionList ( ) ; ",
  "21997": "for ( Instruction inst : instructions ) { ",
  "21998": "append_inst ( il , inst ) ; ",
  "21999": "return il ; ",
  "22000": "} protected final void delete_instructions ( ",
  "22001": "MethodGen mg , InstructionHandle start_ih , InstructionHandle end_ih ) { ",
  "22002": "InstructionHandle new_start = end_ih . getNext ( ) ; ",
  "22003": "if ( new_start == null ) { ",
  "22004": "int size_deletion = start_ih . getPosition ( ) - new_start . getPosition ( ) ; ",
  "22005": "il . redirectBranches ( start_ih , new_start ) ; ",
  "22006": "if ( start_ih . hasTargeters ( ) ) { ",
  "22007": "for ( InstructionTargeter it : start_ih . getTargeters ( ) ) { ",
  "22008": "if ( it instanceof LineNumberGen ) { ",
  "22009": "it . updateTarget ( start_ih , new_start ) ; ",
  "22010": "} else if ( it instanceof CodeExceptionGen ) { ",
  "22011": "if ( exc . getStartPC ( ) == start_ih ) exc . updateTarget ( start_ih , new_start ) ; ",
  "22012": "else if ( exc . getEndPC ( ) == start_ih ) exc . updateTarget ( start_ih , new_start ) ; ",
  "22013": "else if ( exc . getHandlerPC ( ) == start_ih ) exc . setHandlerPC ( new_start ) ; ",
  "22014": "il . delete ( start_ih , end_ih ) ; ",
  "22015": "update_stack_map_offset ( new_start . getPosition ( ) , size_deletion ) ; ",
  "22016": "} protected final StackMapType [ ] calculate_live_local_types ( MethodGen mg , int location ) { ",
  "22017": "int max_local_index = - 1 ; ",
  "22018": "StackMapType [ ] local_map_types = new StackMapType [ mg . getMaxLocals ( ) ] ; ",
  "22019": "Arrays . fill ( local_map_types , new StackMapType ( Const . ITEM_Bogus , - 1 , pool . getConstantPool ( ) ) ) ; ",
  "22020": "for ( LocalVariableGen lv : mg . getLocalVariables ( ) ) { ",
  "22021": "if ( location >= lv . getStart ( ) . getPosition ( ) ) { ",
  "22022": "if ( lv . getLiveToEnd ( ) || location < lv . getEnd ( ) . getPosition ( ) ) { ",
  "22023": "int i = lv . getIndex ( ) ; ",
  "22024": "local_map_types [ i ] = generate_StackMapType_from_Type ( lv . getType ( ) ) ; ",
  "22025": "max_local_index = Math . max ( max_local_index , i ) ; ",
  "22026": "return Arrays . copyOf ( local_map_types , max_local_index + 1 ) ; ",
  "22027": "} protected final StackMapType [ ] calculate_live_stack_types ( OperandStack stack ) { ",
  "22028": "int ss = stack . size ( ) ; ",
  "22029": "StackMapType [ ] stack_map_types = new StackMapType [ ss ] ; ",
  "22030": "for ( int ii = 0 ; ii < ss ; ii ++ ) { ",
  "22031": "stack_map_types [ ii ] = generate_StackMapType_from_Type ( stack . peek ( ss - ii - 1 ) ) ; ",
  "22032": "return stack_map_types ; ",
  "22033": "} protected final void replace_instructions ( ",
  "22034": "MethodGen mg , InstructionList il , InstructionHandle ih , @ Nullable InstructionList new_il ) { ",
  "22035": "InstructionHandle new_end ; ",
  "22036": "InstructionHandle new_start ; ",
  "22037": "int old_length = ih . getInstruction ( ) . getLength ( ) ; ",
  "22038": "InstructionHandle end = new_il . getEnd ( ) ; ",
  "22039": "int new_length = end . getPosition ( ) + end . getInstruction ( ) . getLength ( ) ; ",
  "22040": "if ( new_il . getLength ( ) == 1 ) { ",
  "22041": "ih . setInstruction ( new_il . getEnd ( ) . getInstruction ( ) ) ; ",
  "22042": "if ( old_length == new_length ) { ",
  "22043": "new_end = ih ; ",
  "22044": "update_stack_map_offset ( ih . getPosition ( ) , ( new_length - old_length ) ) ; ",
  "22045": "modify_stack_maps_for_switches ( new_end , il ) ; ",
  "22046": "new_end = new_il . getEnd ( ) ; ",
  "22047": "new_start = il . insert ( ih , new_il ) ; ",
  "22048": "new_length = new_end . getNext ( ) . getPosition ( ) - new_start . getPosition ( ) ; ",
  "22049": "it . updateTarget ( ih , new_end ) ; ",
  "22050": "else if ( exc . getEndPC ( ) == ih ) exc . updateTarget ( ih , new_end ) ; ",
  "22051": "il . delete ( ih ) ; ",
  "22052": "if ( needStackMap ) { ",
  "22053": "update_stack_map_offset ( new_start . getPosition ( ) , ( new_length - old_length ) ) ; ",
  "22054": "InstructionHandle nih = new_start ; ",
  "22055": "int target_count = 0 ; ",
  "22056": "int target_offsets [ ] = new int [ 2 ] ; ",
  "22057": "nih = nih . getNext ( ) ; ",
  "22058": "new_end = new_end . getNext ( ) ; ",
  "22059": "while ( nih != new_end ) { ",
  "22060": "if ( nih . hasTargeters ( ) ) { ",
  "22061": "for ( InstructionTargeter it : nih . getTargeters ( ) ) { ",
  "22062": "if ( it instanceof BranchInstruction ) { ",
  "22063": "target_offsets [ target_count ++ ] = nih . getPosition ( ) ; ",
  "22064": "if ( target_count != 0 ) { ",
  "22065": "int cur_loc = new_start . getPosition ( ) ; ",
  "22066": "int orig_size = stack_map_table . length ; ",
  "22067": "StackMapEntry [ ] new_stack_map_table = new StackMapEntry [ orig_size + target_count ] ; ",
  "22068": "StackTypes stack_types = bcel_calc_stack_types ( mg ) ; ",
  "22069": "OperandStack stack ; ",
  "22070": "int new_index = find_stack_map_index_before ( target_offsets [ 0 ] ) + 1 ; ",
  "22071": "StackMapType [ ] local_map_types = calculate_live_local_types ( mg , cur_loc ) ; ",
  "22072": "int local_map_index = local_map_types . length ; ",
  "22073": "int number_extra_locals = local_map_index - number_active_locals ; ",
  "22074": "assert number_extra_locals >= 0 ",
  "22075": "System . arraycopy ( stack_map_table , 0 , new_stack_map_table , 0 , new_index ) ; ",
  "22076": "boolean need_full_maps = false ; ",
  "22077": "for ( int i = 0 ; i < target_count ; i ++ ) { ",
  "22078": "stack = stack_types . get ( target_offsets [ i ] ) ; ",
  "22079": "if ( number_extra_locals == 0 && stack . size ( ) == 1 && ! need_full_maps ) { ",
  "22080": "StackMapType stack_map_type0 = generate_StackMapType_from_Type ( stack . peek ( 0 ) ) ; ",
  "22081": "StackMapType [ ] stack_map_types0 = { stack_map_type0 } ; ",
  "22082": "new_stack_map_table [ new_index + i ] = ",
  "22083": "new StackMapEntry ( ",
  "22084": "Const . SAME_LOCALS_1_STACK_ITEM_FRAME , ",
  "22085": "stack_map_types0 , ",
  "22086": "pool . getConstantPool ( ) ) ; ",
  "22087": "need_full_maps = true ; ",
  "22088": "Const . FULL_FRAME , ",
  "22089": "calculate_live_local_types ( mg , target_offsets [ i ] ) , ",
  "22090": "calculate_live_stack_types ( stack ) , ",
  "22091": "new_stack_map_table [ new_index + i ] . updateByteCodeOffset ( ",
  "22092": "target_offsets [ i ] - ( running_offset + 1 ) ) ; ",
  "22093": "running_offset = target_offsets [ i ] ; ",
  "22094": "int remainder = orig_size - new_index ; ",
  "22095": "if ( remainder > 0 ) { ",
  "22096": "l1 : ",
  "22097": "while ( nih != null ) { ",
  "22098": "stack_map_table [ new_index ] . updateByteCodeOffset ( ",
  "22099": "nih . getPosition ( ) ",
  "22100": "- target_offsets [ target_count - 1 ] ",
  "22101": "- 1 ",
  "22102": "- stack_map_table [ new_index ] . getByteCodeOffset ( ) ) ; ",
  "22103": "break l1 ; ",
  "22104": "if ( exc . getHandlerPC ( ) == nih ) { ",
  "22105": "if ( need_full_maps ) { ",
  "22106": "while ( remainder > 0 ) { ",
  "22107": "int stack_map_offset = stack_map_table [ new_index ] . getByteCodeOffset ( ) ; ",
  "22108": "running_offset = running_offset + stack_map_offset + 1 ; ",
  "22109": "stack = stack_types . get ( running_offset ) ; ",
  "22110": "new_stack_map_table [ new_index + target_count ] = ",
  "22111": "stack_map_offset , ",
  "22112": "calculate_live_local_types ( mg , running_offset ) , ",
  "22113": "remainder -- ; ",
  "22114": "System . arraycopy ( ",
  "22115": "stack_map_table , ",
  "22116": "new_index , ",
  "22117": "new_stack_map_table , ",
  "22118": "new_index + target_count , ",
  "22119": "remainder ) ; ",
  "22120": "stack_map_table = new_stack_map_table ; ",
  "22121": "debug_instrument . log ( \"%n\" ) ; ",
  "22122": "public void read ( InputStream input , Handler handler ) throws IOException { ",
  "22123": "@ SuppressWarnings ( \"resource\" ) ",
  "22124": "LittleEndianDataInputStream in = new LittleEndianDataInputStream ( input ) ; ",
  "22125": "long header = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22126": "if ( header != 0xA1B2C3D4 ) { ",
  "22127": "int majorVersionNumber = in . readUnsignedShort ( ) ; ",
  "22128": "int minorVersionNumber = in . readUnsignedShort ( ) ; ",
  "22129": "long zone = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22130": "long timestampAccuracy = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22131": "long maxCaptureLength = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22132": "long dataLinkType = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22133": "long timestampSeconds = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22134": "long timestampMicroSeconds = in . readInt ( ) & 0xFFFFFFFF ; ",
  "22135": "int savedLength = in . readInt ( ) ; ",
  "22136": "int actualLength = in . readInt ( ) ; ",
  "22137": "double timestamp = ( ( double ) timestampSeconds ) + ( ( ( double ) timestampMicroSeconds ) / 1_000_000d ) ; ",
  "22138": "byte [ ] destinationMac = new byte [ 6 ] ; ",
  "22139": "byte [ ] sourceMac = new byte [ 6 ] ; ",
  "22140": "in . readFully ( destinationMac ) ; ",
  "22141": "in . readFully ( sourceMac ) ; ",
  "22142": "byte [ ] unused = new byte [ any ? 4 : 2 ] ; ",
  "22143": "in . readFully ( unused ) ; ",
  "22144": "int l = actualLength - destinationMac . length - sourceMac . length - unused . length ; ",
  "22145": "if ( l > MAX_SIZE ) { ",
  "22146": "byte [ ] bytes = new byte [ l ] ; ",
  "22147": "in . readFully ( bytes ) ; ",
  "22148": "IpPacketReadUtils . read ( timestamp , bytes , 0 , bytes . length , handler ) ; ",
  "22149": "} private static double floorTime ( double now , double period ) { ",
  "22150": "double precision = 1000d ; ",
  "22151": "long t = ( long ) ( now * precision ) ; ",
  "22152": "long d = ( long ) ( period * precision ) ; ",
  "22153": "return ( t - ( t % d ) ) / precision ; ",
  "22154": "} public void init ( String encryptionAlgorithm , String cipherAlgorithm , int keyLength , String macAlgorithm , byte [ ] K , byte [ ] H , byte [ ] sessionId ) throws GeneralSecurityException { ",
  "22155": "MessageDigest sha = MessageDigest . getInstance ( \"SHA-1\" ) ; ",
  "22156": "sha . reset ( ) ; ",
  "22157": "sha . update ( new SshPacketBuilder ( ) . writeMpInt ( K ) . append ( H ) . writeByte ( 'B' ) . append ( sessionId ) . finish ( ) ) ; ",
  "22158": "byte [ ] iv = sha . digest ( ) ; ",
  "22159": "sha . update ( new SshPacketBuilder ( ) . writeMpInt ( K ) . append ( H ) . writeByte ( 'D' ) . append ( sessionId ) . finish ( ) ) ; ",
  "22160": "byte [ ] cipherKey = sha . digest ( ) ; ",
  "22161": "cipher = Cipher . getInstance ( encryptionAlgorithm + \"/\" + cipherAlgorithm + \"/NoPadding\" ) ; ",
  "22162": "iv = CipherUtils . expandKey ( K , H , iv , sha , cipher . getBlockSize ( ) ) ; ",
  "22163": "cipherKey = CipherUtils . expandKey ( K , H , cipherKey , sha , keyLength ) ; ",
  "22164": "iv = CipherUtils . shrinkKey ( iv , cipher . getBlockSize ( ) ) ; ",
  "22165": "cipherKey = CipherUtils . shrinkKey ( cipherKey , keyLength ) ; ",
  "22166": "cipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( cipherKey , encryptionAlgorithm ) , new IvParameterSpec ( iv ) ) ; ",
  "22167": "sha . update ( new SshPacketBuilder ( ) . writeMpInt ( K ) . append ( H ) . writeByte ( 'F' ) . append ( sessionId ) . finish ( ) ) ; ",
  "22168": "byte [ ] macKey = sha . digest ( ) ; ",
  "22169": "mac = Mac . getInstance ( macAlgorithm ) ; ",
  "22170": "macKey = CipherUtils . expandKey ( K , H , macKey , sha , mac . getMacLength ( ) ) ; ",
  "22171": "macKey = CipherUtils . shrinkKey ( macKey , mac . getMacLength ( ) ) ; ",
  "22172": "mac . init ( new SecretKeySpec ( macKey , macAlgorithm ) ) ; ",
  "22173": "firstBuffer = ByteBuffer . allocate ( cipher . getBlockSize ( ) ) ; ",
  "22174": "macBuffer = ByteBuffer . allocate ( mac . getMacLength ( ) ) ; ",
  "22175": "cipher = null ; ",
  "22176": "mac = null ; ",
  "22177": "} public static Builder builder ( ) { ",
  "22178": "return new Builder ( ) { ",
  "22179": "private final ImmutableList . Builder < HttpServiceHandler > handlers = ImmutableList . builder ( ) ; ",
  "22180": "private int threads = DEFAULT_THREADS ; ",
  "22181": "public Builder threading ( int threads ) { ",
  "22182": "this . threads = threads ; ",
  "22183": "public Builder register ( HttpServiceHandler handler ) { ",
  "22184": "handlers . add ( handler ) ; ",
  "22185": "public HttpService build ( ) { ",
  "22186": "return new HttpService ( threads , handlers . build ( ) ) ; ",
  "22187": "} public static ImmutableList < String > path ( String path ) { ",
  "22188": "int i = path . indexOf ( HttpSpecification . PARAMETERS_START ) ; ",
  "22189": "i = path . indexOf ( HttpSpecification . HASH_SEPARATOR ) ; ",
  "22190": "int j = path . indexOf ( HttpSpecification . HASH_SEPARATOR ) ; ",
  "22191": "if ( ( j >= 0 ) && ( j < i ) ) { ",
  "22192": "i = j ; ",
  "22193": "i = path . length ( ) ; ",
  "22194": "String p = path . substring ( 0 , i ) ; ",
  "22195": "if ( p . charAt ( 0 ) != HttpSpecification . PATH_SEPARATOR ) { ",
  "22196": "String s = p . substring ( 1 ) ; ",
  "22197": "Deque < String > l = new LinkedList < > ( ) ; ",
  "22198": "for ( String k : Splitter . on ( HttpSpecification . PATH_SEPARATOR ) . splitToList ( s ) ) { ",
  "22199": "if ( k . isEmpty ( ) ) { ",
  "22200": "if ( k . equals ( \".\" ) ) { ",
  "22201": "if ( k . equals ( \"..\" ) ) { ",
  "22202": "if ( ! l . isEmpty ( ) ) { ",
  "22203": "l . removeLast ( ) ; ",
  "22204": "l . add ( k ) ; ",
  "22205": "return ImmutableList . copyOf ( l ) ; ",
  "22206": "Thread t = new ClassThreadFactory ( InternalQueue . class ) . newThread ( new Runnable ( ) { ",
  "22207": "Thread . sleep ( ( long ) ( WAIT_ON_CLOSE * 1000d ) ) ; ",
  "22208": "selector . close ( ) ; ",
  "22209": "selector . wakeup ( ) ; ",
  "22210": "t . setDaemon ( true ) ; ",
  "22211": "public void received ( ByteBuffer buffer ) { ",
  "22212": "if ( ended ) { ",
  "22213": "if ( ( countRead + buffer . remaining ( ) ) > contentLength ) { ",
  "22214": "ByteBuffer b = buffer . duplicate ( ) ; ",
  "22215": "int l = ( int ) ( contentLength - countRead ) ; ",
  "22216": "b . limit ( b . position ( ) + l ) ; ",
  "22217": "buffer . position ( buffer . position ( ) + l ) ; ",
  "22218": "buffer = b ; ",
  "22219": "countRead += buffer . remaining ( ) ; ",
  "22220": "wrappee . received ( buffer ) ; ",
  "22221": "if ( countRead == contentLength ) { ",
  "22222": "ended = true ; ",
  "22223": "wrappee . ended ( ) ; ",
  "22224": "} public Queue register ( NinioPriority priority ) { ",
  "22225": "i = index ; ",
  "22226": "if ( index == THREADING ) { ",
  "22227": "return internalQueues [ priority . ordinal ( ) ] [ i ] . open ( ) ; ",
  "22228": "} private static int doReadLength ( ByteBuffer buffer ) throws IOException { ",
  "22229": "int lengthbyte = buffer . get ( ) & 0xFF ; ",
  "22230": "if ( ( lengthbyte & BerConstants . ASN_BIT8 ) == BerConstants . ASN_BIT8 ) { ",
  "22231": "lengthbyte &= ~ BerConstants . ASN_BIT8 ; ",
  "22232": "if ( lengthbyte == 0 ) { ",
  "22233": "if ( lengthbyte > 4 ) { ",
  "22234": "int length = 0 ; ",
  "22235": "for ( int i = 0 ; i < lengthbyte ; i ++ ) { ",
  "22236": "length <<= 8 ; ",
  "22237": "length |= buffer . get ( ) & 0xFF ; ",
  "22238": "if ( length < 0 ) { ",
  "22239": "return lengthbyte ; ",
  "22240": "} private static long doReadLong ( ByteBuffer buffer , int length ) throws IOException { ",
  "22241": "int b = buffer . get ( ) & 0xFF ; ",
  "22242": "if ( ( i == 0 ) && ( ( b & 0x80 ) == 0x80 ) ) { ",
  "22243": "value = 0xFFFFFFFFL ; ",
  "22244": "value <<= 8 ; ",
  "22245": "value |= b ; ",
  "22246": "while ( ! chunkHeaderRead ) { ",
  "22247": "String line = lineReader . handle ( buffer ) ; ",
  "22248": "chunkLength = Integer . parseInt ( line , 16 ) ; ",
  "22249": "chunkHeaderRead = true ; ",
  "22250": "chunkCountRead = 0 ; ",
  "22251": "if ( chunkHeaderRead ) { ",
  "22252": "if ( chunkCountRead < chunkLength ) { ",
  "22253": "if ( ! buffer . hasRemaining ( ) ) { ",
  "22254": "long toRead = chunkLength - chunkCountRead ; ",
  "22255": "ByteBuffer d = buffer . duplicate ( ) ; ",
  "22256": "if ( toRead >= 0 ) { ",
  "22257": "if ( d . remaining ( ) > toRead ) { ",
  "22258": "d . limit ( ( int ) ( buffer . position ( ) + toRead ) ) ; ",
  "22259": "chunkCountRead += d . remaining ( ) ; ",
  "22260": "buffer . position ( ( int ) ( buffer . position ( ) + d . remaining ( ) ) ) ; ",
  "22261": "wrappee . received ( d ) ; ",
  "22262": "if ( chunkCountRead == chunkLength ) { ",
  "22263": "while ( chunkHeaderRead ) { ",
  "22264": "if ( ! line . isEmpty ( ) ) { ",
  "22265": "chunkHeaderRead = false ; ",
  "22266": "if ( chunkLength == 0 ) { ",
  "22267": "} public static Version3PacketBuilder getBulk ( AuthRemoteEngine authEngine , int requestId , Oid oid , int bulkLength ) { ",
  "22268": "return new Version3PacketBuilder ( authEngine , requestId , BerConstants . GETBULK , bulkLength , oid ) ; ",
  "22269": "} public Extractor extract ( ) throws IOException { ",
  "22270": "int [ ] iFrom = new int [ from . length ] ; ",
  "22271": "int [ ] iTo = new int [ to . length ] ; ",
  "22272": "int k = on . read ( ) ; ",
  "22273": "if ( k < 0 ) { ",
  "22274": "char c = ( char ) k ; ",
  "22275": "for ( StringBuilder b : accumulators ) { ",
  "22276": "if ( ignoreWhitespaces && Character . isWhitespace ( c ) ) { ",
  "22277": "for ( int u = 0 ; u < iFrom . length ; u ++ ) { ",
  "22278": "if ( c == from [ u ] . charAt ( iFrom [ u ] ) ) { ",
  "22279": "iFrom [ u ] ++ ; ",
  "22280": "if ( iFrom [ u ] == from [ u ] . length ( ) ) { ",
  "22281": "return new Extractor ( from [ u ] , Lists . newLinkedList ( accumulators ) ) . on ( on ) . to ( to ) . ignoreWhitespaces ( ignoreWhitespaces ) ; ",
  "22282": "} else if ( iFrom [ u ] > 0 ) { ",
  "22283": "iFrom [ u ] = 0 ; ",
  "22284": "for ( int u = 0 ; u < iTo . length ; u ++ ) { ",
  "22285": "if ( c == to [ u ] . charAt ( iTo [ u ] ) ) { ",
  "22286": "iTo [ u ] ++ ; ",
  "22287": "if ( iTo [ u ] == to [ u ] . length ( ) ) { ",
  "22288": "if ( accumulator != null ) { ",
  "22289": "accumulator . delete ( accumulator . length ( ) - to [ u ] . length ( ) , accumulator . length ( ) ) ; ",
  "22290": "} else if ( iTo [ u ] > 0 ) { ",
  "22291": "iTo [ u ] = 0 ; ",
  "22292": "} public static byte [ ] expandKey ( byte [ ] K , byte [ ] H , byte [ ] key , MessageDigest hash , int requiredLength ) { ",
  "22293": "byte [ ] result = key ; ",
  "22294": "while ( result . length < requiredLength ) { ",
  "22295": "SshPacketBuilder buf = new SshPacketBuilder ( ) ; ",
  "22296": "buf . writeMpInt ( K ) ; ",
  "22297": "buf . append ( H ) ; ",
  "22298": "buf . append ( result ) ; ",
  "22299": "hash . update ( buf . finish ( ) ) ; ",
  "22300": "byte [ ] d = hash . digest ( ) ; ",
  "22301": "byte [ ] tmp = new byte [ result . length + d . length ] ; ",
  "22302": "System . arraycopy ( result , 0 , tmp , 0 , result . length ) ; ",
  "22303": "System . arraycopy ( d , 0 , tmp , result . length , d . length ) ; ",
  "22304": "result = tmp ; ",
  "22305": "} public static synchronized Config load ( Dependencies dependencies , String resource ) { ",
  "22306": "return load ( dependencies , resource , new Override ( ) ) ; ",
  "22307": "} public PrivateKey getPrivateKey ( String alias , String password ) { ",
  "22308": "return ( PrivateKey ) ksKeys . getKey ( alias , password . toCharArray ( ) ) ; ",
  "22309": "} private static final int find ( boolean skipBlocks , String s , char toFind , int from ) { ",
  "22310": "int open = 0 ; ",
  "22311": "boolean escaping = false ; ",
  "22312": "for ( int i = from ; i < s . length ( ) ; i ++ ) { ",
  "22313": "if ( escaping ) { ",
  "22314": "escaping = false ; ",
  "22315": "escaping = true ; ",
  "22316": "if ( ( open == 0 ) && ( c == toFind ) ) { ",
  "22317": "} else if ( skipBlocks && ( c == '{' ) ) { ",
  "22318": "open ++ ; ",
  "22319": "} else if ( skipBlocks && ( c == '}' ) ) { ",
  "22320": "open -- ; ",
  "22321": "public void received ( ByteBuffer deflated ) { ",
  "22322": "if ( deflated . remaining ( ) >= FOOTER_LENGTH ) { ",
  "22323": "for ( ByteBuffer b : previewFooter ) { ",
  "22324": "if ( ! read ( b ) ) { ",
  "22325": "previewFooter . clear ( ) ; ",
  "22326": "currentPreviewFooterLength = 0 ; ",
  "22327": "ByteBuffer deflatedKeepingFooter = deflated . duplicate ( ) ; ",
  "22328": "deflatedKeepingFooter . limit ( deflatedKeepingFooter . limit ( ) - FOOTER_LENGTH ) ; ",
  "22329": "deflated . position ( deflated . position ( ) + deflatedKeepingFooter . remaining ( ) ) ; ",
  "22330": "if ( ! read ( deflatedKeepingFooter ) ) { ",
  "22331": "currentPreviewFooterLength += deflated . remaining ( ) ; ",
  "22332": "previewFooter . addLast ( deflated . duplicate ( ) ) ; ",
  "22333": "deflated . position ( deflated . position ( ) + deflated . remaining ( ) ) ; ",
  "22334": "int toFlush = FOOTER_LENGTH - currentPreviewFooterLength ; ",
  "22335": "while ( toFlush > 0 ) { ",
  "22336": "ByteBuffer b = previewFooter . getFirst ( ) ; ",
  "22337": "ByteBuffer d = b . duplicate ( ) ; ",
  "22338": "d . limit ( Math . min ( d . limit ( ) , toFlush ) ) ; ",
  "22339": "b . position ( b . position ( ) + d . remaining ( ) ) ; ",
  "22340": "toFlush -= d . remaining ( ) ; ",
  "22341": "if ( ! read ( d ) ) { ",
  "22342": "if ( ! b . hasRemaining ( ) ) { ",
  "22343": "previewFooter . removeFirst ( ) ; ",
  "22344": "} public static < T > POrthonormalized3D < T > orthonormalize3D ( ",
  "22345": "final PVector3D < T > v0 , ",
  "22346": "final PVector3D < T > v1 , ",
  "22347": "final PVector3D < T > v2 ) ",
  "22348": "final PVector3D < T > rv0 = PVectors3D . normalize ( v0 ) ; ",
  "22349": "final PVector3D < T > rv1 ; ",
  "22350": "final PVector3D < T > rv2 ; ",
  "22351": "final double v0_dot_v1 = PVectors3D . dotProduct ( rv0 , v1 ) ; ",
  "22352": "final PVector3D < T > v0_s = PVectors3D . scale ( rv0 , v0_dot_v1 ) ; ",
  "22353": "rv1 = PVectors3D . normalize ( PVectors3D . subtract ( v1 , v0_s ) ) ; ",
  "22354": "final double v1_dot_v2 = PVectors3D . dotProduct ( rv1 , v2 ) ; ",
  "22355": "final double v0_dot_v2 = PVectors3D . dotProduct ( rv0 , v2 ) ; ",
  "22356": "final PVector3D < T > v0_s = PVectors3D . scale ( rv0 , v0_dot_v2 ) ; ",
  "22357": "final PVector3D < T > v2_s = PVectors3D . scale ( rv1 , v1_dot_v2 ) ; ",
  "22358": "final PVector3D < T > vs = PVectors3D . add ( v0_s , v2_s ) ; ",
  "22359": "rv2 = PVectors3D . normalize ( PVectors3D . subtract ( v2 , vs ) ) ; ",
  "22360": "return POrthonormalized3D . of ( rv0 , rv1 , rv2 ) ; ",
  "22361": "} public static < T > POrthonormalized4D < T > orthonormalize4D ( ",
  "22362": "final PVector4D < T > v0 , ",
  "22363": "final PVector4D < T > v1 , ",
  "22364": "final PVector4D < T > v2 ) ",
  "22365": "final PVector4D < T > rv0 = PVectors4D . normalize ( v0 ) ; ",
  "22366": "final PVector4D < T > rv1 ; ",
  "22367": "final PVector4D < T > rv2 ; ",
  "22368": "final double v0_dot_v1 = PVectors4D . dotProduct ( rv0 , v1 ) ; ",
  "22369": "final PVector4D < T > v0_s = PVectors4D . scale ( rv0 , v0_dot_v1 ) ; ",
  "22370": "rv1 = PVectors4D . normalize ( PVectors4D . subtract ( v1 , v0_s ) ) ; ",
  "22371": "final double v1_dot_v2 = PVectors4D . dotProduct ( rv1 , v2 ) ; ",
  "22372": "final double v0_dot_v2 = PVectors4D . dotProduct ( rv0 , v2 ) ; ",
  "22373": "final PVector4D < T > v0_s = PVectors4D . scale ( rv0 , v0_dot_v2 ) ; ",
  "22374": "final PVector4D < T > v2_s = PVectors4D . scale ( rv1 , v1_dot_v2 ) ; ",
  "22375": "final PVector4D < T > vs = PVectors4D . add ( v0_s , v2_s ) ; ",
  "22376": "rv2 = PVectors4D . normalize ( PVectors4D . subtract ( v2 , vs ) ) ; ",
  "22377": "return POrthonormalized4D . of ( rv0 , rv1 , rv2 ) ; ",
  "22378": "} public static < T > PVectorByteBufferedIntegral2s16 < T > createWithBase ( ",
  "22379": "final ByteBuffer b , ",
  "22380": "final MutableLongType base , ",
  "22381": "final int offset ) ",
  "22382": "return new PVectorByteBufferedIntegral2s16 < > ( b , base , offset ) ; ",
  "22383": "} public static < T > Generator < PVector4F < T > > create ( ) ",
  "22384": "return new PVector4FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22385": "GeneratorConstants . BOUND_LARGE_FLOAT_LOWER , ",
  "22386": "GeneratorConstants . BOUND_LARGE_FLOAT_UPPER ",
  "22387": "} public static < T > Generator < PVector4F < T > > createSmall ( ) ",
  "22388": "GeneratorConstants . BOUND_SMALL_FLOAT_LOWER , ",
  "22389": "GeneratorConstants . BOUND_SMALL_FLOAT_UPPER ",
  "22390": "} public static < T > Generator < PVector4F < T > > createNormal ( ) ",
  "22391": "GeneratorConstants . BOUND_NORMAL_FLOAT_LOWER , ",
  "22392": "GeneratorConstants . BOUND_NORMAL_FLOAT_UPPER ",
  "22393": "} public static < T > PVectorByteBufferedIntegral2s64 < T > createWithBase ( ",
  "22394": "return new PVectorByteBufferedIntegral2s64 < > ( b , base , offset ) ; ",
  "22395": "} public static double determinant3x3 ( ",
  "22396": "final double r0c0 , ",
  "22397": "final double r0c1 , ",
  "22398": "final double r0c2 , ",
  "22399": "final double r1c0 , ",
  "22400": "final double r1c1 , ",
  "22401": "final double r1c2 , ",
  "22402": "final double r2c0 , ",
  "22403": "final double r2c1 , ",
  "22404": "final double r2c2 ) ",
  "22405": "sum += r0c0 * ( ( r1c1 * r2c2 ) - ( r1c2 * r2c1 ) ) ; ",
  "22406": "sum -= r0c1 * ( ( r1c0 * r2c2 ) - ( r1c2 * r2c0 ) ) ; ",
  "22407": "sum += r0c2 * ( ( r1c0 * r2c1 ) - ( r1c1 * r2c0 ) ) ; ",
  "22408": "} public static double determinant4x4 ( ",
  "22409": "final double r0c3 , ",
  "22410": "final double r1c3 , ",
  "22411": "final double r2c2 , ",
  "22412": "final double r2c3 , ",
  "22413": "final double r3c0 , ",
  "22414": "final double r3c1 , ",
  "22415": "final double r3c2 , ",
  "22416": "final double r3c3 ) ",
  "22417": "sum += r0c0 * r1c1 * r2c2 * r3c3 ; ",
  "22418": "sum -= r0c0 * r1c1 * r2c3 * r3c2 ; ",
  "22419": "sum += r0c0 * r1c2 * r2c3 * r3c1 ; ",
  "22420": "sum -= r0c0 * r1c2 * r2c1 * r3c3 ; ",
  "22421": "sum += r0c0 * r1c3 * r2c1 * r3c2 ; ",
  "22422": "sum -= r0c0 * r1c3 * r2c2 * r3c1 ; ",
  "22423": "sum -= r0c1 * r1c2 * r2c3 * r3c0 ; ",
  "22424": "sum += r0c1 * r1c2 * r2c0 * r3c3 ; ",
  "22425": "sum -= r0c1 * r1c3 * r2c0 * r3c2 ; ",
  "22426": "sum += r0c1 * r1c3 * r2c2 * r3c0 ; ",
  "22427": "sum -= r0c1 * r1c0 * r2c2 * r3c3 ; ",
  "22428": "sum += r0c1 * r1c0 * r2c3 * r3c2 ; ",
  "22429": "sum += r0c2 * r1c3 * r2c0 * r3c1 ; ",
  "22430": "sum -= r0c2 * r1c3 * r2c1 * r3c0 ; ",
  "22431": "sum += r0c2 * r1c0 * r2c1 * r3c3 ; ",
  "22432": "sum -= r0c2 * r1c0 * r2c3 * r3c1 ; ",
  "22433": "sum += r0c2 * r1c1 * r2c3 * r3c0 ; ",
  "22434": "sum -= r0c2 * r1c1 * r2c0 * r3c3 ; ",
  "22435": "sum -= r0c3 * r1c0 * r2c1 * r3c2 ; ",
  "22436": "sum += r0c3 * r1c0 * r2c2 * r3c1 ; ",
  "22437": "sum -= r0c3 * r1c1 * r2c2 * r3c0 ; ",
  "22438": "sum += r0c3 * r1c1 * r2c0 * r3c2 ; ",
  "22439": "sum -= r0c3 * r1c2 * r2c0 * r3c1 ; ",
  "22440": "sum += r0c3 * r1c2 * r2c1 * r3c0 ; ",
  "22441": "} public static VectorByteBufferedFloating3s32 createWithBase ( ",
  "22442": "return new VectorByteBufferedFloating3s32 ( b , base , offset ) ; ",
  "22443": "} public static Generator < Vector4F > create ( ) ",
  "22444": "return new Vector4FGenerator ( PrimitiveGenerators . doubles ( ",
  "22445": "} public static Generator < Vector4F > createSmall ( ) ",
  "22446": "} public static Generator < Vector4F > createNormal ( ) ",
  "22447": "} public static MatrixByteBuffered2x2s16 createWithBase ( ",
  "22448": "return new MatrixByteBuffered2x2s16 ( b , base , offset ) ; ",
  "22449": "} public static VectorByteBufferedFloating2s64 createWithBase ( ",
  "22450": "return new VectorByteBufferedFloating2s64 ( b , base , offset ) ; ",
  "22451": "} public static VectorByteBufferedIntegral3s32 createWithBase ( ",
  "22452": "return new VectorByteBufferedIntegral3s32 ( b , base , offset ) ; ",
  "22453": "} public static VectorByteBufferedIntegral2s8 createWithBase ( ",
  "22454": "return new VectorByteBufferedIntegral2s8 ( b , base , offset ) ; ",
  "22455": "} public R findBy ( ClassFileScanConfiguration scanConfig , SearchCriteria criteria ) { ",
  "22456": "scanConfig = scanConfig . createCopy ( ) ; ",
  "22457": "criteria = criteria . createCopy ( ) ; ",
  "22458": "C context = createContext ( scanConfig , criteria ) ; ",
  "22459": "criteria . init ( this . classHelper , context . pathMemoryClassLoader , this . memberFinder , this . pathHelper ) ; ",
  "22460": "scanConfig . init ( ) ; ",
  "22461": "fileSystemHelper . scan ( ",
  "22462": "scanConfig . toScanConfiguration ( context , this ) ",
  "22463": "Collection < String > skippedClassesNames = context . getSkippedClassNames ( ) ; ",
  "22464": "if ( ! skippedClassesNames . isEmpty ( ) ) { ",
  "22465": "return resultSupplier . apply ( context ) ; ",
  "22466": "} public static < T > PVectorByteBufferedFloating3s32 < T > createWithBase ( ",
  "22467": "return new PVectorByteBufferedFloating3s32 < > ( b , base , offset ) ; ",
  "22468": "} public static VectorByteBufferedIntegral3s64 createWithBase ( ",
  "22469": "return new VectorByteBufferedIntegral3s64 ( b , base , offset ) ; ",
  "22470": "} public static VectorByteBufferedFloating2s16 createWithBase ( ",
  "22471": "return new VectorByteBufferedFloating2s16 ( b , base , offset ) ; ",
  "22472": "} public static VectorByteBufferedIntegral3s8 createWithBase ( ",
  "22473": "return new VectorByteBufferedIntegral3s8 ( b , base , offset ) ; ",
  "22474": "} public SearchResult < K , I > findBy ( PathSearchCriteria criteria ) { ",
  "22475": "C context = createContext ( ",
  "22476": "ClassFileScanConfiguration . forPaths ( criteria . getPaths ( ) ) . maxParallelTasksForUnit ( ",
  "22477": "criteria . maxParallelTasksForUnit ",
  "22478": "criteria ",
  "22479": "scan ( context ) ; ",
  "22480": "} public static Generator < Vector2D > create ( ) ",
  "22481": "return new Vector2DGenerator ( PrimitiveGenerators . doubles ( ",
  "22482": "GeneratorConstants . BOUND_LARGE_DOUBLE_LOWER , ",
  "22483": "GeneratorConstants . BOUND_LARGE_DOUBLE_UPPER ",
  "22484": "} public static Generator < Vector2D > createSmall ( ) ",
  "22485": "GeneratorConstants . BOUND_SMALL_DOUBLE_LOWER , ",
  "22486": "GeneratorConstants . BOUND_SMALL_DOUBLE_UPPER ",
  "22487": "} public static Generator < Vector2D > createNormal ( ) ",
  "22488": "GeneratorConstants . BOUND_NORMAL_DOUBLE_LOWER , ",
  "22489": "GeneratorConstants . BOUND_NORMAL_DOUBLE_UPPER ",
  "22490": "} public static MatrixByteBuffered4x4s16 createWithBase ( ",
  "22491": "return new MatrixByteBuffered4x4s16 ( b , base , offset ) ; ",
  "22492": "} public static < A , B > Generator < PMatrix2x2F < A , B > > create ( ) ",
  "22493": "return new PMatrix2x2FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22494": "} public static < A , B > Generator < PMatrix2x2F < A , B > > createNormal ( ) ",
  "22495": "} public static Generator < Matrix4x4D > create ( ) ",
  "22496": "return new Matrix4x4DGenerator ( PrimitiveGenerators . doubles ( ",
  "22497": "} public static Generator < Matrix4x4D > createNormal ( ) ",
  "22498": "} public static Generator < Matrix4x4D > createOrthogonal ( ) ",
  "22499": "final SecureRandom rng = new SecureRandom ( ) ; ",
  "22500": "final double r0c0 = 1.0 ; ",
  "22501": "final double r0c1 = 0.0 ; ",
  "22502": "final double r0c2 = 0.0 ; ",
  "22503": "final double r0c3 = rng . nextDouble ( ) ; ",
  "22504": "final double r1c0 = 0.0 ; ",
  "22505": "final double r1c1 = 1.0 ; ",
  "22506": "final double r1c2 = 0.0 ; ",
  "22507": "final double r1c3 = rng . nextDouble ( ) ; ",
  "22508": "final double r2c0 = 0.0 ; ",
  "22509": "final double r2c1 = 0.0 ; ",
  "22510": "final double r2c2 = 1.0 ; ",
  "22511": "final double r2c3 = rng . nextDouble ( ) ; ",
  "22512": "final double r3c0 = 0.0 ; ",
  "22513": "final double r3c1 = 0.0 ; ",
  "22514": "final double r3c2 = 0.0 ; ",
  "22515": "final double r3c3 = 1.0 ; ",
  "22516": "return Matrix4x4D . of ( ",
  "22517": "r0c0 , r0c1 , r0c2 , r0c3 , ",
  "22518": "r1c0 , r1c1 , r1c2 , r1c3 , ",
  "22519": "r2c0 , r2c1 , r2c2 , r2c3 , ",
  "22520": "r3c0 , r3c1 , r3c2 , r3c3 ) ; ",
  "22521": "} public static long dotProduct3 ( ",
  "22522": "final long x0 , ",
  "22523": "final long y0 , ",
  "22524": "final long z0 , ",
  "22525": "final long x1 , ",
  "22526": "final long y1 , ",
  "22527": "final long z1 ) ",
  "22528": "final long x = x0 * x1 ; ",
  "22529": "final long y = y0 * y1 ; ",
  "22530": "final long z = z0 * z1 ; ",
  "22531": "return x + y + z ; ",
  "22532": "} public static int dotProduct2 ( ",
  "22533": "final int x0 , ",
  "22534": "final int y0 , ",
  "22535": "final int x1 , ",
  "22536": "final int y1 ) ",
  "22537": "final int x = x0 * x1 ; ",
  "22538": "final int y = y0 * y1 ; ",
  "22539": "return x + y ; ",
  "22540": "} public static MatrixByteBuffered4x4s32 createWithBase ( ",
  "22541": "return new MatrixByteBuffered4x4s32 ( b , base , offset ) ; ",
  "22542": "} public static double dotProduct4 ( ",
  "22543": "final double x0 , ",
  "22544": "final double y0 , ",
  "22545": "final double z0 , ",
  "22546": "final double w0 , ",
  "22547": "final double x1 , ",
  "22548": "final double y1 , ",
  "22549": "final double z1 , ",
  "22550": "final double w1 ) ",
  "22551": "final double x = x0 * x1 ; ",
  "22552": "final double y = y0 * y1 ; ",
  "22553": "final double z = z0 * z1 ; ",
  "22554": "final double w = w0 * w1 ; ",
  "22555": "return x + y + z + w ; ",
  "22556": "} public static VectorByteBufferedIntegral4s64 createWithBase ( ",
  "22557": "return new VectorByteBufferedIntegral4s64 ( b , base , offset ) ; ",
  "22558": "} public static VectorByteBufferedFloating3s64 createWithBase ( ",
  "22559": "return new VectorByteBufferedFloating3s64 ( b , base , offset ) ; ",
  "22560": "} public static < T > PVectorByteBufferedIntegral3s8 < T > createWithBase ( ",
  "22561": "return new PVectorByteBufferedIntegral3s8 < > ( b , base , offset ) ; ",
  "22562": "} public static < T > PVectorByteBufferedFloating2s16 < T > createWithBase ( ",
  "22563": "return new PVectorByteBufferedFloating2s16 < > ( b , base , offset ) ; ",
  "22564": "} public static < T > PVectorByteBufferedFloating4s64 < T > createWithBase ( ",
  "22565": "return new PVectorByteBufferedFloating4s64 < > ( b , base , offset ) ; ",
  "22566": "} public static < A , B > PMatrixByteBuffered3x3s16 < A , B > createWithBase ( ",
  "22567": "return new PMatrixByteBuffered3x3s16 < > ( b , base , offset ) ; ",
  "22568": "} public static VectorByteBufferedFloating3s16 createWithBase ( ",
  "22569": "return new VectorByteBufferedFloating3s16 ( b , base , offset ) ; ",
  "22570": "} public static VectorByteBufferedIntegral4s8 createWithBase ( ",
  "22571": "return new VectorByteBufferedIntegral4s8 ( b , base , offset ) ; ",
  "22572": "} public static Generator < Vector3F > create ( ) ",
  "22573": "return new Vector3FGenerator ( PrimitiveGenerators . doubles ( ",
  "22574": "} public static Generator < Vector3F > createSmall ( ) ",
  "22575": "} public static Generator < Vector3F > createNormal ( ) ",
  "22576": "} public static VectorByteBufferedIntegral2s16 createWithBase ( ",
  "22577": "return new VectorByteBufferedIntegral2s16 ( b , base , offset ) ; ",
  "22578": "} public static < T > Generator < PVector3F < T > > create ( ) ",
  "22579": "return new PVector3FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22580": "} public static < T > Generator < PVector3F < T > > createSmall ( ) ",
  "22581": "} public static < T > Generator < PVector3F < T > > createNormal ( ) ",
  "22582": "} public static MatrixByteBuffered3x3s64 createWithBase ( ",
  "22583": "return new MatrixByteBuffered3x3s64 ( b , base , offset ) ; ",
  "22584": "} public static < T > PVectorByteBufferedIntegral3s64 < T > createWithBase ( ",
  "22585": "return new PVectorByteBufferedIntegral3s64 < > ( b , base , offset ) ; ",
  "22586": "} public static < T > PVectorByteBufferedFloating4s32 < T > createWithBase ( ",
  "22587": "return new PVectorByteBufferedFloating4s32 < > ( b , base , offset ) ; ",
  "22588": "} public static Generator < Vector4D > create ( ) ",
  "22589": "return new Vector4DGenerator ( PrimitiveGenerators . doubles ( ",
  "22590": "} public static Generator < Vector4D > createSmall ( ) ",
  "22591": "} public static Generator < Vector4D > createNormal ( ) ",
  "22592": "} public static < T > PVectorByteBufferedFloating3s16 < T > createWithBase ( ",
  "22593": "return new PVectorByteBufferedFloating3s16 < > ( b , base , offset ) ; ",
  "22594": "} public static < A , B > Generator < PMatrix3x3D < A , B > > create ( ) ",
  "22595": "return new PMatrix3x3DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22596": "} public static < A , B > Generator < PMatrix3x3D < A , B > > createNormal ( ) ",
  "22597": "} public static < T > Generator < PVector2F < T > > create ( ) ",
  "22598": "return new PVector2FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22599": "} public static < T > Generator < PVector2F < T > > createSmall ( ) ",
  "22600": "} public static < T > Generator < PVector2F < T > > createNormal ( ) ",
  "22601": "} public static < A , B > Generator < PMatrix2x2D < A , B > > create ( ) ",
  "22602": "return new PMatrix2x2DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22603": "} public static < A , B > Generator < PMatrix2x2D < A , B > > createNormal ( ) ",
  "22604": "} public static Generator < Vector3D > create ( ) ",
  "22605": "return new Vector3DGenerator ( PrimitiveGenerators . doubles ( ",
  "22606": "} public static Generator < Vector3D > createSmall ( ) ",
  "22607": "} public static Generator < Vector3D > createNormal ( ) ",
  "22608": "} public static < T > Generator < PVector4D < T > > create ( ) ",
  "22609": "return new PVector4DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22610": "} public static < T > Generator < PVector4D < T > > createSmall ( ) ",
  "22611": "} public static < T > Generator < PVector4D < T > > createNormal ( ) ",
  "22612": "} public static < T > PVectorByteBufferedIntegral4s64 < T > createWithBase ( ",
  "22613": "return new PVectorByteBufferedIntegral4s64 < > ( b , base , offset ) ; ",
  "22614": "} public static < T > PVectorByteBufferedIntegral2s32 < T > createWithBase ( ",
  "22615": "return new PVectorByteBufferedIntegral2s32 < > ( b , base , offset ) ; ",
  "22616": "} public static MatrixByteBuffered2x2s64 createWithBase ( ",
  "22617": "return new MatrixByteBuffered2x2s64 ( b , base , offset ) ; ",
  "22618": "} public static VectorByteBufferedIntegral2s32 createWithBase ( ",
  "22619": "return new VectorByteBufferedIntegral2s32 ( b , base , offset ) ; ",
  "22620": "} public static < T > PVectorByteBufferedFloating3s64 < T > createWithBase ( ",
  "22621": "return new PVectorByteBufferedFloating3s64 < > ( b , base , offset ) ; ",
  "22622": "} public static < T > Generator < PVector2D < T > > createSmall ( ) ",
  "22623": "return new PVector2DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22624": "} public static < T > Generator < PVector2D < T > > create ( ) ",
  "22625": "} public static < T > Generator < PVector2D < T > > createNormal ( ) ",
  "22626": "} public static < A , B > Generator < PMatrix4x4F < A , B > > create ( ) ",
  "22627": "return new PMatrix4x4FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22628": "} public static < A , B > Generator < PMatrix4x4F < A , B > > createNormal ( ) ",
  "22629": "} public static < T > PVectorByteBufferedIntegral4s32 < T > createWithBase ( ",
  "22630": "return new PVectorByteBufferedIntegral4s32 < > ( b , base , offset ) ; ",
  "22631": "} public static < T > PVectorByteBufferedIntegral4s16 < T > createWithBase ( ",
  "22632": "return new PVectorByteBufferedIntegral4s16 < > ( b , base , offset ) ; ",
  "22633": "} static double determinant4x4 ( ",
  "22634": "return Determinants . determinant4x4 ( ",
  "22635": "} public static VectorByteBufferedIntegral2s64 createWithBase ( ",
  "22636": "return new VectorByteBufferedIntegral2s64 ( b , base , offset ) ; ",
  "22637": "} public static MatrixByteBuffered2x2s32 createWithBase ( ",
  "22638": "return new MatrixByteBuffered2x2s32 ( b , base , offset ) ; ",
  "22639": "} public static < T > PVectorByteBufferedFloating2s64 < T > createWithBase ( ",
  "22640": "return new PVectorByteBufferedFloating2s64 < > ( b , base , offset ) ; ",
  "22641": "} public static Generator < Matrix3x3F > create ( ) ",
  "22642": "return new Matrix3x3FGenerator ( PrimitiveGenerators . doubles ( ",
  "22643": "} public static Generator < Matrix3x3F > createNormal ( ) ",
  "22644": "} public static VectorByteBufferedIntegral4s16 createWithBase ( ",
  "22645": "return new VectorByteBufferedIntegral4s16 ( b , base , offset ) ; ",
  "22646": "} public static < T > PVectorByteBufferedIntegral3s32 < T > createWithBase ( ",
  "22647": "return new PVectorByteBufferedIntegral3s32 < > ( b , base , offset ) ; ",
  "22648": "} public static VectorByteBufferedFloating4s16 createWithBase ( ",
  "22649": "return new VectorByteBufferedFloating4s16 ( b , base , offset ) ; ",
  "22650": "} public static < A , B > Generator < PMatrix3x3F < A , B > > create ( ) ",
  "22651": "return new PMatrix3x3FGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22652": "} public static < A , B > Generator < PMatrix3x3F < A , B > > createNormal ( ) ",
  "22653": "} public static Generator < Matrix2x2D > create ( ) ",
  "22654": "return new Matrix2x2DGenerator ( PrimitiveGenerators . doubles ( ",
  "22655": "} public static Generator < Matrix2x2D > createNormal ( ) ",
  "22656": "} public static MatrixByteBuffered4x4s64 createWithBase ( ",
  "22657": "return new MatrixByteBuffered4x4s64 ( b , base , offset ) ; ",
  "22658": "} public static VectorByteBufferedIntegral3s16 createWithBase ( ",
  "22659": "return new VectorByteBufferedIntegral3s16 ( b , base , offset ) ; ",
  "22660": "} public static < T > PVectorByteBufferedIntegral2s8 < T > createWithBase ( ",
  "22661": "return new PVectorByteBufferedIntegral2s8 < > ( b , base , offset ) ; ",
  "22662": "} public static VectorByteBufferedFloating4s64 createWithBase ( ",
  "22663": "return new VectorByteBufferedFloating4s64 ( b , base , offset ) ; ",
  "22664": "} public static Orthonormalized3D orthonormalize3D ( ",
  "22665": "final Vector3D v0 , ",
  "22666": "final Vector3D v1 , ",
  "22667": "final Vector3D v2 ) ",
  "22668": "final Vector3D rv0 = Vectors3D . normalize ( v0 ) ; ",
  "22669": "final Vector3D rv1 ; ",
  "22670": "final Vector3D rv2 ; ",
  "22671": "final double v0_dot_v1 = Vectors3D . dotProduct ( rv0 , v1 ) ; ",
  "22672": "final Vector3D v0_s = Vectors3D . scale ( rv0 , v0_dot_v1 ) ; ",
  "22673": "rv1 = Vectors3D . normalize ( Vectors3D . subtract ( v1 , v0_s ) ) ; ",
  "22674": "final double v1_dot_v2 = Vectors3D . dotProduct ( rv1 , v2 ) ; ",
  "22675": "final double v0_dot_v2 = Vectors3D . dotProduct ( rv0 , v2 ) ; ",
  "22676": "final Vector3D v0_s = Vectors3D . scale ( rv0 , v0_dot_v2 ) ; ",
  "22677": "final Vector3D v2_s = Vectors3D . scale ( rv1 , v1_dot_v2 ) ; ",
  "22678": "final Vector3D vs = Vectors3D . add ( v0_s , v2_s ) ; ",
  "22679": "rv2 = Vectors3D . normalize ( Vectors3D . subtract ( v2 , vs ) ) ; ",
  "22680": "return Orthonormalized3D . of ( rv0 , rv1 , rv2 ) ; ",
  "22681": "} public static Orthonormalized4D orthonormalize4D ( ",
  "22682": "final Vector4D v0 , ",
  "22683": "final Vector4D v1 , ",
  "22684": "final Vector4D v2 ) ",
  "22685": "final Vector4D rv0 = Vectors4D . normalize ( v0 ) ; ",
  "22686": "final Vector4D rv1 ; ",
  "22687": "final Vector4D rv2 ; ",
  "22688": "final double v0_dot_v1 = Vectors4D . dotProduct ( rv0 , v1 ) ; ",
  "22689": "final Vector4D v0_s = Vectors4D . scale ( rv0 , v0_dot_v1 ) ; ",
  "22690": "rv1 = Vectors4D . normalize ( Vectors4D . subtract ( v1 , v0_s ) ) ; ",
  "22691": "final double v1_dot_v2 = Vectors4D . dotProduct ( rv1 , v2 ) ; ",
  "22692": "final double v0_dot_v2 = Vectors4D . dotProduct ( rv0 , v2 ) ; ",
  "22693": "final Vector4D v0_s = Vectors4D . scale ( rv0 , v0_dot_v2 ) ; ",
  "22694": "final Vector4D v2_s = Vectors4D . scale ( rv1 , v1_dot_v2 ) ; ",
  "22695": "final Vector4D vs = Vectors4D . add ( v0_s , v2_s ) ; ",
  "22696": "rv2 = Vectors4D . normalize ( Vectors4D . subtract ( v2 , vs ) ) ; ",
  "22697": "return Orthonormalized4D . of ( rv0 , rv1 , rv2 ) ; ",
  "22698": "} public static Generator < Vector2F > create ( ) ",
  "22699": "return new Vector2FGenerator ( PrimitiveGenerators . doubles ( ",
  "22700": "} public static Generator < Vector2F > createSmall ( ) ",
  "22701": "} public static Generator < Vector2F > createNormal ( ) ",
  "22702": "} public static Generator < Matrix4x4F > create ( ) ",
  "22703": "return new Matrix4x4FGenerator ( PrimitiveGenerators . doubles ( ",
  "22704": "} public static Generator < Matrix4x4F > createNormal ( ) ",
  "22705": "} public static MatrixByteBuffered3x3s16 createWithBase ( ",
  "22706": "return new MatrixByteBuffered3x3s16 ( b , base , offset ) ; ",
  "22707": "} public static VectorByteBufferedFloating2s32 createWithBase ( ",
  "22708": "return new VectorByteBufferedFloating2s32 ( b , base , offset ) ; ",
  "22709": "} public static Generator < Matrix2x2F > create ( ) ",
  "22710": "return new Matrix2x2FGenerator ( PrimitiveGenerators . doubles ( ",
  "22711": "} public static Generator < Matrix2x2F > createNormal ( ) ",
  "22712": "} public static < T > PVectorByteBufferedFloating4s16 < T > createWithBase ( ",
  "22713": "return new PVectorByteBufferedFloating4s16 < > ( b , base , offset ) ; ",
  "22714": "} public static < T > PVectorByteBufferedIntegral3s16 < T > createWithBase ( ",
  "22715": "return new PVectorByteBufferedIntegral3s16 < > ( b , base , offset ) ; ",
  "22716": "} public static < T > PVectorByteBufferedFloating2s32 < T > createWithBase ( ",
  "22717": "return new PVectorByteBufferedFloating2s32 < > ( b , base , offset ) ; ",
  "22718": "} public static VectorByteBufferedIntegral4s32 createWithBase ( ",
  "22719": "return new VectorByteBufferedIntegral4s32 ( b , base , offset ) ; ",
  "22720": "} public static < T > Generator < Quaternion4F > create ( ) ",
  "22721": "return new Quaternion4FGenerator ( PrimitiveGenerators . doubles ( ",
  "22722": "} public static < T > Generator < PVector3D < T > > createSmall ( ) ",
  "22723": "return new PVector3DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22724": "} public static < T > Generator < PVector3D < T > > create ( ) ",
  "22725": "} public static < T > Generator < PVector3D < T > > createNormal ( ) ",
  "22726": "} public static MatrixByteBuffered3x3s32 createWithBase ( ",
  "22727": "return new MatrixByteBuffered3x3s32 ( b , base , offset ) ; ",
  "22728": "} public static Generator < Matrix3x3D > create ( ) ",
  "22729": "return new Matrix3x3DGenerator ( PrimitiveGenerators . doubles ( ",
  "22730": "} public static Generator < Matrix3x3D > createNormal ( ) ",
  "22731": "} public static VectorByteBufferedFloating4s32 createWithBase ( ",
  "22732": "return new VectorByteBufferedFloating4s32 ( b , base , offset ) ; ",
  "22733": "} public static < A , B > Generator < PMatrix4x4D < A , B > > create ( ) ",
  "22734": "return new PMatrix4x4DGenerator < > ( PrimitiveGenerators . doubles ( ",
  "22735": "} public static < A , B > Generator < PMatrix4x4D < A , B > > createNormal ( ) ",
  "22736": "} public static < T > PVectorByteBufferedIntegral4s8 < T > createWithBase ( ",
  "22737": "return new PVectorByteBufferedIntegral4s8 < > ( b , base , offset ) ; ",
  "22738": "} public static Selector expressionSelector ( String expr , BeanFactory beanFactory ) { ",
  "22739": "StandardEvaluationContext evalCtx = new StandardEvaluationContext ( ) ; ",
  "22740": "if ( null != beanFactory ) { ",
  "22741": "evalCtx . setBeanResolver ( new BeanFactoryResolver ( beanFactory ) ) ; ",
  "22742": "return expressionSelector ( expr , evalCtx ) ; ",
  "22743": "} public static Selector expressionSelector ( String expr , EvaluationContext evalCtx ) { ",
  "22744": "return new ExpressionSelector ( SPEL_PARSER . parseExpression ( expr ) , evalCtx ) ; ",
  "22745": "} public static Selector expressionSelector ( String expr , EvaluationContext evalCtx , SpelCompilerMode mode ) { ",
  "22746": "SpelParserConfiguration configuration = new SpelParserConfiguration ( mode , null ) ; ",
  "22747": "SpelExpressionParser parser = new SpelExpressionParser ( configuration ) ; ",
  "22748": "return new ExpressionSelector ( parser . parseExpression ( expr ) , evalCtx ) ; ",
  "22749": "} Dialog getErrorDialog ( int errorCode , int requestCode ) { ",
  "22750": "final Dialog dialog = GoogleApiAvailability . getInstance ( ) . getErrorDialog ( activity , errorCode , requestCode ) ; ",
  "22751": "dialog . setOnDismissListener ( new DialogInterface . OnDismissListener ( ) { ",
  "22752": "public void onDismiss ( DialogInterface dialogInterface ) { ",
  "22753": "resolvingError = false ; ",
  "22754": "return dialog ; ",
  "22755": "} void connectAndRequestGoogleAccount ( int signInRequestCode , int errorResolutionRequestCode ) { ",
  "22756": "if ( client . isConnected ( ) ) { ",
  "22757": "requestGoogleAccount ( signInRequestCode ) ; ",
  "22758": "} else if ( ! client . isConnecting ( ) ) { ",
  "22759": "this . signInRequestCode = signInRequestCode ; ",
  "22760": "this . errorResolutionRequestCode = errorResolutionRequestCode ; ",
  "22761": "client . connect ( ) ; ",
  "22762": "} boolean parseSignInResult ( int requestCode , int resultCode , Intent intent ) { ",
  "22763": "if ( requestCode == errorResolutionRequestCode ) { ",
  "22764": "if ( resultCode == Activity . RESULT_OK ) { ",
  "22765": "connectAndRequestGoogleAccount ( signInRequestCode , errorResolutionRequestCode ) ; ",
  "22766": "} else if ( requestCode == signInRequestCode ) { ",
  "22767": "final GoogleSignInResult result = Auth . GoogleSignInApi . getSignInResultFromIntent ( intent ) ; ",
  "22768": "if ( result . isSuccess ( ) ) { ",
  "22769": "googleCallback . onSuccess ( result . getSignInAccount ( ) ) ; ",
  "22770": "} else if ( result . getStatus ( ) . isCanceled ( ) ) { ",
  "22771": "googleCallback . onCancel ( ) ; ",
  "22772": "} public void logoutAndClearState ( ) { ",
  "22773": "if ( client != null && client . isConnected ( ) ) { ",
  "22774": "client . disconnect ( ) ; ",
  "22775": "activity = null ; ",
  "22776": "} void logout ( ) { ",
  "22777": "Auth . GoogleSignInApi . signOut ( client ) . setResultCallback ( new ResultCallback < Status > ( ) { ",
  "22778": "public void onResult ( @ NonNull Status status ) { ",
  "22779": "if ( ! status . isSuccess ( ) ) { ",
  "22780": "} public void applyToTrimouMustacheEngineBuilder ( final MustacheEngineBuilder engineBuilder ) { ",
  "22781": "engineBuilder ",
  "22782": ". setProperty ( EngineConfigurationKey . START_DELIMITER , getStartDelimiter ( ) ) ",
  "22783": ". setProperty ( EngineConfigurationKey . END_DELIMITER , getEndDelimiter ( ) ) ",
  "22784": ". setProperty ( EngineConfigurationKey . PRECOMPILE_ALL_TEMPLATES , isPrecompileTemplates ( ) ) ",
  "22785": ". setProperty ( EngineConfigurationKey . REMOVE_STANDALONE_LINES , isRemoveStandaloneLines ( ) ) ",
  "22786": ". setProperty ( EngineConfigurationKey . REMOVE_UNNECESSARY_SEGMENTS , isRemoveUnnecessarySegments ( ) ) ",
  "22787": ". setProperty ( EngineConfigurationKey . DEBUG_MODE , isDebugMode ( ) ) ",
  "22788": ". setProperty ( EngineConfigurationKey . CACHE_SECTION_LITERAL_BLOCK , isCacheSectionLiteralBlock ( ) ) ",
  "22789": ". setProperty ( EngineConfigurationKey . TEMPLATE_RECURSIVE_INVOCATION_LIMIT , ",
  "22790": "getTemplateRecursiveInvocationLimit ( ) ) ",
  "22791": ". setProperty ( EngineConfigurationKey . SKIP_VALUE_ESCAPING , isSkipValueEscaping ( ) ) ",
  "22792": ". setProperty ( EngineConfigurationKey . DEFAULT_FILE_ENCODING , getCharset ( ) . name ( ) ) ",
  "22793": ". setProperty ( EngineConfigurationKey . TEMPLATE_CACHE_ENABLED , isCache ( ) ) ",
  "22794": ". setProperty ( EngineConfigurationKey . TEMPLATE_CACHE_EXPIRATION_TIMEOUT , ",
  "22795": "getTemplateCacheExpirationTimeout ( ) ) ",
  "22796": ". setProperty ( EngineConfigurationKey . HANDLEBARS_SUPPORT_ENABLED , isEnableHelper ( ) ) ",
  "22797": ". setProperty ( EngineConfigurationKey . REUSE_LINE_SEPARATOR_SEGMENTS , isReuseLineSeparatorSegments ( ) ) ",
  "22798": ". setProperty ( EngineConfigurationKey . ITERATION_METADATA_ALIAS , getIterationMetadataAlias ( ) ) ",
  "22799": ". setProperty ( EngineConfigurationKey . RESOLVER_HINTS_ENABLED , isEnableResolverHints ( ) ) ",
  "22800": ". setProperty ( EngineConfigurationKey . NESTED_TEMPLATE_SUPPORT_ENABLED , isEnableNestedTemplates ( ) ) ",
  "22801": ". setProperty ( EngineConfigurationKey . TEMPLATE_CACHE_USED_FOR_SOURCE , isCacheTemplateSources ( ) ) ; ",
  "22802": "} static MemberKey newInstance ( Object contextObject , String name ) { ",
  "22803": "if ( contextObject instanceof Class < ? > ) { ",
  "22804": "Class < ? > clazz = ( Class < ? > ) contextObject ; ",
  "22805": "if ( clazz . isEnum ( ) && ( \"values\" . equals ( name ) || Reflections . isConstantName ( clazz , name ) ) ) { ",
  "22806": "return new MemberKey ( clazz , name ) ; ",
  "22807": "return new MemberKey ( contextObject . getClass ( ) , name ) ; ",
  "22808": "public boolean isCache ( ) { ",
  "22809": "return engine . getConfiguration ( ) . getBooleanPropertyValue ( EngineConfigurationKey . TEMPLATE_CACHE_ENABLED ) ",
  "22810": "&& ! engine . getConfiguration ( ) . getBooleanPropertyValue ( EngineConfigurationKey . DEBUG_MODE ) ",
  "22811": "&& super . isCache ( ) ; ",
  "22812": "} private void lineSeparatorFound ( String lineSeparator ) { ",
  "22813": "flushText ( ) ; ",
  "22814": "flushLineSeparator ( lineSeparator ) ; ",
  "22815": "line ++ ; ",
  "22816": "state = State . TEXT ; ",
  "22817": "separatorIdx = 0 ; ",
  "22818": "} private void flushTag ( ) { ",
  "22819": "handler . tag ( deriveTag ( buffer . toString ( ) ) ) ; ",
  "22820": "delimiterIdx = 0 ; ",
  "22821": "clearBuffer ( ) ; ",
  "22822": "} private MustacheTagType identifyTagType ( String buffer ) { ",
  "22823": "if ( buffer . length ( ) == 0 ) { ",
  "22824": "return MustacheTagType . VARIABLE ; ",
  "22825": "if ( delimiters . hasDefaultDelimitersSet ( ) ",
  "22826": "&& buffer . charAt ( 0 ) == ( ( String ) EngineConfigurationKey . START_DELIMITER ",
  "22827": ". getDefaultValue ( ) ) . charAt ( 0 ) ",
  "22828": "&& buffer . charAt ( buffer . length ( ) - 1 ) == ( ( String ) EngineConfigurationKey . END_DELIMITER ",
  "22829": ". getDefaultValue ( ) ) . charAt ( 0 ) ) { ",
  "22830": "return MustacheTagType . UNESCAPE_VARIABLE ; ",
  "22831": "Character command = buffer . charAt ( 0 ) ; ",
  "22832": "for ( MustacheTagType type : MustacheTagType . values ( ) ) { ",
  "22833": "if ( command . equals ( type . getCommand ( ) ) ) { ",
  "22834": "} private String extractContent ( MustacheTagType tagType , String buffer ) { ",
  "22835": "switch ( tagType ) { ",
  "22836": "return buffer . trim ( ) ; ",
  "22837": "case UNESCAPE_VARIABLE : ",
  "22838": "return ( buffer . charAt ( 0 ) == ( ( String ) EngineConfigurationKey . START_DELIMITER ",
  "22839": ". getDefaultValue ( ) ) . charAt ( 0 ) ? buffer . substring ( 1 , ",
  "22840": "buffer . length ( ) - 1 ) . trim ( ) : buffer . substring ( 1 ) . trim ( ) ) ; ",
  "22841": "case SECTION : ",
  "22842": "case INVERTED_SECTION : ",
  "22843": "case PARTIAL : ",
  "22844": "case EXTEND : ",
  "22845": "case EXTEND_SECTION : ",
  "22846": "case SECTION_END : ",
  "22847": "case NESTED_TEMPLATE : ",
  "22848": "case COMMENT : ",
  "22849": "return buffer . substring ( 1 ) . trim ( ) ; ",
  "22850": "case DELIMITER : ",
  "22851": "if ( releaseCallbacks == null ) { ",
  "22852": "for ( ReleaseCallback callback : releaseCallbacks ) { ",
  "22853": "callback . release ( ) ; ",
  "22854": "LOGGER . warn ( ",
  "22855": "} public static void forEachOperator ( BiConsumer < String , Helper > consumer ) { ",
  "22856": "for ( Operator operator : Operator . values ( ) ) { ",
  "22857": "consumer . accept ( operator . toString ( ) . toLowerCase ( ) , new NumericExpressionHelper ( operator ) ) ; ",
  "22858": "} private static List < List < SegmentBase > > readSegmentLines ( ",
  "22859": "ContainerSegmentBase container ) { ",
  "22860": "List < List < SegmentBase > > lines = new ArrayList < > ( ) ; ",
  "22861": "lines . add ( readSegmentLines ( lines , null , container ) ) ; ",
  "22862": "return lines ; ",
  "22863": "} public static Pattern newMustacheTagPattern ( Configuration configuration ) { ",
  "22864": "StringBuilder regex = new StringBuilder ( ) ; ",
  "22865": "regex . append ( Pattern . quote ( configuration ",
  "22866": ". getStringPropertyValue ( EngineConfigurationKey . START_DELIMITER ) ) ) ; ",
  "22867": "regex . append ( \".*?\" ) ; ",
  "22868": ". getStringPropertyValue ( EngineConfigurationKey . END_DELIMITER ) ) ) ; ",
  "22869": "return Pattern . compile ( regex . toString ( ) ) ; ",
  "22870": "} public static < T > Decorator < T > decorate ( T delegate , Map < String , Function < T , Object > > mappings , String delegateKey , ",
  "22871": "Configuration configuration ) { ",
  "22872": "return IterableDecorator . isIterable ( delegate ) ",
  "22873": "? new IterableDecorator < > ( delegate , ImmutableMap . copyOf ( mappings ) , delegateKey , configuration ) ",
  "22874": ": new Decorator < > ( delegate , ImmutableMap . copyOf ( mappings ) , delegateKey , configuration ) ; ",
  "22875": "public static < T > T unwrap ( T instance ) { ",
  "22876": "return instance instanceof Decorator ? unwrap ( ( ( Decorator < T > ) instance ) . delegate ) : instance ; ",
  "22877": "} public synchronized MustacheEngine build ( ) { ",
  "22878": "MustacheEngine engine = new DefaultMustacheEngine ( this ) ; ",
  "22879": "for ( EngineBuiltCallback callback : engineReadyCallbacks ) { ",
  "22880": "callback . engineBuilt ( engine ) ; ",
  "22881": "BuildInfo buildInfo = BuildInfo . load ( ) ; ",
  "22882": "engine . getConfiguration ( ) . getInfo ( ) ) ; ",
  "22883": "isBuilt = true ; ",
  "22884": "} public MustacheEngineBuilder addGlobalData ( String name , Object value ) { ",
  "22885": "checkArgumentsNotNull ( name , value ) ; ",
  "22886": "checkNotBuilt ( ) ; ",
  "22887": "this . globalData . put ( name , value ) ; ",
  "22888": "} public MustacheEngineBuilder addTemplateLocator ( TemplateLocator locator ) { ",
  "22889": "checkArgumentNotNull ( locator ) ; ",
  "22890": "this . templateLocators . add ( locator ) ; ",
  "22891": "} public MustacheEngineBuilder addResolver ( Resolver resolver ) { ",
  "22892": "checkArgumentNotNull ( resolver ) ; ",
  "22893": "this . resolvers . add ( resolver ) ; ",
  "22894": "} public MustacheEngineBuilder setProperty ( String key , Object value ) { ",
  "22895": "checkArgumentsNotNull ( key , value ) ; ",
  "22896": "this . properties . put ( key , value ) ; ",
  "22897": "} public < T extends ConfigurationKey > MustacheEngineBuilder setProperty ( ",
  "22898": "T configurationKey , Object value ) { ",
  "22899": "checkArgumentsNotNull ( configurationKey , value ) ; ",
  "22900": "setProperty ( configurationKey . get ( ) , value ) ; ",
  "22901": "} public MustacheEngineBuilder registerCallback ( ",
  "22902": "EngineBuiltCallback callback ) { ",
  "22903": "checkArgumentNotNull ( callback ) ; ",
  "22904": "this . engineReadyCallbacks . add ( callback ) ; ",
  "22905": "} public MustacheEngineBuilder addMustacheListener ( ",
  "22906": "MustacheListener listener ) { ",
  "22907": "checkArgumentNotNull ( listener ) ; ",
  "22908": "this . mustacheListeners . add ( listener ) ; ",
  "22909": "} public MustacheEngineBuilder registerHelper ( String name , Helper helper ) { ",
  "22910": "return registerHelper ( name , helper , false ) ; ",
  "22911": "} public MustacheEngineBuilder registerHelper ( String name , Helper helper , ",
  "22912": "boolean overwrite ) { ",
  "22913": "checkArgumentsNotNull ( name , helper ) ; ",
  "22914": "if ( ! overwrite && helpers . containsKey ( name ) ) { ",
  "22915": "helpers . put ( name , helper ) ; ",
  "22916": "} public MustacheEngineBuilder registerHelpers ( Map < String , Helper > helpers , ",
  "22917": "checkArgumentNotNull ( helpers ) ; ",
  "22918": "for ( Entry < String , Helper > entry : helpers . entrySet ( ) ) { ",
  "22919": "registerHelper ( entry . getKey ( ) , entry . getValue ( ) , overwrite ) ; ",
  "22920": "} public MustacheEngineBuilder addValueConverter ( ValueConverter converter ) { ",
  "22921": "checkArgumentNotNull ( converter ) ; ",
  "22922": "this . valueConverters . add ( converter ) ; ",
  "22923": "} public MustacheEngineBuilder addContextConverter ( ContextConverter converter ) { ",
  "22924": "this . contextConverters . add ( converter ) ; ",
  "22925": "} public static String capitalizeFully ( String text , Character delimiter ) { ",
  "22926": "if ( isEmpty ( text ) ) { ",
  "22927": "text = text . toLowerCase ( ) ; ",
  "22928": "boolean capitalizeNext = true ; ",
  "22929": "for ( int i = 0 ; i < text . length ( ) ; i ++ ) { ",
  "22930": "final char ch = text . charAt ( i ) ; ",
  "22931": "if ( delimiter . equals ( ch ) ) { ",
  "22932": "capitalizeNext = true ; ",
  "22933": "builder . append ( ch ) ; ",
  "22934": "} else if ( capitalizeNext ) { ",
  "22935": "builder . append ( Character . toTitleCase ( ch ) ) ; ",
  "22936": "capitalizeNext = false ; ",
  "22937": "} protected void append ( Options options , CharSequence sequence ) { ",
  "22938": "TextSupport textSupport = this . textSupport ; ",
  "22939": "if ( textSupport == null || isUnescapeVariable ( options ) ) { ",
  "22940": "options . append ( sequence ) ; ",
  "22941": "textSupport . appendEscapedHtml ( sequence . toString ( ) , ",
  "22942": "options . getAppendable ( ) ) ; ",
  "22943": "throw new MustacheException ( MustacheProblem . RENDER_IO_ERROR , e ) ; ",
  "22944": "} private ComputingCache < String , Optional < String > > buildSourceCache ( ) { ",
  "22945": "return buildCache ( \"Source\" , ",
  "22946": "key -> ",
  "22947": "Optional . ofNullable ( locateAndRead ( key ) ) , ",
  "22948": "( key , cause ) -> ",
  "22949": "} private void changeDelimiters ( String key ) { ",
  "22950": "if ( key . charAt ( 0 ) != MustacheTagType . DELIMITER . getCommand ( ) ",
  "22951": "|| key . charAt ( key . length ( ) - 1 ) != MustacheTagType . DELIMITER ",
  "22952": ". getCommand ( ) ) { ",
  "22953": "throw new MustacheException ( ",
  "22954": "MustacheProblem . COMPILE_INVALID_DELIMITERS , ",
  "22955": "Matcher matcher = Patterns . newSetDelimitersContentPattern ( ) ",
  "22956": ". matcher ( key . substring ( 1 , key . length ( ) - 1 ) ) ; ",
  "22957": "delimiters . setNewValues ( matcher . group ( 1 ) , matcher . group ( 3 ) ) ; ",
  "22958": "} private void push ( ContainerSegmentBase container ) { ",
  "22959": "containerStack . addFirst ( container ) ; ",
  "22960": "container . getContent ( ) ) ; ",
  "22961": "} private void addSegment ( SegmentBase segment ) { ",
  "22962": "containerStack . peekFirst ( ) . addSegment ( segment ) ; ",
  "22963": "} private RootSegmentBase validate ( ) { ",
  "22964": "ContainerSegmentBase root = containerStack . peekFirst ( ) ; ",
  "22965": "if ( ! ( root instanceof RootSegmentBase ) ) { ",
  "22966": "MustacheProblem . COMPILE_INVALID_TEMPLATE , ",
  "22967": "containerStack . peekFirst ( ) . toString ( ) , line ) ; ",
  "22968": "return ( RootSegmentBase ) root ; ",
  "22969": "} static Iterator < String > splitHelperName ( String name , Segment segment ) { ",
  "22970": "boolean stringLiteral = false ; ",
  "22971": "boolean arrayLiteral = false ; ",
  "22972": "boolean space = false ; ",
  "22973": "List < String > parts = new ArrayList < > ( ) ; ",
  "22974": "if ( ! space ) { ",
  "22975": "if ( ! stringLiteral && ! arrayLiteral ) { ",
  "22976": "if ( buffer . length ( ) > 0 ) { ",
  "22977": "parts . add ( buffer . toString ( ) ) ; ",
  "22978": "buffer = new StringBuilder ( ) ; ",
  "22979": "space = true ; ",
  "22980": "buffer . append ( name . charAt ( i ) ) ; ",
  "22981": "if ( ! arrayLiteral ",
  "22982": "&& Strings . isStringLiteralSeparator ( name . charAt ( i ) ) ) { ",
  "22983": "stringLiteral = ! stringLiteral ; ",
  "22984": "} else if ( ! stringLiteral ",
  "22985": "&& Strings . isListLiteralStart ( name . charAt ( i ) ) ) { ",
  "22986": "arrayLiteral = true ; ",
  "22987": "&& Strings . isListLiteralEnd ( name . charAt ( i ) ) ) { ",
  "22988": "arrayLiteral = false ; ",
  "22989": "space = false ; ",
  "22990": "if ( stringLiteral || arrayLiteral ) { ",
  "22991": "MustacheProblem . COMPILE_HELPER_VALIDATION_FAILURE , ",
  "22992": "segment ) ; ",
  "22993": "return parts . iterator ( ) ; ",
  "22994": "} static Object eval ( String expression , Options options , Configuration configuration ) { ",
  "22995": "ELProcessorFactory elpFactory = ( ELProcessorFactory ) configuration ",
  "22996": ". getPropertyValue ( ELProcessorFactory . EL_PROCESSOR_FACTORY_KEY ) ; ",
  "22997": "ELProcessor elp = elpFactory . createELProcessor ( configuration ) ; ",
  "22998": "elp . getELManager ( ) . addELResolver ( new OptionsELResolver ( options ) ) ; ",
  "22999": "return elp . eval ( expression ) ; ",
  "23000": "} public HelpersBuilder addIf ( String elseStartDelimiter , String elseEndDelimiter ) { ",
  "23001": "builder . put ( IF , new IfHelper ( elseStartDelimiter , elseEndDelimiter ) ) ; ",
  "23002": "} public HelpersBuilder addChoose ( ) { ",
  "23003": "builder . put ( CHOOSE , new ChooseHelper ( ) ) ; ",
  "23004": "builder . put ( WHEN , new ChooseHelper . WhenHelper ( ) ) ; ",
  "23005": "builder . put ( OTHERWISE , new ChooseHelper . OtherwiseHelper ( ) ) ; ",
  "23006": "} public HelpersBuilder addSwitch ( boolean caseDefaultIsBreak ) { ",
  "23007": "builder . put ( SWITCH , new SwitchHelper ( ) ) ; ",
  "23008": "builder . put ( CASE , new SwitchHelper . CaseHelper ( caseDefaultIsBreak ) ) ; ",
  "23009": "builder . put ( DEFAULT , new SwitchHelper . DefaultHelper ( ) ) ; ",
  "23010": "} public static < T > Builder < T > decorate ( Class < T > delegateType ) { ",
  "23011": "return decorate ( o -> ( delegateType . isAssignableFrom ( Decorator . unwrap ( o ) . getClass ( ) ) ) ) ; ",
  "23012": "} private void flush ( ) { ",
  "23013": "parent . append ( future . get ( 60 , TimeUnit . SECONDS ) . collect ( this ) ) ; ",
  "23014": "parent . append ( buffer ) ; ",
  "23015": "if ( parent instanceof AsyncAppendable ) { ",
  "23016": "( ( AsyncAppendable ) parent ) . flush ( ) ; ",
  "23017": "MustacheProblem . RENDER_ASYNC_PROCESSING_ERROR , e ) ; ",
  "23018": "public void init ( Configuration configuration ) { ",
  "23019": "checkNotInitialized ( this . configuration != null ) ; ",
  "23020": "this . configuration = configuration ; ",
  "23021": "this . init ( ) ; ",
  "23022": "} public void invalidateMemberCache ( Predicate < Class < ? > > predicate ) { ",
  "23023": "if ( memberCache == null ) { ",
  "23024": "if ( predicate == null ) { ",
  "23025": "memberCache . clear ( ) ; ",
  "23026": "memberCache . invalidate ( ( key ) -> predicate . test ( key . getClazz ( ) ) ) ; ",
  "23027": "} static Method findMethod ( Class < ? > clazz , String name ) { ",
  "23028": "checkArgumentNotNull ( clazz ) ; ",
  "23029": "checkArgumentNotNull ( name ) ; ",
  "23030": "Method foundMatch = null ; ",
  "23031": "Method foundGetMatch = null ; ",
  "23032": "Method foundIsMatch = null ; ",
  "23033": "for ( Method method : SecurityActions . getMethods ( clazz ) ) { ",
  "23034": "if ( ! isMethodValid ( method ) ) { ",
  "23035": "if ( method . isBridge ( ) ) { ",
  "23036": "if ( name . equals ( method . getName ( ) ) ) { ",
  "23037": "foundMatch = method ; ",
  "23038": "} else if ( Reflections . matchesPrefix ( name , method . getName ( ) , ",
  "23039": "GET_PREFIX ) ) { ",
  "23040": "foundGetMatch = method ; ",
  "23041": "IS_PREFIX ) ) { ",
  "23042": "foundIsMatch = method ; ",
  "23043": "if ( foundMatch == null ) { ",
  "23044": "foundMatch = ( foundGetMatch != null ? foundGetMatch : foundIsMatch ) ; ",
  "23045": "foundMatch ) ; ",
  "23046": "return foundMatch ; ",
  "23047": "} static Field findField ( Class < ? > clazz , String name ) { ",
  "23048": "Field found = null ; ",
  "23049": "for ( Field field : SecurityActions . getFields ( clazz ) ) { ",
  "23050": "if ( field . getName ( ) . equals ( name ) ) { ",
  "23051": "found = field ; ",
  "23052": "} private static boolean isMethodValid ( Method method ) { ",
  "23053": "return method != null && Modifier . isPublic ( method . getModifiers ( ) ) ",
  "23054": "&& method . getParameterTypes ( ) . length == 0 ",
  "23055": "&& ! method . getReturnType ( ) . equals ( Void . TYPE ) ",
  "23056": "&& ! Object . class . equals ( method . getDeclaringClass ( ) ) ; ",
  "23057": "} public static void registerHelpers ( ConfigurationExtensionBuilder builder , Map < String , Helper > helpers ) { ",
  "23058": "Checker . checkArgumentsNotNull ( builder , helpers ) ; ",
  "23059": "registerHelper ( builder , entry . getKey ( ) , entry . getValue ( ) ) ; ",
  "23060": "} public static void registerHelper ( ConfigurationExtensionBuilder builder , String name , Helper helper ) { ",
  "23061": "Checker . checkArgumentsNotNull ( builder , name , helper ) ; ",
  "23062": "builder . registerHelper ( name , helper ) ; ",
  "23063": "} catch ( IllegalArgumentException ignored ) { ",
  "23064": "} static List < List < Segment > > readSegmentLinesBeforeRendering ( ",
  "23065": "AbstractContainerSegment container ) { ",
  "23066": "List < List < Segment > > lines = new ArrayList < > ( ) ; ",
  "23067": "List < Segment > currentLine = new ArrayList < > ( ) ; ",
  "23068": "for ( Segment segment : container ) { ",
  "23069": "if ( ! SegmentType . LINE_SEPARATOR . equals ( segment . getType ( ) ) ) { ",
  "23070": "currentLine . add ( segment ) ; ",
  "23071": "lines . add ( currentLine ) ; ",
  "23072": "currentLine = new ArrayList < > ( ) ; ",
  "23073": "if ( ! currentLine . isEmpty ( ) ) { ",
  "23074": "} public void invalidateFragments ( final String keyPart ) { ",
  "23075": "if ( fragments == null || keyPart == null ) { ",
  "23076": "fragments . invalidate ( fragmentKey -> fragmentKey . getKey ( ) . contains ( keyPart ) ) ; ",
  "23077": "} private Object resolveLeadingContextObject ( String name , ValueWrapper value , ",
  "23078": "AtomicReference < Hint > hintRef ) { ",
  "23079": "Object leading = resolveContextObject ( name , value , hintRef ) ; ",
  "23080": "if ( leading == null ) { ",
  "23081": "Hint hint = hintRef != null ? hintRef . get ( ) : null ; ",
  "23082": "leading = hint . resolve ( null , name , value ) ; ",
  "23083": "leading = resolve ( null , name , value , hint == null ",
  "23084": "&& hintRef != null ) ; ",
  "23085": "return leading ; ",
  "23086": "} protected TemporalAccessor getFormattableObject ( Object value , ",
  "23087": "Locale locale , TimeZone timeZone , MustacheTagInfo tagInfo ) { ",
  "23088": "if ( value instanceof TemporalAccessor ) { ",
  "23089": "return ( TemporalAccessor ) value ; ",
  "23090": "return LocalDateTime . ofInstant ( ( ( Date ) value ) . toInstant ( ) , ",
  "23091": "timeZone . toZoneId ( ) ) ; ",
  "23092": "} else if ( value instanceof Calendar ) { ",
  "23093": "return LocalDateTime . ofInstant ( ( ( Calendar ) value ) . toInstant ( ) , ",
  "23094": "} else if ( value instanceof Number ) { ",
  "23095": "return LocalDateTime . ofInstant ( ",
  "23096": "Instant . ofEpochMilli ( ( ( Number ) value ) . longValue ( ) ) , ",
  "23097": "throw valueNotAFormattableObject ( value , tagInfo ) ; ",
  "23098": "} static String buildPropertyKey ( String propertyName , String [ ] prefixParts ) { ",
  "23099": "return buildPropertyKey ( propertyName , Strings . UNDERSCORE , prefixParts ) ; ",
  "23100": "} static String buildPropertyKey ( String propertyName , String delimiter , ",
  "23101": "String [ ] prefixParts ) { ",
  "23102": "for ( final String prefixPart : prefixParts ) { ",
  "23103": "key . append ( prefixPart ) ; ",
  "23104": "key . append ( Strings . DOT ) ; ",
  "23105": "key . append ( ",
  "23106": "Strings . uncapitalize ( ",
  "23107": "Strings . replace ( ",
  "23108": "Strings . capitalizeFully ( propertyName , ",
  "23109": "delimiter . toCharArray ( ) [ 0 ] ) , ",
  "23110": "delimiter , \"\" ) ) ) ; ",
  "23111": "} public static void main ( String [ ] args ) throws Throwable { ",
  "23112": "Class < ? > initialClass ; ",
  "23113": "initialClass = Thread . currentThread ( ) . getContextClassLoader ( ) . loadClass ( \"kg.apc.cmdtools.PluginsCMD\" ) ; ",
  "23114": "Object instance = initialClass . newInstance ( ) ; ",
  "23115": "Method startup = initialClass . getMethod ( \"processParams\" , ( new String [ 0 ] ) . getClass ( ) ) ; ",
  "23116": "Object res = startup . invoke ( instance , new Object [ ] { args } ) ; ",
  "23117": "int rc = ( Integer ) res ; ",
  "23118": "if ( rc != 0 ) { ",
  "23119": "System . exit ( rc ) ; ",
  "23120": "if ( e . getCause ( ) != null ) { ",
  "23121": "throw e . getCause ( ) ; ",
  "23122": "public synchronized void init ( ProcessingEnvironment processingEnv ) { ",
  "23123": "super . init ( processingEnv ) ; ",
  "23124": "messager = processingEnv . getMessager ( ) ; ",
  "23125": "types = processingEnv . getTypeUtils ( ) ; ",
  "23126": "elements = processingEnv . getElementUtils ( ) ; ",
  "23127": "filer = processingEnv . getFiler ( ) ; ",
  "23128": "isDebug = processingEnv . getOptions ( ) . containsKey ( \"debug\" ) ; ",
  "23129": "error = new Log ( Kind . ERROR , true ) ; ",
  "23130": "warning = new Log ( Kind . WARNING , true ) ; ",
  "23131": "debug = new Log ( Kind . NOTE , isDebug ) ; ",
  "23132": "public final boolean process ( Set < ? extends TypeElement > annotations , RoundEnvironment roundEnv ) { ",
  "23133": "handleAssert ( ( ) -> processActual ( annotations , roundEnv ) ) ; ",
  "23134": "} protected void handleAssert ( Runnable task ) { ",
  "23135": "} catch ( AssertException e ) { ",
  "23136": "if ( e . getMessage ( ) != null && ! e . getMessage ( ) . isEmpty ( ) ) { ",
  "23137": "error ( ) . log ( e . getMessage ( ) ) ; ",
  "23138": "public Set < String > getSupportedAnnotationTypes ( ) { ",
  "23139": "Set < String > set = new HashSet < > ( ) ; ",
  "23140": "SupportedAnnotationTypes sat = this . getClass ( ) . getAnnotation ( SupportedAnnotationTypes . class ) ; ",
  "23141": "if ( sat != null ) { ",
  "23142": "Arrays . stream ( sat . value ( ) ) . forEach ( set :: add ) ; ",
  "23143": "SupportedAnnotation sa = this . getClass ( ) . getAnnotation ( SupportedAnnotation . class ) ; ",
  "23144": "Arrays . stream ( sa . value ( ) ) . map ( Class :: getCanonicalName ) . forEach ( set :: add ) ; ",
  "23145": "if ( set . isEmpty ( ) && isInitialized ( ) ) { ",
  "23146": "} public static long checkGreaterLong ( ",
  "23147": "final long x , ",
  "23148": "final String x_name , ",
  "23149": "final long in_lower , ",
  "23150": "final String lower_name ) ",
  "23151": "if ( x > in_lower ) { ",
  "23152": "@ SuppressWarnings ( \"boxing\" ) final var message = ",
  "23153": "throw new RangeCheckException ( message ) ; ",
  "23154": "} public static BigInteger checkGreaterBig ( ",
  "23155": "final BigInteger x , ",
  "23156": "final BigInteger in_lower , ",
  "23157": "Objects . requireNonNull ( x , \"Value\" ) ; ",
  "23158": "Objects . requireNonNull ( in_lower , \"Lower\" ) ; ",
  "23159": "if ( x . compareTo ( in_lower ) > 0 ) { ",
  "23160": "final var message = ",
  "23161": "} public static long checkIncludedInLong ( ",
  "23162": "final RangeInclusiveL range , ",
  "23163": "final String range_name ) ",
  "23164": "Objects . requireNonNull ( range , \"Range\" ) ; ",
  "23165": "if ( range . includesValue ( x ) ) { ",
  "23166": "final var message = String . format ( ",
  "23167": "Long . valueOf ( range . lower ( ) ) , ",
  "23168": "x_name , ",
  "23169": "Long . valueOf ( x ) , ",
  "23170": "Long . valueOf ( range . upper ( ) ) , ",
  "23171": "range_name ) ; ",
  "23172": "} public static int checkIncludedInInteger ( ",
  "23173": "final int x , ",
  "23174": "final RangeInclusiveI range , ",
  "23175": "Integer . valueOf ( range . lower ( ) ) , ",
  "23176": "Integer . valueOf ( x ) , ",
  "23177": "Integer . valueOf ( range . upper ( ) ) , ",
  "23178": "} public static BigInteger checkIncludedInBig ( ",
  "23179": "final RangeInclusiveB range , ",
  "23180": "range . lower ( ) , ",
  "23181": "x , ",
  "23182": "range . upper ( ) , ",
  "23183": "} public static long checkLessLong ( ",
  "23184": "final long in_upper , ",
  "23185": "final String upper_name ) ",
  "23186": "if ( x < in_upper ) { ",
  "23187": "} public static BigInteger checkLessEqualBig ( ",
  "23188": "final BigInteger in_upper , ",
  "23189": "Objects . requireNonNull ( in_upper , \"Upper\" ) ; ",
  "23190": "if ( x . compareTo ( in_upper ) <= 0 ) { ",
  "23191": "} public static RangeInclusiveL checkRangeIncludedInLong ( ",
  "23192": "final RangeInclusiveL inner , ",
  "23193": "final String inner_name , ",
  "23194": "final RangeInclusiveL outer , ",
  "23195": "final String outer_name ) ",
  "23196": "if ( inner . isIncludedIn ( outer ) ) { ",
  "23197": "inner_name , ",
  "23198": "inner , ",
  "23199": "outer_name , ",
  "23200": "outer ) ; ",
  "23201": "} public static RangeInclusiveI checkRangeIncludedInInteger ( ",
  "23202": "final RangeInclusiveI inner , ",
  "23203": "final RangeInclusiveI outer , ",
  "23204": "} public static RangeInclusiveB checkRangeIncludedInBig ( ",
  "23205": "final RangeInclusiveB inner , ",
  "23206": "final RangeInclusiveB outer , ",
  "23207": "protected < D extends FileDescriptor > D toFileDescriptor ( Descriptor descriptor , Class < D > type , String path , ScannerContext context ) { ",
  "23208": "if ( descriptor == null ) { ",
  "23209": "D result = context . getStore ( ) . create ( type ) ; ",
  "23210": "result . setFileName ( path ) ; ",
  "23211": "return migrateOrCast ( descriptor , type , context ) ; ",
  "23212": "} protected < D extends FileDescriptor > D getOrCreateAs ( String path , Class < D > type , Function < String , FileDescriptor > existing , ScannerContext context ) { ",
  "23213": "FileDescriptor descriptor = cache . get ( path , p -> { ",
  "23214": "FileDescriptor fileDescriptor = existing . apply ( p ) ; ",
  "23215": "if ( fileDescriptor != null ) { ",
  "23216": "return fileDescriptor ; ",
  "23217": "fileDescriptor = context . getStore ( ) . create ( type ) ; ",
  "23218": "fileDescriptor . setFileName ( path ) ; ",
  "23219": "} private < D extends FileDescriptor > D migrateOrCast ( Descriptor descriptor , Class < D > type , ScannerContext context ) { ",
  "23220": "return type . isAssignableFrom ( descriptor . getClass ( ) ) ? type . cast ( descriptor ) : context . getStore ( ) . addDescriptorType ( descriptor , type ) ; ",
  "23221": "} public < D extends MD5Descriptor > D digest ( InputStream stream , DigestOperation < D > digestOperation ) throws IOException { ",
  "23222": "DigestInputStream digestInputStream = new DigestInputStream ( stream , md5Digest ) ; ",
  "23223": "D md5Descriptor = digestOperation . execute ( digestInputStream ) ; ",
  "23224": "String md5 = DatatypeConverter . printHexBinary ( md5Digest . digest ( ) ) ; ",
  "23225": "md5Descriptor . setMd5 ( md5 ) ; ",
  "23226": "return md5Descriptor ; ",
  "23227": "} public boolean accepts ( String path ) { ",
  "23228": "if ( includeFilePatterns != null ) { ",
  "23229": "result = matches ( path , includeFilePatterns ) ; ",
  "23230": "if ( excludeFilePatterns != null ) { ",
  "23231": "result = result && ! matches ( path , excludeFilePatterns ) ; ",
  "23232": "} protected < T > Class < T > getTypeParameter ( Class < ? > expectedSuperClass , int genericTypeParameterIndex ) { ",
  "23233": "Class < ? extends AbstractScannerPlugin > thisClass = this . getClass ( ) ; ",
  "23234": "if ( ! thisClass . getSuperclass ( ) . equals ( expectedSuperClass ) ) { ",
  "23235": "Type genericSuperclass = thisClass . getGenericSuperclass ( ) ; ",
  "23236": "Type typeParameter = ( ( ParameterizedType ) genericSuperclass ) . getActualTypeArguments ( ) [ genericTypeParameterIndex ] ; ",
  "23237": "if ( typeParameter instanceof ParameterizedType ) { ",
  "23238": "return ( Class < T > ) ( ( ParameterizedType ) typeParameter ) . getRawType ( ) ; ",
  "23239": "return ( Class < T > ) typeParameter ; ",
  "23240": "} protected String getStringProperty ( String name , String defaultValue ) { ",
  "23241": "Object value = properties . get ( name ) ; ",
  "23242": "return value != null ? value . toString ( ) : defaultValue ; ",
  "23243": "} protected Boolean getBooleanProperty ( String name , Boolean defaultValue ) { ",
  "23244": "return value != null ? Boolean . valueOf ( value . toString ( ) ) : defaultValue ; ",
  "23245": "} protected String getDirectoryPath ( File directory , File entry ) { ",
  "23246": "String relativePath ; ",
  "23247": "if ( entry . equals ( directory ) ) { ",
  "23248": "relativePath = \"/\" ; ",
  "23249": "String filePath = entry . getAbsolutePath ( ) ; ",
  "23250": "String directoryPath = directory . getAbsolutePath ( ) ; ",
  "23251": "relativePath = filePath . substring ( directoryPath . length ( ) ) . replace ( File . separator , \"/\" ) ; ",
  "23252": "} public void flush ( ) { ",
  "23253": "createHierarchy ( ) ; ",
  "23254": "sync ( fileContainerDescriptor . getRequires ( ) , requiredFiles ) ; ",
  "23255": "sync ( fileContainerDescriptor . getContains ( ) , containedFiles ) ; ",
  "23256": "} private void sync ( Collection < FileDescriptor > target , Map < String , FileDescriptor > after ) { ",
  "23257": "Map < String , FileDescriptor > before = getCache ( target ) ; ",
  "23258": "Map < String , FileDescriptor > all = new HashMap < > ( ) ; ",
  "23259": "all . putAll ( before ) ; ",
  "23260": "all . putAll ( after ) ; ",
  "23261": "for ( Map . Entry < String , FileDescriptor > entry : all . entrySet ( ) ) { ",
  "23262": "FileDescriptor fileDescriptor = entry . getValue ( ) ; ",
  "23263": "boolean hasBefore = before . containsKey ( key ) ; ",
  "23264": "boolean hasAfter = after . containsKey ( key ) ; ",
  "23265": "if ( hasBefore && ! hasAfter ) { ",
  "23266": "target . remove ( fileDescriptor ) ; ",
  "23267": "} else if ( ! hasBefore && hasAfter ) { ",
  "23268": "target . add ( fileDescriptor ) ; ",
  "23269": "} private Map < String , FileDescriptor > getCache ( Iterable < FileDescriptor > fileDescriptors ) { ",
  "23270": "Map < String , FileDescriptor > cache = new HashMap < > ( ) ; ",
  "23271": "for ( FileDescriptor fileDescriptor : fileDescriptors ) { ",
  "23272": "cache . put ( fileDescriptor . getFileName ( ) , fileDescriptor ) ; ",
  "23273": "return cache ; ",
  "23274": "} private void createHierarchy ( ) { ",
  "23275": "for ( Map . Entry < String , FileDescriptor > entry : containedFiles . entrySet ( ) ) { ",
  "23276": "String relativePath = entry . getKey ( ) ; ",
  "23277": "int separatorIndex = relativePath . lastIndexOf ( '/' ) ; ",
  "23278": "if ( separatorIndex != - 1 ) { ",
  "23279": "String parentName = relativePath . substring ( 0 , separatorIndex ) ; ",
  "23280": "FileDescriptor parentDescriptor = containedFiles . get ( parentName ) ; ",
  "23281": "if ( parentDescriptor instanceof FileContainerDescriptor ) { ",
  "23282": "( ( FileContainerDescriptor ) parentDescriptor ) . getContains ( ) . add ( fileDescriptor ) ; ",
  "23283": "} public static Set < IndexFlavor > complementOf ( final Set < IndexFlavor > indexFlavors ) { ",
  "23284": "final Set < IndexFlavor > set = allOf ( ) ; ",
  "23285": "set . removeAll ( indexFlavors ) ; ",
  "23286": "} public static Set < IndexFlavor > of ( final IndexFlavor first , final IndexFlavor ... rest ) { ",
  "23287": "final Set < IndexFlavor > set = new HashSet < > ( ) ; ",
  "23288": "set . add ( first ) ; ",
  "23289": "set . addAll ( Arrays . asList ( rest ) ) ; ",
  "23290": "public V put ( final K key , final V value ) { ",
  "23291": "entries . add ( new Entry ( key , value ) ) ; ",
  "23292": "public V remove ( final Object key ) { ",
  "23293": "final Iterator < Map . Entry < K , V > > iterator = entries . iterator ( ) ; ",
  "23294": "V lastValue = null ; ",
  "23295": "final Map . Entry < K , V > entry = iterator . next ( ) ; ",
  "23296": "lastValue = entry . getValue ( ) ; ",
  "23297": "if ( key . equals ( entry . getKey ( ) ) ) { ",
  "23298": "return lastValue ; ",
  "23299": "} public static Config getConfig ( String name , IConfigFactory factory ) { ",
  "23300": "if ( configs == null ) { ",
  "23301": "name = DEFAULT_CONFIG_NAME ; ",
  "23302": "Config got = configs . get ( name ) ; ",
  "23303": "if ( got == null ) { ",
  "23304": "synchronized ( name . intern ( ) ) { ",
  "23305": "got = configs . get ( name ) ; ",
  "23306": "got = factory == null ? load ( name ) : factory . createConfig ( name ) ; ",
  "23307": "throw new InvalidConfigException ( ",
  "23308": "configs . put ( name , got ) ; ",
  "23309": "return got ; ",
  "23310": "} public ViewDocumentRequestBuilder addHighlightExpressions ( final String highlightExpression , final String ... highlightExpressions ) { ",
  "23311": "this . highlightExpressions . add ( highlightExpression ) ; ",
  "23312": "this . highlightExpressions . addAll ( Arrays . asList ( highlightExpressions ) ) ; ",
  "23313": "} public ViewDocumentRequestBuilder addStartTags ( final String startTag , final String ... startTags ) { ",
  "23314": "this . startTags . add ( startTag ) ; ",
  "23315": "this . startTags . addAll ( Arrays . asList ( startTags ) ) ; ",
  "23316": "} public ViewDocumentRequestBuilder addEndTags ( final String endTag , final String ... endTags ) { ",
  "23317": "this . endTags . add ( endTag ) ; ",
  "23318": "this . endTags . addAll ( Arrays . asList ( endTags ) ) ; ",
  "23319": "} public < U > U makeRequest ( final Class < U > returnType , final BackendCaller < ? super E , ? super T > backendCaller ) throws HodErrorException { ",
  "23320": "checkTokenProxyService ( ) ; ",
  "23321": "return makeRequest ( tokenProxyService . getTokenProxy ( ) , returnType , backendCaller ) ; ",
  "23322": "} public < U > U makeRequest ( final TypeReference < U > typeReference , final BackendCaller < ? super E , ? super T > backendCaller ) throws HodErrorException { ",
  "23323": "return makeRequest ( tokenProxyService . getTokenProxy ( ) , typeReference , backendCaller ) ; ",
  "23324": "} public InputStream makeRequest ( final BackendCaller < ? super E , ? super T > backendCaller ) throws HodErrorException { ",
  "23325": "return makeRequest ( tokenProxyService . getTokenProxy ( ) , backendCaller ) ; ",
  "23326": "} public < U > U unsafeMakeRequest ( final JavaType type , final BackendCaller < ? super E , ? super T > backendCaller ) throws HodErrorException { ",
  "23327": "return unsafeMakeRequest ( tokenProxyService . getTokenProxy ( ) , type , backendCaller ) ; ",
  "23328": "} public < U , BE extends EntityType , BT extends TokenType > U makeRequest ( ",
  "23329": "final TokenProxy < BE , BT > tokenProxy , ",
  "23330": "final Class < U > returnType , ",
  "23331": "final BackendCaller < ? super BE , ? super BT > backendCaller ",
  "23332": ") throws HodErrorException { ",
  "23333": "return responseParser . parseResponse ( tokenProxy , returnType , backendCaller . makeRequest ( getAuthenticationToken ( tokenProxy ) ) ) ; ",
  "23334": "final TypeReference < U > typeReference , ",
  "23335": "return responseParser . parseResponse ( tokenProxy , typeReference , backendCaller . makeRequest ( getAuthenticationToken ( tokenProxy ) ) ) ; ",
  "23336": "} public < BE extends EntityType , BT extends TokenType > InputStream makeRequest ( ",
  "23337": "return responseParser . parseResponse ( tokenProxy , backendCaller . makeRequest ( getAuthenticationToken ( tokenProxy ) ) ) ; ",
  "23338": "} public < U , BE extends EntityType , BT extends TokenType > U unsafeMakeRequest ( ",
  "23339": "final JavaType type , ",
  "23340": "return responseParser . unsafeParseResponse ( tokenProxy , type , backendCaller . makeRequest ( getAuthenticationToken ( tokenProxy ) ) ) ; ",
  "23341": "public Object fromBody ( final TypedInput body , final Type type ) throws ConversionException { ",
  "23342": "return converter . fromBody ( body , type ) ; ",
  "23343": "} catch ( final ConversionException e ) { ",
  "23344": "if ( e . getCause ( ) instanceof JsonParseException ) { ",
  "23345": "throw new HodUnavailableException ( e . getCause ( ) ) ; ",
  "23346": "public TypedOutput toBody ( final Object object ) { ",
  "23347": "if ( object . getClass ( ) . isAnnotationPresent ( DoNotConvert . class ) ) { ",
  "23348": "return new TypedString ( object . toString ( ) ) ; ",
  "23349": "return converter . toBody ( object ) ; ",
  "23350": "} public AddToTextIndexRequestBuilder addReferencePrefixes ( final String referencePrefix , final String ... referencePrefixes ) { ",
  "23351": "this . referencePrefixes . add ( referencePrefix ) ; ",
  "23352": "this . referencePrefixes . addAll ( Arrays . asList ( referencePrefixes ) ) ; ",
  "23353": "} public AddToTextIndexRequestBuilder addAdditionalMetadata ( final Object metadatum , final Object ... metadata ) { ",
  "23354": "this . additionalMetadata . add ( metadatum ) ; ",
  "23355": "this . additionalMetadata . addAll ( Arrays . asList ( metadata ) ) ; ",
  "23356": "} public QueryProfileRequestBuilder addPromotionCategories ( final String category0 , final String ... categories ) { ",
  "23357": "promotionCategories . add ( category0 ) ; ",
  "23358": "promotionCategories . addAll ( Arrays . asList ( categories ) ) ; ",
  "23359": "} public QueryProfileRequestBuilder addSynonymCategories ( final String category0 , final String ... categories ) { ",
  "23360": "synonymCategories . add ( category0 ) ; ",
  "23361": "synonymCategories . addAll ( Arrays . asList ( categories ) ) ; ",
  "23362": "} public QueryProfileRequestBuilder addBlacklistCategories ( final String category0 , final String ... categories ) { ",
  "23363": "blacklistCategories . add ( category0 ) ; ",
  "23364": "blacklistCategories . addAll ( Arrays . asList ( categories ) ) ; ",
  "23365": "} private List < FieldValues > parseResponse ( final JsonNode response ) { ",
  "23366": "if ( response == null || response . get ( \"fields\" ) == null ) { ",
  "23367": "final JsonNode fieldsNode = response . get ( \"fields\" ) ; ",
  "23368": "if ( fieldsNode . getNodeType ( ) == JsonNodeType . OBJECT || fieldsNode . getNodeType ( ) == JsonNodeType . ARRAY ) { ",
  "23369": "final List < FieldValues > output = new ArrayList < > ( ) ; ",
  "23370": "for ( final JsonNode node : fieldsNode ) { ",
  "23371": "final FieldValues fieldValues = objectMapper . treeToValue ( node , FieldValues . class ) ; ",
  "23372": "output . add ( fieldValues ) ; ",
  "23373": "} catch ( final JsonProcessingException e ) { ",
  "23374": "} < T > T parseResponse ( final TokenProxy < ? , ? > tokenProxy , final Class < T > clazz , final Response response ) { ",
  "23375": "return unsafeParseResponse ( tokenProxy , objectMapper . constructType ( clazz ) , response ) ; ",
  "23376": "} < T > T parseResponse ( final TokenProxy < ? , ? > tokenProxy , final TypeReference < T > typeReference , final Response response ) { ",
  "23377": "return unsafeParseResponse ( tokenProxy , objectMapper . getTypeFactory ( ) . constructType ( typeReference ) , response ) ; ",
  "23378": "} < T > T unsafeParseResponse ( final TokenProxy < ? , ? > tokenProxy , final JavaType type , final Response response ) { ",
  "23379": "checkRefresh ( tokenProxy , response ) ; ",
  "23380": "return objectMapper . readValue ( response . getBody ( ) . in ( ) , type ) ; ",
  "23381": "} InputStream parseResponse ( final TokenProxy < ? , ? > tokenProxy , final Response response ) { ",
  "23382": "return response . getBody ( ) . in ( ) ; ",
  "23383": "final JobStatus < T > jobStatus ; ",
  "23384": "if ( tokenProxy != null ) { ",
  "23385": "jobStatus = jobService . getJobStatus ( tokenProxy , jobId ) ; ",
  "23386": "jobStatus = jobService . getJobStatus ( jobId ) ; ",
  "23387": "final Status jobStatusStatus = jobStatus . getStatus ( ) ; ",
  "23388": "if ( jobStatusStatus == Status . FINISHED || jobStatusStatus == Status . FAILED ) { ",
  "23389": "for ( final Action < T > action : jobStatus . getActions ( ) ) { ",
  "23390": "final Status status = action . getStatus ( ) ; ",
  "23391": "if ( status == Status . FINISHED ) { ",
  "23392": "callback . success ( action . getResult ( ) ) ; ",
  "23393": "else if ( status == Status . FAILED ) { ",
  "23394": "for ( final HodError error : action . getErrors ( ) ) { ",
  "23395": "callback . error ( error . getErrorCode ( ) ) ; ",
  "23396": "else if ( timeout != null && timeout . isBefore ( LocalDateTime . now ( ) ) ) { ",
  "23397": "callback . timeout ( ) ; ",
  "23398": "tries . set ( 0 ) ; ",
  "23399": "executorService . schedule ( this , WAIT_SECONDS , TimeUnit . SECONDS ) ; ",
  "23400": "} catch ( final HodErrorException e ) { ",
  "23401": "log . error ( \"Cause:\" , e ) ; ",
  "23402": "if ( DO_NOT_RETRY_CODES . contains ( e . getErrorCode ( ) ) ) { ",
  "23403": "callback . error ( e . getErrorCode ( ) ) ; ",
  "23404": "else if ( tries . get ( ) >= MAX_TRIES ) { ",
  "23405": "log . error ( \"Retrying\" ) ; ",
  "23406": "tries . incrementAndGet ( ) ; ",
  "23407": "callback . handleException ( e ) ; ",
  "23408": "if ( ! executorService . awaitTermination ( 10 , TimeUnit . SECONDS ) ) { ",
  "23409": "executorService . shutdownNow ( ) ; ",
  "23410": "} public static GetContentServiceImpl < Document > documentsService ( final HodServiceConfig < ? , TokenType . Simple > hodServiceConfig ) { ",
  "23411": "return new GetContentServiceImpl < > ( hodServiceConfig , Document . class ) ; ",
  "23412": "} public static QueryTextIndexServiceImpl < Document > documentsService ( final HodServiceConfig < ? , TokenType . Simple > hodServiceConfig ) { ",
  "23413": "return new QueryTextIndexServiceImpl < > ( hodServiceConfig , Document . class ) ; ",
  "23414": "} public QueryRequestBuilder addIndexes ( final ResourceIdentifier index0 , final ResourceIdentifier ... indexes ) { ",
  "23415": "this . indexes . add ( index0 ) ; ",
  "23416": "this . indexes . addAll ( Arrays . asList ( indexes ) ) ; ",
  "23417": "} public static Set < ResourceType > complementOf ( final Set < ResourceType > resourceTypes ) { ",
  "23418": "final Set < ResourceType > set = allOf ( ) ; ",
  "23419": "set . removeAll ( resourceTypes ) ; ",
  "23420": "} public static Set < ResourceType > of ( final ResourceType first , final ResourceType ... rest ) { ",
  "23421": "final Set < ResourceType > set = new HashSet < > ( ) ; ",
  "23422": "} public static FindSimilarServiceImpl < Document > documentsService ( final HodServiceConfig < ? , TokenType . Simple > hodServiceConfig ) { ",
  "23423": "return new FindSimilarServiceImpl < > ( hodServiceConfig , Document . class ) ; ",
  "23424": "} private Map < String , Object > buildHierarchyParameters ( final List < String > parents , final List < String > children ) { ",
  "23425": "final MultiMap < String , Object > parameters = new MultiMap < > ( ) ; ",
  "23426": "if ( parents != null ) { ",
  "23427": "for ( final String parent : parents ) { ",
  "23428": "parameters . put ( \"parents\" , parent ) ; ",
  "23429": "for ( final String child : children ) { ",
  "23430": "parameters . put ( \"children\" , child ) ; ",
  "23431": "} public static boolean rootElementMatches ( FileResource fileResource , String path , String expectedRootElement ) throws IOException { ",
  "23432": "try ( InputStream stream = fileResource . createStream ( ) ) { ",
  "23433": "XMLStreamReader reader = factory . createXMLStreamReader ( stream ) ; ",
  "23434": "int event = reader . next ( ) ; ",
  "23435": "switch ( event ) { ",
  "23436": "case XMLStreamConstants . START_ELEMENT : ",
  "23437": "String rootElement = reader . getLocalName ( ) ; ",
  "23438": "return expectedRootElement . equals ( rootElement ) ; ",
  "23439": "} catch ( XMLStreamException e ) { ",
  "23440": "} public static void main ( final String [ ] args ) throws Throwable { ",
  "23441": "final Preferences config = Preferences . systemNodeForPackage ( Example . class ) ; ",
  "23442": "System . out . println ( config . get ( \"mykey\" , \"my-default-value1\" ) ) ; ",
  "23443": "System . out . println ( config . get ( \"mykey2\" , \"my-default-value2\" ) ) ; ",
  "23444": "System . out . println ( config . get ( \"other.key\" , \"my-default-value3\" ) ) ; ",
  "23445": "System . out . println ( config . get ( \"urlbase\" , \"my-default-value4\" ) ) ; ",
  "23446": "System . out . println ( config . get ( \"urlsearch\" , \"my-default-value5\" ) ) ; ",
  "23447": "public String map ( final String propName ) { ",
  "23448": "if ( propName == null ) ",
  "23449": "String keyName = propName , defValue = null ; ",
  "23450": "final int offsetDefault = propName . indexOf ( ':' ) ; ",
  "23451": "if ( offsetDefault != - 1 ) { ",
  "23452": "keyName = propName . substring ( 0 , offsetDefault ) ; ",
  "23453": "defValue = propName . substring ( offsetDefault + 1 ) ; ",
  "23454": "final ClassLoader ctxLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; ",
  "23455": "String value = ClassLoaderMap . get ( ctxLoader , keyName , null ) ; ",
  "23456": "value = System . getProperty ( propName , defValue ) ; ",
  "23457": "} public static void transform ( final @ NonNull File xmlFile , final @ NonNull File xsltFile , ",
  "23458": "final OutputStream outputStream ) ",
  "23459": "throws TransformerConfigurationException , TransformerException ",
  "23460": "final Source xmlSource = new StreamSource ( xmlFile ) ; ",
  "23461": "final Source xsltSource = new StreamSource ( xsltFile ) ; ",
  "23462": "transform ( xmlSource , xsltSource , outputStream ) ; ",
  "23463": "} public static void transform ( final Source xmlSource , final Source xsltSource , ",
  "23464": "final Transformer transformer = getTransformer ( xsltSource ) ; ",
  "23465": "transformer . transform ( xmlSource , new StreamResult ( outputStream ) ) ; ",
  "23466": "} public static void transform ( final String xmlInputFile , final String xsltInputFile , ",
  "23467": "final File xmlFile = new File ( xmlInputFile ) ; ",
  "23468": "final File xsltFile = new File ( xsltInputFile ) ; ",
  "23469": "transform ( xmlFile , xsltFile , outputStream ) ; ",
  "23470": "} public static DocumentBuilderFactory getDocumentBuilderFactory ( final String schema ) ",
  "23471": "System . setProperty ( DOCUMENT_BUILDER_FACTORY_KEY , DOCUMENT_BUILDER_FACTORY_VALUE ) ; ",
  "23472": "final DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; ",
  "23473": "factory . setValidating ( true ) ; ",
  "23474": "factory . setAttribute ( SCHEMA_LANGUAGE_KEY , HTTP_WWW_W3_ORG_2001_XML_SCHEMA ) ; ",
  "23475": "factory . setAttribute ( SCHEMA_SOURCE_KEY , schema ) ; ",
  "23476": "} public static DOMSource getDOMSource ( final File xml , final ErrorHandler errorHandler ) ",
  "23477": "throws SAXException , ParserConfigurationException , IOException ",
  "23478": "return new DOMSource ( parse ( xml , errorHandler ) ) ; ",
  "23479": "} public static Schema getSchema ( final File xsd , final ErrorHandler errorHandler ) ",
  "23480": "final SchemaFactory schemaFactory = SchemaFactory ",
  "23481": ". newInstance ( HTTP_WWW_W3_ORG_2001_XML_SCHEMA ) ; ",
  "23482": "schemaFactory . setErrorHandler ( errorHandler ) ; ",
  "23483": "return schemaFactory . newSchema ( xsd ) ; ",
  "23484": "} public static Document parse ( final File xml , final ErrorHandler errorHandler ) ",
  "23485": "final DocumentBuilderFactory factory = getDocumentBuilderFactory ( xml . getName ( ) ) ; ",
  "23486": "final DocumentBuilder builder = factory . newDocumentBuilder ( ) ; ",
  "23487": "builder . setErrorHandler ( errorHandler ) ; ",
  "23488": "return builder . parse ( xml ) ; ",
  "23489": "} public static void validateSchema ( final File xsd , final File xml , ",
  "23490": "final ErrorHandler errorHandler ) ",
  "23491": "final Schema schemaXSD = getSchema ( xsd , errorHandler ) ; ",
  "23492": "final Validator validator = schemaXSD . newValidator ( ) ; ",
  "23493": "validator . validate ( getDOMSource ( xml , errorHandler ) ) ; ",
  "23494": "} public static boolean validateSchema ( final String SchemaUrl , final String XmlDocumentUrl ) ",
  "23495": "factory . setAttribute ( SCHEMA_SOURCE_KEY , SchemaUrl ) ; ",
  "23496": "final ValidatorHandler handler = new ValidatorHandler ( ) ; ",
  "23497": "builder . setErrorHandler ( handler ) ; ",
  "23498": "builder . parse ( XmlDocumentUrl ) ; ",
  "23499": "if ( handler . isValid ( ) ) ",
  "23500": "} public static Optional < String > attributesToString ( Map < String , String > attributes ) ",
  "23501": "if ( attributes != null && ! attributes . isEmpty ( ) ) ",
  "23502": "for ( final Map . Entry < String , String > entry : attributes . entrySet ( ) ) ",
  "23503": "builder . append ( entry . getKey ( ) ) ; ",
  "23504": "builder . append ( \"=\" ) ; ",
  "23505": "builder . append ( \"\\\"\" ) . append ( entry . getValue ( ) ) . append ( \"\\\"\" ) ; ",
  "23506": "return Optional . of ( builder . toString ( ) ) ; ",
  "23507": "} public boolean addChild ( final SimpleTag child ) ",
  "23508": "if ( getChildren ( ) == null ) ",
  "23509": "setChildren ( ListFactory . newArrayList ( ) ) ; ",
  "23510": "return getChildren ( ) . add ( child ) ; ",
  "23511": "} public String removeAttribute ( final String name ) ",
  "23512": "if ( getAttributes ( ) != null ) ",
  "23513": "getAttributes ( ) . remove ( name ) ; ",
  "23514": "} public StringBuilder toVelocityTemplate ( ) ",
  "23515": "buffer . append ( \"<\" ) ; ",
  "23516": "buffer . append ( \"${\" ) . append ( getName ( ) ) . append ( \".name}\\n\" ) ; ",
  "23517": "if ( getAttributes ( ) != null && ! getAttributes ( ) . isEmpty ( ) ) ",
  "23518": ". append ( \".attributes.keySet()\" + \")\\n\" ) ; ",
  "23519": "buffer . append ( \"$attribute=\\\"$\" ) . append ( getName ( ) ) ",
  "23520": ". append ( \".getAttributes().get($attribute)\\\"\\n\" ) ; ",
  "23521": "buffer . append ( \"#if(${\" ) . append ( getName ( ) ) . append ( \".endTag})>${\" ) . append ( getName ( ) ) ",
  "23522": ". append ( \".content}\\n\" ) ; ",
  "23523": "if ( getChildren ( ) != null && ! getChildren ( ) . isEmpty ( ) ) ",
  "23524": ". append ( getName ( ) ) . append ( \".children)\\n\" ) ; ",
  "23525": "for ( final SimpleTag child : getChildren ( ) ) ",
  "23526": "buffer . append ( child . toVelocityTemplate ( ) . toString ( ) ) ; ",
  "23527": "buffer . append ( \"#end\\n\" ) ; ",
  "23528": "buffer . append ( \"</${\" ) . append ( getName ( ) ) . append ( \".name}>\\n\" ) ; ",
  "23529": "} public String toXmlString ( ) ",
  "23530": "buffer . append ( getName ( ) ) ; ",
  "23531": "Optional < String > attr = TagExtensions . attributesToString ( getAttributes ( ) ) ; ",
  "23532": "if ( attr . isPresent ( ) ) ",
  "23533": "buffer . append ( attr . get ( ) ) ; ",
  "23534": "if ( isEndTag ( ) ) ",
  "23535": "buffer . append ( \">\" ) ; ",
  "23536": "buffer . append ( getContent ( ) ) ; ",
  "23537": "buffer . append ( child . toXmlString ( ) ) ; ",
  "23538": "buffer . append ( \"</\" ) ; ",
  "23539": "buffer . append ( \"/>\" ) ; ",
  "23540": "public static < T > T toObjectWithXMLDecoder ( final String xmlString ) ",
  "23541": "XMLDecoder dec = null ; ",
  "23542": "T obj = null ; ",
  "23543": "final InputStream is = new ByteArrayInputStream ( xmlString . getBytes ( ) ) ; ",
  "23544": "dec = new XMLDecoder ( is ) ; ",
  "23545": "obj = ( T ) dec . readObject ( ) ; ",
  "23546": "if ( dec != null ) ",
  "23547": "dec . close ( ) ; ",
  "23548": "return obj ; ",
  "23549": "} public static < T > T toObjectWithXStream ( final String xmlString , ",
  "23550": "final Map < String , Class < ? > > aliases ) ",
  "23551": "return toObjectWithXStream ( null , xmlString , aliases ) ; ",
  "23552": "} public static < T > T toObjectWithXStream ( final XStream xstream , final String xmlString ) ",
  "23553": "return toObjectWithXStream ( xstream , xmlString , null ) ; ",
  "23554": "public static < T > T toObjectWithXStream ( XStream xstream , final String xmlString , ",
  "23555": "if ( xstream == null ) ",
  "23556": "xstream = new XStream ( ) ; ",
  "23557": "if ( aliases != null ) ",
  "23558": "for ( final Map . Entry < String , Class < ? > > alias : aliases . entrySet ( ) ) ",
  "23559": "xstream . alias ( alias . getKey ( ) , alias . getValue ( ) ) ; ",
  "23560": "return ( T ) xstream . fromXML ( xmlString ) ; ",
  "23561": "} public static String toJson ( final String xmlString , final Map < String , Class < ? > > aliases ) ",
  "23562": "final Object object = XmlToObjectExtensions . toObjectWithXStream ( xmlString ) ; ",
  "23563": "final XStream xstream = new XStream ( new JettisonMappedXmlDriver ( ) ) ; ",
  "23564": "final String json = xstream . toXML ( object ) ; ",
  "23565": "} public static < T > T loadObject ( final File xmlFile ) throws IOException ",
  "23566": "final InputStream is = FileUtils . openInputStream ( xmlFile ) ; ",
  "23567": "return loadObject ( is ) ; ",
  "23568": "} private static < T > T loadObject ( final InputStream is ) throws IOException ",
  "23569": "final String xmlString = ReadFileExtensions . inputStream2String ( is ) ; ",
  "23570": "final T object = XmlToObjectExtensions . toObjectWithXStream ( xmlString ) ; ",
  "23571": "} public static < T > T loadObject ( final String xmlFileName ) throws IOException ",
  "23572": "final InputStream is = ClassExtensions . getResourceAsStream ( xmlFileName ) ; ",
  "23573": "} public static String newTag ( final String tagname , final String value , ",
  "23574": "final Map < String , String > attributes ) ",
  "23575": "final StringBuilder xmlTag = new StringBuilder ( ) ; ",
  "23576": "xmlTag . append ( \"<\" ) . append ( tagname ) ; ",
  "23577": "for ( final Map . Entry < String , String > attributte : attributes . entrySet ( ) ) ",
  "23578": "xmlTag . append ( attributte . getKey ( ) ) ; ",
  "23579": "xmlTag . append ( \"=\" ) ; ",
  "23580": "xmlTag . append ( \"\\\"\" ) . append ( attributte . getValue ( ) ) . append ( \"\\\"\" ) ; ",
  "23581": "if ( count != attributes . size ( ) ) ",
  "23582": "xmlTag . append ( \">\" ) ; ",
  "23583": "xmlTag . append ( value ) ; ",
  "23584": "xmlTag . append ( \"</\" ) . append ( tagname ) . append ( \">\" ) ; ",
  "23585": "return xmlTag . toString ( ) ; ",
  "23586": "protected void write ( final String s ) throws SAXException ",
  "23587": "getWriter ( ) . write ( s ) ; ",
  "23588": "getWriter ( ) . flush ( ) ; ",
  "23589": "catch ( final IOException e ) ",
  "23590": "} public static < T > String toXmlWithXMLEncoder ( final T obj ) ",
  "23591": "XMLEncoder enc = null ; ",
  "23592": "enc = new XMLEncoder ( baos ) ; ",
  "23593": "enc . writeObject ( obj ) ; ",
  "23594": "enc . close ( ) ; ",
  "23595": "return baos . toString ( ) ; ",
  "23596": "} public static < T > String toXmlWithXStream ( final T objectToXML , ",
  "23597": "return toXmlWithXStream ( null , objectToXML , aliases ) ; ",
  "23598": "} public static < T > String toXmlWithXStream ( final XStream xstream , final T objectToXML ) ",
  "23599": "return toXmlWithXStream ( xstream , objectToXML , null ) ; ",
  "23600": "} public static < T > String toXmlWithXStream ( XStream xstream , final T objectToXML , ",
  "23601": "final String xml = xstream . toXML ( objectToXML ) ; ",
  "23602": "} public String toXml ( ) ",
  "23603": "final String lqSimpleName = this . getClass ( ) . getSimpleName ( ) . toLowerCase ( ) ; ",
  "23604": "final Map < String , Class < ? > > aliases = new HashMap < > ( ) ; ",
  "23605": "aliases . put ( lqSimpleName , this . getClass ( ) ) ; ",
  "23606": "return ObjectToXmlExtensions . toXmlWithXStream ( this , aliases ) ; ",
  "23607": "} public static < T > T toObject ( final String jsonString , final Class < T > clazz ) ",
  "23608": "throws JsonParseException , JsonMappingException , IOException ",
  "23609": "return toObject ( jsonString , clazz , false ) ; ",
  "23610": "} public static < T > T toObject ( final String jsonString , final Class < T > clazz , ",
  "23611": "final boolean newMapper ) throws JsonParseException , JsonMappingException , IOException ",
  "23612": "final ObjectMapper mapper = ObjectMapperFactory . getObjectMapper ( newMapper ) ; ",
  "23613": "final T object = mapper . readValue ( jsonString , clazz ) ; ",
  "23614": "final Module ... modules ) throws JsonParseException , JsonMappingException , IOException ",
  "23615": "ObjectMapper mapper = ObjectMapperFactory . getObjectMapper ( true ) ; ",
  "23616": "mapper = mapper . registerModules ( modules ) ; ",
  "23617": "} public static < T > List < T > toObjectList ( final String jsonString , final Class < T > elementClass ) ",
  "23618": "return ( List < T > ) toObjectCollection ( jsonString , List . class , elementClass ) ; ",
  "23619": "} public static < T > Collection < T > toObjectCollection ( final String jsonString , ",
  "23620": "@ SuppressWarnings ( \"rawtypes\" ) Class < ? extends Collection > collectionClass , ",
  "23621": "Class < T > elementClass ) throws JsonParseException , JsonMappingException , IOException ",
  "23622": "final ObjectMapper mapper = ObjectMapperFactory . getObjectMapper ( true ) ; ",
  "23623": "return mapper . readValue ( jsonString , ",
  "23624": "mapper . getTypeFactory ( ) . constructCollectionType ( collectionClass , elementClass ) ) ; ",
  "23625": "} public static < T > String toJson ( final List < T > list ) ",
  "23626": "throws JsonGenerationException , JsonMappingException , IOException ",
  "23627": "final ObjectMapper mapper = new ObjectMapper ( ) ; ",
  "23628": "mapper . writeValue ( out , list ) ; ",
  "23629": "final byte [ ] bytes = out . toByteArray ( ) ; ",
  "23630": "return new String ( bytes ) ; ",
  "23631": "} public static < T > String toJson ( final T object , final boolean newMapper ) ",
  "23632": "throws JsonProcessingException ",
  "23633": "final String json = mapper . writeValueAsString ( object ) ; ",
  "23634": "} public static String toXml ( final String jsonString ) throws JSONException ",
  "23635": "final JSONObject json = new JSONObject ( jsonString ) ; ",
  "23636": "final String xmlString = XML . toString ( json ) ; ",
  "23637": "return xmlString ; ",
  "23638": "} public static < T > String toXml ( final String jsonString , final Class < T > clazz ) ",
  "23639": "final T object = JsonToObjectExtensions . toObject ( jsonString , clazz ) ; ",
  "23640": "final String xmlString = ObjectToXmlExtensions . toXmlWithXStream ( object ) ; ",
  "23641": "} public String addAttribute ( final String name , final String value ) ",
  "23642": "if ( getAttributes ( ) == null ) ",
  "23643": "this . attributes = MapFactory . newLinkedHashMap ( ) ; ",
  "23644": "return getAttributes ( ) . put ( name , value ) ; ",
  "23645": "} public boolean addChild ( final Tag child , final Integer position ) ",
  "23646": "this . childTagPositions = ListFactory . newArrayList ( ) ; ",
  "23647": "final ChildTagPosition childTagPosition = ChildTagPosition . builder ( ) . child ( child ) ",
  "23648": ". position ( position ) . build ( ) ; ",
  "23649": "return getChildren ( ) . add ( childTagPosition ) ; ",
  "23650": "} public boolean removeChild ( final Tag child ) ",
  "23651": "if ( getChildren ( ) != null ) ",
  "23652": "ChildTagPosition found = null ; ",
  "23653": "for ( final ChildTagPosition childTagPosition : getChildren ( ) ) ",
  "23654": "if ( childTagPosition . getChild ( ) . equals ( child ) ) ",
  "23655": "found = childTagPosition ; ",
  "23656": "if ( found != null ) ",
  "23657": "return getChildren ( ) . remove ( found ) ; ",
  "23658": "String processingContent = getContent ( ) ; ",
  "23659": "Integer lastPosition = 0 ; ",
  "23660": "for ( final ChildTagPosition child : getChildren ( ) ) ",
  "23661": "final String subContent = getContent ( ) . substring ( lastPosition , ",
  "23662": "child . getPosition ( ) ) ; ",
  "23663": "lastPosition = child . getPosition ( ) ; ",
  "23664": "processingContent = processingContent . substring ( lastPosition , ",
  "23665": "processingContent . length ( ) ) ; ",
  "23666": "buffer . append ( subContent ) ; ",
  "23667": "buffer . append ( child . getChild ( ) . toXmlString ( ) ) ; ",
  "23668": "buffer . append ( processingContent ) ; ",
  "23669": "public List < String > getFormats ( final String baseName ) ",
  "23670": "if ( baseName == null ) ",
  "23671": "return Collections . unmodifiableList ( Arrays . asList ( XML ) ) ; ",
  "23672": "public void characters ( final char [ ] buf , final int offset , final int len ) throws SAXException ",
  "23673": "final String string = new String ( buf , offset , len ) ; ",
  "23674": "if ( stringBuilder == null ) ",
  "23675": "stringBuilder = new StringBuilder ( string ) ; ",
  "23676": "stringBuilder . append ( string ) ; ",
  "23677": "public void endDocument ( ) throws SAXException ",
  "23678": "insertNewLine ( ) ; ",
  "23679": "public void endElement ( final String namespaceURI , final String simpleName , ",
  "23680": "final String qualifiedName ) throws SAXException ",
  "23681": "writeToBuffer ( ) ; ",
  "23682": "String elementName = simpleName ; ",
  "23683": "if ( \"\" . equals ( elementName ) ) ",
  "23684": "elementName = qualifiedName ; ",
  "23685": "write ( \"</\" + elementName + \">\" ) ; ",
  "23686": "} private void insertNewLine ( ) throws SAXException ",
  "23687": "writer . write ( System . getProperty ( \"line.separator\" ) ) ; ",
  "23688": "public void startElement ( final String namespaceURI , final String simpleName , ",
  "23689": "final String qualifiedName , final Attributes attributes ) throws SAXException ",
  "23690": "write ( \"<\" + elementName ) ; ",
  "23691": "if ( attributes != null ) ",
  "23692": "for ( int i = 0 ; i < attributes . getLength ( ) ; i ++ ) ",
  "23693": "String attributeName = attributes . getLocalName ( i ) ; ",
  "23694": "if ( \"\" . equals ( attributeName ) ) ",
  "23695": "attributeName = attributes . getQName ( i ) ; ",
  "23696": "write ( attributeName + \"=\\\"\" + attributes . getValue ( i ) + \"\\\"\" ) ; ",
  "23697": "write ( \">\" ) ; ",
  "23698": "} private void writeToBuffer ( ) throws SAXException ",
  "23699": "final String string = stringBuilder . toString ( ) . trim ( ) ; ",
  "23700": "write ( string ) ; ",
  "23701": "stringBuilder = null ; ",
  "23702": "} public static void xmlToXsd ( final File xmlInputFile , final File xsdOutFile ) ",
  "23703": "throws XmlException , IOException ",
  "23704": "xmlToXsd ( xmlInputFile , xsdOutFile , new Inst2XsdOptions ( ) ) ; ",
  "23705": "} public static void xmlToXsd ( final File xmlInputFile , final File xsdOutFile , ",
  "23706": "final Inst2XsdOptions inst2XsdOptions ) throws XmlException , IOException ",
  "23707": "xmlToXsd ( xmlInputFile , xsdOutFile , inst2XsdOptions , new XmlOptions ( ) . setSavePrettyPrint ( ) ) ; ",
  "23708": "} public static String xmlToXsd ( final File xmlFile , final Inst2XsdOptions inst2XsdOptions ) ",
  "23709": "return xmlToXsd ( xmlFile , inst2XsdOptions , new XmlOptions ( ) . setSavePrettyPrint ( ) ) ; ",
  "23710": "} public static String xmlToXsd ( final File xmlFile , final Inst2XsdOptions inst2XsdOptions , ",
  "23711": "final XmlOptions xmlOptions ) throws XmlException , IOException ",
  "23712": "final XmlObject [ ] xmlInstances = new XmlObject [ 1 ] ; ",
  "23713": "xmlInstances [ 0 ] = XmlObject . Factory . parse ( xmlFile ) ; ",
  "23714": "final SchemaDocument [ ] schemaDocs = Inst2Xsd . inst2xsd ( xmlInstances , inst2XsdOptions ) ; ",
  "23715": "final SchemaDocument schema = schemaDocs [ 0 ] ; ",
  "23716": "return schema . xmlText ( xmlOptions ) ; ",
  "23717": "} public static void xmlToXsd ( final File [ ] xmlFiles , final Inst2XsdOptions inst2XsdOptions , ",
  "23718": "File outDir , String outPrefix ) throws IOException ",
  "23719": "if ( xmlFiles == null || xmlFiles . length == 0 ) ",
  "23720": "if ( outDir == null ) ",
  "23721": "outDir = new File ( \".\" ) ; ",
  "23722": "if ( outPrefix == null ) ",
  "23723": "outPrefix = \"schema\" ; ",
  "23724": "final XmlObject [ ] xmlInstances = new XmlObject [ xmlFiles . length ] ; ",
  "23725": "for ( i = 0 ; i < xmlFiles . length ; i ++ ) ",
  "23726": "xmlInstances [ i ] = XmlObject . Factory . parse ( xmlFiles [ i ] ) ; ",
  "23727": "catch ( final XmlException e ) ",
  "23728": "for ( i = 0 ; i < schemaDocs . length ; i ++ ) ",
  "23729": "final SchemaDocument schema = schemaDocs [ i ] ; ",
  "23730": "schema . save ( new File ( outDir , outPrefix + i + \".xsd\" ) , ",
  "23731": "new XmlOptions ( ) . setSavePrettyPrint ( ) ) ; ",
  "23732": "} public static < T > String toJsonQuietly ( final T object ) ",
  "23733": "return ObjectToJsonExtensions . toJson ( object ) ; ",
  "23734": "catch ( final JsonProcessingException e ) ",
  "23735": "log . log ( Level . SEVERE , ",
  "23736": "+ object . toString ( ) + \"\\n\" , ",
  "23737": "} public static NodeList getNodeList ( final String xml , final String xpathExpression ) ",
  "23738": "throws XPathExpressionException , ParserConfigurationException , SAXException , IOException ",
  "23739": "final DocumentBuilderFactory domFactory = DocumentBuilderFactory . newInstance ( ) ; ",
  "23740": "domFactory . setNamespaceAware ( true ) ; ",
  "23741": "final DocumentBuilder builder = domFactory . newDocumentBuilder ( ) ; ",
  "23742": "final Document doc = builder . parse ( xml ) ; ",
  "23743": "final XPath xpath = XPathFactory . newInstance ( ) . newXPath ( ) ; ",
  "23744": "final XPathExpression expr = xpath . compile ( xpathExpression ) ; ",
  "23745": "final Object result = expr . evaluate ( doc , XPathConstants . NODESET ) ; ",
  "23746": "final NodeList nodes = ( NodeList ) result ; ",
  "23747": "return nodes ; ",
  "23748": "if ( s . startsWith ( \"$\" ) ) ",
  "23749": "final String newValue = data . get ( s . substring ( 1 , s . length ( ) ) ) ; ",
  "23750": "getWriter ( ) . append ( newValue ) ; ",
  "23751": "getWriter ( ) . append ( s ) ; ",
  "23752": "} private void constructFromLongs ( long hi , long lo ) { ",
  "23753": "content [ 0 ] = ( byte ) ( hi > > 56 ) ; ",
  "23754": "content [ 1 ] = ( byte ) ( hi > > 48 ) ; ",
  "23755": "content [ 2 ] = ( byte ) ( hi > > 40 ) ; ",
  "23756": "content [ 3 ] = ( byte ) ( hi > > 32 ) ; ",
  "23757": "content [ 4 ] = ( byte ) ( hi > > 24 ) ; ",
  "23758": "content [ 5 ] = ( byte ) ( hi > > 16 ) ; ",
  "23759": "content [ 6 ] = ( byte ) ( hi > > 8 ) ; ",
  "23760": "content [ 7 ] = ( byte ) ( hi ) ; ",
  "23761": "content [ 8 ] = ( byte ) ( lo > > 56 ) ; ",
  "23762": "content [ 9 ] = ( byte ) ( lo > > 48 ) ; ",
  "23763": "content [ 10 ] = ( byte ) ( lo > > 40 ) ; ",
  "23764": "content [ 11 ] = ( byte ) ( lo > > 32 ) ; ",
  "23765": "content [ 12 ] = ( byte ) ( lo > > 24 ) ; ",
  "23766": "content [ 13 ] = ( byte ) ( lo > > 16 ) ; ",
  "23767": "content [ 14 ] = ( byte ) ( lo > > 8 ) ; ",
  "23768": "content [ 15 ] = ( byte ) ( lo ) ; ",
  "23769": "} public static boolean isValidUUID ( char [ ] ch ) { ",
  "23770": "return ch != null && ",
  "23771": "ch . length == 36 && ",
  "23772": "validHex ( ch [ 0 ] ) && ",
  "23773": "validHex ( ch [ 1 ] ) && ",
  "23774": "validHex ( ch [ 2 ] ) && ",
  "23775": "validHex ( ch [ 3 ] ) && ",
  "23776": "validHex ( ch [ 4 ] ) && ",
  "23777": "validHex ( ch [ 5 ] ) && ",
  "23778": "validHex ( ch [ 6 ] ) && ",
  "23779": "validHex ( ch [ 7 ] ) && ",
  "23780": "ch [ 8 ] == '-' && ",
  "23781": "validHex ( ch [ 9 ] ) && ",
  "23782": "validHex ( ch [ 10 ] ) && ",
  "23783": "validHex ( ch [ 11 ] ) && ",
  "23784": "validHex ( ch [ 12 ] ) && ",
  "23785": "ch [ 13 ] == '-' && ",
  "23786": "validHex ( ch [ 14 ] ) && ",
  "23787": "validHex ( ch [ 15 ] ) && ",
  "23788": "validHex ( ch [ 16 ] ) && ",
  "23789": "validHex ( ch [ 17 ] ) && ",
  "23790": "ch [ 18 ] == '-' && ",
  "23791": "validHex ( ch [ 19 ] ) && ",
  "23792": "validHex ( ch [ 20 ] ) && ",
  "23793": "validHex ( ch [ 21 ] ) && ",
  "23794": "validHex ( ch [ 22 ] ) && ",
  "23795": "ch [ 23 ] == '-' && ",
  "23796": "validHex ( ch [ 24 ] ) && ",
  "23797": "validHex ( ch [ 25 ] ) && ",
  "23798": "validHex ( ch [ 26 ] ) && ",
  "23799": "validHex ( ch [ 27 ] ) && ",
  "23800": "validHex ( ch [ 28 ] ) && ",
  "23801": "validHex ( ch [ 29 ] ) && ",
  "23802": "validHex ( ch [ 30 ] ) && ",
  "23803": "validHex ( ch [ 31 ] ) && ",
  "23804": "validHex ( ch [ 32 ] ) && ",
  "23805": "validHex ( ch [ 33 ] ) && ",
  "23806": "validHex ( ch [ 34 ] ) && ",
  "23807": "validHex ( ch [ 35 ] ) ; ",
  "23808": "} public static void useSequentialIds ( ) { ",
  "23809": "if ( ! sequential ) { ",
  "23810": "TimeZone tz = TimeZone . getTimeZone ( \"UTC\" ) ; ",
  "23811": "DateFormat df = new SimpleDateFormat ( \"yyyyMMddHHmm\" ) ; ",
  "23812": "df . setTimeZone ( tz ) ; ",
  "23813": "String date = df . format ( new Date ( ) ) . substring ( 0 , 11 ) ; ",
  "23814": "byte [ ] digest ; ",
  "23815": "MessageDigest md = MessageDigest . getInstance ( \"MD5\" ) ; ",
  "23816": "digest = md . digest ( date . getBytes ( \"UTF-8\" ) ) ; ",
  "23817": "int x ; ",
  "23818": "x = ( ( int ) digest [ 0 ] & 0xFF ) ; ",
  "23819": "x |= ( ( int ) digest [ 1 ] & 0xFF ) << 8 ; ",
  "23820": "x |= ( ( int ) digest [ 2 ] & 0xFF ) << 16 ; ",
  "23821": "x |= ( ( int ) digest [ 3 ] & 0xFF ) << 24 ; ",
  "23822": "COUNTER . set ( x ) ; ",
  "23823": "sequential = true ; ",
  "23824": "} private static int intValue ( char x ) { ",
  "23825": "if ( x >= '0' && x <= '9' ) ",
  "23826": "return x - '0' ; ",
  "23827": "if ( x >= 'a' && x <= 'f' ) ",
  "23828": "return x - 'a' + 10 ; ",
  "23829": "if ( x >= 'A' && x <= 'F' ) ",
  "23830": "return x - 'A' + 10 ; ",
  "23831": "} private static byte mapToByte ( char a , char b ) { ",
  "23832": "int ai = intValue ( a ) ; ",
  "23833": "int bi = intValue ( b ) ; ",
  "23834": "return ( byte ) ( ( ai << 4 ) | bi ) ; ",
  "23835": "} public long getMostSignificantBits ( ) { ",
  "23836": "long a ; ",
  "23837": "a = ( ( long ) content [ 0 ] & 0xFF ) << 56 ; ",
  "23838": "a |= ( ( long ) content [ 1 ] & 0xFF ) << 48 ; ",
  "23839": "a |= ( ( long ) content [ 2 ] & 0xFF ) << 40 ; ",
  "23840": "a |= ( ( long ) content [ 3 ] & 0xFF ) << 32 ; ",
  "23841": "a |= ( ( long ) content [ 4 ] & 0xFF ) << 24 ; ",
  "23842": "a |= ( ( long ) content [ 5 ] & 0xFF ) << 16 ; ",
  "23843": "a |= ( ( long ) content [ 6 ] & 0xFF ) << 8 ; ",
  "23844": "a |= ( ( long ) content [ 7 ] & 0xFF ) ; ",
  "23845": "} public long getLeastSignificantBits ( ) { ",
  "23846": "b = ( ( long ) content [ 8 ] & 0xFF ) << 56 ; ",
  "23847": "b |= ( ( long ) content [ 9 ] & 0xFF ) << 48 ; ",
  "23848": "b |= ( ( long ) content [ 10 ] & 0xFF ) << 40 ; ",
  "23849": "b |= ( ( long ) content [ 11 ] & 0xFF ) << 32 ; ",
  "23850": "b |= ( ( long ) content [ 12 ] & 0xFF ) << 24 ; ",
  "23851": "b |= ( ( long ) content [ 13 ] & 0xFF ) << 16 ; ",
  "23852": "b |= ( ( long ) content [ 14 ] & 0xFF ) << 8 ; ",
  "23853": "b |= ( ( long ) content [ 15 ] & 0xFF ) ; ",
  "23854": "} public Date getTimestamp ( ) { ",
  "23855": "if ( getVersion ( ) != VERSION ) ",
  "23856": "long time ; ",
  "23857": "time = ( ( long ) content [ 10 ] & 0xFF ) << 40 ; ",
  "23858": "time |= ( ( long ) content [ 11 ] & 0xFF ) << 32 ; ",
  "23859": "time |= ( ( long ) content [ 12 ] & 0xFF ) << 24 ; ",
  "23860": "time |= ( ( long ) content [ 13 ] & 0xFF ) << 16 ; ",
  "23861": "time |= ( ( long ) content [ 14 ] & 0xFF ) << 8 ; ",
  "23862": "time |= ( ( long ) content [ 15 ] & 0xFF ) ; ",
  "23863": "return new Date ( time ) ; ",
  "23864": "} public byte [ ] getMacFragment ( ) { ",
  "23865": "if ( getVersion ( ) != 'b' ) ",
  "23866": "byte [ ] x = new byte [ 6 ] ; ",
  "23867": "x [ 0 ] = 0 ; ",
  "23868": "x [ 1 ] = 0 ; ",
  "23869": "x [ 2 ] = ( byte ) ( content [ 6 ] & 0xF ) ; ",
  "23870": "x [ 3 ] = content [ 7 ] ; ",
  "23871": "x [ 4 ] = content [ 8 ] ; ",
  "23872": "x [ 5 ] = content [ 9 ] ; ",
  "23873": "} private static byte [ ] macAddress ( ) { ",
  "23874": "Enumeration < NetworkInterface > interfaces = NetworkInterface . getNetworkInterfaces ( ) ; ",
  "23875": "byte [ ] mac = null ; ",
  "23876": "while ( interfaces . hasMoreElements ( ) && ( mac == null || mac . length != 6 ) ) { ",
  "23877": "NetworkInterface netInterface = interfaces . nextElement ( ) ; ",
  "23878": "if ( netInterface . isLoopback ( ) || netInterface . isVirtual ( ) ) ",
  "23879": "mac = netInterface . getHardwareAddress ( ) ; ",
  "23880": "if ( mac == null ) ",
  "23881": "mac = new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 } ; ",
  "23882": "return mac ; ",
  "23883": "} private static int processId ( ) { ",
  "23884": "final String jvmName = ManagementFactory . getRuntimeMXBean ( ) . getName ( ) ; ",
  "23885": "final int index = jvmName . indexOf ( '@' ) ; ",
  "23886": "if ( index < 1 ) ",
  "23887": "return Integer . parseInt ( jvmName . substring ( 0 , index ) ) % MAX_PID ; ",
  "23888": "} public < T , U > U forStream ( ",
  "23889": "String fileName , ",
  "23890": "Class < T > clazz , ",
  "23891": "Function < ? super Stream < T > , U > handleStream ) { ",
  "23892": "String sql = getTemplate ( fileName , EMPTY_ARGS ) ; ",
  "23893": "PreparedStatementSetter pss = paramBuilder . byArgs ( new Object [ 0 ] ) ; ",
  "23894": "RowMapper < T > mapper = mapperBuilder . mapper ( clazz ) ; ",
  "23895": "return queryStreamWithOrdinalParams ( sql , pss , mapper , handleStream ) ; ",
  "23896": "Map < String , Object > params , ",
  "23897": "String sql = getTemplate ( fileName , params ) ; ",
  "23898": "SqlParameterSource sps = paramBuilder . byMap ( params ) ; ",
  "23899": "return queryStreamWithNamedParams ( sql , sps , mapper , handleStream ) ; ",
  "23900": "Object entity , ",
  "23901": "String sql = getTemplate ( fileName , entity ) ; ",
  "23902": "SQLExceptionTranslator excTranslator = jdbcTemplate . getExceptionTranslator ( ) ; ",
  "23903": "if ( TypeUtils . isSimpleValueType ( entity . getClass ( ) ) ) { ",
  "23904": "PreparedStatementSetter pss = paramBuilder . byArgs ( entity ) ; ",
  "23905": "SqlParameterSource sps = paramBuilder . byBean ( entity ) ; ",
  "23906": "} public < U > U forStream ( ",
  "23907": "Function < ? super Stream < Map < String , Object > > , U > handleStream ) { ",
  "23908": "RowMapper < Map < String , Object > > mapper = new ColumnMapRowMapper ( ) ; ",
  "23909": "} private < T , U > U queryStreamWithOrdinalParams ( ",
  "23910": "String sql , ",
  "23911": "PreparedStatementSetter pss , ",
  "23912": "RowMapper < T > mapper , ",
  "23913": "ResultSetExtractor < U > extractor ",
  "23914": "= new StreamResultSetExtractor ( sql , mapper , handleStream , excTranslator ) ; ",
  "23915": "return jdbcTemplate . query ( sql , pss , extractor ) ; ",
  "23916": "} private < T , U > U queryStreamWithNamedParams ( ",
  "23917": "SqlParameterSource sps , ",
  "23918": "return namedJdbcTemplate . query ( sql , sps , extractor ) ; ",
  "23919": "} public static Field [ ] get ( Class < ? > clazz ) { ",
  "23920": "Field [ ] fields = CACHED_FIELDS . get ( clazz ) ; ",
  "23921": "fields = clazz . getFields ( ) ; ",
  "23922": "CACHED_FIELDS . putIfAbsent ( clazz , fields ) ; ",
  "23923": "} public static boolean isSimpleValueType ( Class < ? > clazz ) { ",
  "23924": "return ClassUtils . isPrimitiveOrWrapper ( clazz ) || clazz . isEnum ( ) || ",
  "23925": "CharSequence . class . isAssignableFrom ( clazz ) || ",
  "23926": "Number . class . isAssignableFrom ( clazz ) || ",
  "23927": "Date . class . isAssignableFrom ( clazz ) || ",
  "23928": "Temporal . class . isAssignableFrom ( clazz ) || ",
  "23929": "clazz . equals ( URI . class ) || clazz . equals ( URL . class ) || ",
  "23930": "clazz . equals ( Locale . class ) || clazz . equals ( Class . class ) ; ",
  "23931": "public Object getValue ( String paramName ) { ",
  "23932": "Object value = values . get ( paramName ) ; ",
  "23933": "return Jsr310JdbcUtils . convertIfNecessary ( value , zoneId ) ; ",
  "23934": "} private Optional < T > fetchRow ( ) { ",
  "23935": "if ( this . row != null ) { ",
  "23936": "return Optional . of ( this . row ) ; ",
  "23937": "this . hasReachedEos = hasReachedEos || ! wrapSqlException ( ( ) -> rs . next ( ) ) ; ",
  "23938": "if ( this . hasReachedEos ) { ",
  "23939": "this . row = wrapSqlException ( ( ) -> mapper . mapRow ( rs , 1 ) ) ; ",
  "23940": "return Optional . ofNullable ( this . row ) ; ",
  "23941": "} < R > R wrapSqlException ( SqlAction < R > action ) { ",
  "23942": "return action . perform ( ) ; ",
  "23943": "} catch ( SQLException sqlException ) { ",
  "23944": "throw excTranslator . translate ( \"StreamResultSetExtractor\" , sql , sqlException ) ; ",
  "23945": "} protected static LocalDateTime getAsLocalDateTime ( ResultSet rs , int index ) throws SQLException { ",
  "23946": "Timestamp timestamp = rs . getTimestamp ( index ) ; ",
  "23947": "if ( timestamp != null ) { ",
  "23948": "return timestamp . toLocalDateTime ( ) ; ",
  "23949": "} protected static LocalDate getAsLocalDate ( ResultSet rs , int index ) throws SQLException { ",
  "23950": "Date date = rs . getDate ( index ) ; ",
  "23951": "if ( date != null ) { ",
  "23952": "return date . toLocalDate ( ) ; ",
  "23953": "} protected static LocalTime getAsLocalTime ( ResultSet rs , int index ) throws SQLException { ",
  "23954": "Time time = rs . getTime ( index ) ; ",
  "23955": "return time . toLocalTime ( ) ; ",
  "23956": "} protected static ZonedDateTime getAsZonedDateTime ( ResultSet rs , int index , ZoneId zoneId ) throws SQLException { ",
  "23957": "return timestamp . toLocalDateTime ( ) . atZone ( zoneId ) ; ",
  "23958": "} protected static OffsetDateTime getAsOffsetDateTime ( ResultSet rs , int index , ZoneId zoneId ) throws SQLException { ",
  "23959": "return timestamp . toLocalDateTime ( ) . atZone ( zoneId ) . toOffsetDateTime ( ) ; ",
  "23960": "} protected static OffsetTime getAsOffsetTime ( ResultSet rs , int index , ZoneId zoneId ) throws SQLException { ",
  "23961": "return time . toLocalTime ( ) . atOffset ( zoneId . getRules ( ) . getOffset ( Instant . now ( ) ) ) ; ",
  "23962": "public boolean hasValue ( String paramName ) { ",
  "23963": "return privateFields . contains ( paramName ) || publicFeilds . containsKey ( paramName ) ; ",
  "23964": "if ( privateFields . contains ( paramName ) ) { ",
  "23965": "value = beanWrapper . getPropertyValue ( paramName ) ; ",
  "23966": "} else if ( publicFeilds . containsKey ( paramName ) ) { ",
  "23967": "Field field = publicFeilds . get ( paramName ) ; ",
  "23968": "value = field . get ( entity ) ; ",
  "23969": "} private String underscoreName ( String name ) { ",
  "23970": "if ( ! StringUtils . hasLength ( name ) ) { ",
  "23971": "result . append ( name . substring ( 0 , 1 ) ",
  "23972": ". toLowerCase ( ) ) ; ",
  "23973": "for ( int i = 1 ; i < name . length ( ) ; i ++ ) { ",
  "23974": "String s = name . substring ( i , i + 1 ) ; ",
  "23975": "String slc = s . toLowerCase ( ) ; ",
  "23976": "if ( ! s . equals ( slc ) ) { ",
  "23977": "result . append ( \"_\" ) ",
  "23978": ". append ( slc ) ; ",
  "23979": "result . append ( s ) ; ",
  "23980": "public T mapRow ( ResultSet rs , int rowNumber ) throws SQLException { ",
  "23981": "T mappedObject = BeanUtils . instantiate ( this . mappedClass ) ; ",
  "23982": "BeanWrapper bw = PropertyAccessorFactory . forBeanPropertyAccess ( mappedObject ) ; ",
  "23983": "ResultSetMetaData metaData = rs . getMetaData ( ) ; ",
  "23984": "int columnCount = metaData . getColumnCount ( ) ; ",
  "23985": "for ( int index = 1 ; index <= columnCount ; index ++ ) { ",
  "23986": "String column = JdbcUtils . lookupColumnName ( metaData , index ) ; ",
  "23987": "if ( privateFields . containsKey ( name ) ) { ",
  "23988": "PropertyDescriptor pd = privateFields . get ( name ) ; ",
  "23989": "value = getColumnValue ( rs , index , pd . getPropertyType ( ) ) ; ",
  "23990": "if ( logger . isDebugEnabled ( ) && rowNumber == 0 ) { ",
  "23991": "bw . setPropertyValue ( pd . getName ( ) , value ) ; ",
  "23992": "} else if ( publicFields . containsKey ( name ) ) { ",
  "23993": "Field field = this . publicFields . get ( name ) ; ",
  "23994": "value = getColumnValue ( rs , index , field . getType ( ) ) ; ",
  "23995": "field . set ( mappedObject , value ) ; ",
  "23996": "return mappedObject ; ",
  "23997": "} protected Object getColumnValue ( ResultSet rs , int index , Class < ? > requiredType ) throws SQLException { ",
  "23998": "return Jsr310JdbcUtils . getResultSetValue ( rs , index , requiredType , zoneId ) ; ",
  "23999": "} protected void doSetValue ( PreparedStatement ps , int parameterPosition , Object argValue ) throws SQLException { ",
  "24000": "super . doSetValue ( ps , parameterPosition , Jsr310JdbcUtils . convertIfNecessary ( argValue , zoneId ) ) ; ",
  "24001": "public U extractData ( ResultSet rs ) { ",
  "24002": "Iterable < T > iterable = ( ) -> new ResultSetIterator ( sql , rs , mapper , excTranslator ) ; ",
  "24003": "Stream < T > stream = StreamSupport . stream ( iterable . spliterator ( ) , false ) ; ",
  "24004": "return handleStream . apply ( stream ) ; ",
  "24005": "} public File upload ( int pollingInterval ) throws UploadFailureException { ",
  "24006": "RequestHelper requestHelper = client . getRequestHelper ( ) ; ",
  "24007": "URI uploadUrl = Urls . uploadFromUrl ( sourceUrl , client . getPublicKey ( ) , store ) ; ",
  "24008": "String token = requestHelper . executeQuery ( new HttpGet ( uploadUrl ) , false , UploadFromUrlData . class ) . token ; ",
  "24009": "URI statusUrl = Urls . uploadFromUrlStatus ( token ) ; ",
  "24010": "sleep ( pollingInterval ) ; ",
  "24011": "HttpGet request = new HttpGet ( statusUrl ) ; ",
  "24012": "UploadFromUrlStatusData data = requestHelper . executeQuery ( request , false , UploadFromUrlStatusData . class ) ; ",
  "24013": "if ( data . status . equals ( \"success\" ) ) { ",
  "24014": "return client . getFile ( data . fileId ) ; ",
  "24015": "} else if ( data . status . equals ( \"error\" ) || data . status . equals ( \"failed\" ) ) { ",
  "24016": "throw new UploadFailureException ( ) ; ",
  "24017": "} public CdnPathBuilder crop ( int width , int height ) { ",
  "24018": "dimensionsGuard ( width , height ) ; ",
  "24019": "sb . append ( \"/-/crop/\" ) ",
  "24020": ". append ( width ) ",
  "24021": ". append ( \"x\" ) ",
  "24022": ". append ( height ) ; ",
  "24023": "} public CdnPathBuilder cropCenter ( int width , int height ) { ",
  "24024": ". append ( height ) ",
  "24025": ". append ( \"/center\" ) ; ",
  "24026": "} public CdnPathBuilder cropColor ( int width , int height , Color color ) { ",
  "24027": ". append ( \"/\" ) ",
  "24028": ". append ( colorToHex ( color ) ) ; ",
  "24029": "} public CdnPathBuilder resizeWidth ( int width ) { ",
  "24030": "dimensionGuard ( width ) ; ",
  "24031": "sb . append ( \"/-/resize/\" ) ",
  "24032": ". append ( \"x\" ) ; ",
  "24033": "} public CdnPathBuilder resize ( int width , int height ) { ",
  "24034": "} public CdnPathBuilder scaleCrop ( int width , int height ) { ",
  "24035": "sb . append ( \"/-/scale_crop/\" ) ",
  "24036": "} public CdnPathBuilder scaleCropCenter ( int width , int height ) { ",
  "24037": "} public CdnPathBuilder blur ( int strength ) { ",
  "24038": "if ( strength < 0 || strength > 5000 ) { ",
  "24039": "strength = 10 ; ",
  "24040": "sb . append ( \"/-/blur/\" ) ",
  "24041": ". append ( strength ) ; ",
  "24042": "} public CdnPathBuilder sharp ( int strength ) { ",
  "24043": "if ( strength < 0 || strength > 20 ) { ",
  "24044": "strength = 5 ; ",
  "24045": "sb . append ( \"/-/sharp/\" ) ",
  "24046": "} public CdnPathBuilder preview ( int width , int height ) { ",
  "24047": "sb . append ( \"/-/preview/\" ) ",
  "24048": "} public Project getProject ( ) { ",
  "24049": "URI url = Urls . apiProject ( ) ; ",
  "24050": "RequestHelper requestHelper = getRequestHelper ( ) ; ",
  "24051": "ProjectData projectData = requestHelper . executeQuery ( new HttpGet ( url ) , true , ProjectData . class ) ; ",
  "24052": "return new Project ( this , projectData ) ; ",
  "24053": "} public File getFile ( String fileId ) { ",
  "24054": "URI url = Urls . apiFile ( fileId ) ; ",
  "24055": "FileData fileData = requestHelper . executeQuery ( new HttpGet ( url ) , true , FileData . class ) ; ",
  "24056": "return new File ( this , fileData ) ; ",
  "24057": "} public void deleteFile ( String fileId ) { ",
  "24058": "requestHelper . executeCommand ( new HttpDelete ( url ) , true ) ; ",
  "24059": "} public void saveFile ( String fileId ) { ",
  "24060": "URI url = Urls . apiFileStorage ( fileId ) ; ",
  "24061": "requestHelper . executeCommand ( new HttpPost ( url ) , true ) ; ",
  "24062": "} public File upload ( ) throws UploadFailureException { ",
  "24063": "URI uploadUrl = Urls . uploadBase ( ) ; ",
  "24064": "HttpPost request = new HttpPost ( uploadUrl ) ; ",
  "24065": "MultipartEntityBuilder entityBuilder = MultipartEntityBuilder . create ( ) ; ",
  "24066": "entityBuilder . addTextBody ( \"UPLOADCARE_PUB_KEY\" , client . getPublicKey ( ) ) ; ",
  "24067": "entityBuilder . addTextBody ( \"UPLOADCARE_STORE\" , store ) ; ",
  "24068": "entityBuilder . addPart ( \"file\" , new FileBody ( file ) ) ; ",
  "24069": "entityBuilder . addBinaryBody ( \"file\" , stream ) ; ",
  "24070": "entityBuilder . addPart ( \"file\" , new ByteArrayBody ( bytes , filename ) ) ; ",
  "24071": "request . setEntity ( entityBuilder . build ( ) ) ; ",
  "24072": "String fileId = client . getRequestHelper ( ) ",
  "24073": ". executeQuery ( request , false , UploadBaseData . class ) . file ; ",
  "24074": "return client . getFile ( fileId ) ; ",
  "24075": "} public HttpResponse executeCommand ( HttpUriRequest request , boolean apiHeaders ) { ",
  "24076": "if ( apiHeaders ) { ",
  "24077": "setApiHeaders ( request ) ; ",
  "24078": "CloseableHttpResponse response = client . getHttpClient ( ) . execute ( request ) ; ",
  "24079": "checkResponseStatus ( response ) ; ",
  "24080": "throw new UploadcareNetworkException ( e ) ; ",
  "24081": "} private void checkResponseStatus ( HttpResponse response ) throws IOException { ",
  "24082": "int statusCode = response . getStatusLine ( ) . getStatusCode ( ) ; ",
  "24083": "if ( statusCode >= 200 && statusCode < 300 ) { ",
  "24084": "} else if ( statusCode == 401 || statusCode == 403 ) { ",
  "24085": "throw new UploadcareAuthenticationException ( ",
  "24086": "streamToString ( response . getEntity ( ) . getContent ( ) ) ) ; ",
  "24087": "} else if ( statusCode == 400 || statusCode == 404 ) { ",
  "24088": "throw new UploadcareInvalidRequestException ( ",
  "24089": "throw new UploadcareApiException ( ",
  "24090": "response . getEntity ( ) . getContent ( ) ) ) ; ",
  "24091": "} private static String streamToString ( InputStream is ) { ",
  "24092": "java . util . Scanner s = new java . util . Scanner ( is , \"UTF-8\" ) . useDelimiter ( \"\\\\A\" ) ; ",
  "24093": "return s . hasNext ( ) ? s . next ( ) : \"\" ; ",
  "24094": "} public static URI uploadFromUrl ( String sourceUrl , String pubKey , String store ) { ",
  "24095": "URIBuilder builder = new URIBuilder ( URI . create ( UPLOAD_BASE ) ) ; ",
  "24096": "builder . setPath ( \"/from_url/\" ) ",
  "24097": ". setParameter ( \"source_url\" , sourceUrl ) ",
  "24098": ". setParameter ( \"pub_key\" , pubKey ) ",
  "24099": ". setParameter ( \"store\" , store ) ; ",
  "24100": "return trustedBuild ( builder ) ; ",
  "24101": "} public static URI uploadFromUrlStatus ( String token ) { ",
  "24102": "builder . setPath ( \"/from_url/status/\" ) ",
  "24103": ". setParameter ( \"token\" , token ) ; ",
  "24104": "} public static Builder newBuilder ( Context context , int themeResId ) { ",
  "24105": "if ( Build . VERSION . SDK_INT >= 21 ) { ",
  "24106": "return new APi21Builder ( context , themeResId ) ; ",
  "24107": "return new Api20Builder ( context , themeResId ) ; ",
  "24108": "} private void onCommonClick ( ) { ",
  "24109": "AlertDialog . build ( this ) ",
  "24110": ". setTitle ( \"\u6807\u9898\" ) ",
  "24111": ". setMessage ( \"\u63d0\u793a\u4fe1\u606f\" ) ",
  "24112": ". setNeutralButton ( \"\u5ffd\u7565\" , ( dialog , which ) -> { ",
  "24113": "Toast . makeText ( MainActivity . this , \"\u70b9\u51fb\u4e86\u5ffd\u7565\" , Toast . LENGTH_SHORT ) . show ( ) ; ",
  "24114": ". setNegativeButton ( \"\u53d6\u6d88\" , ( dialog , which ) -> { ",
  "24115": "Toast . makeText ( MainActivity . this , \"\u70b9\u51fb\u4e86\u53d6\u6d88\" , Toast . LENGTH_SHORT ) . show ( ) ; ",
  "24116": ". setPositiveButton ( \"\u597d\u7684\" , ( dialog , which ) -> { ",
  "24117": "Toast . makeText ( MainActivity . this , \"\u70b9\u51fb\u4e86\u786e\u5b9a\" , Toast . LENGTH_SHORT ) . show ( ) ; ",
  "24118": ". show ( ) ; ",
  "24119": "} private void onSpecialClick ( ) { ",
  "24120": "AlertDialog alertDialog = AlertDialog . build ( this ) ",
  "24121": ". setNeutralButton ( \"\u5ffd\u7565\" , null ) ",
  "24122": ". setNegativeButton ( \"\u53d6\u6d88\" , null ) ",
  "24123": ". setPositiveButton ( \"\u597d\u7684\" , null ) ",
  "24124": "Button btnNeutral = alertDialog . getButton ( DialogInterface . BUTTON_NEUTRAL ) ; ",
  "24125": "btnNeutral . setOnClickListener ( v -> { ",
  "24126": "Toast . makeText ( MainActivity . this , \"\u6211\u4eec\u62e6\u622a\u4e86\u5ffd\u7565\u70b9\u51fb\u5173\u95eddialog\u64cd\u4f5c\" , ",
  "24127": "Toast . LENGTH_SHORT ) . show ( ) ; ",
  "24128": "Button btnNegative = alertDialog . getButton ( DialogInterface . BUTTON_NEGATIVE ) ; ",
  "24129": "btnNegative . setOnClickListener ( v -> { ",
  "24130": "alertDialog . dismiss ( ) ; ",
  "24131": "Toast . makeText ( MainActivity . this , \"\u70b9\u51fb\u4e86\u53d6\u6d88\" , ",
  "24132": "Button btnPositive = alertDialog . getButton ( DialogInterface . BUTTON_POSITIVE ) ; ",
  "24133": "btnPositive . setOnClickListener ( v -> { ",
  "24134": "Toast . makeText ( MainActivity . this , \"\u70b9\u51fb\u4e86\u786e\u5b9a\" , ",
  "24135": "} protected String [ ] buildArgs ( ) { ",
  "24136": "String result [ ] = new String [ 0 ] ; ",
  "24137": "List < String > args = new ArrayList < String > ( ) ; ",
  "24138": "if ( lang != null && lang . length ( ) > 0 ) { ",
  "24139": "args . add ( flagify ( CowsayCli . Opt . LANG . toString ( ) ) ) ; ",
  "24140": "args . add ( lang ) ; ",
  "24141": "if ( html ) { ",
  "24142": "args . add ( flagify ( CowsayCli . Opt . HTML . toString ( ) ) ) ; ",
  "24143": "if ( alt != null && alt . length ( ) > 0 ) { ",
  "24144": "args . add ( flagify ( CowsayCli . Opt . ALT . toString ( ) ) ) ; ",
  "24145": "args . add ( alt ) ; ",
  "24146": "if ( wrap != null ) { ",
  "24147": "args . add ( flagify ( CowsayCli . Opt . WRAP_AT . toString ( ) ) ) ; ",
  "24148": "args . add ( wrap ) ; ",
  "24149": "buildFaceArgs ( args ) ; ",
  "24150": "args . add ( message ) ; ",
  "24151": "return args . toArray ( result ) ; ",
  "24152": "} private void buildFaceArgs ( final List < String > args ) { ",
  "24153": "if ( mode != null && CowFace . isKnownMode ( mode ) ) { ",
  "24154": "args . add ( flagify ( mode ) ) ; ",
  "24155": "if ( eyes != null ) { ",
  "24156": "args . add ( flagify ( CowsayCli . Opt . EYES . toString ( ) ) ) ; ",
  "24157": "args . add ( eyes ) ; ",
  "24158": "if ( tongue != null ) { ",
  "24159": "args . add ( flagify ( CowsayCli . Opt . TONGUE . toString ( ) ) ) ; ",
  "24160": "args . add ( tongue ) ; ",
  "24161": "if ( cowfile != null ) { ",
  "24162": "args . add ( flagify ( CowsayCli . Opt . COWFILE . toString ( ) ) ) ; ",
  "24163": "args . add ( cowfile ) ; ",
  "24164": "} public String execute ( ) throws IllegalStateException { ",
  "24165": "String [ ] args = buildArgs ( ) ; ",
  "24166": "if ( think ) { ",
  "24167": "result = Cowsay . think ( args ) ; ",
  "24168": "result = Cowsay . say ( args ) ; ",
  "24169": "public void execute ( ) throws BuildException { ",
  "24170": "String moo = executor . execute ( ) ; ",
  "24171": "if ( this . property != null && this . property . length ( ) > 0 ) { ",
  "24172": "getProject ( ) . setProperty ( this . property , moo ) ; ",
  "24173": "System . out . println ( moo ) ; ",
  "24174": "throw new BuildException ( ex . getMessage ( ) , ex ) ; ",
  "24175": "} public static void setLanguage ( final String language ) { ",
  "24176": "currentLocale = new Locale ( language ) ; ",
  "24177": "messages = ResourceBundle . getBundle ( \"MessagesBundle\" , currentLocale ) ; ",
  "24178": "} protected static String getMessage ( final String key ) { ",
  "24179": "if ( messages == null ) { ",
  "24180": "setLanguage ( DEFAULT_LANG ) ; ",
  "24181": "return messages . getString ( key ) ; ",
  "24182": "} private static String sayOrThink ( final String [ ] args , final boolean think ) { ",
  "24183": "boolean isThought = think ; ",
  "24184": "String wordwrap = null ; ",
  "24185": "CommandLine commandLine = CowsayCli . parseCmdArgs ( args ) ; ",
  "24186": "if ( commandLine != null ) { ",
  "24187": "if ( commandLine . hasOption ( CowsayCli . Opt . HELP . toString ( ) ) ) { ",
  "24188": "CowsayCli . showCmdLineHelp ( ) ; ",
  "24189": "else if ( commandLine . hasOption ( CowsayCli . Opt . LIST_COWS . toString ( ) ) ) { ",
  "24190": "String [ ] files = Cowloader . listAllCowfiles ( ) ; ",
  "24191": "return StringUtils . join ( files , System . getProperty ( \"line.separator\" ) ) ; ",
  "24192": "String cowfileSpec = null ; ",
  "24193": "CowFace cowFace = null ; ",
  "24194": "if ( commandLine . hasOption ( CowsayCli . Opt . WRAP_AT . toString ( ) ) ) { ",
  "24195": "wordwrap = commandLine . getOptionValue ( CowsayCli . Opt . WRAP_AT . toString ( ) ) ; ",
  "24196": "else if ( commandLine . hasOption ( CowsayCli . Opt . NOWRAP . toString ( ) ) ) { ",
  "24197": "wordwrap = \"0\" ; ",
  "24198": "cowFace = getCowFaceByMode ( commandLine ) ; ",
  "24199": "if ( cowFace == null ) { ",
  "24200": "if ( commandLine . hasOption ( CowsayCli . Opt . COWFILE . toString ( ) ) ) { ",
  "24201": "cowfileSpec = commandLine . getOptionValue ( CowsayCli . Opt . COWFILE . toString ( ) ) ; ",
  "24202": "cowFace = getCowFace ( commandLine ) ; ",
  "24203": "if ( commandLine . hasOption ( CowsayCli . Opt . THINK . toString ( ) ) ) { ",
  "24204": "isThought = true ; ",
  "24205": "if ( cowfileSpec == null ) { ",
  "24206": "cowfileSpec = Cowloader . DEFAULT_COW ; ",
  "24207": "String cowTemplate = Cowloader . load ( cowfileSpec ) ; ",
  "24208": "if ( cowTemplate != null ) { ",
  "24209": "String moosages [ ] = commandLine . getArgs ( ) ; ",
  "24210": "if ( moosage != null && moosage . length ( ) > 0 ) { ",
  "24211": "Message message = new Message ( moosage , isThought ) ; ",
  "24212": "if ( wordwrap != null ) { ",
  "24213": "message . setWordwrap ( wordwrap ) ; ",
  "24214": "String cow = CowFormatter . formatCow ( cowTemplate , cowFace , message ) ; ",
  "24215": "cow = formatHtml ( commandLine , cow , moosage , isThought ) ; ",
  "24216": "return cow ; ",
  "24217": "catch ( CowParseException ex ) { ",
  "24218": "Logger . getLogger ( Cowsay . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; ",
  "24219": "} private static String formatHtml ( final CommandLine commandLine , final String plainCow , final String moosage , ",
  "24220": "final boolean isThought ) { ",
  "24221": "String cow = plainCow ; ",
  "24222": "if ( commandLine . hasOption ( CowsayCli . Opt . HTML . toString ( ) ) ) { ",
  "24223": "cow = StringEscapeUtils . escapeHtml4 ( cow ) ; ",
  "24224": "String alt ; ",
  "24225": "if ( commandLine . hasOption ( CowsayCli . Opt . ALT . toString ( ) ) ) { ",
  "24226": "alt = commandLine . getOptionValue ( CowsayCli . Opt . ALT . toString ( ) ) ; ",
  "24227": "alt = isThought ? I18n . getMessage ( \"altthink\" ) : I18n . getMessage ( \"altsay\" ) ; ",
  "24228": "String escaped = StringEscapeUtils . escapeHtml4 ( moosage ) ; ",
  "24229": "cow += String . format ( alt , escaped ) ; ",
  "24230": "cow += \"</figcaption></figure>\" ; ",
  "24231": "} private static CowFace getCowFaceByMode ( final CommandLine commandLine ) { ",
  "24232": "Set < String > modes = CowFace . COW_MODES . keySet ( ) ; ",
  "24233": "for ( String mode : modes ) { ",
  "24234": "if ( commandLine . hasOption ( mode ) ) { ",
  "24235": "cowFace = CowFace . getByMode ( mode ) ; ",
  "24236": "return cowFace ; ",
  "24237": "} private static CowFace getCowFace ( final CommandLine commandLine ) { ",
  "24238": "CowFace cowFace ; ",
  "24239": "cowFace = new CowFace ( ) ; ",
  "24240": "if ( commandLine . hasOption ( CowsayCli . Opt . EYES . toString ( ) ) ) { ",
  "24241": "cowFace . setEyes ( commandLine . getOptionValue ( CowsayCli . Opt . EYES . toString ( ) ) ) ; ",
  "24242": "if ( commandLine . hasOption ( CowsayCli . Opt . TONGUE . toString ( ) ) ) { ",
  "24243": "cowFace . setTongue ( commandLine . getOptionValue ( CowsayCli . Opt . TONGUE . toString ( ) ) ) ; ",
  "24244": "CowsayCli . addCowthinkOption ( ) ; ",
  "24245": "String cowsay = say ( args ) ; ",
  "24246": "if ( cowsay != null && cowsay . length ( ) > 0 ) { ",
  "24247": "System . out . println ( cowsay ) ; ",
  "24248": "} private static String extractCowTemplate ( final String cow ) throws CowParseException { ",
  "24249": "Matcher matcher = COWSTART_RE . matcher ( cow ) ; ",
  "24250": "if ( matcher . find ( 0 ) ) { ",
  "24251": "String result = matcher . replaceFirst ( \"\" ) ; ",
  "24252": "} public static String formatCow ( final String cow , final CowFace face , final Message message ) throws CowParseException { ",
  "24253": "String result = extractCowTemplate ( cow ) ; ",
  "24254": "String tongue = face . getTongue ( ) ; ",
  "24255": "String eyes = face . getEyes ( ) ; ",
  "24256": "result = result . replaceAll ( \"\\\\\\\\\\\\\\\\\" , \"\\\\\\\\\" ) ; ",
  "24257": "result = result . replace ( \"\\\\@\" , \"@\" ) ; ",
  "24258": "result = result . replace ( \"\\\\$\" , \"$\" ) ; ",
  "24259": "result = result . replace ( \"${tongue}\" , tongue ) ; ",
  "24260": "result = result . replace ( \"$tongue\" , tongue ) ; ",
  "24261": "result = result . replace ( \"$thoughts\" , message . getThoughts ( ) ) ; ",
  "24262": "result = result . replace ( \"${eyes}\" , eyes ) ; ",
  "24263": "result = result . replace ( \"$eyes\" , eyes ) ; ",
  "24264": "result = result . replaceAll ( \"EOC\\\\s*$\" , \"\" ) ; ",
  "24265": "result = message . getMessage ( ) + result ; ",
  "24266": "} public static String load ( final String cowfileSpec ) { ",
  "24267": "String effectiveCowfileSpec = ( cowfileSpec != null ) ? cowfileSpec . trim ( ) : DEFAULT_COW ; ",
  "24268": "if ( effectiveCowfileSpec . length ( ) > 0 ) { ",
  "24269": "if ( ! effectiveCowfileSpec . endsWith ( COWFILE_EXT ) ) { ",
  "24270": "effectiveCowfileSpec += COWFILE_EXT ; ",
  "24271": "InputStream cowInputStream ; ",
  "24272": "if ( effectiveCowfileSpec . indexOf ( File . separatorChar ) >= 0 ) { ",
  "24273": "cowInputStream = getCowFromPath ( effectiveCowfileSpec ) ; ",
  "24274": "cowInputStream = getCowFromCowPath ( effectiveCowfileSpec ) ; ",
  "24275": "if ( cowInputStream == null ) { ",
  "24276": "cowInputStream = getCowFromResources ( DEFAULT_COW + COWFILE_EXT ) ; ",
  "24277": "if ( cowInputStream != null ) { ",
  "24278": "String cow = cowInputStreamToString ( cowInputStream ) ; ",
  "24279": "} private static String cowInputStreamToString ( final InputStream cowInputStream ) { ",
  "24280": "BufferedReader reader = new BufferedReader ( new InputStreamReader ( cowInputStream ) ) ; ",
  "24281": "String newLine = System . getProperty ( \"line.separator\" ) ; ",
  "24282": "sb . append ( line ) ; ",
  "24283": "sb . append ( newLine ) ; ",
  "24284": "Logger . getLogger ( Cowloader . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; ",
  "24285": "cowInputStream . close ( ) ; ",
  "24286": "} private static InputStream getCowFromPath ( final String path ) { ",
  "24287": "String cwd = System . getProperty ( \"user.dir\" ) ; ",
  "24288": "if ( cwd != null ) { ",
  "24289": "File cowfile = new File ( cwd , path ) ; ",
  "24290": "if ( isCowfile ( cowfile ) ) { ",
  "24291": "return cowfileToCowInputStream ( cowfile ) ; ",
  "24292": "File cowfile = new File ( path ) ; ",
  "24293": "} private static InputStream getCowFromCowPath ( final String cowName ) { ",
  "24294": "String cowPath = System . getenv ( \"COWPATH\" ) ; ",
  "24295": "if ( cowPath != null ) { ",
  "24296": "String [ ] paths = cowPath . split ( File . pathSeparator ) ; ",
  "24297": "File cowfile = getCowfile ( path , cowName ) ; ",
  "24298": "return getCowFromResources ( cowName ) ; ",
  "24299": "} public static String [ ] listAllCowfiles ( ) { ",
  "24300": "String [ ] resultAsArray ; ",
  "24301": "String [ ] bundled = null ; ",
  "24302": "String cowfileExtRe = \"\\\\\" + COWFILE_EXT + \"$\" ; ",
  "24303": "InputStream bundleStream = Cowloader . class . getResourceAsStream ( \"/cowfile-list.csv\" ) ; ",
  "24304": "if ( bundleStream != null ) { ",
  "24305": "BufferedReader reader = new BufferedReader ( new InputStreamReader ( bundleStream ) ) ; ",
  "24306": "String bundleList = sb . toString ( ) ; ",
  "24307": "bundled = bundleList . split ( \",\" ) ; ",
  "24308": "Logger . getLogger ( Cowloader . class . getName ( ) ) . log ( Level . WARNING , null , ex ) ; ",
  "24309": "bundleStream . close ( ) ; ",
  "24310": "if ( bundled != null ) { ",
  "24311": "for ( String cowfile : bundled ) { ",
  "24312": "if ( cowfile . endsWith ( COWFILE_EXT ) ) { ",
  "24313": "result . add ( cowfile . replaceAll ( cowfileExtRe , \"\" ) ) ; ",
  "24314": "File [ ] cowfiles = getCowFiles ( path ) ; ",
  "24315": "if ( cowfiles != null ) { ",
  "24316": "for ( File cowfile : cowfiles ) { ",
  "24317": "result . add ( cowfile . getName ( ) . replaceAll ( cowfileExtRe , \"\" ) ) ; ",
  "24318": "resultAsArray = result . toArray ( new String [ result . size ( ) ] ) ; ",
  "24319": "Arrays . sort ( resultAsArray ) ; ",
  "24320": "return resultAsArray ; ",
  "24321": "} private static boolean isCowfile ( final File cowfile ) { ",
  "24322": "if ( cowfile != null && cowfile . exists ( ) ) { ",
  "24323": "return cowfile . getName ( ) . endsWith ( COWFILE_EXT ) ; ",
  "24324": "} private static InputStream cowfileToCowInputStream ( final File cowfile ) { ",
  "24325": "InputStream cowInputStream = null ; ",
  "24326": "cowInputStream = new FileInputStream ( cowfile ) ; ",
  "24327": "} catch ( FileNotFoundException ex ) { ",
  "24328": "return cowInputStream ; ",
  "24329": "} private static File getCowfile ( final String folder , final String cowName ) { ",
  "24330": "File [ ] cowfiles = getCowFiles ( folder ) ; ",
  "24331": "if ( cowfile . getName ( ) . equals ( cowName ) ) { ",
  "24332": "return cowfile ; ",
  "24333": "} private static File [ ] getCowFiles ( final String folder ) { ",
  "24334": "File dir = new File ( folder ) ; ",
  "24335": "File [ ] files ; ",
  "24336": "files = dir . listFiles ( new FilenameFilter ( ) { ",
  "24337": "public boolean accept ( final File dir , final String name ) { ",
  "24338": "return name . endsWith ( \".cow\" ) ; ",
  "24339": "} protected static CowFace getByMode ( final String mode ) { ",
  "24340": "return COW_MODES . get ( mode ) ; ",
  "24341": "} public final void setEyes ( final String eyes ) { ",
  "24342": "if ( eyes != null && eyes . length ( ) > 0 ) { ",
  "24343": "if ( eyes . length ( ) > 2 ) { ",
  "24344": "this . eyes = eyes . substring ( 0 , 2 ) ; ",
  "24345": "this . eyes = eyes ; ",
  "24346": "} public final void setTongue ( final String tongue ) { ",
  "24347": "if ( tongue != null && tongue . length ( ) > 0 ) { ",
  "24348": "if ( tongue . length ( ) > 2 ) { ",
  "24349": "this . tongue = tongue . substring ( 0 , 2 ) ; ",
  "24350": "this . tongue = tongue ; ",
  "24351": "} public static final boolean isKnownMode ( final String mode ) { ",
  "24352": "Set < String > modes = COW_MODES . keySet ( ) ; ",
  "24353": "return modes . contains ( mode ) ; ",
  "24354": "} protected static void addCowthinkOption ( ) { ",
  "24355": "if ( ! options . hasOption ( null ) ) { ",
  "24356": "options . addOption ( null , Opt . THINK . text , false , \"\" ) ; ",
  "24357": "} public static CommandLine parseCmdArgs ( final String [ ] argv ) { ",
  "24358": "final CommandLineParser cmdLineParser = new DefaultParser ( ) ; ",
  "24359": "CommandLine parsed = cmdLineParser . parse ( options , argv , true ) ; ",
  "24360": "if ( parsed . hasOption ( Opt . LANG . text ) ) { ",
  "24361": "String language = parsed . getOptionValue ( Opt . LANG . text ) ; ",
  "24362": "I18n . setLanguage ( language ) ; ",
  "24363": "catch ( MissingArgumentException ex ) { ",
  "24364": "Option option = ex . getOption ( ) ; ",
  "24365": "String flag = option . getOpt ( ) ; ",
  "24366": "flag = option . getLongOpt ( ) ; ",
  "24367": "Logger . getLogger ( CowsayCli . class . getName ( ) ) . log ( Level . INFO , I18n . getMessage ( \"missingarg\" ) , flag ) ; ",
  "24368": "catch ( ParseException ex ) { ",
  "24369": "Logger . getLogger ( CowsayCli . class . getName ( ) ) . log ( Level . FINEST , null , ex ) ; ",
  "24370": "} private static void updateOptionDescriptions ( ) { ",
  "24371": "Collection < Option > allOptions = options . getOptions ( ) ; ",
  "24372": "for ( Option option : allOptions ) { ",
  "24373": "String key = option . getOpt ( ) ; ",
  "24374": "key = option . getLongOpt ( ) ; ",
  "24375": "String description = I18n . getMessage ( key ) ; ",
  "24376": "if ( description != null ) { ",
  "24377": "if ( key . equals ( Opt . COWFILE . text ) ) { ",
  "24378": "description = String . format ( description , File . separatorChar ) ; ",
  "24379": "option . setDescription ( description ) ; ",
  "24380": "} public static void showCmdLineHelp ( ) { ",
  "24381": "HelpFormatter formatter = new HelpFormatter ( ) ; ",
  "24382": "updateOptionDescriptions ( ) ; ",
  "24383": "formatter . printHelp ( I18n . getMessage ( \"usage\" ) , options ) ; ",
  "24384": "} private static String formatBubble ( final BubbleWrap bubble , final String message , final int longestLine ) { ",
  "24385": "String [ ] lines = message . split ( newLine ) ; ",
  "24386": "sb . append ( bubble . buildTop ( longestLine ) ) ; ",
  "24387": "if ( lines . length > 1 ) { ",
  "24388": "sb . append ( bubble . formatMultiOpen ( lines [ 0 ] , longestLine ) ) ; ",
  "24389": "for ( int i = 1 ; i < ( lines . length - 1 ) ; i ++ ) { ",
  "24390": "sb . append ( bubble . formatMultiMid ( lines [ i ] , longestLine ) ) ; ",
  "24391": "sb . append ( bubble . formatMultiEnd ( lines [ ( lines . length - 1 ) ] , longestLine ) ) ; ",
  "24392": "sb . append ( bubble . formatSingle ( lines [ 0 ] ) ) ; ",
  "24393": "sb . append ( bubble . buildBottom ( longestLine ) ) ; ",
  "24394": "} private String wrapMessage ( final String message ) { ",
  "24395": "int wrap = getWordwrap ( ) ; ",
  "24396": "if ( wrap <= 0 ) { ",
  "24397": "final List < String > result = new ArrayList < String > ( ) ; ",
  "24398": "result . add ( WordUtils . wrap ( line , wrap , null , true ) ) ; ",
  "24399": "return StringUtils . join ( result , newLine ) ; ",
  "24400": "} private String formatMessage ( final String message ) { ",
  "24401": "if ( message != null ) { ",
  "24402": "result = wrapMessage ( message ) ; ",
  "24403": "int longestLine = getLongestLineLen ( result ) ; ",
  "24404": "if ( ! isThought ) { ",
  "24405": "result = Bubble . formatSpeech ( result , longestLine ) ; ",
  "24406": "result = Bubble . formatThought ( result , longestLine ) ; ",
  "24407": "} public void setWordwrap ( final String wordwrap ) { ",
  "24408": "int ww = Integer . parseInt ( wordwrap ) ; ",
  "24409": "if ( ww >= 0 ) { ",
  "24410": "this . wordwrap = ww ; ",
  "24411": "} catch ( Throwable ignore ) { ",
  "24412": "} private static int getLongestLineLen ( final String message ) { ",
  "24413": "int maxLen = 0 ; ",
  "24414": "maxLen = Math . max ( maxLen , line . length ( ) ) ; ",
  "24415": "return maxLen ; ",
  "24416": "} public void setTags ( String ... tags ) { ",
  "24417": "for ( String s : tags ) { ",
  "24418": "for ( String t : s . split ( \",\" ) ) { ",
  "24419": "t = t . trim ( ) ; ",
  "24420": "if ( ! t . isEmpty ( ) ) { ",
  "24421": "builder . append ( \",\" ) ; ",
  "24422": "builder . append ( t ) ; ",
  "24423": "this . tags = builder . length ( ) > 0 ? builder . toString ( ) : null ; ",
  "24424": "} public boolean log ( String message ) { ",
  "24425": "if ( message == null ) return false ; ",
  "24426": "ok = loggly . log ( token , tags , message ) . isExecuted ( ) ; ",
  "24427": "} public void log ( String message , final Callback callback ) { ",
  "24428": "if ( message == null ) return ; ",
  "24429": "loggly . log ( token , ",
  "24430": "tags , ",
  "24431": "message , ",
  "24432": "new retrofit2 . Callback < LogglyResponse > ( ) { ",
  "24433": "public void onResponse ( Call < LogglyResponse > call , Response < LogglyResponse > response ) { ",
  "24434": "callback . success ( ) ; ",
  "24435": "public void onFailure ( Call < LogglyResponse > call , Throwable throwable ) { ",
  "24436": "callback . failure ( throwable . getMessage ( ) ) ; ",
  "24437": "} public boolean logBulk ( String ... messages ) { ",
  "24438": "if ( messages == null ) return false ; ",
  "24439": "return logBulk ( Arrays . asList ( messages ) ) ; ",
  "24440": "} public boolean logBulk ( Collection < String > messages ) { ",
  "24441": "String parcel = joinStrings ( messages ) ; ",
  "24442": "if ( parcel . isEmpty ( ) ) return false ; ",
  "24443": "ok = loggly . logBulk ( token , tags , parcel ) . isExecuted ( ) ; ",
  "24444": "} public void logBulk ( Collection < String > messages , final Callback callback ) { ",
  "24445": "if ( messages == null ) return ; ",
  "24446": "if ( parcel . isEmpty ( ) ) return ; ",
  "24447": "loggly . logBulk ( token , ",
  "24448": "parcel , ",
  "24449": "} private String joinStrings ( Collection < String > messages ) { ",
  "24450": "for ( String s : messages ) { ",
  "24451": "if ( s == null || s . isEmpty ( ) ) { ",
  "24452": "b . append ( s . replaceAll ( \"[\\r\\n]\" , \"\\r\" ) ) . append ( '\\n' ) ; ",
  "24453": "} public static void main ( String ... args ) { ",
  "24454": "if ( args . length == 0 || args [ 0 ] . trim ( ) . isEmpty ( ) ) { ",
  "24455": "final String TOKEN = args [ 0 ] ; ",
  "24456": "final ILogglyClient loggly = new LogglyClient ( TOKEN ) ; ",
  "24457": "new LogglyClient . Callback ( ) { ",
  "24458": "public void success ( ) { ",
  "24459": "public void failure ( String error ) { ",
  "24460": "loggly . logBulk ( Arrays . asList ( \"E1\" , \"E2\" ) , ",
  "24461": "System . out . println ( ok ? \"ok\" : \"err\" ) ; ",
  "24462": "ok = loggly . log ( json ) ; ",
  "24463": "loggly . setTags ( \"foo\" , \"bar,baz\" ) ; ",
  "24464": "} public SortedMap < String , Schema > getSchemas ( ) throws SQLException { ",
  "24465": "synchronized ( getSchemasLock ) { ",
  "24466": "if ( getSchemasCache == null ) { ",
  "24467": "SortedMap < String , Schema > newSchemas = new TreeMap < > ( DatabaseMetaData . getCollator ( ) ) ; ",
  "24468": "try ( ResultSet results = metaData . getMetaData ( ) . getSchemas ( ) ) { ",
  "24469": "ResultSetMetaData resultsMeta = results . getMetaData ( ) ; ",
  "24470": "while ( results . next ( ) ) { ",
  "24471": "int colCount = resultsMeta . getColumnCount ( ) ; ",
  "24472": "colCount == 1 ",
  "24473": "|| results . getString ( \"TABLE_CATALOG\" ) == null ",
  "24474": "|| name . equals ( results . getString ( \"TABLE_CATALOG\" ) ) ",
  "24475": "Schema newSchema = new Schema ( this , results . getString ( \"TABLE_SCHEM\" ) ) ; ",
  "24476": "getSchemasCache = AoCollections . optimalUnmodifiableSortedMap ( newSchemas ) ; ",
  "24477": "return getSchemasCache ; ",
  "24478": "} public Schema getSchema ( String name ) throws NoRowException , SQLException { ",
  "24479": "Schema schema = getSchemas ( ) . get ( name ) ; ",
  "24480": "if ( schema == null ) throw new NoRowException ( \"name=\" + name ) ; ",
  "24481": "return schema ; ",
  "24482": "} public SymmetricGraph < Table , Edge < Table > , SQLException > getForeignKeyGraph ( final Set < String > tableTypes ) { ",
  "24483": "return new SymmetricGraph < Table , Edge < Table > , SQLException > ( ) { ",
  "24484": "public Set < Table > getVertices ( ) throws SQLException { ",
  "24485": "Set < Table > vertices = new LinkedHashSet < > ( ) ; ",
  "24486": "for ( Schema schema : getSchemas ( ) . values ( ) ) { ",
  "24487": "for ( Table table : schema . getTables ( ) . values ( ) ) { ",
  "24488": "if ( tableTypes == null || tableTypes . contains ( table . getTableType ( ) ) ) vertices . add ( table ) ; ",
  "24489": "return AoCollections . optimalUnmodifiableSet ( vertices ) ; ",
  "24490": "public Set < Edge < Table > > getEdgesFrom ( Table from ) throws SQLException { ",
  "24491": "Set < ? extends Table > tos = from . getImportedTables ( ) ; ",
  "24492": "Set < Edge < Table > > edges = new LinkedHashSet < > ( tos . size ( ) * 4 / 3 + 1 ) ; ",
  "24493": "for ( Table to : tos ) { ",
  "24494": "tableTypes == null ",
  "24495": "|| tableTypes . contains ( from . getTableType ( ) ) ",
  "24496": "|| tableTypes . contains ( to . getTableType ( ) ) ",
  "24497": ") edges . add ( new Edge < > ( from , to ) ) ; ",
  "24498": "return AoCollections . optimalUnmodifiableSet ( edges ) ; ",
  "24499": "public Set < Edge < Table > > getEdgesTo ( Table to ) throws SQLException { ",
  "24500": "Set < ? extends Table > froms = to . getExportedTables ( ) ; ",
  "24501": "Set < Edge < Table > > edges = new LinkedHashSet < > ( froms . size ( ) * 4 / 3 + 1 ) ; ",
  "24502": "for ( Table from : froms ) { ",
  "24503": "public void contextInitialized ( ServletContextEvent sce ) { ",
  "24504": "ServletContext sc ; ",
  "24505": "synchronized ( servletContextLock ) { ",
  "24506": "servletContext = sce . getServletContext ( ) ; ",
  "24507": "sc = servletContext ; ",
  "24508": "String gitToplevelPath = sc . getInitParameter ( GIT_TOPLEVEL_CONTEXT_PARAM ) ; ",
  "24509": "File gitToplevelRaw ; ",
  "24510": "if ( gitToplevelPath == null || gitToplevelPath . isEmpty ( ) ) { ",
  "24511": "String rootRealPath = sc . getRealPath ( \"/\" ) ; ",
  "24512": "gitToplevelRaw = new File ( rootRealPath ) ; ",
  "24513": "if ( gitToplevelPath . startsWith ( \"~/\" ) ) { ",
  "24514": "gitToplevelRaw = new File ( System . getProperty ( \"user.home\" ) , gitToplevelPath . substring ( 2 ) ) ; ",
  "24515": "gitToplevelRaw = new File ( gitToplevelPath ) ; ",
  "24516": "Path gtl ; ",
  "24517": "synchronized ( gitToplevelLock ) { ",
  "24518": "gitToplevel = gitToplevelRaw . getCanonicalFile ( ) . toPath ( ) ; ",
  "24519": "gtl = gitToplevel ; ",
  "24520": "WatchService w ; ",
  "24521": "synchronized ( watcherLock ) { ",
  "24522": "watcher = gtl . getFileSystem ( ) . newWatchService ( ) ; ",
  "24523": "w = watcher ; ",
  "24524": "resync ( ) ; ",
  "24525": "synchronized ( watcherThreadLock ) { ",
  "24526": "watcherThread = new Thread ( watcherRunnable ) ; ",
  "24527": "watcherThread . start ( ) ; ",
  "24528": "synchronized ( changedThreadLock ) { ",
  "24529": "changedThread = new Thread ( changedRunnable ) ; ",
  "24530": "changedThread . start ( ) ; ",
  "24531": "sc . setAttribute ( APPLICATION_SCOPE_KEY , this ) ; ",
  "24532": "throw new WrappedException ( e ) ; ",
  "24533": "} private void resync ( ) throws IOException { ",
  "24534": "if ( gtl != null && w != null ) { ",
  "24535": "synchronized ( registered ) { ",
  "24536": "Set < Path > extraKeys = new HashSet < > ( registered . keySet ( ) ) ; ",
  "24537": "resync ( w , gtl , extraKeys ) ; ",
  "24538": "for ( Path extraKey : extraKeys ) { ",
  "24539": "registered . remove ( extraKey ) . cancel ( ) ; ",
  "24540": "} private void updateGitStatus ( ) throws IOException , ParseException { ",
  "24541": "GitStatus newStatus ; ",
  "24542": "if ( gtl == null ) { ",
  "24543": "List < UncommittedChange > emptyList = Collections . emptyList ( ) ; ",
  "24544": "newStatus = new GitStatus ( now , State . DISABLED , emptyList ) ; ",
  "24545": "List < String > modules ; ",
  "24546": "ProcessBuilder pb = ",
  "24547": ". directory ( gtl . toFile ( ) ) ",
  "24548": "Process p = pb . start ( ) ; ",
  "24549": "ProcessResult result = ProcessResult . getProcessResult ( p ) ; ",
  "24550": "List < String > submodules = StringUtility . splitLines ( result . getStdout ( ) ) ; ",
  "24551": "modules = new ArrayList < > ( submodules . size ( ) + 1 ) ; ",
  "24552": "modules . addAll ( submodules ) ; ",
  "24553": "modules . add ( \"\" ) ; ",
  "24554": "State state = State . SYNCHRONIZED ; ",
  "24555": "List < UncommittedChange > uncommittedChanges = new ArrayList < > ( ) ; ",
  "24556": "for ( String module : modules ) { ",
  "24557": "File workingDir ; ",
  "24558": "if ( module . isEmpty ( ) ) { ",
  "24559": "workingDir = gtl . toFile ( ) ; ",
  "24560": "workingDir = new File ( gtl . toFile ( ) , module ) ; ",
  "24561": "new ProcessBuilder ( \"git\" , \"status\" , \"--porcelain\" , \"-z\" ) ",
  "24562": ". directory ( workingDir ) ",
  "24563": "List < String > split = new ArrayList < > ( StringUtility . splitString ( result . getStdout ( ) , ( char ) 0 ) ) ; ",
  "24564": "if ( ! split . isEmpty ( ) ) { ",
  "24565": "String last = split . remove ( split . size ( ) - 1 ) ; ",
  "24566": "while ( i < split . size ( ) ) { ",
  "24567": "char x ; ",
  "24568": "char y ; ",
  "24569": "String from ; ",
  "24570": "String to ; ",
  "24571": "String first = split . get ( i ++ ) ; ",
  "24572": "x = first . charAt ( 0 ) ; ",
  "24573": "y = first . charAt ( 1 ) ; ",
  "24574": "if ( x == 'R' ) { ",
  "24575": "to = first . substring ( 3 ) ; ",
  "24576": "from = split . get ( i ++ ) ; ",
  "24577": "to = null ; ",
  "24578": "from = first . substring ( 3 ) ; ",
  "24579": "UncommittedChange uncommittedChange = new UncommittedChange ( x , y , module , from , to ) ; ",
  "24580": "uncommittedChanges . add ( uncommittedChange ) ; ",
  "24581": "State meaningState = uncommittedChange . getMeaning ( ) . getState ( ) ; ",
  "24582": "if ( meaningState . compareTo ( state ) > 0 ) state = meaningState ; ",
  "24583": "newStatus = new GitStatus ( now , state , Collections . unmodifiableList ( uncommittedChanges ) ) ; ",
  "24584": "synchronized ( statusLock ) { ",
  "24585": "status = newStatus ; ",
  "24586": "public GitStatus getGitStatus ( ) { ",
  "24587": "long statusTime = status . getStatusTime ( ) ; ",
  "24588": "long millisSince = now - statusTime ; ",
  "24589": "millisSince >= TIMEOUT_MILLIS ",
  "24590": "|| millisSince <= - TIMEOUT_MILLIS ",
  "24591": "return new GitStatus ( statusTime , State . TIMEOUT , emptyList ) ; ",
  "24592": "public static AutoGitContextListener getInstance ( ServletContext sc ) { ",
  "24593": "return ( AutoGitContextListener ) sc . getAttribute ( APPLICATION_SCOPE_KEY ) ; ",
  "24594": "private static final String GIT_STATUS_REQUEST_CACHE_KEY = AutoGitContextListener . class . getName ( ) + \".getGitStatus.cache\" ; ",
  "24595": "public static GitStatus getGitStatus ( ",
  "24596": "ServletRequest request ",
  "24597": "GitStatus gitStatus = ( GitStatus ) request . getAttribute ( GIT_STATUS_REQUEST_CACHE_KEY ) ; ",
  "24598": "if ( gitStatus == null ) { ",
  "24599": "AutoGitContextListener gitContext = AutoGitContextListener . getInstance ( servletContext ) ; ",
  "24600": "if ( gitContext == null ) { ",
  "24601": "gitStatus = new GitStatus ( System . currentTimeMillis ( ) , State . DISABLED , emptyList ) ; ",
  "24602": "gitStatus = gitContext . getGitStatus ( ) ; ",
  "24603": "request . setAttribute ( GIT_STATUS_REQUEST_CACHE_KEY , gitStatus ) ; ",
  "24604": "return gitStatus ; ",
  "24605": "} public SortedMap < String , Table > getTables ( ) throws SQLException { ",
  "24606": "synchronized ( getTablesLock ) { ",
  "24607": "if ( getTablesCache == null ) { ",
  "24608": "SortedMap < String , Table > newTables = new TreeMap < > ( DatabaseMetaData . getCollator ( ) ) ; ",
  "24609": "try ( ResultSet results = catalog . getMetaData ( ) . getMetaData ( ) . getTables ( catalog . getName ( ) , name , null , null ) ) { ",
  "24610": "Table newTable = new Table ( this , results . getString ( \"TABLE_NAME\" ) , results . getString ( \"TABLE_TYPE\" ) ) ; ",
  "24611": "getTablesCache = AoCollections . optimalUnmodifiableSortedMap ( newTables ) ; ",
  "24612": "return getTablesCache ; ",
  "24613": "} public Table getTable ( String name ) throws NoRowException , SQLException { ",
  "24614": "Table table = getTables ( ) . get ( name ) ; ",
  "24615": "if ( table == null ) throw new NoRowException ( ) ; ",
  "24616": "return table ; ",
  "24617": "private static String getRow ( ResultSet result ) throws SQLException { ",
  "24618": "sb . append ( '(' ) ; ",
  "24619": "ResultSetMetaData metaData = result . getMetaData ( ) ; ",
  "24620": "int colCount = metaData . getColumnCount ( ) ; ",
  "24621": "for ( int c = 1 ; c <= colCount ; c ++ ) { ",
  "24622": "int colType = metaData . getColumnType ( c ) ; ",
  "24623": "switch ( colType ) { ",
  "24624": "case Types . BIGINT : ",
  "24625": "case Types . BIT : ",
  "24626": "case Types . BOOLEAN : ",
  "24627": "case Types . DECIMAL : ",
  "24628": "case Types . DOUBLE : ",
  "24629": "case Types . FLOAT : ",
  "24630": "case Types . INTEGER : ",
  "24631": "case Types . NUMERIC : ",
  "24632": "case Types . REAL : ",
  "24633": "case Types . SMALLINT : ",
  "24634": "case Types . TINYINT : ",
  "24635": "sb . append ( result . getObject ( c ) ) ; ",
  "24636": "case Types . CHAR : ",
  "24637": "case Types . DATE : ",
  "24638": "case Types . LONGNVARCHAR : ",
  "24639": "case Types . LONGVARCHAR : ",
  "24640": "case Types . NCHAR : ",
  "24641": "case Types . NVARCHAR : ",
  "24642": "case Types . TIME : ",
  "24643": "case Types . TIMESTAMP : ",
  "24644": "case Types . VARCHAR : ",
  "24645": "SQLUtility . escapeSQL ( result . getString ( c ) , sb ) ; ",
  "24646": "sb . append ( ')' ) ; ",
  "24647": "} private void writeToImpl ( Writer out , long writeStart , long writeEnd ) throws IOException { ",
  "24648": "RandomAccessFile raf = new RandomAccessFile ( tempFile . getFile ( ) , \"r\" ) ) { ",
  "24649": "byte [ ] bytes = BufferManager . getBytes ( ) ; ",
  "24650": "char [ ] chars = BufferManager . getChars ( ) ; ",
  "24651": "long index = writeStart ; ",
  "24652": "raf . seek ( index << 1 ) ; ",
  "24653": "while ( index < writeEnd ) { ",
  "24654": "long blockSizeLong = ( writeEnd - index ) << 1 ; ",
  "24655": "int blockSize = blockSizeLong > BufferManager . BUFFER_SIZE ? BufferManager . BUFFER_SIZE : ( int ) blockSizeLong ; ",
  "24656": "raf . readFully ( bytes , 0 , blockSize ) ; ",
  "24657": "int bpos = 0 , cpos = 0 ; ",
  "24658": "bpos < blockSize ; ",
  "24659": "bpos += 2 , cpos ++ ",
  "24660": "chars [ cpos ] = IoUtils . bufferToChar ( bytes , bpos ) ; ",
  "24661": "out . write ( chars , 0 , blockSize > > 1 ) ; ",
  "24662": "index += blockSize > > 1 ; ",
  "24663": "BufferManager . release ( chars , false ) ; ",
  "24664": "BufferManager . release ( bytes , false ) ; ",
  "24665": "} public SortedMap < String , Catalog > getCatalogs ( ) throws SQLException { ",
  "24666": "synchronized ( getCatalogsLock ) { ",
  "24667": "if ( getCatalogsCache == null ) { ",
  "24668": "SortedMap < String , Catalog > newCatalogs = new TreeMap < > ( englishCollator ) ; ",
  "24669": "try ( ResultSet results = metaData . getCatalogs ( ) ) { ",
  "24670": "Catalog newCatalog = new Catalog ( this , results . getString ( 1 ) ) ; ",
  "24671": "getCatalogsCache = AoCollections . optimalUnmodifiableSortedMap ( newCatalogs ) ; ",
  "24672": "return getCatalogsCache ; ",
  "24673": "} public Catalog getCatalog ( String name ) throws NoRowException , SQLException { ",
  "24674": "Catalog catalog = getCatalogs ( ) . get ( name ) ; ",
  "24675": "if ( catalog == null ) throw new NoRowException ( ) ; ",
  "24676": "} private char [ ] getBuffer ( int additional ) throws IOException { ",
  "24677": "long newLen = ( long ) length + additional ; ",
  "24678": "char [ ] buf = this . buffer ; ",
  "24679": "int bufLen = buf . length ; ",
  "24680": "if ( newLen > bufLen ) { ",
  "24681": "int newBufLen = bufLen == 0 ? BufferManager . BUFFER_SIZE : ( bufLen << 1 ) ; ",
  "24682": "while ( newBufLen < newLen ) { ",
  "24683": "newBufLen <<= 1 ; ",
  "24684": "char [ ] newBuf = ",
  "24685": "( newBufLen == BufferManager . BUFFER_SIZE ) ",
  "24686": "? BufferManager . getChars ( ) ",
  "24687": ": new char [ newBufLen ] ; ",
  "24688": "System . arraycopy ( buf , 0 , newBuf , 0 , length ) ; ",
  "24689": "if ( bufLen == BufferManager . BUFFER_SIZE ) { ",
  "24690": "BufferManager . release ( buf , false ) ; ",
  "24691": "buf = newBuf ; ",
  "24692": "this . buffer = buf ; ",
  "24693": "} private void log ( Encoder encoder ) throws IOException { ",
  "24694": "if ( encoder == null ) log . write ( \"null\" ) ; ",
  "24695": "String className = encoder . getClass ( ) . getName ( ) ; ",
  "24696": "if ( \"com.aoindustries.encoding.JavaScriptInXhtmlAttributeEncoder\" . equals ( className ) ) { ",
  "24697": "log . write ( \"javaScriptInXhtmlAttributeEncoder\" ) ; ",
  "24698": "} else if ( \"com.aoindustries.encoding.JavaScriptInXhtmlEncoder\" . equals ( className ) ) { ",
  "24699": "log . write ( \"javaScriptInXhtmlEncoder\" ) ; ",
  "24700": "} else if ( \"com.aoindustries.encoding.TextInXhtmlAttributeEncoder\" . equals ( className ) ) { ",
  "24701": "log . write ( \"textInXhtmlAttributeEncoder\" ) ; ",
  "24702": "log . write ( className ) ; ",
  "24703": "} private void log ( Writer writer ) throws IOException { ",
  "24704": "log . write ( \"null\" ) ; ",
  "24705": "} else if ( writer instanceof LoggingWriter ) { ",
  "24706": "LoggingWriter loggingWriter = ( LoggingWriter ) writer ; ",
  "24707": "log . write ( \"writer[\" ) ; ",
  "24708": "log . write ( Long . toString ( loggingWriter . getId ( ) ) ) ; ",
  "24709": "log . write ( ']' ) ; ",
  "24710": "} else if ( writer instanceof EncoderWriter ) { ",
  "24711": "EncoderWriter encoderWriter = ( EncoderWriter ) writer ; ",
  "24712": "log ( encoderWriter . getEncoder ( ) ) ; ",
  "24713": "log ( encoderWriter . getOut ( ) ) ; ",
  "24714": "log . write ( ')' ) ; ",
  "24715": "String classname = writer . getClass ( ) . getName ( ) ; ",
  "24716": "if ( classname . equals ( \"org.apache.jasper.runtime.BodyContentImpl\" ) ) log . write ( \"bodyContent\" ) ; ",
  "24717": "else if ( classname . equals ( \"org.apache.jasper.runtime.JspWriterImpl\" ) ) log . write ( \"jspWriter\" ) ; ",
  "24718": "else log . write ( classname ) ; ",
  "24719": "} public static < F > LexicalPosition < F > zeroWithFile ( ",
  "24720": "final F file ) ",
  "24721": "return LexicalPosition . of ( 0 , 0 , Optional . of ( file ) ) ; ",
  "24722": "} private void append ( int segmentIndex , StringBuilder buffer ) { ",
  "24723": "switch ( segmentTypes [ segmentIndex ] ) { ",
  "24724": "case SegmentedWriter . TYPE_STRING : ",
  "24725": "int off = segmentOffsets [ segmentIndex ] ; ",
  "24726": "buffer . append ( ",
  "24727": "( String ) segmentValues [ segmentIndex ] , ",
  "24728": "off , ",
  "24729": "off + segmentLengths [ segmentIndex ] ",
  "24730": "case SegmentedWriter . TYPE_CHAR_NEWLINE : ",
  "24731": "assert segmentOffsets [ segmentIndex ] == 0 ; ",
  "24732": "assert segmentLengths [ segmentIndex ] == 1 ; ",
  "24733": "buffer . append ( '\\n' ) ; ",
  "24734": "case SegmentedWriter . TYPE_CHAR_QUOTE : ",
  "24735": "buffer . append ( '\"' ) ; ",
  "24736": "case SegmentedWriter . TYPE_CHAR_APOS : ",
  "24737": "buffer . append ( '\\'' ) ; ",
  "24738": "case SegmentedWriter . TYPE_CHAR_OTHER : ",
  "24739": "buffer . append ( ( ( Character ) segmentValues [ segmentIndex ] ) . charValue ( ) ) ; ",
  "24740": "throw new AssertionError ( ) ; ",
  "24741": "} private void append ( int segmentIndex , int off , int len , StringBuilder buffer ) { ",
  "24742": "off + len ",
  "24743": "assert off == 0 ; ",
  "24744": "assert len == 1 ; ",
  "24745": "} private void writeSegment ( int segmentIndex , Encoder encoder , Writer out ) throws IOException { ",
  "24746": "encoder . write ( ",
  "24747": "segmentOffsets [ segmentIndex ] , ",
  "24748": "segmentLengths [ segmentIndex ] , ",
  "24749": "out ",
  "24750": "encoder . write ( '\\n' , out ) ; ",
  "24751": "encoder . write ( '\"' , out ) ; ",
  "24752": "encoder . write ( '\\'' , out ) ; ",
  "24753": "encoder . write ( ( Character ) segmentValues [ segmentIndex ] , out ) ; ",
  "24754": "} private void writeSegment ( int segmentIndex , int off , int len , Encoder encoder , Writer out ) throws IOException { ",
  "24755": "len , ",
  "24756": "} private static char charAt ( byte type , Object value , int charIndex ) { ",
  "24757": "return ( ( String ) value ) . charAt ( charIndex ) ; ",
  "24758": "assert charIndex == 0 ; ",
  "24759": "return '\\n' ; ",
  "24760": "return '\"' ; ",
  "24761": "return '\\'' ; ",
  "24762": "return ( Character ) value ; ",
  "24763": "} private Map < String , Class < ? > > getSqlDataTypes ( ) throws SQLException { ",
  "24764": "if ( sqlDataTypes == null ) { ",
  "24765": "Map < String , Class < ? > > newMap = new LinkedHashMap < > ( ) ; ",
  "24766": "Iterator < SQLData > iter = ServiceLoader . load ( SQLData . class ) . iterator ( ) ; ",
  "24767": "SQLData sqlData = iter . next ( ) ; ",
  "24768": "newMap . put ( sqlData . getSQLTypeName ( ) , sqlData . getClass ( ) ) ; ",
  "24769": "sqlDataTypes = newMap ; ",
  "24770": "return sqlDataTypes ; ",
  "24771": "} public void executeTransaction ( final DatabaseRunnable runnable ) throws SQLException { ",
  "24772": "executeTransaction ( ",
  "24773": "RuntimeException . class , ",
  "24774": "new DatabaseCallableE < Void , RuntimeException > ( ) { ",
  "24775": "public Void call ( DatabaseConnection db ) throws SQLException { ",
  "24776": "runnable . run ( db ) ; ",
  "24777": "} public < E extends Exception > void executeTransaction ( ",
  "24778": "Class < E > eClass , ",
  "24779": "final DatabaseRunnableE < E > runnable ",
  "24780": ") throws SQLException , E { ",
  "24781": "eClass , ",
  "24782": "new DatabaseCallableE < Void , E > ( ) { ",
  "24783": "public Void call ( DatabaseConnection db ) throws SQLException , E { ",
  "24784": "} public < V > V executeTransaction ( final DatabaseCallable < V > callable ) throws SQLException { ",
  "24785": "return executeTransaction ( ",
  "24786": "new DatabaseCallableE < V , RuntimeException > ( ) { ",
  "24787": "public V call ( DatabaseConnection db ) throws SQLException { ",
  "24788": "return callable . call ( db ) ; ",
  "24789": "} public < V , E extends Exception > V executeTransaction ( ",
  "24790": "DatabaseCallableE < V , E > callable ",
  "24791": "DatabaseConnection conn = transactionConnection . get ( ) ; ",
  "24792": "return callable . call ( conn ) ; ",
  "24793": "} catch ( RuntimeException err ) { ",
  "24794": "conn . rollback ( ) ; ",
  "24795": "throw err ; ",
  "24796": "} catch ( NoRowException err ) { ",
  "24797": "} catch ( SQLException err ) { ",
  "24798": "conn . rollbackAndClose ( ) ; ",
  "24799": "if ( eClass . isInstance ( e ) ) throw eClass . cast ( e ) ; ",
  "24800": "throw new SQLException ( e ) ; ",
  "24801": "conn = createDatabaseConnection ( ) ; ",
  "24802": "transactionConnection . set ( conn ) ; ",
  "24803": "V result = callable . call ( conn ) ; ",
  "24804": "conn . commit ( ) ; ",
  "24805": "transactionConnection . remove ( ) ; ",
  "24806": "} catch ( RuntimeException | NoRowException err ) { ",
  "24807": "conn . releaseConnection ( ) ; ",
  "24808": "} public static Method getValueOfIntMethod ( Class < ? > clazz ) { ",
  "24809": "Method existing = valueOfIntMethods . get ( clazz ) ; ",
  "24810": "Method newMethod ; ",
  "24811": "newMethod = clazz . getMethod ( \"valueOf\" , Integer . TYPE ) ; ",
  "24812": "int mod = newMethod . getModifiers ( ) ; ",
  "24813": "if ( ! Modifier . isStatic ( mod ) || ! Modifier . isPublic ( mod ) ) newMethod = notExists ; ",
  "24814": "} catch ( NoSuchMethodException err ) { ",
  "24815": "newMethod = notExists ; ",
  "24816": "existing = valueOfIntMethods . put ( clazz , newMethod ) ; ",
  "24817": "if ( existing == null ) existing = newMethod ; ",
  "24818": "return existing == notExists ? null : existing ; ",
  "24819": "} public static Method getValueOfStringMethod ( Class < ? > clazz ) { ",
  "24820": "Method existing = valueOfStringMethods . get ( clazz ) ; ",
  "24821": "newMethod = clazz . getMethod ( \"valueOf\" , String . class ) ; ",
  "24822": "existing = valueOfStringMethods . put ( clazz , newMethod ) ; ",
  "24823": "public T createObject ( ResultSet result ) throws SQLException { ",
  "24824": "int numColumns = metaData . getColumnCount ( ) ; ",
  "24825": "int numParams = prefixParams . length + numColumns ; ",
  "24826": "Object [ ] params = new Object [ numParams ] ; ",
  "24827": "List < String > warnings = null ; ",
  "24828": "Constructor < ? > [ ] constructors = clazz . getConstructors ( ) ; ",
  "24829": "CONSTRUCTORS : ",
  "24830": "for ( Constructor < ? > constructor : constructors ) { ",
  "24831": "Class < ? > [ ] paramTypes = constructor . getParameterTypes ( ) ; ",
  "24832": "if ( paramTypes . length == numParams ) { ",
  "24833": "for ( int i = 0 ; i < prefixParams . length ; i ++ ) { ",
  "24834": "Class < ? > paramType = paramTypes [ i ] ; ",
  "24835": "if ( ! paramType . isAssignableFrom ( prefixParams [ i ] . getClass ( ) ) ) continue CONSTRUCTORS ; ",
  "24836": "params [ i ] = prefixParams [ i ] ; ",
  "24837": "for ( int c = 1 ; c <= numColumns ; c ++ ) { ",
  "24838": "int i = prefixParams . length + c - 1 ; ",
  "24839": "if ( paramType == String . class ) { ",
  "24840": "params [ i ] = result . getString ( c ) ; ",
  "24841": "} else if ( paramType == Integer . TYPE ) { ",
  "24842": "int value = result . getInt ( c ) ; ",
  "24843": "params [ i ] = value ; ",
  "24844": "} else if ( paramType == Short . TYPE ) { ",
  "24845": "short value = result . getShort ( c ) ; ",
  "24846": "} else if ( paramType == Boolean . TYPE ) { ",
  "24847": "boolean b = result . getBoolean ( c ) ; ",
  "24848": "params [ i ] = b ; ",
  "24849": "} else if ( paramType == Float . TYPE ) { ",
  "24850": "float value = result . getFloat ( c ) ; ",
  "24851": "} else if ( paramType == Long . TYPE ) { ",
  "24852": "long value = result . getLong ( c ) ; ",
  "24853": "} else if ( paramType == Date . class ) { ",
  "24854": "params [ i ] = result . getDate ( c ) ; ",
  "24855": "} else if ( paramType == Boolean . class ) { ",
  "24856": "params [ i ] = result . wasNull ( ) ? null : b ; ",
  "24857": "} else if ( paramType == Timestamp . class ) { ",
  "24858": "params [ i ] = result . getTimestamp ( c ) ; ",
  "24859": "} else if ( paramType == Integer . class ) { ",
  "24860": "params [ i ] = result . wasNull ( ) ? null : value ; ",
  "24861": "} else if ( paramType == Float . class ) { ",
  "24862": "} else if ( paramType == Short . class ) { ",
  "24863": "} else if ( paramType == Long . class ) { ",
  "24864": "Method valueOfIntMethod = getValueOfIntMethod ( paramType ) ; ",
  "24865": "if ( valueOfIntMethod != null ) { ",
  "24866": "if ( result . wasNull ( ) ) params [ i ] = null ; ",
  "24867": "params [ i ] = valueOfIntMethod . invoke ( null , value ) ; ",
  "24868": "Method valueOfStringMethod = getValueOfStringMethod ( paramType ) ; ",
  "24869": "if ( valueOfStringMethod != null ) { ",
  "24870": "String value = result . getString ( c ) ; ",
  "24871": "params [ i ] = result . wasNull ( ) ? null : valueOfStringMethod . invoke ( null , value ) ; ",
  "24872": "if ( warnings == null ) warnings = new ArrayList < > ( ) ; ",
  "24873": "continue CONSTRUCTORS ; ",
  "24874": "Object newInstance = constructor . newInstance ( params ) ; ",
  "24875": "return clazz . cast ( newInstance ) ; ",
  "24876": "if ( warnings != null ) for ( String warning : warnings ) message . append ( EOL ) . append ( warning ) ; ",
  "24877": "throw new SQLException ( message . toString ( ) ) ; ",
  "24878": "} catch ( InstantiationException | IllegalAccessException | InvocationTargetException err ) { ",
  "24879": "throw new SQLException ( err ) ; ",
  "24880": "} public SortedMap < String , Column > getColumnMap ( ) throws SQLException { ",
  "24881": "synchronized ( getColumnMapLock ) { ",
  "24882": "if ( getColumnMapCache == null ) { ",
  "24883": "SortedMap < String , Column > newColumnMap = new TreeMap < > ( DatabaseMetaData . getCollator ( ) ) ; ",
  "24884": "try ( ResultSet results = schema . getCatalog ( ) . getMetaData ( ) . getMetaData ( ) . getColumns ( schema . getCatalog ( ) . getName ( ) , schema . getName ( ) , name , null ) ) { ",
  "24885": "Column newColumn = new Column ( ",
  "24886": "results . getString ( \"COLUMN_NAME\" ) , ",
  "24887": "results . getInt ( \"DATA_TYPE\" ) , ",
  "24888": "results . getString ( \"TYPE_NAME\" ) , ",
  "24889": "getInteger ( results , \"COLUMN_SIZE\" ) , ",
  "24890": "getInteger ( results , \"DECIMAL_DIGITS\" ) , ",
  "24891": "results . getInt ( \"NULLABLE\" ) , ",
  "24892": "results . getString ( \"COLUMN_DEF\" ) , ",
  "24893": "getInteger ( results , \"CHAR_OCTET_LENGTH\" ) , ",
  "24894": "results . getInt ( \"ORDINAL_POSITION\" ) , ",
  "24895": "results . getString ( \"IS_NULLABLE\" ) , ",
  "24896": "results . getString ( \"IS_AUTOINCREMENT\" ) ",
  "24897": "getColumnMapCache = AoCollections . optimalUnmodifiableSortedMap ( newColumnMap ) ; ",
  "24898": "return getColumnMapCache ; ",
  "24899": "} public Column getColumn ( String name ) throws NoRowException , SQLException { ",
  "24900": "Column column = getColumnMap ( ) . get ( name ) ; ",
  "24901": "if ( column == null ) throw new NoRowException ( ) ; ",
  "24902": "return column ; ",
  "24903": "} public List < Column > getColumns ( ) throws SQLException { ",
  "24904": "synchronized ( getColumnsLock ) { ",
  "24905": "if ( getColumnsCache == null ) { ",
  "24906": "SortedMap < String , Column > columnMap = getColumnMap ( ) ; ",
  "24907": "List < Column > newColumns = new ArrayList < > ( columnMap . size ( ) ) ; ",
  "24908": "for ( int i = 0 ; i < columnMap . size ( ) ; i ++ ) newColumns . add ( null ) ; ",
  "24909": "for ( Column column : columnMap . values ( ) ) { ",
  "24910": "int ordinalPosition = column . getOrdinalPosition ( ) ; ",
  "24911": "for ( int i = 0 ; i < newColumns . size ( ) ; i ++ ) { ",
  "24912": "getColumnsCache = AoCollections . optimalUnmodifiableList ( newColumns ) ; ",
  "24913": "return getColumnsCache ; ",
  "24914": "} public Column getColumn ( int ordinalPosition ) throws NoRowException , SQLException { ",
  "24915": "return getColumns ( ) . get ( ordinalPosition - 1 ) ; ",
  "24916": "} catch ( IndexOutOfBoundsException exc ) { ",
  "24917": "throw new NoRowException ( exc ) ; ",
  "24918": "} public Index getPrimaryKey ( ) throws SQLException { ",
  "24919": "synchronized ( getPrimaryKeyLock ) { ",
  "24920": "if ( ! getPrimaryKeyCached ) { ",
  "24921": "String pkName = null ; ",
  "24922": "List < Column > columns = new AutoGrowArrayList < > ( ) ; ",
  "24923": "try ( ResultSet results = schema . getCatalog ( ) . getMetaData ( ) . getMetaData ( ) . getPrimaryKeys ( schema . getCatalog ( ) . getName ( ) , schema . getName ( ) , name ) ) { ",
  "24924": "String columnName = results . getString ( \"COLUMN_NAME\" ) ; ",
  "24925": "int keySeq = results . getInt ( \"KEY_SEQ\" ) ; ",
  "24926": "String newPkName = results . getString ( \"PK_NAME\" ) ; ",
  "24927": "if ( newPkName != null ) { ",
  "24928": "if ( pkName == null ) pkName = newPkName ; ",
  "24929": "if ( columns . isEmpty ( ) ) { ",
  "24930": "getPrimaryKeyCache = null ; ",
  "24931": "getPrimaryKeyCached = true ; ",
  "24932": "for ( int i = 0 ; i < columns . size ( ) ; i ++ ) { ",
  "24933": "getPrimaryKeyCache = new Index ( this , pkName , IndexType . PRIMARY_KEY , columns ) ; ",
  "24934": "return getPrimaryKeyCache ; ",
  "24935": "} public Set < ? extends Table > getImportedTables ( ) throws SQLException { ",
  "24936": "synchronized ( getImportedTablesLock ) { ",
  "24937": "if ( getImportedTablesCache == null ) { ",
  "24938": "Set < Table > newImportedTables = new LinkedHashSet < > ( ) ; ",
  "24939": "Catalog catalog = schema . getCatalog ( ) ; ",
  "24940": "DatabaseMetaData metaData = catalog . getMetaData ( ) ; ",
  "24941": "try ( ResultSet results = schema . getCatalog ( ) . getMetaData ( ) . getMetaData ( ) . getImportedKeys ( schema . getCatalog ( ) . getName ( ) , schema . getName ( ) , name ) ) { ",
  "24942": "String pkCat = results . getString ( \"PKTABLE_CAT\" ) ; ",
  "24943": "Catalog pkCatalog = pkCat == null ? catalog : metaData . getCatalog ( pkCat ) ; ",
  "24944": "newImportedTables . add ( ",
  "24945": "pkCatalog ",
  "24946": ". getSchema ( results . getString ( \"PKTABLE_SCHEM\" ) ) ",
  "24947": ". getTable ( results . getString ( \"PKTABLE_NAME\" ) ) ",
  "24948": "getImportedTablesCache = AoCollections . optimalUnmodifiableSet ( newImportedTables ) ; ",
  "24949": "return getImportedTablesCache ; ",
  "24950": "} public Set < ? extends Table > getExportedTables ( ) throws SQLException { ",
  "24951": "synchronized ( getExportedTablesLock ) { ",
  "24952": "if ( getExportedTablesCache == null ) { ",
  "24953": "Set < Table > newExportedTables = new LinkedHashSet < > ( ) ; ",
  "24954": "try ( ResultSet results = schema . getCatalog ( ) . getMetaData ( ) . getMetaData ( ) . getExportedKeys ( schema . getCatalog ( ) . getName ( ) , schema . getName ( ) , name ) ) { ",
  "24955": "String fkCat = results . getString ( \"FKTABLE_CAT\" ) ; ",
  "24956": "Catalog fkCatalog = fkCat == null ? catalog : metaData . getCatalog ( fkCat ) ; ",
  "24957": "newExportedTables . add ( ",
  "24958": "fkCatalog ",
  "24959": ". getSchema ( results . getString ( \"FKTABLE_SCHEM\" ) ) ",
  "24960": ". getTable ( results . getString ( \"FKTABLE_NAME\" ) ) ",
  "24961": "getExportedTablesCache = AoCollections . optimalUnmodifiableSet ( newExportedTables ) ; ",
  "24962": "return getExportedTablesCache ; ",
  "24963": "} private void addSegment ( byte type , Object value , int off , int len ) { ",
  "24964": "assert ! isClosed ; ",
  "24965": "final int arraylen = segmentValues . length ; ",
  "24966": "if ( segmentCount == arraylen ) { ",
  "24967": "if ( arraylen == 0 ) { ",
  "24968": "this . segmentTypes = new byte [ START_LEN ] ; ",
  "24969": "this . segmentValues = new Object [ START_LEN ] ; ",
  "24970": "this . segmentOffsets = new int [ START_LEN ] ; ",
  "24971": "this . segmentLengths = new int [ START_LEN ] ; ",
  "24972": "int newLen = arraylen << 1 ; ",
  "24973": "byte [ ] newTypes = new byte [ newLen ] ; ",
  "24974": "System . arraycopy ( segmentTypes , 0 , newTypes , 0 , arraylen ) ; ",
  "24975": "this . segmentTypes = newTypes ; ",
  "24976": "Object [ ] newValues = new Object [ newLen ] ; ",
  "24977": "System . arraycopy ( segmentValues , 0 , newValues , 0 , arraylen ) ; ",
  "24978": "this . segmentValues = newValues ; ",
  "24979": "int [ ] newOffsets = new int [ newLen ] ; ",
  "24980": "System . arraycopy ( segmentOffsets , 0 , newOffsets , 0 , arraylen ) ; ",
  "24981": "this . segmentOffsets = newOffsets ; ",
  "24982": "int [ ] newLengths = new int [ newLen ] ; ",
  "24983": "System . arraycopy ( segmentLengths , 0 , newLengths , 0 , arraylen ) ; ",
  "24984": "this . segmentLengths = newLengths ; ",
  "24985": "segmentTypes [ segmentCount ] = type ; ",
  "24986": "segmentValues [ segmentCount ] = value ; ",
  "24987": "segmentOffsets [ segmentCount ] = off ; ",
  "24988": "segmentLengths [ segmentCount ++ ] = len ; ",
  "24989": "} private void log ( char ch ) throws IOException { ",
  "24990": "if ( ch == '\\t' ) log . write ( \"'\\\\t'\" ) ; ",
  "24991": "else if ( ch == '\\b' ) log . write ( \"'\\\\b'\" ) ; ",
  "24992": "else if ( ch == '\\n' ) log . write ( \"'\\\\n'\" ) ; ",
  "24993": "else if ( ch == '\\r' ) log . write ( \"'\\\\r'\" ) ; ",
  "24994": "else if ( ch == '\\f' ) log . write ( \"'\\\\f'\" ) ; ",
  "24995": "else if ( ch == '\\'' ) log . write ( \"'\\\\'\" ) ; ",
  "24996": "else if ( ch == '\\\\' ) log . write ( \"'\\\\\\\\'\" ) ; ",
  "24997": "else if ( ch == '\"' ) log . write ( \"'\\\\\\\"'\" ) ; ",
  "24998": "log . write ( \"'\\\\u\" ) ; ",
  "24999": "String hex = Integer . toHexString ( ch ) ; ",
  "25000": "for ( int l = hex . length ( ) ; l < 4 ; l ++ ) log . write ( '0' ) ; ",
  "25001": "log . write ( hex ) ; ",
  "25002": "log . write ( '\\'' ) ; ",
  "25003": "log . write ( ch ) ; ",
  "25004": "} private void log ( String value ) throws IOException { ",
  "25005": "log . write ( \"(String)null\" ) ; ",
  "25006": "log . write ( '\"' ) ; ",
  "25007": "for ( int i = 0 , len = value . length ( ) ; i < len ; i ++ ) { ",
  "25008": "char ch = value . charAt ( i ) ; ",
  "25009": "if ( ch == '\\t' ) log . write ( \"\\\\t\" ) ; ",
  "25010": "else if ( ch == '\\b' ) log . write ( \"\\\\b\" ) ; ",
  "25011": "else if ( ch == '\\n' ) log . write ( \"\\\\n\" ) ; ",
  "25012": "else if ( ch == '\\r' ) log . write ( \"\\\\r\" ) ; ",
  "25013": "else if ( ch == '\\f' ) log . write ( \"\\\\f\" ) ; ",
  "25014": "else if ( ch == '\\\\' ) log . write ( \"\\\\\\\\\" ) ; ",
  "25015": "else if ( ch == '\"' ) log . write ( \"\\\\\\\"\" ) ; ",
  "25016": "log . write ( \"\\\\u\" ) ; ",
  "25017": "} public void diff_cleanupSemantic ( LinkedList < Diff > diffs ) { ",
  "25018": "if ( diffs . isEmpty ( ) ) { ",
  "25019": "boolean changes = false ; ",
  "25020": "Stack < Diff > equalities = new Stack < Diff > ( ) ; ",
  "25021": "String lastequality = null ; ",
  "25022": "ListIterator < Diff > pointer = diffs . listIterator ( ) ; ",
  "25023": "int length_insertions1 = 0 ; ",
  "25024": "int length_deletions1 = 0 ; ",
  "25025": "int length_insertions2 = 0 ; ",
  "25026": "int length_deletions2 = 0 ; ",
  "25027": "Diff thisDiff = pointer . next ( ) ; ",
  "25028": "while ( thisDiff != null ) { ",
  "25029": "if ( thisDiff . operation == Operation . EQUAL ) { ",
  "25030": "equalities . push ( thisDiff ) ; ",
  "25031": "length_insertions1 = length_insertions2 ; ",
  "25032": "length_deletions1 = length_deletions2 ; ",
  "25033": "length_insertions2 = 0 ; ",
  "25034": "length_deletions2 = 0 ; ",
  "25035": "lastequality = thisDiff . text ; ",
  "25036": "if ( thisDiff . operation == Operation . INSERT ) { ",
  "25037": "length_insertions2 += thisDiff . text . length ( ) ; ",
  "25038": "length_deletions2 += thisDiff . text . length ( ) ; ",
  "25039": "if ( lastequality != null && ( lastequality . length ( ) ",
  "25040": "<= Math . max ( length_insertions1 , length_deletions1 ) ) ",
  "25041": "&& ( lastequality . length ( ) ",
  "25042": "<= Math . max ( length_insertions2 , length_deletions2 ) ) ) { ",
  "25043": "while ( thisDiff != equalities . lastElement ( ) ) { ",
  "25044": "thisDiff = pointer . previous ( ) ; ",
  "25045": "pointer . next ( ) ; ",
  "25046": "pointer . set ( new Diff ( Operation . DELETE , lastequality ) ) ; ",
  "25047": "pointer . add ( new Diff ( Operation . INSERT , lastequality ) ) ; ",
  "25048": "equalities . pop ( ) ; ",
  "25049": "if ( ! equalities . empty ( ) ) { ",
  "25050": "if ( equalities . empty ( ) ) { ",
  "25051": "while ( pointer . hasPrevious ( ) ) { ",
  "25052": "pointer . previous ( ) ; ",
  "25053": "thisDiff = equalities . lastElement ( ) ; ",
  "25054": "while ( thisDiff != pointer . previous ( ) ) { ",
  "25055": "length_insertions1 = 0 ; ",
  "25056": "length_deletions1 = 0 ; ",
  "25057": "lastequality = null ; ",
  "25058": "changes = true ; ",
  "25059": "thisDiff = pointer . hasNext ( ) ? pointer . next ( ) : null ; ",
  "25060": "if ( changes ) { ",
  "25061": "diff_cleanupMerge ( diffs ) ; ",
  "25062": "diff_cleanupSemanticLossless ( diffs ) ; ",
  "25063": "pointer = diffs . listIterator ( ) ; ",
  "25064": "Diff prevDiff = null ; ",
  "25065": "thisDiff = null ; ",
  "25066": "if ( pointer . hasNext ( ) ) { ",
  "25067": "prevDiff = pointer . next ( ) ; ",
  "25068": "thisDiff = pointer . next ( ) ; ",
  "25069": "if ( prevDiff . operation == Operation . DELETE && ",
  "25070": "thisDiff . operation == Operation . INSERT ) { ",
  "25071": "String deletion = prevDiff . text ; ",
  "25072": "String insertion = thisDiff . text ; ",
  "25073": "int overlap_length1 = this . diff_commonOverlap ( deletion , insertion ) ; ",
  "25074": "int overlap_length2 = this . diff_commonOverlap ( insertion , deletion ) ; ",
  "25075": "if ( overlap_length1 >= overlap_length2 ) { ",
  "25076": "if ( overlap_length1 >= deletion . length ( ) / 2.0 || ",
  "25077": "overlap_length1 >= insertion . length ( ) / 2.0 ) { ",
  "25078": "pointer . add ( new Diff ( Operation . EQUAL , ",
  "25079": "insertion . substring ( 0 , overlap_length1 ) ) ) ; ",
  "25080": "prevDiff . text = ",
  "25081": "deletion . substring ( 0 , deletion . length ( ) - overlap_length1 ) ; ",
  "25082": "thisDiff . text = insertion . substring ( overlap_length1 ) ; ",
  "25083": "if ( overlap_length2 >= deletion . length ( ) / 2.0 || ",
  "25084": "overlap_length2 >= insertion . length ( ) / 2.0 ) { ",
  "25085": "deletion . substring ( 0 , overlap_length2 ) ) ) ; ",
  "25086": "prevDiff . operation = Operation . INSERT ; ",
  "25087": "insertion . substring ( 0 , insertion . length ( ) - overlap_length2 ) ; ",
  "25088": "thisDiff . operation = Operation . DELETE ; ",
  "25089": "thisDiff . text = deletion . substring ( overlap_length2 ) ; ",
  "25090": "prevDiff = thisDiff ; ",
  "25091": "} public void diff_cleanupSemanticLossless ( LinkedList < Diff > diffs ) { ",
  "25092": "String equality1 , edit , equality2 ; ",
  "25093": "String commonString ; ",
  "25094": "int commonOffset ; ",
  "25095": "int score , bestScore ; ",
  "25096": "String bestEquality1 , bestEdit , bestEquality2 ; ",
  "25097": "Diff prevDiff = pointer . hasNext ( ) ? pointer . next ( ) : null ; ",
  "25098": "Diff thisDiff = pointer . hasNext ( ) ? pointer . next ( ) : null ; ",
  "25099": "Diff nextDiff = pointer . hasNext ( ) ? pointer . next ( ) : null ; ",
  "25100": "while ( nextDiff != null ) { ",
  "25101": "if ( prevDiff . operation == Operation . EQUAL && ",
  "25102": "nextDiff . operation == Operation . EQUAL ) { ",
  "25103": "equality1 = prevDiff . text ; ",
  "25104": "edit = thisDiff . text ; ",
  "25105": "equality2 = nextDiff . text ; ",
  "25106": "commonOffset = diff_commonSuffix ( equality1 , edit ) ; ",
  "25107": "if ( commonOffset != 0 ) { ",
  "25108": "commonString = edit . substring ( edit . length ( ) - commonOffset ) ; ",
  "25109": "equality1 = equality1 . substring ( 0 , equality1 . length ( ) - commonOffset ) ; ",
  "25110": "edit = commonString + edit . substring ( 0 , edit . length ( ) - commonOffset ) ; ",
  "25111": "equality2 = commonString + equality2 ; ",
  "25112": "bestEquality1 = equality1 ; ",
  "25113": "bestEdit = edit ; ",
  "25114": "bestEquality2 = equality2 ; ",
  "25115": "bestScore = diff_cleanupSemanticScore ( equality1 , edit ) ",
  "25116": "+ diff_cleanupSemanticScore ( edit , equality2 ) ; ",
  "25117": "while ( edit . length ( ) != 0 && equality2 . length ( ) != 0 ",
  "25118": "&& edit . charAt ( 0 ) == equality2 . charAt ( 0 ) ) { ",
  "25119": "equality1 += edit . charAt ( 0 ) ; ",
  "25120": "edit = edit . substring ( 1 ) + equality2 . charAt ( 0 ) ; ",
  "25121": "equality2 = equality2 . substring ( 1 ) ; ",
  "25122": "score = diff_cleanupSemanticScore ( equality1 , edit ) ",
  "25123": "if ( score >= bestScore ) { ",
  "25124": "bestScore = score ; ",
  "25125": "if ( ! prevDiff . text . equals ( bestEquality1 ) ) { ",
  "25126": "if ( bestEquality1 . length ( ) != 0 ) { ",
  "25127": "prevDiff . text = bestEquality1 ; ",
  "25128": "pointer . remove ( ) ; ",
  "25129": "thisDiff . text = bestEdit ; ",
  "25130": "if ( bestEquality2 . length ( ) != 0 ) { ",
  "25131": "nextDiff . text = bestEquality2 ; ",
  "25132": "nextDiff = thisDiff ; ",
  "25133": "thisDiff = prevDiff ; ",
  "25134": "thisDiff = nextDiff ; ",
  "25135": "nextDiff = pointer . hasNext ( ) ? pointer . next ( ) : null ; ",
  "25136": "} private int diff_cleanupSemanticScore ( String one , String two ) { ",
  "25137": "if ( one . length ( ) == 0 || two . length ( ) == 0 ) { ",
  "25138": "return 6 ; ",
  "25139": "char char1 = one . charAt ( one . length ( ) - 1 ) ; ",
  "25140": "char char2 = two . charAt ( 0 ) ; ",
  "25141": "boolean nonAlphaNumeric1 = ! Character . isLetterOrDigit ( char1 ) ; ",
  "25142": "boolean nonAlphaNumeric2 = ! Character . isLetterOrDigit ( char2 ) ; ",
  "25143": "boolean whitespace1 = nonAlphaNumeric1 && Character . isWhitespace ( char1 ) ; ",
  "25144": "boolean whitespace2 = nonAlphaNumeric2 && Character . isWhitespace ( char2 ) ; ",
  "25145": "boolean lineBreak1 = whitespace1 ",
  "25146": "&& Character . getType ( char1 ) == Character . CONTROL ; ",
  "25147": "boolean lineBreak2 = whitespace2 ",
  "25148": "&& Character . getType ( char2 ) == Character . CONTROL ; ",
  "25149": "boolean blankLine1 = lineBreak1 && BLANKLINEEND . matcher ( one ) . find ( ) ; ",
  "25150": "boolean blankLine2 = lineBreak2 && BLANKLINESTART . matcher ( two ) . find ( ) ; ",
  "25151": "if ( blankLine1 || blankLine2 ) { ",
  "25152": "return 5 ; ",
  "25153": "} else if ( lineBreak1 || lineBreak2 ) { ",
  "25154": "} else if ( nonAlphaNumeric1 && ! whitespace1 && whitespace2 ) { ",
  "25155": "} else if ( whitespace1 || whitespace2 ) { ",
  "25156": "} else if ( nonAlphaNumeric1 || nonAlphaNumeric2 ) { ",
  "25157": "} public void diff_cleanupEfficiency ( LinkedList < Diff > diffs ) { ",
  "25158": "boolean pre_ins = false ; ",
  "25159": "boolean pre_del = false ; ",
  "25160": "boolean post_ins = false ; ",
  "25161": "boolean post_del = false ; ",
  "25162": "Diff safeDiff = thisDiff ; ",
  "25163": "if ( thisDiff . text . length ( ) < Diff_EditCost && ( post_ins || post_del ) ) { ",
  "25164": "pre_ins = post_ins ; ",
  "25165": "pre_del = post_del ; ",
  "25166": "equalities . clear ( ) ; ",
  "25167": "safeDiff = thisDiff ; ",
  "25168": "post_ins = post_del = false ; ",
  "25169": "if ( thisDiff . operation == Operation . DELETE ) { ",
  "25170": "post_del = true ; ",
  "25171": "post_ins = true ; ",
  "25172": "if ( lastequality != null ",
  "25173": "&& ( ( pre_ins && pre_del && post_ins && post_del ) ",
  "25174": "|| ( ( lastequality . length ( ) < Diff_EditCost / 2 ) ",
  "25175": "&& ( ( pre_ins ? 1 : 0 ) + ( pre_del ? 1 : 0 ) ",
  "25176": "+ ( post_ins ? 1 : 0 ) + ( post_del ? 1 : 0 ) ) == 3 ) ) ) { ",
  "25177": "pointer . add ( thisDiff = new Diff ( Operation . INSERT , lastequality ) ) ; ",
  "25178": "if ( pre_ins && pre_del ) { ",
  "25179": "post_ins = post_del = true ; ",
  "25180": "thisDiff = safeDiff ; ",
  "25181": "} protected int match_bitap ( String text , String pattern , int loc ) { ",
  "25182": "assert ( Match_MaxBits == 0 || pattern . length ( ) <= Match_MaxBits ) ",
  "25183": "Map < Character , Integer > s = match_alphabet ( pattern ) ; ",
  "25184": "double score_threshold = Match_Threshold ; ",
  "25185": "int best_loc = text . indexOf ( pattern , loc ) ; ",
  "25186": "if ( best_loc != - 1 ) { ",
  "25187": "score_threshold = Math . min ( match_bitapScore ( 0 , best_loc , loc , pattern ) , ",
  "25188": "score_threshold ) ; ",
  "25189": "best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; ",
  "25190": "int matchmask = 1 << ( pattern . length ( ) - 1 ) ; ",
  "25191": "best_loc = - 1 ; ",
  "25192": "int bin_min , bin_mid ; ",
  "25193": "int bin_max = pattern . length ( ) + text . length ( ) ; ",
  "25194": "int [ ] last_rd = new int [ 0 ] ; ",
  "25195": "for ( int d = 0 ; d < pattern . length ( ) ; d ++ ) { ",
  "25196": "bin_min = 0 ; ",
  "25197": "bin_mid = bin_max ; ",
  "25198": "while ( bin_min < bin_mid ) { ",
  "25199": "if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) ",
  "25200": "<= score_threshold ) { ",
  "25201": "bin_min = bin_mid ; ",
  "25202": "bin_max = bin_mid ; ",
  "25203": "bin_mid = ( bin_max - bin_min ) / 2 + bin_min ; ",
  "25204": "int start = Math . max ( 1 , loc - bin_mid + 1 ) ; ",
  "25205": "int finish = Math . min ( loc + bin_mid , text . length ( ) ) + pattern . length ( ) ; ",
  "25206": "int [ ] rd = new int [ finish + 2 ] ; ",
  "25207": "rd [ finish + 1 ] = ( 1 << d ) - 1 ; ",
  "25208": "for ( int j = finish ; j >= start ; j -- ) { ",
  "25209": "int charMatch ; ",
  "25210": "if ( text . length ( ) <= j - 1 || ! s . containsKey ( text . charAt ( j - 1 ) ) ) { ",
  "25211": "charMatch = 0 ; ",
  "25212": "charMatch = s . get ( text . charAt ( j - 1 ) ) ; ",
  "25213": "if ( d == 0 ) { ",
  "25214": "rd [ j ] = ( ( rd [ j + 1 ] << 1 ) | 1 ) & charMatch ; ",
  "25215": "rd [ j ] = ( ( ( rd [ j + 1 ] << 1 ) | 1 ) & charMatch ) ",
  "25216": "| ( ( ( last_rd [ j + 1 ] | last_rd [ j ] ) << 1 ) | 1 ) | last_rd [ j + 1 ] ; ",
  "25217": "if ( ( rd [ j ] & matchmask ) != 0 ) { ",
  "25218": "double score = match_bitapScore ( d , j - 1 , loc , pattern ) ; ",
  "25219": "if ( score <= score_threshold ) { ",
  "25220": "score_threshold = score ; ",
  "25221": "best_loc = j - 1 ; ",
  "25222": "if ( best_loc > loc ) { ",
  "25223": "start = Math . max ( 1 , 2 * loc - best_loc ) ; ",
  "25224": "if ( match_bitapScore ( d + 1 , loc , loc , pattern ) > score_threshold ) { ",
  "25225": "last_rd = rd ; ",
  "25226": "return best_loc ; ",
  "25227": "} public LinkedList < Patch > patch_make ( String text1 , LinkedList < Diff > diffs ) { ",
  "25228": "if ( text1 == null || diffs == null ) { ",
  "25229": "LinkedList < Patch > patches = new LinkedList < Patch > ( ) ; ",
  "25230": "return patches ; ",
  "25231": "Patch patch = new Patch ( ) ; ",
  "25232": "int char_count1 = 0 ; ",
  "25233": "int char_count2 = 0 ; ",
  "25234": "String prepatch_text = text1 ; ",
  "25235": "String postpatch_text = text1 ; ",
  "25236": "for ( Diff aDiff : diffs ) { ",
  "25237": "if ( patch . diffs . isEmpty ( ) && aDiff . operation != Operation . EQUAL ) { ",
  "25238": "patch . start1 = char_count1 ; ",
  "25239": "patch . start2 = char_count2 ; ",
  "25240": "switch ( aDiff . operation ) { ",
  "25241": "case INSERT : ",
  "25242": "patch . diffs . add ( aDiff ) ; ",
  "25243": "patch . length2 += aDiff . text . length ( ) ; ",
  "25244": "postpatch_text = postpatch_text . substring ( 0 , char_count2 ) ",
  "25245": "+ aDiff . text + postpatch_text . substring ( char_count2 ) ; ",
  "25246": "patch . length1 += aDiff . text . length ( ) ; ",
  "25247": "+ postpatch_text . substring ( char_count2 + aDiff . text . length ( ) ) ; ",
  "25248": "if ( aDiff . text . length ( ) <= 2 * Patch_Margin ",
  "25249": "&& ! patch . diffs . isEmpty ( ) && aDiff != diffs . getLast ( ) ) { ",
  "25250": "if ( aDiff . text . length ( ) >= 2 * Patch_Margin ) { ",
  "25251": "if ( ! patch . diffs . isEmpty ( ) ) { ",
  "25252": "patch_addContext ( patch , prepatch_text ) ; ",
  "25253": "patches . add ( patch ) ; ",
  "25254": "patch = new Patch ( ) ; ",
  "25255": "prepatch_text = postpatch_text ; ",
  "25256": "char_count1 = char_count2 ; ",
  "25257": "if ( aDiff . operation != Operation . INSERT ) { ",
  "25258": "char_count1 += aDiff . text . length ( ) ; ",
  "25259": "if ( aDiff . operation != Operation . DELETE ) { ",
  "25260": "char_count2 += aDiff . text . length ( ) ; ",
  "25261": "} public List < Patch > patch_fromText ( String textline ) ",
  "25262": "List < Patch > patches = new LinkedList < Patch > ( ) ; ",
  "25263": "if ( textline . length ( ) == 0 ) { ",
  "25264": "List < String > textList = Arrays . asList ( textline . split ( \"\\n\" ) ) ; ",
  "25265": "LinkedList < String > text = new LinkedList < String > ( textList ) ; ",
  "25266": "Patch patch ; ",
  "25267": "Pattern patchHeader ",
  "25268": "char sign ; ",
  "25269": "while ( ! text . isEmpty ( ) ) { ",
  "25270": "m = patchHeader . matcher ( text . getFirst ( ) ) ; ",
  "25271": "if ( ! m . matches ( ) ) { ",
  "25272": "patch . start1 = Integer . parseInt ( m . group ( 1 ) ) ; ",
  "25273": "if ( m . group ( 2 ) . length ( ) == 0 ) { ",
  "25274": "patch . start1 -- ; ",
  "25275": "patch . length1 = 1 ; ",
  "25276": "} else if ( m . group ( 2 ) . equals ( \"0\" ) ) { ",
  "25277": "patch . length1 = 0 ; ",
  "25278": "patch . length1 = Integer . parseInt ( m . group ( 2 ) ) ; ",
  "25279": "patch . start2 = Integer . parseInt ( m . group ( 3 ) ) ; ",
  "25280": "if ( m . group ( 4 ) . length ( ) == 0 ) { ",
  "25281": "patch . start2 -- ; ",
  "25282": "patch . length2 = 1 ; ",
  "25283": "} else if ( m . group ( 4 ) . equals ( \"0\" ) ) { ",
  "25284": "patch . length2 = 0 ; ",
  "25285": "patch . length2 = Integer . parseInt ( m . group ( 4 ) ) ; ",
  "25286": "text . removeFirst ( ) ; ",
  "25287": "sign = text . getFirst ( ) . charAt ( 0 ) ; ",
  "25288": "line = text . getFirst ( ) . substring ( 1 ) ; ",
  "25289": "line = line . replace ( \"+\" , \"%2B\" ) ; ",
  "25290": "line = URLDecoder . decode ( line , \"UTF-8\" ) ; ",
  "25291": "if ( sign == '-' ) { ",
  "25292": "patch . diffs . add ( new Diff ( Operation . DELETE , line ) ) ; ",
  "25293": "} else if ( sign == '+' ) { ",
  "25294": "patch . diffs . add ( new Diff ( Operation . INSERT , line ) ) ; ",
  "25295": "patch . diffs . add ( new Diff ( Operation . EQUAL , line ) ) ; ",
  "25296": "} else if ( sign == '@' ) { ",
  "25297": "} String convertSoapMessageAsString ( SOAPMessage soapMessage ) { ",
  "25298": "if ( soapMessage == null ) { ",
  "25299": "return \"null\" ; ",
  "25300": "soapMessage . writeTo ( os ) ; ",
  "25301": "return new String ( os . toByteArray ( ) , determineMessageEncoding ( soapMessage ) ) ; ",
  "25302": "return \"ERROR\" ; ",
  "25303": "} public boolean shouldBeProcessed ( final ProfileSettings profileSettings ) { ",
  "25304": "if ( profileSettings != null ) { ",
  "25305": "String propertyName = GetterUtilities . getFullQualifiedFieldName ( baseType , method ) ; ",
  "25306": "Boolean shouldBeProcessed = profileSettings . getPropertyValue ( propertyName ) ; ",
  "25307": "if ( shouldBeProcessed == null ) { ",
  "25308": "propertyName = baseType . getCanonicalName ( ) + \".\" + method . getName ( ) ; ",
  "25309": "shouldBeProcessed = profileSettings . getPropertyValue ( propertyName ) ; ",
  "25310": "if ( shouldBeProcessed == null && annotation != null ) { ",
  "25311": "shouldBeProcessed = annotation . enabledPerDefault ( ) ; ",
  "25312": "if ( shouldBeProcessed != null ) { ",
  "25313": "return shouldBeProcessed ; ",
  "25314": "} protected boolean hasTraceeContextProviderAnnotation ( final Object instance ) { ",
  "25315": "TraceeContextProvider annotation = TraceeContextLogAnnotationUtilities . getAnnotationFromType ( instance ) ; ",
  "25316": "return annotation != null ; ",
  "25317": "} protected boolean isExtendingTraceeContextProvider ( final Object instance ) { ",
  "25318": "return ImplicitContextData . class . isAssignableFrom ( instance . getClass ( ) ) || WrappedContextData . class . isAssignableFrom ( instance . getClass ( ) ) ; ",
  "25319": "} public static boolean isListOfType ( Object instance , Class type ) { ",
  "25320": "if ( instance == null || type == null ) { ",
  "25321": "if ( List . class . isAssignableFrom ( instance . getClass ( ) ) ) { ",
  "25322": "List list = ( List ) instance ; ",
  "25323": "boolean isEmpty = list . size ( ) == 0 ; ",
  "25324": "if ( element != null && ! type . isAssignableFrom ( element . getClass ( ) ) ) { ",
  "25325": "} public static < T > List < T > getListOfType ( Object instance , Class < T > elementType ) { ",
  "25326": "if ( instance == null || elementType == null || ! isListOfType ( instance , elementType ) ) { ",
  "25327": "return ( List < T > ) instance ; ",
  "25328": "} protected static synchronized FileObjectWrapper getOrCreateProfileProperties ( final Filer filer , String fileName ) throws IOException { ",
  "25329": "FileObjectWrapper fileObject = traceeProfileProperties . get ( fileName ) ; ",
  "25330": "if ( fileObject == null ) { ",
  "25331": "fileObject = new FileObjectWrapper ( filer . createResource ( StandardLocation . SOURCE_OUTPUT , \"\" , fileName , null ) ) ; ",
  "25332": "traceeProfileProperties . put ( fileName , fileObject ) ; ",
  "25333": "return fileObject ; ",
  "25334": "} protected boolean isValidMethod ( Element element ) { ",
  "25335": "if ( element . getKind ( ) != ElementKind . METHOD ) { ",
  "25336": "TraceeContextProviderMethod . class . getSimpleName ( ) ) ; ",
  "25337": "if ( ! element . getModifiers ( ) . contains ( Modifier . PUBLIC ) ) { ",
  "25338": "if ( element . getModifiers ( ) . contains ( Modifier . ABSTRACT ) ) { ",
  "25339": "if ( element . getModifiers ( ) . contains ( Modifier . STATIC ) ) { ",
  "25340": "} protected boolean isGetterMethod ( ExecutableElement executableElement ) { ",
  "25341": "TypeMirror returnTypeMirror = executableElement . getReturnType ( ) ; ",
  "25342": "if ( returnTypeMirror . getKind ( ) . equals ( TypeKind . VOID ) ) { ",
  "25343": "List parameters = executableElement . getParameters ( ) ; ",
  "25344": "if ( parameters != null && parameters . size ( ) > 0 ) { ",
  "25345": "} protected boolean isParentAnnotatedWithTraceeContextProvider ( final Element element ) { ",
  "25346": "Element parentElement = element . getEnclosingElement ( ) ; ",
  "25347": "if ( parentElement == null || parentElement . getKind ( ) != ElementKind . CLASS ",
  "25348": "|| ! isTypeAnnotatedWithTraceeContextProvider ( ( TypeElement ) parentElement ) ) { ",
  "25349": "Flatten . class . getSimpleName ( ) , TraceeContextProvider . class . getSimpleName ( ) ) ; ",
  "25350": "} public Boolean getPropertyValue ( final String propertyKey ) { ",
  "25351": "if ( propertyKey == null ) { ",
  "25352": "if ( toTraceeContextStringRepresentationBuilder != null && toTraceeContextStringRepresentationBuilder . getManualContextOverrides ( ) != null ) { ",
  "25353": "Boolean manualOverrideCheck = toTraceeContextStringRepresentationBuilder . getManualContextOverrides ( ) . get ( propertyKey ) ; ",
  "25354": "if ( manualOverrideCheck != null ) { ",
  "25355": "return manualOverrideCheck ; ",
  "25356": "if ( profileProperties != null ) { ",
  "25357": "String value = profileProperties . getProperty ( propertyKey ) ; ",
  "25358": "return Boolean . valueOf ( value ) ; ",
  "25359": "} protected boolean checkIfClassHasNoargsConstructor ( TypeElement typeElement ) { ",
  "25360": "boolean foundConstructor = false ; ",
  "25361": "boolean foundNoargsConstructor = false ; ",
  "25362": "for ( Element child : typeElement . getEnclosedElements ( ) ) { ",
  "25363": "if ( ElementKind . CONSTRUCTOR . equals ( child . getKind ( ) ) ) { ",
  "25364": "foundConstructor = true ; ",
  "25365": "ExecutableElement constructor = ( ExecutableElement ) child ; ",
  "25366": "if ( constructor . getParameters ( ) . size ( ) == 0 ) { ",
  "25367": "foundNoargsConstructor = true ; ",
  "25368": "return ! ( foundConstructor && ! foundNoargsConstructor ) ; ",
  "25369": "} public static < T extends Annotation > T getAnnotationFromType ( final Object instance , Class < T > annotation ) { ",
  "25370": "if ( instance == null || annotation == null ) { ",
  "25371": "return instance . getClass ( ) . getAnnotation ( annotation ) ; ",
  "25372": "} public static List < MethodAnnotationPair > getAnnotatedMethodsOfInstance ( final Object instance ) { ",
  "25373": "List < MethodAnnotationPair > result = new ArrayList < MethodAnnotationPair > ( ) ; ",
  "25374": "for ( Method method : instance . getClass ( ) . getDeclaredMethods ( ) ) { ",
  "25375": "if ( checkIsPublic ( method ) && checkMethodHasNoParameters ( method ) && checkMethodHasNonVoidReturnType ( method ) ) { ",
  "25376": "TraceeContextProviderMethod annotation = method . getAnnotation ( TraceeContextProviderMethod . class ) ; ",
  "25377": "result . add ( new MethodAnnotationPair ( instance . getClass ( ) , method , annotation ) ) ; ",
  "25378": "} public static boolean checkMethodHasNonVoidReturnType ( final Method method ) { ",
  "25379": "return ! ( Void . TYPE == method . getReturnType ( ) ) ; ",
  "25380": "} public static Set < Method > getGetterMethodsRecursively ( final Class type ) { ",
  "25381": "Set < Method > getterMethods = new HashSet < Method > ( ) ; ",
  "25382": "methods = type . getDeclaredMethods ( ) ; ",
  "25383": "catch ( SecurityException e ) { ",
  "25384": "methods = type . getMethods ( ) ; ",
  "25385": "if ( IsGetterMethodPredicate . check ( type , method ) ) { ",
  "25386": "getterMethods . add ( method ) ; ",
  "25387": "getterMethods . addAll ( getGetterMethodsRecursively ( type . getSuperclass ( ) ) ) ; ",
  "25388": "return getterMethods ; ",
  "25389": "} public boolean apply ( final StringBuilder stringBuilder , final OutputStyle outputStyle , final OutputElement outputElement ) { ",
  "25390": "if ( outputElement != null ) { ",
  "25391": "if ( OutputElementType . COLLECTION . equals ( outputElement . getOutputElementType ( ) ) ) { ",
  "25392": "result = handleCollectionType ( stringBuilder , outputStyle , outputElement ) ; ",
  "25393": "} else if ( OutputElementType . COMPLEX . equals ( outputElement . getOutputElementType ( ) ) ) { ",
  "25394": "if ( TraceeContextLogAnnotationUtilities . getAnnotationFromType ( outputElement . getEncapsulatedInstance ( ) ) != null ) { ",
  "25395": "result = handleTraceeContextprovider ( stringBuilder , outputStyle , outputElement ) ; ",
  "25396": "result = handleComplexType ( stringBuilder , outputStyle , outputElement ) ; ",
  "25397": "} public static Set < Class > findWrapperClasses ( ) { ",
  "25398": "final List < TypeToWrapper > localTypeToWrapperList = getTypeToWrapper ( ) ; ",
  "25399": "Set < Class > resultList = new HashSet < Class > ( ) ; ",
  "25400": "if ( localTypeToWrapperList != null ) { ",
  "25401": "for ( TypeToWrapper typeToWrapper : localTypeToWrapperList ) { ",
  "25402": "resultList . add ( typeToWrapper . getWrapperType ( ) ) ; ",
  "25403": "return resultList ; ",
  "25404": "} public static Set < ImplicitContextData > getImplicitContextDataProviders ( ) { ",
  "25405": "final Set < ImplicitContextData > result = new HashSet < ImplicitContextData > ( ) ; ",
  "25406": "for ( Class clazz : ContextProviderServiceLoader . getServiceLocator ( ) . getImplicitContextProvider ( ) ) { ",
  "25407": "if ( ImplicitContextData . class . isAssignableFrom ( clazz ) ) { ",
  "25408": "ImplicitContextData instance = ( ImplicitContextData ) ( clazz . newInstance ( ) ) ; ",
  "25409": "result . add ( instance ) ; ",
  "25410": "} public static List < TypeToWrapper > getAvailableWrappers ( ) { ",
  "25411": "final List < TypeToWrapper > result = new ArrayList < TypeToWrapper > ( ) ; ",
  "25412": "for ( Class clazz : ContextProviderServiceLoader . getServiceLocator ( ) . getContextProvider ( ) ) { ",
  "25413": "if ( WrappedContextData . class . isAssignableFrom ( clazz ) ) { ",
  "25414": "final WrappedContextData instance = ( WrappedContextData ) clazz . newInstance ( ) ; ",
  "25415": "result . add ( new TypeToWrapper ( instance . getWrappedType ( ) , clazz ) ) ; ",
  "25416": "} private void initConnectors ( ) { ",
  "25417": "Set < String > connectorConfigurationNames = this . getConnectorConfigurationNames ( ) ; ",
  "25418": "for ( String connectorConfigurationName : connectorConfigurationNames ) { ",
  "25419": "Connector connector = this . createConnector ( connectorConfigurationName ) ; ",
  "25420": "if ( connector != null ) { ",
  "25421": "this . connectorMap . put ( connectorConfigurationName , connector ) ; ",
  "25422": "if ( ! isConnectorConfigured ( LogConnector . class ) ) { ",
  "25423": "Connector logConnector = new LogConnector ( ) ; ",
  "25424": "this . connectorMap . put ( \"LOGGER\" , logConnector ) ; ",
  "25425": "} final void sendErrorReportToConnectors ( ConnectorOutputProvider connectorOutputProvider ) { ",
  "25426": "for ( Connector connector : this . connectorMap . values ( ) ) { ",
  "25427": "connector . sendErrorReport ( connectorOutputProvider ) ; ",
  "25428": "} final Set < String > getConnectorConfigurationNames ( ) { ",
  "25429": "Set < String > connectorNames = new HashSet < String > ( ) ; ",
  "25430": "Enumeration < Object > keyEnumeration = getSystemProperties ( ) . keys ( ) ; ",
  "25431": "while ( keyEnumeration . hasMoreElements ( ) ) { ",
  "25432": "String key = keyEnumeration . nextElement ( ) . toString ( ) ; ",
  "25433": "Matcher matcher = KEY_MATCHER_PATTERN . matcher ( key ) ; ",
  "25434": "if ( matcher . matches ( ) && matcher . groupCount ( ) > 0 ) { ",
  "25435": "connectorNames . add ( matcher . group ( 1 ) ) ; ",
  "25436": "return connectorNames ; ",
  "25437": "} final Map < String , String > getPropertiesForConnectorConfigurationName ( final String connectorName ) { ",
  "25438": "final Map < String , String > propertyMap = new HashMap < String , String > ( ) ; ",
  "25439": "final String patternString = String . format ( CONNECTOR_PROPERTY_GRABBER_PATTERN , connectorName ) ; ",
  "25440": "final Pattern propertyGrabPattern = Pattern . compile ( patternString ) ; ",
  "25441": "final Set < Map . Entry < Object , Object > > entries = getSystemProperties ( ) . entrySet ( ) ; ",
  "25442": "final String key = entry . getKey ( ) . toString ( ) ; ",
  "25443": "final Object value = entry . getValue ( ) ; ",
  "25444": "final Matcher matcher = propertyGrabPattern . matcher ( key ) ; ",
  "25445": "if ( value != null && matcher . matches ( ) && matcher . groupCount ( ) > 0 ) { ",
  "25446": "final String propertyName = matcher . group ( 1 ) ; ",
  "25447": "propertyMap . put ( propertyName , value . toString ( ) ) ; ",
  "25448": "return propertyMap ; ",
  "25449": "} final Connector createConnector ( final String connectorConfigurationName ) { ",
  "25450": "Map < String , String > propertyMap = this . getPropertiesForConnectorConfigurationName ( connectorConfigurationName ) ; ",
  "25451": "String type = propertyMap . get ( TraceeContextLoggerConstants . SYSTEM_PROPERTY_CONTEXT_LOGGER_CONNECTOR_TYPE ) ; ",
  "25452": "if ( WELL_KNOW_CONNECTOR_MAPPINGS . containsKey ( type ) ) { ",
  "25453": "type = WELL_KNOW_CONNECTOR_MAPPINGS . get ( type ) ; ",
  "25454": "Connector connector = ( Connector ) Class . forName ( type ) . newInstance ( ) ; ",
  "25455": "connector . init ( propertyMap ) ; ",
  "25456": "return connector ; ",
  "25457": "} private boolean isConnectorConfigured ( Class connectorClass ) { ",
  "25458": "if ( connectorClass . isInstance ( connector ) ) { ",
  "25459": "} boolean hasGetterPrefixInMethodName ( Method method ) { ",
  "25460": "if ( methodName != null ) { ",
  "25461": "for ( String prefix : GETTER_PREFIXES ) { ",
  "25462": "} boolean isPublicNonStaticMethod ( final Method method ) { ",
  "25463": "int modifiers = method . getModifiers ( ) ; ",
  "25464": "return ! Modifier . isStatic ( modifiers ) && Modifier . isPublic ( modifiers ) ; ",
  "25465": "} boolean hasReturnValue ( final Method method ) { ",
  "25466": "return ! Void . TYPE . equals ( returnType ) ; ",
  "25467": "} boolean hasCompatibleReturnTypes ( Class type , Method method ) { ",
  "25468": "Field correspondingField = getCorrespondingField ( type , method ) ; ",
  "25469": "return correspondingField != null && method . getReturnType ( ) . isAssignableFrom ( correspondingField . getType ( ) ) ; ",
  "25470": "} Field getCorrespondingField ( Class type , Method method ) { ",
  "25471": "return type . getDeclaredField ( GetterUtilities . getFieldName ( method ) ) ; ",
  "25472": "catch ( NoSuchFieldException e ) { ",
  "25473": "} public static boolean isGetterMethod ( final String methodName ) { ",
  "25474": "} public static String getFieldName ( final String methodName ) { ",
  "25475": "if ( isGetterMethod ( methodName ) ) { ",
  "25476": "return decapitalizeFirstCharOfString ( stripGetterPrefix ( methodName ) ) ; ",
  "25477": "} public static String getFieldName ( final Method method ) { ",
  "25478": "return getFieldName ( method . getName ( ) ) ; ",
  "25479": "} public static String getFullQualifiedFieldName ( final Class type , final Method method ) { ",
  "25480": "final String typeName ; ",
  "25481": "typeName = type . getCanonicalName ( ) ; ",
  "25482": "typeName = method . getDeclaringClass ( ) . getCanonicalName ( ) ; ",
  "25483": "final String fieldName ; ",
  "25484": "if ( isGetterMethod ( method . getName ( ) ) ) { ",
  "25485": "fieldName = getFieldName ( method . getName ( ) ) ; ",
  "25486": "fieldName = method . getName ( ) ; ",
  "25487": "return typeName + \".\" + fieldName ; ",
  "25488": "} static String capitalizeFirstCharOfString ( final String input ) { ",
  "25489": "if ( input == null || input . length ( ) == 0 ) { ",
  "25490": "else if ( input . length ( ) == 1 ) { ",
  "25491": "return input . toUpperCase ( ) ; ",
  "25492": "return input . substring ( 0 , 1 ) . toUpperCase ( ) + input . substring ( 1 ) ; ",
  "25493": "} static String decapitalizeFirstCharOfString ( final String input ) { ",
  "25494": "return input . toLowerCase ( ) ; ",
  "25495": "return input . substring ( 0 , 1 ) . toLowerCase ( ) + input . substring ( 1 ) ; ",
  "25496": "} static String stripGetterPrefix ( final String input ) { ",
  "25497": "if ( input != null ) { ",
  "25498": "if ( input . startsWith ( prefix ) ) { ",
  "25499": "return input . substring ( prefix . length ( ) ) ; ",
  "25500": "} protected Object invokeGetter ( final Object instance , final Method method ) { ",
  "25501": "return method . invoke ( instance ) ; ",
  "25502": "} protected Object invokeField ( final Object instance , final Method method ) { ",
  "25503": "if ( instance == null || method == null ) { ",
  "25504": "Field field = FieldUtilities . getField ( instance . getClass ( ) , GetterUtilities . getFieldName ( method ) ) ; ",
  "25505": "return field . get ( instance ) ; ",
  "25506": "} void sendErrorReportToConnectors ( ProceedingJoinPoint proceedingJoinPoint , String annotatedId , Throwable e ) { ",
  "25507": "ErrorMessage errorMessage = WatchdogUtils . getErrorMessageAnnotation ( proceedingJoinPoint ) ; ",
  "25508": "if ( errorMessage == null ) { ",
  "25509": "TraceeContextLogger ",
  "25510": ". create ( ) ",
  "25511": ". enforceOrder ( ) ",
  "25512": ". apply ( ) ",
  "25513": ". logWithPrefixedMessage ( MessagePrefixProvider . provideLogMessagePrefix ( MessageLogLevel . ERROR , Watchdog . class ) , CoreImplicitContextProviders . COMMON , ",
  "25514": "CoreImplicitContextProviders . TRACEE , WatchdogDataWrapper . wrap ( annotatedId , proceedingJoinPoint ) , e ) ; ",
  "25515": ". logWithPrefixedMessage ( MessagePrefixProvider . provideLogMessagePrefix ( MessageLogLevel . ERROR , Watchdog . class ) , ",
  "25516": "TraceeMessage . wrap ( errorMessage . value ( ) ) , CoreImplicitContextProviders . COMMON , CoreImplicitContextProviders . TRACEE , ",
  "25517": "WatchdogDataWrapper . wrap ( annotatedId , proceedingJoinPoint ) , e ) ; ",
  "25518": "} public Object apply ( ContextLoggerConfiguration contextLoggerConfiguration , Object instanceToWrap ) { ",
  "25519": "if ( IsImplicitContextEnumValuePredicate . getInstance ( ) . apply ( instanceToWrap ) ) { ",
  "25520": "return createInstance ( ( Class ) contextLoggerConfiguration . getImplicitContextProviderClass ( ( ImplicitContext ) instanceToWrap ) ) ; ",
  "25521": "Class matchingWrapperType = contextLoggerConfiguration . getContextProviderClass ( instanceToWrap . getClass ( ) ) ; ",
  "25522": "if ( matchingWrapperType == null ) { ",
  "25523": "for ( TypeToWrapper wrapper : contextLoggerConfiguration . getWrapperList ( ) ) { ",
  "25524": "if ( wrapper . getWrappedInstanceType ( ) . isAssignableFrom ( instanceToWrap . getClass ( ) ) ) { ",
  "25525": "matchingWrapperType = wrapper . getWrapperType ( ) ; ",
  "25526": "if ( matchingWrapperType != null ) { ",
  "25527": "WrappedContextData wrapperInstance = ( WrappedContextData ) createInstance ( matchingWrapperType ) ; ",
  "25528": "wrapperInstance . setContextData ( instanceToWrap ) ; ",
  "25529": "return wrapperInstance ; ",
  "25530": "return instanceToWrap ; ",
  "25531": "} protected Object createInstance ( final Class type ) { ",
  "25532": "} protected boolean hasTraceeContextProviderPrimitiveTypeAnnotation ( final Object instance ) { ",
  "25533": "TraceeContextProviderPrimitiveType annotation = TraceeContextLogAnnotationUtilities . getAnnotationFromType ( instance , TraceeContextProviderPrimitiveType . class ) ; ",
  "25534": "return WrappedPrimitiveTypeContextData . class . isAssignableFrom ( instance . getClass ( ) ) ; ",
  "25535": "} public static Profile getCurrentProfile ( ) { ",
  "25536": "Profile profile = getProfileFromSystemProperties ( ) ; ",
  "25537": "if ( profile == null ) { ",
  "25538": "profile = getProfileFromFileInClasspath ( ProfilePropertyNames . PROFILE_SET_BY_FILE_IN_CLASSPATH_FILENAME ) ; ",
  "25539": "profile = ProfilePropertyNames . DEFAULT_PROFILE ; ",
  "25540": "return profile ; ",
  "25541": "} static Profile getProfileFromSystemProperties ( ) { ",
  "25542": "Profile result = null ; ",
  "25543": "String systemPropertyProfileName = System . getProperty ( ProfilePropertyNames . PROFILE_SET_GLOBALLY_VIA_SYSTEM_PROPERTIES ) ; ",
  "25544": "if ( systemPropertyProfileName != null ) { ",
  "25545": "result = Profile . valueOf ( systemPropertyProfileName ) ; ",
  "25546": "} static Profile getProfileFromFileInClasspath ( final String filename ) { ",
  "25547": "Properties properties = openProperties ( filename ) ; ",
  "25548": "String profileFromProperties = properties . getProperty ( ProfilePropertyNames . PROFILE_SET_BY_FILE_IN_CLASSPATH_PROPERTY ) ; ",
  "25549": "if ( profileFromProperties != null ) { ",
  "25550": "result = Profile . valueOf ( profileFromProperties ) ; ",
  "25551": "} public static Properties openProperties ( final String propertyFileName ) throws IOException { ",
  "25552": "if ( propertyFileName == null ) { ",
  "25553": "inputStream = Profile . class . getResourceAsStream ( propertyFileName ) ; ",
  "25554": "properties . load ( inputStream ) ; ",
  "25555": "} private void fillManualContextOverrideMap ( final String [ ] contexts , final boolean value ) { ",
  "25556": "for ( String context : contexts ) { ",
  "25557": "if ( ! context . isEmpty ( ) ) { ",
  "25558": "this . manualContextOverrides . put ( context , value ) ; ",
  "25559": "} private TraceeContextStringRepresentationBuilderImpl createContextStringRepresentationLogBuilder ( ) { ",
  "25560": "TraceeContextStringRepresentationBuilderImpl traceeContextStringRepresentationBuilderImpl = new TraceeContextStringRepresentationBuilderImpl ( ) ; ",
  "25561": "traceeContextStringRepresentationBuilderImpl . setManualContextOverrides ( this . getManualContextOverrides ( ) ) ; ",
  "25562": "traceeContextStringRepresentationBuilderImpl . setProfile ( this . getProfile ( ) ) ; ",
  "25563": "traceeContextStringRepresentationBuilderImpl . setEnforceOrder ( this . getEnforceOrder ( ) ) ; ",
  "25564": "traceeContextStringRepresentationBuilderImpl . setOutputWriterConfiguration ( this . getOutputWriterConfiguration ( ) ) ; ",
  "25565": "return traceeContextStringRepresentationBuilderImpl ; ",
  "25566": "} public static Watchdog getWatchdogAnnotation ( final ProceedingJoinPoint proceedingJoinPoint ) { ",
  "25567": "MethodSignature methodSignature = ( MethodSignature ) proceedingJoinPoint . getSignature ( ) ; ",
  "25568": "Watchdog methodAnnotation = methodSignature . getMethod ( ) . getAnnotation ( Watchdog . class ) ; ",
  "25569": "if ( methodAnnotation != null ) { ",
  "25570": "return methodAnnotation ; ",
  "25571": "return ( Watchdog ) proceedingJoinPoint . getSignature ( ) . getDeclaringType ( ) . getAnnotation ( Watchdog . class ) ; ",
  "25572": "} public static ErrorMessage getErrorMessageAnnotation ( final ProceedingJoinPoint proceedingJoinPoint ) { ",
  "25573": "ErrorMessage methodAnnotation = methodSignature . getMethod ( ) . getAnnotation ( ErrorMessage . class ) ; ",
  "25574": "} public static boolean checkIfMethodThrowsContainsPassedException ( final ProceedingJoinPoint proceedingJoinPoint , Throwable thrownException ) { ",
  "25575": "if ( proceedingJoinPoint == null || thrownException == null ) { ",
  "25576": "Class [ ] throwsClassesFromMethodSignature = getDefinedThrowsFromMethodSignature ( proceedingJoinPoint ) ; ",
  "25577": "return checkClassIsDefinedInThrowsException ( throwsClassesFromMethodSignature , thrownException ) ; ",
  "25578": "} public static boolean checkClassIsDefinedInThrowsException ( Class [ ] classes , Throwable thrownException ) { ",
  "25579": "if ( classes == null || thrownException == null ) { ",
  "25580": "for ( Class clazz : classes ) { ",
  "25581": "if ( clazz . isInstance ( thrownException ) ) { ",
  "25582": "} public static Class [ ] getDefinedThrowsFromMethodSignature ( final ProceedingJoinPoint proceedingJoinPoint ) { ",
  "25583": "if ( proceedingJoinPoint == null ) { ",
  "25584": "return new Class [ 0 ] ; ",
  "25585": "return methodSignature . getMethod ( ) . getExceptionTypes ( ) ; ",
  "25586": "} public static boolean checkProcessWatchdog ( final Watchdog watchdogAnnotation , final ProceedingJoinPoint proceedingJoinPoint , final Throwable throwable ) { ",
  "25587": "if ( watchdogAnnotation != null && watchdogAnnotation . isActive ( ) ) { ",
  "25588": "boolean throwableIsPartOfThrowsDeclaration = WatchdogUtils . checkIfMethodThrowsContainsPassedException ( proceedingJoinPoint , throwable ) ; ",
  "25589": "if ( ! watchdogAnnotation . suppressThrowsExceptions ( ) || ( watchdogAnnotation . suppressThrowsExceptions ( ) && ! throwableIsPartOfThrowsDeclaration ) ) { ",
  "25590": "} @ SuppressWarnings ( \"PMD\" ) ",
  "25591": "public void add ( final Statement ... toAdd ) { ",
  "25592": "if ( toAdd != null ) { ",
  "25593": "Arrays . stream ( toAdd ) ",
  "25594": ". forEach ( c -> { ",
  "25595": "if ( c instanceof CommonEdgeAttributes ) { ",
  "25596": "this . commonEdgeAttributes = ( CommonEdgeAttributes ) c ; ",
  "25597": "} else if ( c instanceof CommonGraphAttributes ) { ",
  "25598": "this . commonGraphAttributes = ( CommonGraphAttributes ) c ; ",
  "25599": "} else if ( c instanceof CommonNodeAttributes ) { ",
  "25600": "this . commonNodeAttributes = ( CommonNodeAttributes ) c ; ",
  "25601": "} else if ( c instanceof Node ) { ",
  "25602": "this . nodes . add ( ( Node ) c ) ; ",
  "25603": "} else if ( c instanceof Identifier ) { ",
  "25604": "this . identifiers . add ( ( Identifier ) c ) ; ",
  "25605": "} else if ( c instanceof Edge ) { ",
  "25606": "this . edges . add ( ( Edge ) c ) ; ",
  "25607": "} else if ( c instanceof Subgraph ) { ",
  "25608": "this . subgraphs . add ( ( Subgraph ) c ) ; ",
  "25609": "} public Node findNode ( final String identifier , final boolean recursive ) { ",
  "25610": "Optional < Node > toReturn = getNodes ( ) . stream ( ) . filter ( c -> c . getId ( ) . equals ( identifier ) ) . findFirst ( ) ; ",
  "25611": "if ( ! toReturn . isPresent ( ) && recursive && getSubgraphs ( ) != null && ! getSubgraphs ( ) . isEmpty ( ) ) { ",
  "25612": "toReturn = getSubgraphs ( ) . stream ( ) ",
  "25613": ". map ( c -> c . getStatements ( ) . findNode ( identifier , true ) ) ",
  "25614": ". filter ( c -> c != null ) ",
  "25615": "return toReturn . orElse ( null ) ; ",
  "25616": "} public Edge findEdge ( final String fromId , final String toId , final boolean recursive ) { ",
  "25617": "Optional < Edge > toReturn = getEdges ( ) . stream ( ) ",
  "25618": ". filter ( c -> c . getId ( ) . equals ( fromId ) && c . getRightSideEdge ( ) . getId ( ) . equals ( toId ) ) ",
  "25619": "if ( ! toReturn . isPresent ( ) && recursive ) { ",
  "25620": "toReturn = subgraphs . stream ( ) . map ( c -> c . getStatements ( ) . findEdge ( fromId , toId , true ) ) . findFirst ( ) ; ",
  "25621": "} public Subgraph findSubgraph ( final String identifier , final boolean recursive ) { ",
  "25622": "Optional < Subgraph > toReturn = getSubgraphs ( ) . stream ( ) . filter ( c -> c . getId ( ) . equals ( identifier ) ) . findFirst ( ) ; ",
  "25623": ". map ( c -> c . getStatements ( ) . findSubgraph ( identifier , true ) ) ",
  "25624": "} public Edge addEdge ( final String fromId , final String toId , final Graph parentGraph ) { ",
  "25625": "if ( fromId == null || fromId . isEmpty ( ) ) { ",
  "25626": "if ( toId == null || toId . isEmpty ( ) ) { ",
  "25627": "if ( parentGraph == null ) { ",
  "25628": "Edge toReturn = null ; ",
  "25629": "final Node fromNode = findNode ( fromId , true ) ; ",
  "25630": "final Subgraph fromSubgraph = findSubgraph ( fromId , true ) ; ",
  "25631": "if ( fromNode != null || fromSubgraph != null ) { ",
  "25632": "final Node toNode = findNode ( toId , true ) ; ",
  "25633": "final Subgraph toSubgraph = findSubgraph ( toId , true ) ; ",
  "25634": "final NodeID toNodeId = toNode == null ? null : toNode . getNodeID ( ) ; ",
  "25635": "if ( toNodeId != null || toSubgraph != null ) { ",
  "25636": "final RightSideEdge rightSideEdge = toNodeId == null ",
  "25637": "? new RightSideEdge ( toSubgraph ) ",
  "25638": ": new RightSideEdge ( toNodeId ) ; ",
  "25639": "toReturn = fromNode == null ",
  "25640": "? new Edge ( fromSubgraph , rightSideEdge ) ",
  "25641": ": new Edge ( fromNode . getNodeID ( ) , rightSideEdge ) ; ",
  "25642": "if ( toReturn != null ) { ",
  "25643": "add ( toReturn ) ; ",
  "25644": "return toReturn ; ",
  "25645": "} public void execute ( ) ",
  "25646": "throws MojoExecutionException , MojoFailureException { ",
  "25647": "if ( skip ) { ",
  "25648": "if ( ! skipExec ) { ",
  "25649": "if ( checkstyleRules != null ) { ",
  "25650": "if ( ! \"sun_checks.xml\" . equals ( configLocation ) ) { ",
  "25651": "if ( checkstyleRules . getChildCount ( ) > 1 ) { ",
  "25652": "PlexusConfiguration checkerModule = checkstyleRules . getChild ( 0 ) ; ",
  "25653": "FileUtils . forceMkdir ( rulesFiles . getParentFile ( ) ) ; ",
  "25654": "FileUtils . fileWrite ( rulesFiles , CHECKSTYLE_FILE_HEADER + checkerModule . toString ( ) ) ; ",
  "25655": "throw new MojoExecutionException ( e . getMessage ( ) , e ) ; ",
  "25656": "configLocation = rulesFiles . getAbsolutePath ( ) ; ",
  "25657": "CheckstyleExecutorRequest request = new CheckstyleExecutorRequest ( ) ; ",
  "25658": "request . setConsoleListener ( getConsoleListener ( ) ) . setConsoleOutput ( consoleOutput ) ",
  "25659": ". setExcludes ( excludes ) . setFailsOnError ( failsOnError ) . setIncludes ( includes ) ",
  "25660": ". setResourceIncludes ( resourceIncludes ) ",
  "25661": ". setResourceExcludes ( resourceExcludes ) ",
  "25662": ". setIncludeResources ( includeResources ) ",
  "25663": ". setIncludeTestResources ( includeTestResources ) ",
  "25664": ". setIncludeTestSourceDirectory ( includeTestSourceDirectory ) . setListener ( getListener ( ) ) ",
  "25665": ". setProject ( project ) . setSourceDirectories ( getSourceDirectories ( ) ) ",
  "25666": ". setResources ( resources ) . setTestResources ( testResources ) ",
  "25667": ". setStringOutputStream ( stringOutputStream ) . setSuppressionsLocation ( suppressionsLocation ) ",
  "25668": ". setTestSourceDirectories ( getTestSourceDirectories ( ) ) . setConfigLocation ( configLocation ) ",
  "25669": ". setConfigurationArtifacts ( collectArtifacts ( \"config\" ) ) ",
  "25670": ". setPropertyExpansion ( propertyExpansion ) ",
  "25671": ". setHeaderLocation ( headerLocation ) . setLicenseArtifacts ( collectArtifacts ( \"license\" ) ) ",
  "25672": ". setCacheFile ( cacheFile ) . setSuppressionsFileExpression ( suppressionsFileExpression ) ",
  "25673": ". setEncoding ( encoding ) . setPropertiesLocation ( propertiesLocation ) ; ",
  "25674": "checkstyleExecutor . executeCheckstyle ( request ) ; ",
  "25675": "} catch ( CheckstyleException e ) { ",
  "25676": "} catch ( CheckstyleExecutorException e ) { ",
  "25677": "if ( ! \"xml\" . equals ( outputFileFormat ) ) { ",
  "25678": "if ( ! outputFile . exists ( ) ) { ",
  "25679": "Reader reader = null ; ",
  "25680": "reader = new BufferedReader ( ReaderFactory . newXmlReader ( outputFile ) ) ; ",
  "25681": "XmlPullParser xpp = new MXParser ( ) ; ",
  "25682": "xpp . setInput ( reader ) ; ",
  "25683": "int violations = countViolations ( xpp ) ; ",
  "25684": "if ( violations > maxAllowedViolations ) { ",
  "25685": "if ( failOnViolation ) { ",
  "25686": "String msg = ",
  "25687": "if ( maxAllowedViolations > 0 ) { ",
  "25688": "throw new MojoFailureException ( msg ) ; ",
  "25689": "reader = null ; ",
  "25690": "} catch ( IOException | XmlPullParserException e ) { ",
  "25691": "IOUtil . close ( reader ) ; ",
  "25692": "} private boolean isViolation ( String severity ) { ",
  "25693": "if ( \"error\" . equals ( severity ) ) { ",
  "25694": "return \"error\" . equals ( violationSeverity ) || \"warning\" . equals ( violationSeverity ) ",
  "25695": "|| \"info\" . equals ( violationSeverity ) ; ",
  "25696": "} else if ( \"warning\" . equals ( severity ) ) { ",
  "25697": "return \"warning\" . equals ( violationSeverity ) || \"info\" . equals ( violationSeverity ) ; ",
  "25698": "} else if ( \"info\" . equals ( severity ) ) { ",
  "25699": "return \"info\" . equals ( violationSeverity ) ; ",
  "25700": "} public void iconSeverity ( String level ) { ",
  "25701": "sink . figure ( ) ; ",
  "25702": "sink . figureGraphics ( \"images/icon_\" + level + \"_sml.gif\" ) ; ",
  "25703": "sink . figure_ ( ) ; ",
  "25704": "} public void iconSeverity ( String level , int textType ) { ",
  "25705": "if ( textType > 0 ) { ",
  "25706": "sink . nonBreakingSpace ( ) ; ",
  "25707": "sink . text ( bundle . getString ( \"report.checkstyle.\" + level + suffix ( textType ) ) ) ; ",
  "25708": "} public void executeReport ( final Locale locale ) ",
  "25709": "throws MavenReportException { ",
  "25710": "locator . addSearchPath ( FileResourceLoader . ID , project . getFile ( ) . getParentFile ( ) . getAbsolutePath ( ) ) ; ",
  "25711": "locator . addSearchPath ( \"url\" , \"\" ) ; ",
  "25712": "locator . setOutputDirectory ( new File ( project . getBuild ( ) . getDirectory ( ) ) ) ; ",
  "25713": "CheckstyleExecutorRequest request = createRequest ( ) ",
  "25714": ". setLicenseArtifacts ( collectArtifacts ( \"license\" ) ) ",
  "25715": ". setConfigurationArtifacts ( collectArtifacts ( \"configuration\" ) ) ; ",
  "25716": "CheckstyleResults results = checkstyleExecutor . executeCheckstyle ( request ) ; ",
  "25717": "ResourceBundle bundle = getBundle ( locale ) ; ",
  "25718": "generateReportStatics ( ) ; ",
  "25719": "generateMainReport ( results , bundle ) ; ",
  "25720": "if ( enableRSS ) { ",
  "25721": "CheckstyleRssGeneratorRequest checkstyleRssGeneratorRequest = ",
  "25722": "new CheckstyleRssGeneratorRequest ( this . project , this . getCopyright ( ) , outputDirectory , getLog ( ) ) ; ",
  "25723": "checkstyleRssGenerator . generateRSS ( results , checkstyleRssGeneratorRequest ) ; ",
  "25724": "} public < Concept , S extends Statement > AbstractStatementConverter < Concept , S > get ( ",
  "25725": "final Class < Concept > conceptClass ) { ",
  "25726": "if ( conceptClass == null ) { ",
  "25727": "final AbstractStatementConverter < Concept , S > toReturn = statementConverters . get ( conceptClass ) ; ",
  "25728": "if ( toReturn == null && log . isDebugEnabled ( ) ) { ",
  "25729": "} public < Concept , S extends Statement > void put ( final Class < Concept > conceptClass , ",
  "25730": "final AbstractStatementConverter < Concept , S > converter ) { ",
  "25731": "public final Graph convert ( final From toConvert ) { ",
  "25732": "if ( toConvert == null && ! acceptsNullValues ( ) ) { ",
  "25733": "return doConvert ( toConvert ) ; ",
  "25734": "} private String getCheckstyleVersion ( ) { ",
  "25735": "Package checkstyleApiPackage = Configuration . class . getPackage ( ) ; ",
  "25736": "return ( checkstyleApiPackage == null ) ? null : checkstyleApiPackage . getImplementationVersion ( ) ; ",
  "25737": "} private void configureResourceLocator ( final ResourceManager resourceManager , ",
  "25738": "final CheckstyleExecutorRequest request , ",
  "25739": "final List < Artifact > additionalArtifacts ) { ",
  "25740": "final MavenProject project = request . getProject ( ) ; ",
  "25741": "resourceManager . setOutputDirectory ( new File ( project . getBuild ( ) . getDirectory ( ) ) ) ; ",
  "25742": "MavenProject parent = project ; ",
  "25743": "while ( parent != null && parent . getFile ( ) != null ) { ",
  "25744": "File dir = parent . getFile ( ) . getParentFile ( ) ; ",
  "25745": "resourceManager . addSearchPath ( FileResourceLoader . ID , dir . getAbsolutePath ( ) ) ; ",
  "25746": "resourceManager . addSearchPath ( \"url\" , \"\" ) ; ",
  "25747": "if ( additionalArtifacts != null ) { ",
  "25748": "for ( Artifact licenseArtifact : additionalArtifacts ) { ",
  "25749": "if ( licenseArtifact != null ) { ",
  "25750": "if ( getLogger ( ) . isDebugEnabled ( ) ) { ",
  "25751": "+ licenseArtifact . getArtifactId ( ) + \":\" + licenseArtifact . getVersion ( ) ",
  "25752": "resourceManager . addSearchPath ( \"jar\" , \"jar:\" + licenseArtifact . getFile ( ) . toURI ( ) . toURL ( ) ) ; ",
  "25753": "public boolean start ( final RootDoc root ) { ",
  "25754": "if ( this . dotFacade == null ) { ",
  "25755": "final VisualizationWrappedRootDoc rootDoc = new VisualizationWrappedRootDoc ( root ) ; ",
  "25756": "htmlDoclet . configuration . root = root ; ",
  "25757": "htmlDoclet . configuration . setOptions ( ) ; ",
  "25758": "} catch ( Configuration . Fault fault ) { ",
  "25759": "fault . printStackTrace ( ) ; ",
  "25760": "for ( ClassDoc cDoc : rootDoc . classes ( ) ) { ",
  "25761": "log . debug ( getJavaDocAndTagsLog ( cDoc ) ) ; ",
  "25762": "for ( PackageDoc pDoc : rootDoc . specifiedPackages ( ) ) { ",
  "25763": "log . debug ( getJavaDocAndTagsLog ( pDoc ) ) ; ",
  "25764": "return HtmlDoclet . start ( root ) ; ",
  "25765": "public boolean validateJavaDocOptions ( final String [ ] [ ] options , final DocErrorReporter errorReporter ) { ",
  "25766": "htmlDoclet . sharedInstanceForOptions . setOptions ( options ) ; ",
  "25767": "return HtmlDoclet . validOptions ( options , errorReporter ) ; ",
  "25768": "public int optionLength ( final String option ) { ",
  "25769": "if ( JavaDocOption . HELP . getOption ( ) . equals ( option ) ) { ",
  "25770": "final int toReturn = HtmlDoclet . optionLength ( option ) ; ",
  "25771": "for ( JavaDocOption current : JavaDocOption . values ( ) ) { ",
  "25772": "if ( current != JavaDocOption . HELP ) { ",
  "25773": "if ( current . getOption ( ) . equals ( option ) ) { ",
  "25774": "return current . getOptionLength ( ) ; ",
  "25775": "return HtmlDoclet . optionLength ( option ) ; ",
  "25776": "protected String doRender ( final RenderConfiguration config , final Subgraph subgraph ) { ",
  "25777": "+ quote ( subgraph . getId ( ) ) ",
  "25778": "+ config . getNewline ( ) ; ",
  "25779": "final Statements statements = subgraph . getStatements ( ) ; ",
  "25780": "final StatementsRenderer statementsRenderer = new StatementsRenderer ( ) ; ",
  "25781": "final String renderedStatements = statementsRenderer . render ( config . cloneAndChangeIndentation ( 1 ) , statements ) ; ",
  "25782": "return prologue + renderedStatements + config . getNewline ( ) + config . getIndent ( ) + \"}\" ; ",
  "25783": "protected String doRender ( final RenderConfiguration config , final CommonNodeAttributes entity ) { ",
  "25784": "return config . getIndent ( ) ",
  "25785": "+ entity . getId ( ) ",
  "25786": "protected Graph doConvert ( final Set < ClassDoc > toConvert ) { ",
  "25787": "final ClassDoc [ ] clDocs = toConvert . toArray ( new ClassDoc [ toConvert . size ( ) ] ) ; ",
  "25788": "final SortedMap < PackageDoc , SortedSet < ClassDoc > > clPerPackage = Comparators . sortClassesPerPackage ( clDocs ) ; ",
  "25789": "final Map . Entry < PackageDoc , SortedSet < ClassDoc > > packageAndClasses = clPerPackage ",
  "25790": ". entrySet ( ) ",
  "25791": ". filter ( e -> relevantPackage . getName ( ) . equalsIgnoreCase ( e . getKey ( ) . name ( ) ) ) ",
  "25792": ". orElse ( \"<none>\" ) ) ) ; ",
  "25793": "final PackageDoc packageDoc = packageAndClasses . getKey ( ) ; ",
  "25794": "final SortedSet < ClassDoc > classDocs = packageAndClasses . getValue ( ) ; ",
  "25795": "final Graph toReturn = new Graph ( \"Graph_\" + packageDoc . name ( ) , true , true ) ; ",
  "25796": "final Subgraph packageSubgraph = new Subgraph ( packageDoc . name ( ) ) ; ",
  "25797": "final CommonGraphAttributes subgraphAttrs = new CommonGraphAttributes ( ) ; ",
  "25798": "packageSubgraph . add ( subgraphAttrs ) ; ",
  "25799": "final GraphAttributes subAttrs = subgraphAttrs . getAttributes ( ) ; ",
  "25800": "toReturn . add ( renderPackageSubGraph ( classDocs ) ) ; ",
  "25801": "public int compareTo ( final NodeID that ) { ",
  "25802": "if ( that == this ) { ",
  "25803": "} else if ( null == that ) { ",
  "25804": "return this . getId ( ) . compareTo ( that . getId ( ) ) ; ",
  "25805": "} public static boolean containsVisualizationDocletTag ( final String message ) { ",
  "25806": "for ( VisualizationDocletTag current : VisualizationDocletTag . values ( ) ) { ",
  "25807": "} public SortedSet < PackageDoc > findPackagesFromClassesInJavaDocRun ( ) { ",
  "25808": "final SortedSet < PackageDoc > toReturn = new TreeSet < > ( Comparators . PACKAGE_NAME_COMPARATOR ) ; ",
  "25809": "final ClassDoc [ ] currentExecutionClasses = classes ( ) ; ",
  "25810": "if ( currentExecutionClasses != null ) { ",
  "25811": "Arrays . stream ( currentExecutionClasses ) ",
  "25812": ". map ( ProgramElementDoc :: containingPackage ) ",
  "25813": ". forEach ( toReturn :: add ) ; ",
  "25814": "@ SuppressWarnings ( \"PMD.PreserveStackTrace\" ) ",
  "25815": "protected void performValidation ( final MavenProject project , final EnforcerRuleHelper helper ) ",
  "25816": "throws RuleFailureException { ",
  "25817": "ProjectType . getProjectType ( project ) ; ",
  "25818": "throw new RuleFailureException ( e . getMessage ( ) ) ; ",
  "25819": "public final String render ( final RenderConfiguration configuration , final Object entity ) { ",
  "25820": "if ( ! accept ( entity ) ) { ",
  "25821": "String epilogue = \"\" ; ",
  "25822": "if ( entity instanceof Subgraph ) { ",
  "25823": "epilogue = configuration . getNewline ( ) ; ",
  "25824": "} else if ( entity instanceof Statement ) { ",
  "25825": "final T castEntity = acceptedType . cast ( entity ) ; ",
  "25826": "return doRender ( configuration , castEntity ) + epilogue ; ",
  "25827": "public boolean accept ( final Object entity ) { ",
  "25828": "return entity != null && acceptedType . isAssignableFrom ( entity . getClass ( ) ) ; ",
  "25829": "} private String getConfigAttribute ( Configuration config , ChainedItem < Configuration > parentConfiguration , ",
  "25830": "String attributeName , String defaultValue ) { ",
  "25831": "ret = config . getAttribute ( attributeName ) ; ",
  "25832": "if ( parentConfiguration != null ) { ",
  "25833": "ret = ",
  "25834": "getConfigAttribute ( parentConfiguration . value , parentConfiguration . parent , attributeName , ",
  "25835": "defaultValue ) ; ",
  "25836": "ret = defaultValue ; ",
  "25837": "} private void doRulesSummary ( CheckstyleResults results ) { ",
  "25838": "if ( checkstyleConfig == null ) { ",
  "25839": "sink . section1 ( ) ; ",
  "25840": "sink . sectionTitle1 ( ) ; ",
  "25841": "sink . text ( bundle . getString ( \"report.checkstyle.rules\" ) ) ; ",
  "25842": "sink . sectionTitle1_ ( ) ; ",
  "25843": "sink . table ( ) ; ",
  "25844": "sink . tableRow ( ) ; ",
  "25845": "sink . tableHeaderCell ( ) ; ",
  "25846": "sink . text ( bundle . getString ( \"report.checkstyle.rule.category\" ) ) ; ",
  "25847": "sink . tableHeaderCell_ ( ) ; ",
  "25848": "sink . text ( bundle . getString ( \"report.checkstyle.rule\" ) ) ; ",
  "25849": "sink . text ( bundle . getString ( \"report.checkstyle.violations\" ) ) ; ",
  "25850": "sink . text ( bundle . getString ( \"report.checkstyle.column.severity\" ) ) ; ",
  "25851": "sink . tableRow_ ( ) ; ",
  "25852": "if ( \"checker\" . equalsIgnoreCase ( checkstyleConfig . getName ( ) ) ) { ",
  "25853": "String category = null ; ",
  "25854": "for ( ConfReference ref : sortConfiguration ( results ) ) { ",
  "25855": "doRuleRow ( ref , results , category ) ; ",
  "25856": "category = ref . category ; ",
  "25857": "sink . tableCell ( ) ; ",
  "25858": "sink . text ( bundle . getString ( \"report.checkstyle.norule\" ) ) ; ",
  "25859": "sink . tableCell_ ( ) ; ",
  "25860": "sink . table_ ( ) ; ",
  "25861": "sink . section1_ ( ) ; ",
  "25862": "} private void doRuleRow ( ConfReference ref , CheckstyleResults results , String previousCategory ) { ",
  "25863": "Configuration checkerConfig = ref . configuration ; ",
  "25864": "ChainedItem < Configuration > parentConfiguration = ref . parentConfiguration ; ",
  "25865": "String ruleName = checkerConfig . getName ( ) ; ",
  "25866": "String category = ref . category ; ",
  "25867": "if ( ! category . equals ( previousCategory ) ) { ",
  "25868": "sink . text ( category ) ; ",
  "25869": "if ( ! \"extension\" . equals ( category ) ) { ",
  "25870": "sink . link ( \"http://checkstyle.sourceforge.net/config_\" + category + \".html#\" + ruleName ) ; ",
  "25871": "sink . text ( ruleName ) ; ",
  "25872": "sink . link_ ( ) ; ",
  "25873": "List < String > attribnames = new ArrayList < > ( Arrays . asList ( checkerConfig . getAttributeNames ( ) ) ) ; ",
  "25874": "attribnames . remove ( \"severity\" ) ; ",
  "25875": "if ( ! attribnames . isEmpty ( ) ) { ",
  "25876": "sink . list ( ) ; ",
  "25877": "for ( String name : attribnames ) { ",
  "25878": "sink . listItem ( ) ; ",
  "25879": "sink . text ( name ) ; ",
  "25880": "String value = getConfigAttribute ( checkerConfig , null , name , \"\" ) ; ",
  "25881": "if ( \"header\" . equals ( name ) && ( \"Header\" . equals ( ruleName ) || \"RegexpHeader\" . equals ( ruleName ) ) ) { ",
  "25882": "String [ ] lines = StringUtils . split ( value , \"\\\\n\" ) ; ",
  "25883": "int linenum = 1 ; ",
  "25884": "sink . lineBreak ( ) ; ",
  "25885": "sink . text ( linenum + \":\" ) ; ",
  "25886": "sink . rawText ( \"</span>\" ) ; ",
  "25887": "sink . monospaced ( ) ; ",
  "25888": "sink . text ( line ) ; ",
  "25889": "sink . monospaced_ ( ) ; ",
  "25890": "linenum ++ ; ",
  "25891": "} else if ( \"headerFile\" . equals ( name ) && \"RegexpHeader\" . equals ( ruleName ) ) { ",
  "25892": "sink . text ( \"\\\"\" ) ; ",
  "25893": "String path = siteTool . getRelativePath ( value , basedir . getAbsolutePath ( ) ) ; ",
  "25894": "sink . text ( path . replace ( '\\\\' , '/' ) ) ; ",
  "25895": "sink . text ( value ) ; ",
  "25896": "sink . listItem_ ( ) ; ",
  "25897": "sink . list_ ( ) ; ",
  "25898": "sink . text ( String . valueOf ( ref . violations ) ) ; ",
  "25899": "String severity = getConfigAttribute ( checkerConfig , parentConfiguration , \"severity\" , \"error\" ) ; ",
  "25900": "iconTool . iconSeverity ( severity , IconTool . TEXT_SIMPLE ) ; ",
  "25901": "} public boolean matchRule ( AuditEvent event , String ruleName , String expectedMessage , String expectedSeverity ) { ",
  "25902": "if ( ! ruleName . equals ( RuleUtil . getName ( event ) ) ) { ",
  "25903": "if ( expectedMessage != null ) { ",
  "25904": "String msgWithoutSingleQuote = StringUtils . replace ( expectedMessage , \"'\" , \"\" ) ; ",
  "25905": "return expectedMessage . equals ( event . getMessage ( ) ) || msgWithoutSingleQuote . equals ( event . getMessage ( ) ) ; ",
  "25906": "if ( expectedSeverity != null ) { ",
  "25907": "return expectedSeverity . equals ( event . getSeverityLevel ( ) . getName ( ) ) ; ",
  "25908": "@ SuppressWarnings ( \"PMD\" ) ",
  "25909": "protected String doRender ( final RenderConfiguration config , final AbstractAttributes entity ) { ",
  "25910": "final SortedMap < String , String > dotAttributes = new TreeMap < > ( ) ; ",
  "25911": "for ( Class < ? > current = entity . getClass ( ) ; ",
  "25912": "current != null && current != Object . class ; ",
  "25913": "current = current . getSuperclass ( ) ) { ",
  "25914": "for ( Field currentField : current . getDeclaredFields ( ) ) { ",
  "25915": "if ( isConfigurationField ( currentField ) ) { ",
  "25916": "value = currentField . get ( entity ) ; ",
  "25917": "final DotProperty dotPropertyAnnotation = currentField . getAnnotation ( DotProperty . class ) ; ",
  "25918": "if ( dotPropertyAnnotation == null ) { ",
  "25919": "if ( dotPropertyAnnotation . specialTreatment ( ) ) { ",
  "25920": "if ( \"labelSize\" . equals ( currentField . getName ( ) ) ",
  "25921": "&& PointOrRectangle . class . equals ( currentField . getType ( ) ) ) { ",
  "25922": "final PointOrRectangle rect = ( PointOrRectangle ) value ; ",
  "25923": "dotAttributes . put ( quote ( \"lwidth\" ) , ",
  "25924": "BigDecimal . valueOf ( rect . getxOrWidth ( ) ) . toPlainString ( ) ) ; ",
  "25925": "dotAttributes . put ( quote ( \"lheight\" ) , ",
  "25926": "BigDecimal . valueOf ( rect . getyOrHeight ( ) ) . toPlainString ( ) ) ; ",
  "25927": "key = dotPropertyAnnotation . name ( ) ; ",
  "25928": "if ( key . isEmpty ( ) || \"##default\" . equalsIgnoreCase ( key ) ) { ",
  "25929": "key = currentField . getName ( ) ; ",
  "25930": "dotAttributes . put ( key , getDotConfigValueFor ( value ) ) ; ",
  "25931": "+ entity . getClass ( ) . getSimpleName ( ) + \"]\" , e ) ; ",
  "25932": "if ( dotAttributes . isEmpty ( ) ) { ",
  "25933": "final StringBuilder builder = new StringBuilder ( START_TOKEN ) ; ",
  "25934": "for ( Map . Entry < String , String > current : dotAttributes . entrySet ( ) ) { ",
  "25935": "builder . append ( current . getKey ( ) + SEPARATOR + \"\\\"\" + current . getValue ( ) + \"\\\"\" + DELIMITER ) ; ",
  "25936": "builder . delete ( builder . length ( ) - DELIMITER . length ( ) , builder . length ( ) ) ; ",
  "25937": "builder . append ( END_TOKEN ) ; ",
  "25938": "} protected boolean initialize ( final RootDoc rootDoc ) { ",
  "25939": "if ( isInitializedOK ) { ",
  "25940": "for ( String current : discoveryLog ) { ",
  "25941": "rootDoc . printNotice ( current ) ; ",
  "25942": "final ProcessBuilder pb = new ProcessBuilder ( getExecutableNameOrPath ( ) , \"-V\" ) ; ",
  "25943": "pb . redirectErrorStream ( true ) ; ",
  "25944": "if ( homeDirectory != null ) { ",
  "25945": "pb . directory ( homeDirectory ) ; ",
  "25946": "Process p ; ",
  "25947": "p = pb . start ( ) ; ",
  "25948": "rootDoc . printWarning ( e . getMessage ( ) ) ; ",
  "25949": "try ( BufferedReader in = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; ",
  "25950": "OutputStream out = p . getOutputStream ( ) ; ) { ",
  "25951": "while ( ( line = in . readLine ( ) ) != null ) { ",
  "25952": "if ( line . matches ( GRAPHVIZ_EXECUTABLE_FIRST_LINE_CHECK ) ) { ",
  "25953": "isInitializedOK = true ; ",
  "25954": "isInitializedOK = false ; ",
  "25955": "p . waitFor ( ) ; ",
  "25956": "protected String doRender ( final RenderConfiguration config , final Identifier entity ) { ",
  "25957": "} public void writePngImageAndImageMap ( final RootDoc rootDoc , ",
  "25958": "final String dotDiagram , ",
  "25959": "final File outputDirectory , ",
  "25960": "final String filename ) throws IOException { ",
  "25961": "if ( filename == null || filename . isEmpty ( ) ) { ",
  "25962": "if ( rootDoc == null ) { ",
  "25963": "if ( ! initialize ( rootDoc ) ) { ",
  "25964": "final File pngFile = new File ( outputDirectory , filename + \".png\" ) ; ",
  "25965": "final File mapFile = new File ( outputDirectory , filename + \".map\" ) ; ",
  "25966": "pngFile . delete ( ) ; ",
  "25967": "mapFile . delete ( ) ; ",
  "25968": "final ProcessBuilder pb = new ProcessBuilder ( ",
  "25969": "getExecutableNameOrPath ( ) , ",
  "25970": "\"-Tcmapx\" , \"-o\" , mapFile . getAbsolutePath ( ) , ",
  "25971": "\"-Tpng\" , \"-o\" , pngFile . getAbsolutePath ( ) ) ; ",
  "25972": "if ( getHomeDirectory ( ) != null ) { ",
  "25973": "pb . directory ( getHomeDirectory ( ) ) ; ",
  "25974": "final Process p = pb . start ( ) ; ",
  "25975": "try ( final BufferedReader in = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; ",
  "25976": "final Writer out = new OutputStreamWriter ( p . getOutputStream ( ) , AbstractExecutableFacade . UTF8_ENCODING ) ) { ",
  "25977": "out . write ( dotDiagram ) ; ",
  "25978": "System . err . println ( line ) ; ",
  "25979": "int result = p . waitFor ( ) ; ",
  "25980": "if ( result != 0 ) { ",
  "25981": "protected String doRender ( final RenderConfiguration config , final Port entity ) { ",
  "25982": "final String prefix = entity . getId ( ) != null && ! entity . getId ( ) . isEmpty ( ) ",
  "25983": "} public static SortedMap < PackageDoc , SortedSet < ClassDoc > > sortClassesPerPackage ( final ClassDoc ... classDocs ) { ",
  "25984": "final SortedMap < PackageDoc , SortedSet < ClassDoc > > toReturn = new TreeMap < > ( Comparators . PACKAGE_NAME_COMPARATOR ) ; ",
  "25985": "if ( classDocs != null ) { ",
  "25986": "Arrays . stream ( classDocs ) . forEach ( current -> { ",
  "25987": "final SortedSet < ClassDoc > classDocsForCurrentPackage = toReturn . computeIfAbsent ( ",
  "25988": "current . containingPackage ( ) , ",
  "25989": "k -> new TreeSet < > ( Comparators . CLASS_NAME_COMPARATOR ) ) ; ",
  "25990": "classDocsForCurrentPackage . add ( current ) ; ",
  "25991": "public final void execute ( final EnforcerRuleHelper helper ) throws EnforcerRuleException { ",
  "25992": "final MavenProject project ; ",
  "25993": "project = ( MavenProject ) helper . evaluate ( \"${project}\" ) ; ",
  "25994": "} catch ( final ExpressionEvaluationException e ) { ",
  "25995": "+ e . getLocalizedMessage ( ) + \")\" ; ",
  "25996": "throw new EnforcerRuleException ( msg , e ) ; ",
  "25997": "performValidation ( project , helper ) ; ",
  "25998": "} catch ( RuleFailureException e ) { ",
  "25999": "String message = ",
  "26000": "\"\\n\" ",
  "26001": "+ \"\\n#\" ",
  "26002": "+ project . getArtifactId ( ) + \":\" + project . getVersion ( ) + \"]\" + \"\\n#\" ; ",
  "26003": "final Artifact art = e . getOffendingArtifact ( ) ; ",
  "26004": "if ( art != null ) { ",
  "26005": "+ \":\" + art . getVersion ( ) + \"]\" ",
  "26006": "+ \"\\n#\" ; ",
  "26007": "message += \"\\n\" ; ",
  "26008": "throw new EnforcerRuleException ( message ) ; ",
  "26009": "} protected static List < String > splice ( final String toSplice ) { ",
  "26010": "final List < String > toReturn = new ArrayList < String > ( ) ; ",
  "26011": "final StringTokenizer tok = new StringTokenizer ( toSplice , \",\" , false ) ; ",
  "26012": "while ( tok . hasMoreTokens ( ) ) { ",
  "26013": "toReturn . add ( tok . nextToken ( ) ) ; ",
  "26014": "} protected static List < Pattern > splice2Pattern ( final String toSplice ) throws PatternSyntaxException { ",
  "26015": "final List < Pattern > toReturn = new ArrayList < Pattern > ( ) ; ",
  "26016": "for ( final String current : splice ( toSplice ) ) { ",
  "26017": "toReturn . add ( Pattern . compile ( current ) ) ; ",
  "26018": "} protected static boolean matches ( final String toMatch , final List < Pattern > patternList ) { ",
  "26019": "for ( final Pattern current : patternList ) { ",
  "26020": "if ( current . matcher ( toMatch ) . matches ( ) ) { ",
  "26021": "} protected static boolean containsPrefix ( final List < String > source , final String toCheck ) { ",
  "26022": "for ( final String current : source ) { ",
  "26023": "if ( toCheck . startsWith ( current ) ) { ",
  "26024": "protected String doRender ( final RenderConfiguration config , final Graph graph ) { ",
  "26025": "config . setDirectedGraph ( graph . isDigraph ( ) ) ; ",
  "26026": "final String prologue = ",
  "26027": "+ ( graph . isDigraph ( ) ? \"digraph\" : \"graph\" ) ",
  "26028": "final String renderedStatements = statementsRenderer . render ( ",
  "26029": "config . cloneAndChangeIndentation ( 1 ) , ",
  "26030": "graph . getStatements ( ) ) ; ",
  "26031": "final String epilogue = config . getIndent ( ) + \"}\" ; ",
  "26032": "return prologue + renderedStatements + epilogue ; ",
  "26033": "protected String doRender ( final RenderConfiguration config , final RightSideEdge entity ) { ",
  "26034": "final String prefix = RightSideEdge . getEdgeSeparator ( config . isDirectedGraph ( ) ) ",
  "26035": "+ ( entity . getNodeID ( ) != null ",
  "26036": "? nodeIdRenderer . doRender ( config , entity . getNodeID ( ) ) ",
  "26037": ": entity . getSubgraph ( ) . getId ( ) ) ; ",
  "26038": "String renderedRightSideOfThisEdge = \"\" ; ",
  "26039": "if ( entity . getRightSideEdge ( ) != null ) { ",
  "26040": "return prefix + renderedRightSideOfThisEdge ; ",
  "26041": "public final void addErrorMessage ( final String message ) { ",
  "26042": "if ( message == null || \"\" . equals ( message ) ) { ",
  "26043": "errorMessages . add ( message ) ; ",
  "26044": "public String getMessage ( ) { ",
  "26045": "for ( final String current : errorMessages ) { ",
  "26046": "builder . append ( current ) . append ( \"\\n\" ) ; ",
  "26047": "protected String doRender ( final RenderConfiguration config , final Statements statements ) { ",
  "26048": "final StringBuilder builder = new StringBuilder ( config . getIndent ( ) ) ; ",
  "26049": "final boolean hasAttributeStatements = statements . getCommonGraphAttributes ( ) != null ",
  "26050": "|| statements . getCommonNodeAttributes ( ) != null ",
  "26051": "|| statements . getCommonEdgeAttributes ( ) != null ; ",
  "26052": "if ( hasAttributeStatements ) { ",
  "26053": "builder . append ( commentRenderer . render ( config , statements . getCommonAttributesComment ( ) ) ) ; ",
  "26054": "if ( statements . getCommonGraphAttributes ( ) != null ) { ",
  "26055": "builder . append ( commonGraphAttributesRenderer . render ( config , statements . getCommonGraphAttributes ( ) ) ) ; ",
  "26056": "if ( statements . getCommonNodeAttributes ( ) != null ) { ",
  "26057": "builder . append ( commonNodeAttributesRenderer . render ( config , statements . getCommonNodeAttributes ( ) ) ) ; ",
  "26058": "if ( statements . getCommonEdgeAttributes ( ) != null ) { ",
  "26059": "builder . append ( commonEdgeAttributesRenderer . render ( config , statements . getCommonEdgeAttributes ( ) ) ) ; ",
  "26060": "final List < Node > nodes = statements . getNodes ( ) ; ",
  "26061": "if ( ! nodes . isEmpty ( ) ) { ",
  "26062": "builder . append ( commentRenderer . render ( config , statements . getNodesComment ( ) ) ) ; ",
  "26063": "nodes . forEach ( n -> builder . append ( nodeRenderer . render ( config , n ) ) ) ; ",
  "26064": "final List < Identifier > identifiers = statements . getIdentifiers ( ) ; ",
  "26065": "if ( ! identifiers . isEmpty ( ) ) { ",
  "26066": "builder . append ( commentRenderer . render ( config , statements . getIdentifiersComment ( ) ) ) ; ",
  "26067": "identifiers . forEach ( i -> builder . append ( identifierRenderer . render ( config , i ) ) ) ; ",
  "26068": "final List < Edge > edges = statements . getEdges ( ) ; ",
  "26069": "if ( edges != null && ! edges . isEmpty ( ) ) { ",
  "26070": "builder . append ( commentRenderer . render ( config , statements . getEdgesComment ( ) ) ) ; ",
  "26071": "edges . forEach ( i -> builder . append ( edgeRenderer . render ( config , i ) ) ) ; ",
  "26072": "final List < Subgraph > subgraphs = statements . getSubgraphs ( ) ; ",
  "26073": "if ( ! subgraphs . isEmpty ( ) ) { ",
  "26074": "builder . append ( commentRenderer . render ( config , statements . getSubgraphComment ( ) ) ) ; ",
  "26075": "subgraphs . forEach ( s -> builder . append ( subgraphRenderer . render ( config , s ) ) ) ; ",
  "26076": "protected String doRender ( final RenderConfiguration config , final Node node ) { ",
  "26077": "final NodeAttributes nodeAttributes = node . getAttributes ( ) ; ",
  "26078": "final String renderedNodeAttributes = attributeRenderer . doRender ( config , nodeAttributes ) ; ",
  "26079": "return config . getIndent ( ) + nodeIdRenderer . doRender ( config , node . getNodeID ( ) ) ",
  "26080": "} public Edge addEdge ( final String fromId , final String toId ) { ",
  "26081": "return getStatements ( ) . addEdge ( fromId , toId , this ) ; ",
  "26082": "} public static RightSideEdge to ( final String id , final Graph withinGraph ) { ",
  "26083": "if ( withinGraph == null ) { ",
  "26084": "final Node node = withinGraph . getStatements ( ) . findNode ( id , true ) ; ",
  "26085": "return new RightSideEdge ( node . getNodeID ( ) ) ; ",
  "26086": "final Subgraph subgraph = withinGraph . getStatements ( ) . findSubgraph ( id , true ) ; ",
  "26087": "if ( subgraph != null ) { ",
  "26088": "return new RightSideEdge ( subgraph ) ; ",
  "26089": "} public static SimpleDoclet createSimpleDoclet ( final String className ) { ",
  "26090": "final String effectiveClassName = className != null && ! className . isEmpty ( ) ",
  "26091": "? className ",
  "26092": ": VisualizationDoclet . class . getName ( ) ; ",
  "26093": "final ClassLoader [ ] classLoaders = new ClassLoader [ ] { ",
  "26094": "Thread . currentThread ( ) . getContextClassLoader ( ) , ",
  "26095": "DelegatingDoclet . class . getClassLoader ( ) } ; ",
  "26096": "SimpleDoclet toReturn = null ; ",
  "26097": "for ( ClassLoader current : classLoaders ) { ",
  "26098": "final Class < ? > loadedClass = current . loadClass ( effectiveClassName ) ; ",
  "26099": "if ( SimpleDoclet . class . isAssignableFrom ( loadedClass ) ) { ",
  "26100": "toReturn = ( SimpleDoclet ) loadedClass . newInstance ( ) ; ",
  "26101": "return toReturn == null ? new VisualizationDoclet ( ) : toReturn ; ",
  "26102": "} public final void add ( final String ... lines ) { ",
  "26103": "if ( lines != null ) { ",
  "26104": "for ( String current : lines ) { ",
  "26105": "commentLines . add ( current . replace ( NEWLINE , \"\" ) ) ; ",
  "26106": "} public static DotParser . GraphContext validate ( final InputStream dotDiagramData ) throws DotDiagramSyntaxException { ",
  "26107": "if ( dotDiagramData == null ) { ",
  "26108": "final DotLexer lexer = createLexer ( dotDiagramData ) ; ",
  "26109": "final DotParser parser = createParser ( lexer ) ; ",
  "26110": "final DotSyntaxErrorListener errorListener = new DotSyntaxErrorListener ( ) ; ",
  "26111": "parser . addErrorListener ( errorListener ) ; ",
  "26112": "final DotParser . GraphContext toReturn = parser . graph ( ) ; ",
  "26113": "if ( errorListener . isErrorState ( ) ) { ",
  "26114": "throw new DotDiagramSyntaxException ( errorListener . getErrorDataList ( ) ) ; ",
  "26115": "} public static DotLexer createLexer ( final InputStream dotDiagramData ) { ",
  "26116": "return new DotLexer ( new ANTLRInputStream ( dotDiagramData ) ) ; ",
  "26117": "} public static DotParser createParser ( final DotLexer lexer ) { ",
  "26118": "if ( lexer == null ) { ",
  "26119": "return new DotParser ( new CommonTokenStream ( lexer ) ) ; ",
  "26120": "} protected CheckstyleExecutorRequest createRequest ( ) ",
  "26121": "request . setAggregate ( true ) ",
  "26122": ". setReactorProjects ( reactorProjects ) ",
  "26123": ". setConsoleListener ( getConsoleListener ( ) ) . setConsoleOutput ( consoleOutput ) ",
  "26124": ". setPropertyExpansion ( propertyExpansion ) . setHeaderLocation ( headerLocation ) ",
  "26125": "protected String doRender ( final RenderConfiguration config , final NodeID entity ) { ",
  "26126": "final Port port = entity . getPort ( ) ; ",
  "26127": "final String renderedPort = port == null ? \"\" : portRenderer . doRender ( config , entity . getPort ( ) ) ; ",
  "26128": "return quote ( entity . getId ( ) ) + renderedPort ; ",
  "26129": "} public boolean canGenerateReport ( ) { ",
  "26130": "for ( File sourceDirectory : getSourceDirectories ( ) ) { ",
  "26131": "if ( sourceDirectory . exists ( ) ) { ",
  "26132": "if ( includeTestSourceDirectory ) { ",
  "26133": "for ( File testSourceDirectory : getTestSourceDirectories ( ) ) { ",
  "26134": "if ( testSourceDirectory . exists ( ) ) { ",
  "26135": "return ( ( includeResources && hasResources ( resources ) ) ",
  "26136": "|| ( includeTestResources && hasResources ( testResources ) ) ",
  "26137": "} private boolean hasResources ( List < Resource > resources ) { ",
  "26138": "for ( Resource resource : resources ) { ",
  "26139": "if ( new File ( resource . getDirectory ( ) ) . exists ( ) ) { ",
  "26140": "} private void mergeDeprecatedInfo ( ) ",
  "26141": "if ( \"sun_checks.xml\" . equals ( configLocation ) && ! \"sun\" . equals ( format ) ) { ",
  "26142": "configLocation = FORMAT_TO_CONFIG_LOCATION . get ( format ) ; ",
  "26143": "+ configLocation + \"</configLocation>.\" ) ; ",
  "26144": "if ( StringUtils . isEmpty ( propertiesLocation ) ) { ",
  "26145": "if ( propertiesFile != null ) { ",
  "26146": "propertiesLocation = propertiesFile . getPath ( ) ; ",
  "26147": "+ \"<propertiesLocation>\" + propertiesLocation + \"</propertiesLocation>.\" ) ; ",
  "26148": "} else if ( propertiesURL != null ) { ",
  "26149": "propertiesLocation = propertiesURL . toExternalForm ( ) ; ",
  "26150": "if ( \"LICENSE.txt\" . equals ( headerLocation ) ) { ",
  "26151": "File defaultHeaderFile = new File ( project . getBasedir ( ) , \"LICENSE.txt\" ) ; ",
  "26152": "if ( ! defaultHeaderFile . equals ( headerFile ) ) { ",
  "26153": "headerLocation = headerFile . getPath ( ) ; ",
  "26154": "if ( StringUtils . isEmpty ( suppressionsLocation ) ) { ",
  "26155": "suppressionsLocation = suppressionsFile ; ",
  "26156": "if ( StringUtils . isNotEmpty ( suppressionsFile ) ) { ",
  "26157": "+ \"<suppressionsLocation>\" + suppressionsLocation + \"</suppressionsLocation>.\" ) ; ",
  "26158": "if ( StringUtils . isEmpty ( packageNamesLocation ) ) { ",
  "26159": "packageNamesLocation = packageNamesFile ; ",
  "26160": "if ( StringUtils . isNotEmpty ( packageNamesFile ) ) { ",
  "26161": "+ \"<packageNamesFile>\" + suppressionsLocation + \"</packageNamesFile>.\" ) ; ",
  "26162": "final ProjectType projectType ; ",
  "26163": "projectType = ProjectType . getProjectType ( project ) ; ",
  "26164": "if ( IGNORED_PROJECT_TYPES . contains ( projectType ) ) { ",
  "26165": "if ( matches ( project . getGroupId ( ) , dontEvaluateGroupIds ) ) { ",
  "26166": "if ( ! matches ( project . getGroupId ( ) , evaluateGroupIds ) ) { ",
  "26167": "for ( final Artifact current : project . getDependencyArtifacts ( ) ) { ",
  "26168": "if ( Artifact . SCOPE_TEST . equalsIgnoreCase ( current . getScope ( ) ) ) { ",
  "26169": "final boolean isIncludedInEvaluation = matches ( current . getGroupId ( ) , evaluateGroupIds ) ; ",
  "26170": "final boolean isNotExplicitlyExcludedFromEvaluation = ! matches ( current . getGroupId ( ) , dontEvaluateGroupIds ) ; ",
  "26171": "if ( isIncludedInEvaluation && isNotExplicitlyExcludedFromEvaluation ) { ",
  "26172": "final ProjectType artifactProjectType = ProjectType . getProjectType ( current ) ; ",
  "26173": "if ( artifactProjectType == ProjectType . IMPLEMENTATION ) { ",
  "26174": "if ( artifactProjectType == ProjectType . TEST ) { ",
  "26175": "if ( artifactProjectType == ProjectType . JEE_APPLICATION ",
  "26176": "|| artifactProjectType == ProjectType . PROOF_OF_CONCEPT ) { ",
  "26177": "} public ExpressionBuilder notNull ( final Object property , final String name ) { ",
  "26178": "} public ExpressionBuilder notNullOrEmpty ( final Object property , final String name ) { ",
  "26179": "notNull ( property , name ) ; ",
  "26180": "if ( property instanceof String && ( ( String ) property ) . isEmpty ( ) ) { ",
  "26181": "if ( property instanceof Collection && ( ( Collection < ? > ) property ) . isEmpty ( ) ) { ",
  "26182": "if ( property instanceof Map && ( ( Map < ? , ? > ) property ) . isEmpty ( ) ) { ",
  "26183": "protected String doRender ( final RenderConfiguration config , final Edge edge ) { ",
  "26184": "final String edgeID = edge . getNodeID ( ) != null ",
  "26185": "? nodeIdRenderer . doRender ( config , edge . getNodeID ( ) ) ",
  "26186": ": quote ( edge . getSubgraph ( ) . getId ( ) ) ; ",
  "26187": "final RightSideEdge rightSideEdge = edge . getRightSideEdge ( ) ; ",
  "26188": "+ attributeRenderer . doRender ( config , edge . getAttributes ( ) ) ; ",
  "26189": "protected String doRender ( final RenderConfiguration config , final Comment comment ) { ",
  "26190": "final StringBuilder builder = new StringBuilder ( config . getNewline ( ) + config . getIndent ( ) ) ; ",
  "26191": "final List < String > commentLines = comment . getCommentLines ( ) ; ",
  "26192": "if ( commentLines . size ( ) == 1 ) { ",
  "26193": "} else if ( commentLines . size ( ) > 1 ) { ",
  "26194": "for ( String current : commentLines ) { ",
  "26195": "return builder . toString ( ) + config . getNewline ( ) ; ",
  "26196": "} public final void setIndentationToken ( final String indentationToken ) { ",
  "26197": "if ( indentationToken == null || indentationToken . isEmpty ( ) ) { ",
  "26198": "this . indentationToken = indentationToken ; ",
  "26199": "} public final RenderConfiguration cloneAndChangeIndentation ( final int indentationChange ) ",
  "26200": "final int newIndentationLevel = getIndentationLevel ( ) + indentationChange ; ",
  "26201": "final RenderConfiguration toReturn = new RenderConfiguration ( ",
  "26202": "newIndentationLevel , ",
  "26203": "indentationToken , ",
  "26204": "isDirectedGraph ) ; ",
  "26205": "toReturn . getExtraConfiguration ( ) . putAll ( getExtraConfiguration ( ) ) ; ",
  "26206": "} public String getIndent ( ) { ",
  "26207": "for ( int i = 0 ; i < getIndentationLevel ( ) ; i ++ ) { ",
  "26208": "builder . append ( indentationToken ) ; ",
  "26209": "public String getPackage ( final File sourceFile ) { ",
  "26210": "String aLine = getPackage ( sourceFile , PACKAGE_STATEMENT ) ; ",
  "26211": "if ( aLine != null ) return aLine ; ",
  "26212": "} public static boolean start ( final RootDoc root ) { ",
  "26213": "final boolean toReturn = Standard . start ( root ) ; ",
  "26214": "for ( int i = 0 ; i < eventSequence . size ( ) ; i ++ ) { ",
  "26215": "} public static int optionLength ( final String option ) { ",
  "26216": "final int standardOptionLength = Standard . optionLength ( option ) ; ",
  "26217": "return standardOptionLength ; ",
  "26218": "} public static boolean validOptions ( final String options [ ] [ ] , DocErrorReporter reporter ) { ",
  "26219": "final boolean toReturn = Standard . validOptions ( options , reporter ) ; ",
  "26220": "if ( options == null || options . length == 0 ) { ",
  "26221": "for ( int i = 0 ; i < options . length ; i ++ ) { ",
  "26222": "} public static String getName ( String eventSrcName ) { ",
  "26223": "if ( eventSrcName == null ) { ",
  "26224": "if ( eventSrcName . endsWith ( \"Check\" ) ) { ",
  "26225": "eventSrcName = eventSrcName . substring ( 0 , eventSrcName . length ( ) - 5 ) ; ",
  "26226": "return eventSrcName . substring ( eventSrcName . lastIndexOf ( '.' ) + 1 ) ; ",
  "26227": "} public static String getCategory ( String eventSrcName ) { ",
  "26228": "int end = eventSrcName . lastIndexOf ( '.' ) ; ",
  "26229": "eventSrcName = eventSrcName . substring ( 0 , end ) ; ",
  "26230": "if ( CHECKSTYLE_PACKAGE . equals ( eventSrcName ) ) { ",
  "26231": "return \"misc\" ; ",
  "26232": "} else if ( ! eventSrcName . startsWith ( CHECKSTYLE_PACKAGE ) ) { ",
  "26233": "return \"extension\" ; ",
  "26234": "public void printError ( final SourcePosition pos , final String msg ) { ",
  "26235": "wrappedRootDoc . printError ( pos , msg ) ; ",
  "26236": "public void printWarning ( final SourcePosition pos , final String msg ) { ",
  "26237": "wrappedRootDoc . printWarning ( pos , msg ) ; ",
  "26238": "public void printNotice ( final SourcePosition pos , final String msg ) { ",
  "26239": "wrappedRootDoc . printNotice ( pos , msg ) ; ",
  "26240": "final List < String > compileSourceRoots = ( List < String > ) project . getCompileSourceRoots ( ) ; ",
  "26241": "if ( compileSourceRoots . size ( ) == 0 ) { ",
  "26242": "final SortedMap < String , SortedSet < String > > packageName2SourceFileNameMap ",
  "26243": "= new TreeMap < String , SortedSet < String > > ( ) ; ",
  "26244": "for ( String current : compileSourceRoots ) { ",
  "26245": "addPackages ( new File ( current ) , packageName2SourceFileNameMap ) ; ",
  "26246": "final String groupId = project . getGroupId ( ) ; ",
  "26247": "if ( groupId == null || groupId . equals ( \"\" ) ) { ",
  "26248": "final SortedSet < String > incorrectPackages = new TreeSet < String > ( ) ; ",
  "26249": "for ( Map . Entry < String , SortedSet < String > > currentPackage : packageName2SourceFileNameMap . entrySet ( ) ) { ",
  "26250": "final String candidate = currentPackage . getKey ( ) ; ",
  "26251": "if ( ! candidate . startsWith ( groupId ) ) { ",
  "26252": "incorrectPackages . add ( candidate ) ; ",
  "26253": "if ( incorrectPackages . size ( ) > 0 ) { ",
  "26254": "final SortedMap < String , SortedSet < String > > result = new TreeMap < String , SortedSet < String > > ( ) ; ",
  "26255": "for ( String current : incorrectPackages ) { ",
  "26256": "result . put ( current , packageName2SourceFileNameMap . get ( current ) ) ; ",
  "26257": "} public final void setPackageExtractors ( final String packageExtractorImplementations ) ",
  "26258": "if ( packageExtractorImplementations == null ) { ",
  "26259": "List < PackageExtractor > extractors = new ArrayList < PackageExtractor > ( ) ; ",
  "26260": "for ( String current : splice ( packageExtractorImplementations ) ) { ",
  "26261": "final Class < ? > aClass = getClass ( ) . getClassLoader ( ) . loadClass ( current ) ; ",
  "26262": "extractors . add ( ( PackageExtractor ) aClass . newInstance ( ) ) ; ",
  "26263": "if ( extractors . size ( ) > 0 ) { ",
  "26264": "this . packageExtractors = extractors ; ",
  "26265": "} private void addPackages ( final File fileOrDirectory , ",
  "26266": "final SortedMap < String , SortedSet < String > > package2FileNamesMap ) { ",
  "26267": "for ( PackageExtractor current : packageExtractors ) { ",
  "26268": "final FileFilter sourceFileDefinitionFilter = current . getSourceFileFilter ( ) ; ",
  "26269": "if ( fileOrDirectory . isFile ( ) && sourceFileDefinitionFilter . accept ( fileOrDirectory ) ) { ",
  "26270": "final String thePackage = current . getPackage ( fileOrDirectory ) ; ",
  "26271": "SortedSet < String > sourceFileNames = package2FileNamesMap . get ( thePackage ) ; ",
  "26272": "if ( sourceFileNames == null ) { ",
  "26273": "sourceFileNames = new TreeSet < String > ( ) ; ",
  "26274": "package2FileNamesMap . put ( thePackage , sourceFileNames ) ; ",
  "26275": "sourceFileNames . add ( fileOrDirectory . getName ( ) ) ; ",
  "26276": "} else if ( fileOrDirectory . isDirectory ( ) ) { ",
  "26277": "for ( File currentChild : fileOrDirectory . listFiles ( sourceFileDefinitionFilter ) ) { ",
  "26278": "addPackages ( currentChild , package2FileNamesMap ) ; ",
  "26279": "for ( File currentSubdirectory : fileOrDirectory . listFiles ( DIRECTORY_FILTER ) ) { ",
  "26280": "addPackages ( currentSubdirectory , package2FileNamesMap ) ; ",
  "26281": "protected Graph doConvert ( final VisualizationWrappedRootDoc toConvert ) { ",
  "26282": "final Graph toReturn = new Graph ( ) ; ",
  "26283": "toConvert . sortClassesPerPackage ( ) . forEach ( ( packageDoc , classDocs ) -> ",
  "26284": "toReturn . add ( convertPackage ( packageDoc , classDocs ) ) ) ; ",
  "26285": "} public void generate ( String outputFilename , String template , Context context ) ",
  "26286": "throws VelocityException , MojoExecutionException , IOException ",
  "26287": "File f = new File ( outputFilename ) ; ",
  "26288": "if ( ! f . getParentFile ( ) . exists ( ) ) ",
  "26289": "f . getParentFile ( ) . mkdirs ( ) ; ",
  "26290": "writer = new FileWriter ( f ) ; ",
  "26291": "getVelocity ( ) . getEngine ( ) . mergeTemplate ( templateDirectory + \"/\" + template , context , writer ) ; ",
  "26292": "catch ( ResourceNotFoundException e ) ",
  "26293": "catch ( VelocityException | IOException e ) ",
  "26294": "} public void fileStarted ( AuditEvent event ) { ",
  "26295": "final String fileName = StringUtils . replace ( event . getFileName ( ) , \"\\\\\" , \"/\" ) ; ",
  "26296": "for ( File sourceDirectory : sourceDirectories ) { ",
  "26297": "String sourceDirectoryPath = StringUtils . replace ( sourceDirectory . getPath ( ) , \"\\\\\" , \"/\" ) ; ",
  "26298": "if ( fileName . startsWith ( sourceDirectoryPath + \"/\" ) ) { ",
  "26299": "currentFile = StringUtils . substring ( fileName , sourceDirectoryPath . length ( ) + 1 ) ; ",
  "26300": "events = getResults ( ) . getFileViolations ( currentFile ) ; ",
  "26301": "if ( events == null ) { ",
  "26302": "events = new ArrayList < > ( ) ; ",
  "26303": "} public void addError ( AuditEvent event ) { ",
  "26304": "if ( SeverityLevel . IGNORE . equals ( event . getSeverityLevel ( ) ) ) { ",
  "26305": "if ( severityLevel == null || severityLevel . equals ( event . getSeverityLevel ( ) ) ) { ",
  "26306": "events . add ( event ) ; ",
  "26307": "argNames = \"joinPoint\" ) ",
  "26308": "public static boolean anyNonDefaultConstructor ( final JoinPoint joinPoint ) { ",
  "26309": "final Signature signature = joinPoint . getSignature ( ) ; ",
  "26310": "final boolean isConstructorSignature = signature instanceof ConstructorSignature ; ",
  "26311": "if ( isConstructorSignature ) { ",
  "26312": "final Constructor constructor = ( ( ConstructorSignature ) signature ) . getConstructor ( ) ; ",
  "26313": "final boolean isNonDefaultConstructor = constructor != null && constructor . getParameters ( ) . length > 0 ; ",
  "26314": "return isNonDefaultConstructor ; ",
  "26315": "public void performValidationAfterCompoundConstructor ( final JoinPoint joinPoint , final Validatable aValidatable ) ",
  "26316": "throws InternalStateValidationException { ",
  "26317": "if ( joinPoint . getStaticPart ( ) == null ) { ",
  "26318": "+ aValidatable . getClass ( ) . getName ( ) , new IllegalStateException ( ) ) ; ",
  "26319": "final ConstructorSignature sig = ( ConstructorSignature ) joinPoint . getSignature ( ) ; ",
  "26320": "final Class < ? > constructorDefinitionClass = sig . getConstructor ( ) . getDeclaringClass ( ) ; ",
  "26321": "if ( aValidatable . getClass ( ) == constructorDefinitionClass ) { ",
  "26322": "aValidatable . validateInternalState ( ) ; ",
  "26323": "+ aValidatable . getClass ( ) . getName ( ) + \"]\" ) ; ",
  "26324": "} public static void example1 ( String ... args ) { ",
  "26325": "final TodoManager todoManagerImpl = new TodoManager ( ) ; ",
  "26326": "final ServiceQueue serviceQueue = serviceBuilder ( ) ",
  "26327": ". setServiceObject ( todoManagerImpl ) ",
  "26328": ". build ( ) . startServiceQueue ( ) ; ",
  "26329": "final TodoManagerClientInterface todoManager = serviceQueue . createProxy ( TodoManagerClientInterface . class ) ; ",
  "26330": "serviceQueue . startCallBackHandler ( ) ; ",
  "26331": "AtomicInteger countTracker = new AtomicInteger ( ) ; ",
  "26332": "todoManager . count ( count -> { ",
  "26333": "countTracker . set ( count ) ; ",
  "26334": "todoManager . clientProxyFlush ( ) ; ",
  "26335": "Sys . sleep ( 100 ) ; ",
  "26336": "} public static void example2 ( String ... args ) { ",
  "26337": ". setRequestQueueBuilder ( queueBuilder ( ) . setBatchSize ( 1 ) ) ",
  "26338": ". setServiceObject ( todoManagerImpl ) . setInvokeDynamic ( false ) ",
  "26339": "todoManager . list ( todos -> todos . forEach ( System . out :: println ) ) ; ",
  "26340": "} public RedisKeyValueStoreBuilder setRedisUri ( final URI uri ) { ",
  "26341": "getRedisOptions ( ) . setPort ( uri . getPort ( ) ) ; ",
  "26342": "getRedisOptions ( ) . setHost ( uri . getHost ( ) ) ; ",
  "26343": "final String userInfo = uri . getUserInfo ( ) ; ",
  "26344": "final String [ ] split = Str . split ( userInfo ) ; ",
  "26345": "if ( split . length == 2 ) { ",
  "26346": "getRedisOptions ( ) . setAuth ( split [ 1 ] ) ; ",
  "26347": "} else if ( split . length == 1 ) { ",
  "26348": "getRedisOptions ( ) . setAuth ( split [ 0 ] ) ; ",
  "26349": "} private Destination getDestination ( final String destinationName ) { ",
  "26350": "if ( ! destinations . containsKey ( destinationName ) ) { ",
  "26351": "Destination destination = destinationSupplier . apply ( destinationName ) ; ",
  "26352": "destinations . put ( destinationName , destination ) ; ",
  "26353": "return destinations . get ( destinationName ) ; ",
  "26354": "} private MessageConsumer getConsumer ( final String destinationName ) { ",
  "26355": "if ( ! consumers . containsKey ( destinationName ) ) { ",
  "26356": "Session session = getSession ( ) ; ",
  "26357": "Destination destination = getDestination ( destinationName ) ; ",
  "26358": "MessageConsumer consumer = session . createConsumer ( destination ) ; ",
  "26359": "consumers . put ( destinationName , consumer ) ; ",
  "26360": "} catch ( JMSException e ) { ",
  "26361": "+ destinationName , e ) ; ",
  "26362": "return consumers . get ( destinationName ) ; ",
  "26363": "} private MessageProducer getProducer ( final String destinationName ) { ",
  "26364": "if ( ! producers . containsKey ( destinationName ) ) { ",
  "26365": "MessageProducer producer ; ",
  "26366": "producer = session . createProducer ( destination ) ; ",
  "26367": "producers . put ( destinationName , producer ) ; ",
  "26368": "return producers . get ( destinationName ) ; ",
  "26369": "} private Session getSession ( ) { ",
  "26370": "if ( ! sessionOption . isPresent ( ) ) { ",
  "26371": "sessionOption = Optional . of ( getConnection ( ) . createSession ( transacted , acknowledgeMode ) ) ; ",
  "26372": "return sessionOption . get ( ) ; ",
  "26373": "} private Connection getConnection ( ) { ",
  "26374": "if ( ! connectionOption . isPresent ( ) ) { ",
  "26375": "final Connection connection = connectionSupplier . get ( ) ; ",
  "26376": "if ( connection instanceof ActiveMQConnection ) { ",
  "26377": "( ( ActiveMQConnection ) connection ) . addTransportListener ( new TransportListener ( ) { ",
  "26378": "public void onCommand ( Object command ) { ",
  "26379": "public void onException ( IOException error ) { ",
  "26380": "public void transportInterupted ( ) { ",
  "26381": "connected . set ( false ) ; ",
  "26382": "public void transportResumed ( ) { ",
  "26383": "connected . set ( true ) ; ",
  "26384": "if ( startConnection ) { ",
  "26385": "connection . start ( ) ; ",
  "26386": "connectionOption = Optional . of ( connection ) ; ",
  "26387": "return connectionOption . get ( ) ; ",
  "26388": "} public void sendTextMessageWithDestination ( final String destinationName , final String messageContent ) { ",
  "26389": "if ( ! this . isConnected ( ) ) { ",
  "26390": "final Session session = getSession ( ) ; ",
  "26391": "final MessageProducer producer = getProducer ( destinationName ) ; ",
  "26392": "TextMessage message = session . createTextMessage ( messageContent ) ; ",
  "26393": "producer . send ( message ) ; ",
  "26394": "} public void listenTextMessagesWithDestination ( final String destinationName , ",
  "26395": "final Consumer < String > messageListener ) { ",
  "26396": "final MessageConsumer consumer = getConsumer ( destinationName ) ; ",
  "26397": "consumer . setMessageListener ( message -> { ",
  "26398": "messageListener . accept ( ",
  "26399": "( ( TextMessage ) message ) . getText ( ) ",
  "26400": "if ( acknowledgeMode == Session . CLIENT_ACKNOWLEDGE ) { ",
  "26401": "message . acknowledge ( ) ; ",
  "26402": "} public String receiveTextMessageFromDestinationWithTimeout ( final String destinationName , final int timeout ) { ",
  "26403": "MessageConsumer consumer = getConsumer ( destinationName ) ; ",
  "26404": "TextMessage message ; ",
  "26405": "if ( timeout == 0 ) { ",
  "26406": "message = ( TextMessage ) consumer . receiveNoWait ( ) ; ",
  "26407": "message = ( TextMessage ) consumer . receive ( timeout ) ; ",
  "26408": "return message . getText ( ) ; ",
  "26409": "if ( connectionOption . isPresent ( ) ) { ",
  "26410": "if ( startConnection ) ",
  "26411": "connectionOption . get ( ) . close ( ) ; ",
  "26412": "connectionOption = Optional . empty ( ) ; ",
  "26413": "sessionOption = Optional . empty ( ) ; ",
  "26414": "producers . clear ( ) ; ",
  "26415": "consumers . clear ( ) ; ",
  "26416": "destinations . clear ( ) ; ",
  "26417": "} private void handleLoadFromUserDataService ( final User loadedUser , ",
  "26418": "final Callback < List < Recommendation > > recommendationsCallback ) { ",
  "26419": "callbacks . add ( ( ) -> { ",
  "26420": "List < Recommendation > recommendations = runRulesEngineAgainstUser ( loadedUser ) ; ",
  "26421": "recommendationsCallback . accept ( recommendations ) ; ",
  "26422": "} public static void main ( final String ... args ) { ",
  "26423": "final ManagedServiceBuilder managedServiceBuilder = managedServiceBuilder ( ) ; ",
  "26424": "managedServiceBuilder . getHttpServerBuilder ( ) . addResponseDecorator ( new HttpResponseDecorator ( ) { ",
  "26425": "public boolean decorateTextResponse ( HttpTextResponseHolder responseHolder , String requestPath , ",
  "26426": "int code , String contentType , String payload , ",
  "26427": "MultiMap < String , String > responseHeaders , ",
  "26428": "MultiMap < String , String > requestHeaders , ",
  "26429": "MultiMap < String , String > requestParams ) { ",
  "26430": "final HttpResponseBuilder responseBuilder = HttpResponseBuilder . httpResponseBuilder ( ) ",
  "26431": ". setCode ( code ) ",
  "26432": ". setContentType ( contentType ) ",
  "26433": ". setBody ( payload ) ; ",
  "26434": "if ( responseHeaders != null && ! responseHeaders . isEmpty ( ) ) { ",
  "26435": "responseBuilder . setHeaders ( responseHeaders ) ; ",
  "26436": "responseBuilder ",
  "26437": ". addHeader ( \"Pragma\" , \"no-cache\" ) ",
  "26438": ". addHeader ( \"Expires\" , \"0\" ) ",
  "26439": ". addHeader ( \"X-MyHeader-Hostname\" , \"foo\" ) ; ",
  "26440": "responseHolder . setHttpTextResponse ( ( HttpTextResponse ) responseBuilder ",
  "26441": "public boolean decorateBinaryResponse ( HttpBinaryResponseHolder responseHolder , String requestPath , ",
  "26442": "int code , String contentType , byte [ ] payload , ",
  "26443": ". addHeader ( \"X-Calypso-Hostname\" , \"foo\" ) ; ",
  "26444": "responseHolder . setHttpBinaryResponse ( ( HttpBinaryResponse ) responseBuilder ",
  "26445": "managedServiceBuilder . setRootURI ( \"/\" ) . addEndpointService ( new NoCacheService ( ) ) ",
  "26446": ". startApplication ( ) ; ",
  "26447": "public ServiceQueue clusteredEventManagerServiceQueue ( final @ Qualifier ( \"eventBusCluster\" ) ",
  "26448": "EventBusCluster eventBusCluster ) { ",
  "26449": "if ( eventBusCluster == null ) { ",
  "26450": "return eventBusCluster . eventServiceQueue ( ) ; ",
  "26451": "public EventManager clusteredEventManagerImpl ( final EventConnectorHub eventConnectorHub ) { ",
  "26452": "return EventManagerBuilder . eventManagerBuilder ( ) ",
  "26453": ". setEventConnector ( eventConnectorHub ) ",
  "26454": ". setName ( \"CLUSTERED_EVENT_MANAGER\" ) . build ( ) ; ",
  "26455": "} @ PUT ( value = \"/todo/\" , code = 202 ) ",
  "26456": "public boolean send ( final Todo todo ) { ",
  "26457": "if ( ! sendQueue . isPresent ( ) ) { ",
  "26458": "initSendQueue ( ) ; ",
  "26459": "sendQueue . ifPresent ( todoSendQueue -> todoSendQueue . send ( todo ) ) ; ",
  "26460": "} catch ( JmsException ex ) { ",
  "26461": "queue = Optional . empty ( ) ; ",
  "26462": "sendQueue = Optional . empty ( ) ; ",
  "26463": "public void forwardEvent ( final EventTransferObject < Object > event ) { ",
  "26464": "eventConnector . forwardEvent ( new EventTransferObject < Object > ( ) { ",
  "26465": "public String channel ( ) { ",
  "26466": "return event . channel ( ) ; ",
  "26467": "public long id ( ) { ",
  "26468": "return event . id ( ) ; ",
  "26469": "public Object body ( ) { ",
  "26470": "return event . body ( ) ; ",
  "26471": "public boolean isSingleton ( ) { ",
  "26472": "public MultiMap < String , String > params ( ) { ",
  "26473": "return event . params ( ) ; ",
  "26474": "public MultiMap < String , String > headers ( ) { ",
  "26475": "return event . headers ( ) ; ",
  "26476": "public boolean wasReplicated ( ) { ",
  "26477": "@ SuppressWarnings ( \"EqualsWhichDoesntCheckParameterClass\" ) ",
  "26478": "public boolean equals ( Object obj ) { ",
  "26479": "return event . equals ( obj ) ; ",
  "26480": "return event . hashCode ( ) ; ",
  "26481": "} public static void mainArrayBlockingQueue ( String ... args ) throws Exception { ",
  "26482": "final int runs = 20 ; ",
  "26483": "final int tradeCount = 5_000_000 ; ",
  "26484": "final int batchSize = 125 ; ",
  "26485": "int currentBatchSize = batchSize ; ",
  "26486": "run ( runs , tradeCount , 1 ) ; ",
  "26487": "run ( runs , tradeCount , batchSize ) ; ",
  "26488": "for ( int index = 0 ; index < 10 ; index ++ ) { ",
  "26489": "run ( runs , tradeCount , currentBatchSize ) ; ",
  "26490": "currentBatchSize *= 2 ; ",
  "26491": "} public static void mainTransferQueue ( String ... args ) throws Exception { ",
  "26492": "final int batchSize = 50_000 ; ",
  "26493": "final int checkEvery = 1000 ; ",
  "26494": "int currentCheckEvery = checkEvery ; ",
  "26495": "run ( runs , tradeCount , batchSize , 10 ) ; ",
  "26496": "run ( runs , tradeCount , batchSize , currentCheckEvery ) ; ",
  "26497": "currentCheckEvery *= 2 ; ",
  "26498": "public Todo get ( ) { ",
  "26499": "if ( ! consumeQueue . isPresent ( ) ) { ",
  "26500": "initConsumeQueue ( ) ; ",
  "26501": "Todo todo ; ",
  "26502": "todo = consumeQueue . get ( ) . poll ( ) ; ",
  "26503": "consumeQueue = Optional . empty ( ) ; ",
  "26504": "return todo ; ",
  "26505": "public CommandLineRunner runner ( final RandomNumberServiceAsync randomNumberServiceAsync ) { ",
  "26506": "return args -> { ",
  "26507": "randomNumberServiceAsync . getRandom ( ",
  "26508": "CallbackBuilder . newCallbackBuilder ( ) ",
  "26509": ". < Integer > build ( ) , ",
  "26510": "0 , 100 ",
  "26511": "} public String getProviderURL ( ) { ",
  "26512": "if ( providerURL == null ) { ",
  "26513": "providerURL = getProviderURLPattern ( ) . replace ( \"#host#\" , getHost ( ) ) ",
  "26514": ". replace ( \"#port#\" , Integer . toString ( getPort ( ) ) ) ; ",
  "26515": "return providerURL ; ",
  "26516": "} public Context getContext ( ) { ",
  "26517": "context = new InitialContext ( createProperties ( ) ) ; ",
  "26518": "} public Supplier < Connection > getConnectionSupplier ( ) { ",
  "26519": "final boolean startConnection = isStartConnection ( ) ; ",
  "26520": "if ( connectionSupplier == null ) { ",
  "26521": "if ( getUserName ( ) == null ) { ",
  "26522": "connectionSupplier = ( ) -> { ",
  "26523": "final Connection connection = getConnectionFactory ( ) . createConnection ( ) ; ",
  "26524": "final String userName = getUserName ( ) ; ",
  "26525": "final String password = getPassword ( ) ; ",
  "26526": "final Connection connection = getConnectionFactory ( ) . createConnection ( userName , password ) ; ",
  "26527": "return connectionSupplier ; ",
  "26528": "} private Hashtable < Object , Object > createProperties ( ) { ",
  "26529": "Hashtable < Object , Object > properties = new Hashtable < > ( ) ; ",
  "26530": "properties . put ( Context . INITIAL_CONTEXT_FACTORY , getInitialContextFactory ( ) ) ; ",
  "26531": "properties . put ( Context . PROVIDER_URL , getProviderURL ( ) ) ; ",
  "26532": "if ( getJndiSettings ( ) != null ) { ",
  "26533": "getJndiSettings ( ) . entrySet ( ) . forEach ( entry -> properties . put ( entry . getKey ( ) , entry . getValue ( ) ) ) ; ",
  "26534": "} public JmsService build ( ) { ",
  "26535": "return new JmsService ( ",
  "26536": "getConnectionSupplier ( ) , getDestinationSupplier ( ) , isTransacted ( ) , ",
  "26537": "getAcknowledgeMode ( ) , isStartConnection ( ) , getDefaultDestination ( ) , getDefaultTimeout ( ) ) ; ",
  "26538": "} protected void startNewSmppServerTransactionActivity ( SmppTransactionImpl txImpl ) throws ActivityAlreadyExistsException , ",
  "26539": "NullPointerException , IllegalStateException , SLEEException , StartActivityException { ",
  "26540": "sleeEndpoint . startActivity ( txImpl . getActivityHandle ( ) , txImpl , ActivityFlags . REQUEST_ENDED_CALLBACK ) ; ",
  "26541": "DelayedActivityEndTask activityEndTask = new DelayedActivityEndTask ( tracer , this , txImpl , raContext . getTimer ( ) ) ; ",
  "26542": "activityEndTasks . put ( txImpl , activityEndTask ) ; ",
  "26543": "SmppManagement smppManagemet = SmppManagement . getInstance ( ) ; ",
  "26544": "int delay = smppManagemet . getSmppServerManagement ( ) . getSmppActivityTimeout ( ) ; ",
  "26545": "activityEndTask . schedule ( delay , TimeUnit . SECONDS ) ; ",
  "26546": "} protected void fireEvent ( String eventName , ActivityHandle handle , Object event ) { ",
  "26547": "FireableEventType eventID = eventIdCache . getEventId ( this . eventLookup , eventName ) ; ",
  "26548": "if ( eventID == null ) { ",
  "26549": "sleeEndpoint . fireEvent ( handle , eventID , event , address , null ) ; ",
  "26550": "} catch ( UnrecognizedActivityHandleException e ) { ",
  "26551": "} catch ( IllegalEventException e ) { ",
  "26552": "} catch ( ActivityIsEndingException e ) { ",
  "26553": "} catch ( FireEventException e ) { ",
  "26554": "public String encodeURL ( String href ) throws UnsupportedEncodingException { ",
  "26555": "return response . encodeURL ( ",
  "26556": "UrlUtils . encodeUrlPath ( ",
  "26557": "href , ",
  "26558": "response . getCharacterEncoding ( ) ",
  "26559": "} public static DocumentRoot < QName > makeSBOL2Document ( ) ",
  "26560": "NestedDocument < QName > instantiationLacI = NestedDocument ( ",
  "26561": "Sbol2Terms . instantiation . componentInstantiation , ",
  "26562": "sbolExample . namespacedUri ( \"module_LacI_inverter/LacI_instantiation\" ) , ",
  "26563": "NamedProperties ( ",
  "26564": "NamedProperty ( Sbol2Terms . documented . name , \"LacI\" ) ",
  "26565": "NestedDocument < QName > instantiationIPTG = NestedDocument ( ",
  "26566": "sbolExample . namespacedUri ( \"module_LacI_inverter/IPTG\" ) , ",
  "26567": "NamedProperty ( Sbol2Terms . documented . name , \"IPTG\" ) ",
  "26568": "NestedDocument < QName > instantiationIPTGLacI = NestedDocument ( ",
  "26569": "sbolExample . namespacedUri ( \"module_LacI_inverter/IPTG_LacI_complex\" ) , ",
  "26570": "NestedDocument < QName > instantiationpLac = NestedDocument ( ",
  "26571": "sbolExample . namespacedUri ( \"module_LacI_inverter/pLac_instantiation\" ) , ",
  "26572": "NestedDocument < QName > instantiationcTetR = NestedDocument ( ",
  "26573": "sbolExample . namespacedUri ( \"module_LacI_inverter/cTetR_instantiation\" ) , ",
  "26574": "NamedProperty ( Sbol2Terms . documented . name , \"cTetR\" ) ",
  "26575": "NestedDocument < QName > instantiationTetR = NestedDocument ( ",
  "26576": "sbolExample . namespacedUri ( \"module_LacI_inverter/TetR_instantiation\" ) , ",
  "26577": "NamedProperty ( Sbol2Terms . documented . name , \"TetR\" ) ",
  "26578": "NestedDocument < QName > interactionIPTGBinding = NestedDocument ( ",
  "26579": "Sbol2Terms . module . interaction , ",
  "26580": "sbolExample . namespacedUri ( \"module_LacI_inverter/interaction/IPTG_binding\" ) , ",
  "26581": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://purl.obolibrary.org/obo/non_covalent_binding\" ) ) , ",
  "26582": "NamedProperty ( Sbol2Terms . module . hasParticipation , ",
  "26583": "NestedDocument ( ",
  "26584": "Sbol2Terms . module . participation , ",
  "26585": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/IPTG_Binding/LacI_participation\" ) , ",
  "26586": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/reactant\" ) ) , ",
  "26587": "NamedProperty ( Sbol2Terms . module . participant , instantiationLacI . getIdentity ( ) ) ",
  "26588": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/IPTG_Binding/IPTGLacI_participation\" ) , ",
  "26589": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/product\" ) ) , ",
  "26590": "NamedProperty ( Sbol2Terms . module . participant , instantiationIPTGLacI . getIdentity ( ) ) ",
  "26591": ") ) , ",
  "26592": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/IPTG_Binding/IPTG_participation\" ) , ",
  "26593": "NamedProperty ( Sbol2Terms . module . participant , instantiationIPTG . getIdentity ( ) ) ",
  "26594": "NestedDocument < QName > interactionLacIRepression = NestedDocument ( ",
  "26595": "sbolExample . namespacedUri ( \"module_LacI_inverter/interaction/LacI_repression\" ) , ",
  "26596": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://purl.obolibrary.org/obo/repression\" ) ) , ",
  "26597": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/LacI_repression/LacI\" ) , ",
  "26598": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/repressor\" ) ) , ",
  "26599": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/LacI_repression/pLac\" ) , ",
  "26600": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/repressed\" ) ) , ",
  "26601": "NamedProperty ( Sbol2Terms . module . participant , instantiationpLac . getIdentity ( ) ) ",
  "26602": "NestedDocument < QName > interactionTetRTranscriptionTranslation = NestedDocument ( ",
  "26603": "sbolExample . namespacedUri ( \"module_LacI_inverter/interaction/TetR_transcription_translation\" ) , ",
  "26604": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://purl.obolibrary.org/obo/genetic_production\" ) ) , ",
  "26605": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://made.up.terms.org/unicorns\" ) ) , ",
  "26606": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/TetR_transcription_translation/TetR_participation\" ) , ",
  "26607": "NamedProperty ( Sbol2Terms . module . participant , instantiationTetR . getIdentity ( ) ) ",
  "26608": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/TetR_transcription_translation/cTetR_participation\" ) , ",
  "26609": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/transcribed\" ) ) , ",
  "26610": "NamedProperty ( Sbol2Terms . module . participant , instantiationcTetR . getIdentity ( ) ) ",
  "26611": "partsRegistry . namespacedUri ( \"module_LacI_inverter/interaction/TetR_transcription_translation/pLac_participation\" ) , ",
  "26612": "NamedProperty ( Sbol2Terms . module . role , URI . create ( \"http://purl.obolibrary.org/obo/modifier\" ) ) , ",
  "26613": "TopLevelDocument < QName > modelLacIInverter = TopLevelDocument ( ",
  "26614": "NamespaceBindings ( utah ) , ",
  "26615": "Sbol2Terms . model . model , ",
  "26616": "sbolExample . namespacedUri ( \"model/LacI_inverter\" ) , ",
  "26617": "NamedProperty ( Sbol2Terms . model . source , URI . create ( \"http://www.async.ece.utah.edu/LacI_Inverter.xml\" ) ) , ",
  "26618": "NamedProperty ( Sbol2Terms . model . language , \"SBML\" ) , ",
  "26619": "NamedProperty ( Sbol2Terms . model . framework , \"ODE\" ) , ",
  "26620": "NamedProperty ( Sbol2Terms . model . role , \"simulation\" ) ",
  "26621": "TopLevelDocument < QName > moduleLacIInverter = TopLevelDocument ( ",
  "26622": "Sbol2Terms . module . module , ",
  "26623": "sbolExample . namespacedUri ( \"module/LacI_inverter\" ) , ",
  "26624": "NamedProperty ( Sbol2Terms . module . hasInteraction , interactionIPTGBinding ) , ",
  "26625": "NamedProperty ( Sbol2Terms . module . hasInteraction , interactionLacIRepression ) , ",
  "26626": "NamedProperty ( Sbol2Terms . module . hasInteraction , interactionTetRTranscriptionTranslation ) , ",
  "26627": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationLacI ) , ",
  "26628": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationIPTG ) , ",
  "26629": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationIPTGLacI ) , ",
  "26630": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationpLac ) , ",
  "26631": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationcTetR ) , ",
  "26632": "NamedProperty ( Sbol2Terms . instantiation . hasComponentInstantiation , instantiationTetR ) , ",
  "26633": "NamedProperty ( Sbol2Terms . module . hasModel , modelLacIInverter . getIdentity ( ) ) ",
  "26634": "return DocumentRoot ( ",
  "26635": "NamespaceBindings ( RdfTerms . rdf , SbolTerms . sbol2 , partsRegistry , sbolExample , obo ) , ",
  "26636": "TopLevelDocuments ( moduleLacIInverter , modelLacIInverter ) ) ; ",
  "26637": "} public static DocumentRoot < QName > makeSBOL2SequenceComponent ( ) ",
  "26638": "TopLevelDocument < QName > pLac = TopLevelDocument ( ",
  "26639": "Sbol2Terms . component . sequenceComponent , ",
  "26640": "sbolExample . namespacedUri ( \"sequenceComponent/pLac\" ) , ",
  "26641": "NamedProperty ( Sbol2Terms . documented . name , \"pLac\" ) , ",
  "26642": "NamedProperty ( Sbol2Terms . documented . displayId , \"pLac\" ) , ",
  "26643": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"DNA\" ) ) , ",
  "26644": "NamedProperty ( Sbol2Terms . component . sequenceType , URI . create ( \"http://purl.org/obo/owl/SO#SO_0000167\" ) ) ",
  "26645": "sbolExample . namespacedUri ( \"sequenceComponent/pLac/instantiation\" ) , ",
  "26646": "NamedProperty ( Sbol2Terms . component . component , pLac . getIdentity ( ) ) ",
  "26647": "NestedDocument < QName > pLacAnnotation = NestedDocument ( ",
  "26648": "Sbol2Terms . component . sequenceAnnotation , ",
  "26649": "sbolExample . namespacedUri ( \"sequenceComponent/UU_002/pLac_annotation\" ) , ",
  "26650": "NamedProperty ( Sbol2Terms . component . orientation , \"inline\" ) , ",
  "26651": "NamedProperty ( Sbol2Terms . instantiation . subComponentInstantiation , instantiationpLac ) ",
  "26652": "TopLevelDocument < QName > lacIRepressibleGeneSequence = TopLevelDocument ( ",
  "26653": "Sbol2Terms . component . sequence , ",
  "26654": "sbolExample . namespacedUri ( \"sequenceComponent/UU_002/sequence\" ) , ",
  "26655": "NamedProperty ( Sbol2Terms . component . elements , \"atg\" ) ",
  "26656": "TopLevelDocument < QName > lacIRepressibleGene = TopLevelDocument ( ",
  "26657": "sbolExample . namespacedUri ( \"sequenceComponent/UU_002\" ) , ",
  "26658": "NamedProperty ( Sbol2Terms . documented . displayId , \"UU_002\" ) , ",
  "26659": "NamedProperty ( Sbol2Terms . component . sequenceType , URI . create ( \"http://purl.org/obo/owl/SO#SO_0000774\" ) ) , ",
  "26660": "NamedProperty ( Sbol2Terms . component . annotation , pLacAnnotation ) , ",
  "26661": "NamedProperty ( Sbol2Terms . component . hasSequence , lacIRepressibleGeneSequence . getIdentity ( ) ) ",
  "26662": "NamespaceBindings ( SbolTerms . sbol2 ) , ",
  "26663": "TopLevelDocuments ( lacIRepressibleGene , pLac , lacIRepressibleGeneSequence ) ",
  "26664": "} public static DocumentRoot < QName > makeDocument ( ) ",
  "26665": "TopLevelDocuments ( ",
  "26666": "TopLevelDocument ( ",
  "26667": "SbolTerms . dnaComponent , ",
  "26668": "partsRegistry . namespacedUri ( \"Part:BBa_I0462\" ) , ",
  "26669": "NamedProperty ( SbolTerms . name , \"I0462\" ) , ",
  "26670": "NamedProperty ( SbolTerms . dnaSequence , partsRegistry . namespacedUri ( \"Part:BBa_I0462/sequence\" ) ) , ",
  "26671": "NamedProperty ( ",
  "26672": "SbolTerms . sequenceAnnotation , ",
  "26673": "SbolTerms . annotation , ",
  "26674": "partsRegistry . namespacedUri ( \"Part:BBa_I0462/anot/1234567\" ) , ",
  "26675": "NamedProperty ( SbolTerms . bioStart , 1 ) , ",
  "26676": "NamedProperty ( SbolTerms . bioEnd , 12 ) , ",
  "26677": "NamedProperty ( SbolTerms . strand , \"+\" ) , ",
  "26678": "SbolTerms . subComponent , ",
  "26679": "partsRegistry . namespacedUri ( \"Part:BBa_B0034\" ) ",
  "26680": "partsRegistry . namespacedUri ( \"Part:BBa_I0462/annotation/2345678\" ) , ",
  "26681": "NamedProperty ( SbolTerms . bioStart , 19 ) , ",
  "26682": "NamedProperty ( SbolTerms . bioEnd , 774 ) , ",
  "26683": "NamedProperty ( SbolTerms . subComponent , partsRegistry . namespacedUri ( \"Part:BBa_C0062\" ) ) ",
  "26684": "SbolTerms . dnaSequence , ",
  "26685": "partsRegistry . namespacedUri ( \"Part:BBa_I0462/sequence\" ) , ",
  "26686": "NamedProperties ( NamedProperty ( ",
  "26687": "SbolTerms . nucleotides , ",
  "26688": "\"aaagaggagaaatactagatgaaaaacataaatgccgacgacacatacagaataattaataaaattaaagcttgtagaagcaataatgatattaatcaatgcttatctgatatgactaaaatggtacattgtgaatattatttactcgcgatcatttatcctcattctatggttaaatctgatatttcaatcctagataattaccctaaaaaatggaggcaatattatgatgacgctaatttaataaaatatgatcctatagtagattattctaactccaatcattcaccaattaattggaatatatttgaaaacaatgctgtaaataaaaaatctccaaatgtaattaaagaagcgaaaacatcaggtcttatcactgggtttagtttccctattcatacggctaacaatggcttcggaatgcttagttttgcacattcagaaaaagacaactatatagatagtttatttttacatgcgtgtatgaacataccattaattgttccttctctagttgataattatcgaaaaataaatatagcaaataataaatcaaacaacgatttaaccaaaagagaaaaagaatgtttagcgtgggcatgcgaaggaaaaagctcttgggatatttcaaaaatattaggttgcagtgagcgtactgtcactttccatttaaccaatgcgcaaatgaaactcaatacaacaaaccgctgccaaagtatttctaaagcaattttaacaggagcaattgattgcccatactttaaaaattaataacactgatagtgctagtgtagatcactactagagccaggcatcaaataaaacgaaaggctcagtcgaaagactgggcctttcgttttatctgttgtttgtcggtgaacgctctctactagagtcacactggctcaccttcgggtgggcctttctgcgtttata\" ",
  "26689": ") ) ",
  "26690": "partsRegistry . namespacedUri ( \"Part:BBa_B0034\" ) , ",
  "26691": "NamedProperty ( SbolTerms . displayId , \"BBa_B0034\" ) , ",
  "26692": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://purl.obolibrary.org/obo/SO_0000139\" ) ) ",
  "26693": "partsRegistry . namespacedUri ( \"Part:BBa_C0062\" ) , ",
  "26694": "NamedProperty ( SbolTerms . name , \"luxR\" ) , ",
  "26695": "NamedProperty ( SbolTerms . displayId , \"BBa_C0062\" ) , ",
  "26696": "NamedProperty ( RdfTerms . rdfType , URI . create ( \"http://purl.obolibrary.org/obo/SO_0000316\" ) ) ",
  "26697": "} public static SchemaCatalog makeCoreSchemaCatalog ( ) ",
  "26698": "return SchemaCatalog ( ",
  "26699": "Sbol2Terms . sbol2 . namespacedUri ( \"/schemaexample/core\" ) , ",
  "26700": "ImportedSchemas ( ) , ",
  "26701": "DocumentSchemas ( ",
  "26702": "DocumentSchema ( ",
  "26703": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/identified\" ) , ",
  "26704": "Extends ( ) , ",
  "26705": "IdentifierSchemas ( ) , ",
  "26706": "TypeSchemas ( ) , ",
  "26707": "PropertySchemas ( ) ",
  "26708": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/documented\" ) , ",
  "26709": "Extends ( Sbol2Terms . sbol2 . namespacedUri ( \"/schema/identified\" ) ) , ",
  "26710": "PropertySchemas ( ",
  "26711": "PropertySchema ( ",
  "26712": "TypeSchemas ( ",
  "26713": "TypeSchema ( Sbol2Terms . documented . displayId ) ",
  "26714": "cardinality . required , ",
  "26715": "PropertyValueSchemas ( propertyType . string ) ",
  "26716": "TypeSchema ( Sbol2Terms . documented . name ) ",
  "26717": "cardinality . optional , ",
  "26718": "TypeSchema ( Sbol2Terms . documented . description ) ",
  "26719": "} public static SchemaCatalog makeInstantiationSchemaCatalog ( ) ",
  "26720": "Sbol2Terms . sbol2 . namespacedUri ( \"/schemaexample/instantiation\" ) , ",
  "26721": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/component_instantiation\" ) , ",
  "26722": "TypeSchema ( Sbol2Terms . instantiation . componentInstantiation ) ",
  "26723": "TypeSchema ( Sbol2Terms . instantiation . hasComponentInstantiation ) ",
  "26724": "PropertyValueSchemas ( ReferenceValue ( Sbol2Terms . sbol2 . namespacedUri ( \"/schema/sequence_component\" ) ) ) ",
  "26725": "} public static SchemaCatalog makeComponentSchemaCatalog ( ) ",
  "26726": "Sbol2Terms . sbol2 . namespacedUri ( \"/schemaexample/component\" ) , ",
  "26727": "ImportedSchemas ( ",
  "26728": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/core\" ) , ",
  "26729": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/instantiation\" ) ",
  "26730": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/sequence\" ) , ",
  "26731": "TypeSchema ( Sbol2Terms . component . sequence ) ",
  "26732": "TypeSchema ( Sbol2Terms . component . elements ) ",
  "26733": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/sequence_component\" ) , ",
  "26734": "Extends ( Sbol2Terms . sbol2 . namespacedUri ( \"/schema/documented\" ) ) , ",
  "26735": "TypeSchema ( Sbol2Terms . component . sequenceComponent ) ",
  "26736": "TypeSchema ( Sbol2Terms . component . hasSequence ) ",
  "26737": "PropertyValueSchemas ( ReferenceValue ( Sbol2Terms . sbol2 . namespacedUri ( \"/schema/sequence\" ) ) ) ",
  "26738": "TypeSchema ( Sbol2Terms . component . annotation ) ",
  "26739": "cardinality . many , ",
  "26740": "PropertyValueSchemas ( ",
  "26741": "DocumentValue ( ",
  "26742": "Sbol2Terms . sbol2 . namespacedUri ( \"/schema/sequence_annotation\" ) , ",
  "26743": "TypeSchema ( Sbol2Terms . instantiation . subComponentInstantiation ) ",
  "26744": "PropertyValueSchemas ( ReferenceValue ( Sbol2Terms . sbol2 . namespacedUri ( \"/schema/component_instantiation\" ) ) ) ",
  "26745": "TypeSchema ( Sbol2Terms . component . orientation ) ",
  "26746": "PropertyValueSchemas ( propertyType . oneOf ( \"inline\" , \"reverse_compliment\" ) ) ",
  "26747": "TypeSchema ( Sbol2Terms . component . start ) ",
  "26748": "PropertyValueSchemas ( propertyType . integer ) ",
  "26749": "TypeSchema ( Sbol2Terms . component . end ) ",
  "26750": "public static < N > TopLevelDocuments < N > TopLevelDocuments ( TopLevelDocument < N > ... documents ) { ",
  "26751": "return TopLevelDocuments ( Arrays . asList ( documents ) ) ; ",
  "26752": "} public static < N > TopLevelDocuments < N > TopLevelDocuments ( final List < TopLevelDocument < N > > documents ) { ",
  "26753": "return new TopLevelDocuments . Impl < > ( documents ) ; ",
  "26754": "public static < N > NamedProperties < N > NamedProperties ( final NamedProperty < N > ... properties ) { ",
  "26755": "return NamedProperties ( Arrays . asList ( properties ) ) ; ",
  "26756": "} public static < N > NamedProperties < N > NamedProperties ( final List < NamedProperty < N > > properties ) { ",
  "26757": "return new NamedProperties . Impl < > ( properties ) ; ",
  "26758": "} public static < N > TopLevelDocument < N > TopLevelDocument ( final N type , ",
  "26759": "final URI identity , ",
  "26760": "final NamedProperties < N > properties ) { ",
  "26761": "return TopLevelDocument ( NamespaceBindings ( ) , type , identity , properties ) ; ",
  "26762": "} public static < N > TopLevelDocument < N > TopLevelDocument ( final NamespaceBindings bindings , ",
  "26763": "final N type , ",
  "26764": "final URI identity ) { ",
  "26765": "return TopLevelDocument ( bindings , type , identity , Datatree . < N > NamedProperties ( ) ) ; ",
  "26766": "return new TopLevelDocument . Impl < > ( ",
  "26767": "bindings . getBindings ( ) , ",
  "26768": "identity , ",
  "26769": "properties . getProperties ( ) ) ; ",
  "26770": "} public static < N > NestedDocument < N > NestedDocument ( final N type , ",
  "26771": "return NestedDocument ( NamespaceBindings ( ) , type , identity , properties ) ; ",
  "26772": "} public static < N > DocumentRoot < N > DocumentRoot ( final TopLevelDocuments < N > documents ) { ",
  "26773": "return DocumentRoot ( NamespaceBindings ( ) , documents ) ; ",
  "26774": "} public static < N > DocumentRoot < N > DocumentRoot ( ",
  "26775": "final NamespaceBindings bindings , ",
  "26776": "final TopLevelDocuments < N > documents ) { ",
  "26777": "return new DocumentRoot . Impl < > ( bindings . getBindings ( ) , documents . getDocuments ( ) ) ; ",
  "26778": "} public static < N > NamedProperty < N > NamedProperty ( final N name , final PropertyValue < N > value ) { ",
  "26779": "return new NamedProperty . Impl < > ( name , value ) ; ",
  "26780": "} public static < N > NamedProperty < N > NamedProperty ( final N name , final String value ) { ",
  "26781": "return NamedProperty ( name , Datatree . < N > Literal ( value ) ) ; ",
  "26782": "} public static < N > NamedProperty < N > NamedProperty ( final N name , final NestedDocument < N > value ) { ",
  "26783": "} public static < N > Literal . StringLiteral < N > Literal ( final String value ) { ",
  "26784": "return new Literal . StringLiteral < > ( value ) ; ",
  "26785": "} public static < N > Literal . UriLiteral < N > Literal ( final URI value ) { ",
  "26786": "return new Literal . UriLiteral < > ( value ) ; ",
  "26787": "} public static < N > Literal . TypedLiteral < N > Literal ( final String value , final QName type ) { ",
  "26788": "return new Literal . TypedLiteral < > ( value , type ) ; ",
  "26789": "} public static QName QName ( String namespaceURI , String localPart , String prefix ) { ",
  "26790": "return new QName ( namespaceURI , localPart , prefix ) ; ",
  "26791": "} public static void main ( String [ ] args ) throws Exception ",
  "26792": "write ( new OutputStreamWriter ( System . out ) , DataTreeCreator . makeDocument ( ) ) ; ",
  "26793": "System . out . println ( \"----------------------------------------\" ) ; ",
  "26794": "write ( new OutputStreamWriter ( System . out ) , DataTreeCreator . makeSBOL2Document ( ) ) ; ",
  "26795": "} private static Properties getFilterInitParameters ( final FilterConfig config ) { ",
  "26796": "Enumeration en = config . getInitParameterNames ( ) ; ",
  "26797": "while ( en . hasMoreElements ( ) ) { ",
  "26798": "String key = ( String ) en . nextElement ( ) ; ",
  "26799": "String value = config . getInitParameter ( key ) ; ",
  "26800": "} public void init ( final FilterConfig filterConfig ) ",
  "26801": "Properties props = getFilterInitParameters ( filterConfig ) ; ",
  "26802": "config = new CORSConfiguration ( props ) ; ",
  "26803": "} catch ( CORSConfigurationException e ) { ",
  "26804": "handler = new CORSRequestHandler ( config ) ; ",
  "26805": "} private void printMessage ( final HttpServletResponse response , final int sc , final String msg ) ",
  "26806": "response . setStatus ( sc ) ; ",
  "26807": "response . resetBuffer ( ) ; ",
  "26808": "PrintWriter out = response . getWriter ( ) ; ",
  "26809": "} private void doFilter ( final HttpServletRequest request , final HttpServletResponse response , final FilterChain chain ) ",
  "26810": "handler . tagRequest ( request ) ; ",
  "26811": "CORSRequestType type = CORSRequestType . detect ( request ) ; ",
  "26812": "if ( type == CORSRequestType . ACTUAL ) { ",
  "26813": "handler . handleActualRequest ( request , response ) ; ",
  "26814": "else if ( type == CORSRequestType . PREFLIGHT ) { ",
  "26815": "handler . handlePreflightRequest ( request , response ) ; ",
  "26816": "else if ( config . allowGenericHttpRequests ) { ",
  "26817": "request . setAttribute ( \"cors.isCorsRequest\" , false ) ; ",
  "26818": "} catch ( InvalidCORSRequestException e ) { ",
  "26819": "printMessage ( response , HttpServletResponse . SC_BAD_REQUEST , e . getMessage ( ) ) ; ",
  "26820": "} catch ( CORSOriginDeniedException e ) { ",
  "26821": "printMessage ( response , HttpServletResponse . SC_FORBIDDEN , msg ) ; ",
  "26822": "} catch ( UnsupportedHTTPMethodException e ) { ",
  "26823": "HTTPMethod method = e . getRequestedMethod ( ) ; ",
  "26824": "printMessage ( response , HttpServletResponse . SC_METHOD_NOT_ALLOWED , msg ) ; ",
  "26825": "} catch ( UnsupportedHTTPHeaderException e ) { ",
  "26826": "HeaderFieldName header = e . getRequestHeader ( ) ; ",
  "26827": "if ( header != null ) ",
  "26828": "public void registerService ( ISemanticLocator packedServiceDescriptor ) throws ServiceExecutionException ",
  "26829": "Collection < ISemanticIdentifier > deployedServices = this . deploy ( packedServiceDescriptor , bsdmServiceRegistry ) ; ",
  "26830": "for ( ISemanticIdentifier deployedService : deployedServices ) ",
  "26831": "this . messageBroker . registerService ( ",
  "26832": "this . bsdmServiceRegistry . getService ( deployedService ) . applyConnectorURL ( this . urlContainer ) ) ; ",
  "26833": "} catch ( ModelException ex ) ",
  "26834": "throw new ServiceExecutionException ( ex . getMessage ( ) , ex ) ; ",
  "26835": "} public void close ( int port ) { ",
  "26836": "for ( Iterator i = _listeners . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "26837": "Object k = i . next ( ) ; ",
  "26838": "Object s = _listeners . get ( k ) ; ",
  "26839": "if ( s instanceof SocketHandler ) { ",
  "26840": "SocketHandler sh = ( SocketHandler ) s ; ",
  "26841": "if ( port == - 1 || sh . isPort ( port ) ) { ",
  "26842": "sh . interrupt ( ) ; ",
  "26843": "sh . close ( ) ; ",
  "26844": "_transactions . remove ( s ) ; ",
  "26845": "_listeners . remove ( k ) ; ",
  "26846": "} protected void receive ( Command c , Map h , String b , Authenticatable y ) { ",
  "26847": "long id = ( int ) ( Math . random ( ) * 10000 ) ; ",
  "26848": "if ( c == Command . COMMIT ) { ",
  "26849": "synchronized ( _transactions ) { ",
  "26850": "List trans = ( List ) _transactions . remove ( y ) ; ",
  "26851": "trans = new ArrayList ( trans ) ; ",
  "26852": "for ( Iterator i = trans . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "26853": "Message m = ( Message ) i . next ( ) ; ",
  "26854": "receive ( m . command ( ) , m . headers ( ) , m . body ( ) , y ) ; ",
  "26855": "} else if ( c == Command . ABORT ) { ",
  "26856": "_transactions . remove ( y ) ; ",
  "26857": "} else if ( _transactions . get ( y ) != null ) { ",
  "26858": "( ( List ) _transactions . get ( y ) ) . add ( new Message ( c , h , b ) ) ; ",
  "26859": "if ( h == null ) h = new HashMap ( ) ; ",
  "26860": "String destination = ( String ) h . get ( \"destination\" ) ; ",
  "26861": "if ( c == Command . SEND ) { ",
  "26862": "if ( y instanceof IntraVMClient || ",
  "26863": "_authenticator . authorizeSend ( y . token ( ) , destination ) ) { ",
  "26864": "synchronized ( _listeners ) { ",
  "26865": "List l = ( List ) _listeners . get ( destination ) ; ",
  "26866": "if ( l != null ) { ",
  "26867": "l = new ArrayList ( l ) ; ",
  "26868": "for ( Iterator i = l . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "26869": "Listener sh = ( Listener ) i . next ( ) ; ",
  "26870": "sh . message ( h , b ) ; ",
  "26871": "Map error_headers = new HashMap ( ) ; ",
  "26872": "error_headers . put ( \"type:\" , \"send\" ) ; ",
  "26873": "error_headers . put ( \"channel:\" , destination ) ; ",
  "26874": "} else if ( c == Command . SUBSCRIBE ) { ",
  "26875": "_authenticator . authorizeSubscribe ( y . token ( ) , destination ) ) { ",
  "26876": "_listeners . put ( destination , l ) ; ",
  "26877": "if ( ! l . contains ( y ) ) l . add ( y ) ; ",
  "26878": "error_headers . put ( \"type:\" , \"subscription\" ) ; ",
  "26879": "} else if ( c == Command . UNSUBSCRIBE ) { ",
  "26880": "if ( l != null ) l . remove ( y ) ; ",
  "26881": "} else if ( c == Command . BEGIN ) { ",
  "26882": "List trans = new ArrayList ( ) ; ",
  "26883": "_transactions . put ( y , trans ) ; ",
  "26884": "} else if ( c == Command . DISCONNECT ) { ",
  "26885": "for ( Iterator i = _listeners . values ( ) . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "26886": "List l = ( List ) i . next ( ) ; ",
  "26887": "l . remove ( y ) ; ",
  "26888": "if ( h != null ) { ",
  "26889": "String receipt = ( String ) h . get ( \"receipt\" ) ; ",
  "26890": "if ( receipt != null ) { ",
  "26891": "HashMap headers = new HashMap ( ) ; ",
  "26892": "headers . put ( \"receipt-id\" , receipt ) ; ",
  "26893": "y . receive ( Command . RECEIPT , headers , null ) ; ",
  "26894": "} public static final void main ( String [ ] args ) { ",
  "26895": "if ( args . length != 1 ) { ",
  "26896": "int port = Integer . valueOf ( args [ 0 ] ) . intValue ( ) ; ",
  "26897": "System . out . println ( Version . VERSION ) ; ",
  "26898": "new Server ( port ) ; ",
  "26899": "e . printStackTrace ( System . err ) ; ",
  "26900": "} public void commitW ( Map header ) throws InterruptedException { ",
  "26901": "String receipt = addReceipt ( header ) ; ",
  "26902": "transmit ( Command . COMMIT , header ) ; ",
  "26903": "waitOnReceipt ( receipt ) ; ",
  "26904": "} public void subscribe ( String name , Listener listener , Map headers ) { ",
  "26905": "List list = ( List ) _listeners . get ( name ) ; ",
  "26906": "list = new ArrayList ( ) ; ",
  "26907": "_listeners . put ( name , list ) ; ",
  "26908": "if ( ! list . contains ( listener ) ) list . add ( listener ) ; ",
  "26909": "if ( headers == null ) headers = new HashMap ( ) ; ",
  "26910": "headers . put ( \"destination\" , name ) ; ",
  "26911": "transmit ( Command . SUBSCRIBE , headers ) ; ",
  "26912": "} public void subscribeW ( String name , Listener listener , Map header ) ",
  "26913": "subscribe ( name , listener , header ) ; ",
  "26914": "} public void subscribeW ( String name , Listener listener ) ",
  "26915": "subscribeW ( name , listener , null ) ; ",
  "26916": "} public void unsubscribe ( String name , Listener l ) { ",
  "26917": "if ( list != null ) { ",
  "26918": "list . remove ( l ) ; ",
  "26919": "if ( list . size ( ) == 0 ) { ",
  "26920": "unsubscribe ( name ) ; ",
  "26921": "} public void unsubscribe ( String name , Map header ) { ",
  "26922": "if ( header == null ) header = new HashMap ( ) ; ",
  "26923": "synchronized ( _listeners ) { _listeners . remove ( name ) ; } ",
  "26924": "header . put ( \"destination\" , name ) ; ",
  "26925": "transmit ( Command . UNSUBSCRIBE , header ) ; ",
  "26926": "} public void unsubscribeW ( String name , Map header ) throws InterruptedException { ",
  "26927": "unsubscribe ( name , ( HashMap ) null ) ; ",
  "26928": "} public void sendW ( String dest , String mesg ) ",
  "26929": "sendW ( dest , mesg , null ) ; ",
  "26930": "} public void sendW ( String dest , String mesg , Map header ) ",
  "26931": "send ( dest , mesg , header ) ; ",
  "26932": "} public void send ( String dest , String mesg , Map header ) { ",
  "26933": "header . put ( \"destination\" , dest ) ; ",
  "26934": "transmit ( Command . SEND , header , mesg ) ; ",
  "26935": "} public Message getNext ( String name ) { ",
  "26936": "synchronized ( _queue ) { ",
  "26937": "for ( int idx = 0 ; idx < _queue . size ( ) ; idx ++ ) { ",
  "26938": "Message m = ( Message ) _queue . get ( idx ) ; ",
  "26939": "if ( m . headers ( ) . get ( \"destination\" ) . equals ( name ) ) { ",
  "26940": "_queue . remove ( idx ) ; ",
  "26941": "} public boolean hasReceipt ( String receipt_id ) { ",
  "26942": "synchronized ( _receipts ) { ",
  "26943": "for ( Iterator i = _receipts . iterator ( ) ; i . hasNext ( ) ; ) { ",
  "26944": "String o = ( String ) i . next ( ) ; ",
  "26945": "if ( o . equals ( receipt_id ) ) return true ; ",
  "26946": "} public void clearReceipt ( String receipt_id ) { ",
  "26947": "if ( o . equals ( receipt_id ) ) i . remove ( ) ; ",
  "26948": "} public String getSuffix ( ) { ",
  "26949": "String s = host ; ",
  "26950": "if ( port != - 1 ) ",
  "26951": "s = s + \":\" + port ; ",
  "26952": "} @ Programmatic ",
  "26953": "public Collection < String > calendarNamesFor ( final Object notable ) { ",
  "26954": "final Set < String > fallback = Collections . singleton ( DEFAULT_CALENDAR_NAME ) ; ",
  "26955": "if ( calendarNameRepository == null ) { ",
  "26956": "return fallback ; ",
  "26957": "final Collection < String > calendarNames = calendarNameRepository . calendarNamesFor ( notable ) ; ",
  "26958": "return calendarNames != null ? calendarNames : fallback ; ",
  "26959": "} public synchronized void receiveMessagesSyncronously ( long ms ) throws ServiceGroundingException ",
  "26960": "for ( IChannelConsumer chConsumer : this . serviceChannelConsumers ) ",
  "26961": "if ( chConsumer instanceof AbstractJMSChannelConsumer ) ",
  "26962": "AbstractJMSChannelConsumer achConsumer = ( AbstractJMSChannelConsumer ) chConsumer ; ",
  "26963": "achConsumer . receiveOrWait ( ms ) ; ",
  "26964": "if ( chConsumer instanceof AbstractStompChannelConsumer ) ",
  "26965": "AbstractStompChannelConsumer achConsumer = ( AbstractStompChannelConsumer ) chConsumer ; ",
  "26966": "} private static String serialize ( final Set set , final String sep ) { ",
  "26967": "Iterator it = set . iterator ( ) ; ",
  "26968": "s = s + it . next ( ) . toString ( ) ; ",
  "26969": "if ( it . hasNext ( ) ) ",
  "26970": "s = s + sep ; ",
  "26971": "} private static String [ ] parseMultipleHeaderValues ( final String headerValue ) { ",
  "26972": "if ( headerValue == null ) ",
  "26973": "String trimmedHeaderValue = headerValue . trim ( ) ; ",
  "26974": "if ( trimmedHeaderValue . isEmpty ( ) ) ",
  "26975": "return trimmedHeaderValue . split ( \"\\\\s*,\\\\s*|\\\\s+\" ) ; ",
  "26976": "} public void tagRequest ( final HttpServletRequest request ) { ",
  "26977": "final CORSRequestType type = CORSRequestType . detect ( request ) ; ",
  "26978": "case ACTUAL : ",
  "26979": "request . setAttribute ( \"cors.isCorsRequest\" , true ) ; ",
  "26980": "request . setAttribute ( \"cors.origin\" , request . getHeader ( \"Origin\" ) ) ; ",
  "26981": "request . setAttribute ( \"cors.requestType\" , \"actual\" ) ; ",
  "26982": "case PREFLIGHT : ",
  "26983": "request . setAttribute ( \"cors.requestType\" , \"preflight\" ) ; ",
  "26984": "request . setAttribute ( \"cors.requestHeaders\" , request . getHeader ( \"Access-Control-Request-Headers\" ) ) ; ",
  "26985": "case OTHER : ",
  "26986": "} public void handleActualRequest ( final HttpServletRequest request , final HttpServletResponse response ) ",
  "26987": "throws InvalidCORSRequestException , ",
  "26988": "CORSOriginDeniedException , ",
  "26989": "UnsupportedHTTPMethodException { ",
  "26990": "if ( CORSRequestType . detect ( request ) != CORSRequestType . ACTUAL ) ",
  "26991": "Origin requestOrigin = new Origin ( request . getHeader ( \"Origin\" ) ) ; ",
  "26992": "if ( ! config . isAllowedOrigin ( requestOrigin ) ) ",
  "26993": "HTTPMethod method = null ; ",
  "26994": "method = HTTPMethod . valueOf ( request . getMethod ( ) ) ; ",
  "26995": "if ( ! config . isSupportedMethod ( method ) ) ",
  "26996": "response . addHeader ( \"Access-Control-Allow-Origin\" , requestOrigin . toString ( ) ) ; ",
  "26997": "if ( config . supportsCredentials ) ",
  "26998": "response . addHeader ( \"Access-Control-Allow-Credentials\" , \"true\" ) ; ",
  "26999": "if ( ! exposedHeaders . isEmpty ( ) ) ",
  "27000": "response . addHeader ( \"Access-Control-Expose-Headers\" , exposedHeaders ) ; ",
  "27001": "request . setAttribute ( \"cors.origin\" , requestOrigin . toString ( ) ) ; ",
  "27002": "} public void handlePreflightRequest ( final HttpServletRequest request , final HttpServletResponse response ) ",
  "27003": "UnsupportedHTTPMethodException , ",
  "27004": "UnsupportedHTTPHeaderException { ",
  "27005": "if ( CORSRequestType . detect ( request ) != CORSRequestType . PREFLIGHT ) ",
  "27006": "String requestMethodHeader = request . getHeader ( \"Access-Control-Request-Method\" ) ; ",
  "27007": "if ( requestMethodHeader == null ) ",
  "27008": "HTTPMethod requestedMethod = null ; ",
  "27009": "requestedMethod = HTTPMethod . valueOf ( requestMethodHeader . toUpperCase ( ) ) ; ",
  "27010": "final String [ ] requestHeaderValues = parseMultipleHeaderValues ( request . getHeader ( \"Access-Control-Request-Headers\" ) ) ; ",
  "27011": "final HeaderFieldName [ ] requestHeaders = new HeaderFieldName [ requestHeaderValues . length ] ; ",
  "27012": "for ( int i = 0 ; i < requestHeaders . length ; i ++ ) { ",
  "27013": "requestHeaders [ i ] = new HeaderFieldName ( requestHeaderValues [ i ] ) ; ",
  "27014": "if ( ! config . isSupportedMethod ( requestedMethod ) ) ",
  "27015": "if ( ! config . supportedHeaders . contains ( requestHeaders [ i ] ) ) ",
  "27016": "if ( config . supportsCredentials ) { ",
  "27017": "if ( config . allowAnyOrigin ) ",
  "27018": "response . addHeader ( \"Access-Control-Allow-Origin\" , \"*\" ) ; ",
  "27019": "if ( config . maxAge > 0 ) ",
  "27020": "response . addHeader ( \"Access-Control-Max-Age\" , Integer . toString ( config . maxAge ) ) ; ",
  "27021": "response . addHeader ( \"Access-Control-Allow-Methods\" , supportedMethods ) ; ",
  "27022": "if ( ! supportedHeaders . isEmpty ( ) ) ",
  "27023": "response . addHeader ( \"Access-Control-Allow-Headers\" , supportedHeaders ) ; ",
  "27024": "} protected static String formatCanonical ( final String name ) { ",
  "27025": "String nameTrimmed = name . trim ( ) ; ",
  "27026": "if ( nameTrimmed . isEmpty ( ) ) ",
  "27027": "if ( ! nameTrimmed . matches ( \"^[a-zA-Z][\\\\w-]*$\" ) ) ",
  "27028": "String [ ] tokens = nameTrimmed . toLowerCase ( ) . split ( \"-\" ) ; ",
  "27029": "String out = \"\" ; ",
  "27030": "char [ ] c = tokens [ i ] . toCharArray ( ) ; ",
  "27031": "c [ 0 ] = Character . toUpperCase ( c [ 0 ] ) ; ",
  "27032": "if ( i >= 1 ) ",
  "27033": "out = out + \"-\" ; ",
  "27034": "out = out + new String ( c ) ; ",
  "27035": "} public boolean setOptions ( String [ ] options ) throws Exception { ",
  "27036": "ArgumentParser parser ; ",
  "27037": "Namespace ns ; ",
  "27038": "parser = ArgumentParsers . newArgumentParser ( MinDeps . class . getName ( ) ) ; ",
  "27039": "parser . addArgument ( \"--java-home\" ) ",
  "27040": ". type ( Arguments . fileType ( ) . verifyExists ( ) . verifyIsDirectory ( ) ) ",
  "27041": ". dest ( \"javahome\" ) ",
  "27042": ". required ( true ) ",
  "27043": "parser . addArgument ( \"--class-path\" ) ",
  "27044": ". dest ( \"classpath\" ) ",
  "27045": "parser . addArgument ( \"--classes\" ) ",
  "27046": ". type ( Arguments . fileType ( ) . verifyExists ( ) . verifyIsFile ( ) . verifyCanRead ( ) ) ",
  "27047": ". dest ( \"classes\" ) ",
  "27048": "parser . addArgument ( \"--additional\" ) ",
  "27049": ". type ( Arguments . fileType ( ) ) ",
  "27050": ". setDefault ( new File ( \".\" ) ) ",
  "27051": ". required ( false ) ",
  "27052": ". dest ( \"additional\" ) ",
  "27053": "parser . addArgument ( \"--output\" ) ",
  "27054": ". dest ( \"output\" ) ",
  "27055": "parser . addArgument ( \"package\" ) ",
  "27056": ". dest ( \"packages\" ) ",
  "27057": ". nargs ( \"+\" ) ",
  "27058": "ns = parser . parseArgs ( options ) ; ",
  "27059": "catch ( ArgumentParserException e ) { ",
  "27060": "parser . handleError ( e ) ; ",
  "27061": "setJavaHome ( ns . get ( \"javahome\" ) ) ; ",
  "27062": "setClassPath ( ns . getString ( \"classpath\" ) ) ; ",
  "27063": "setClassesFile ( ns . get ( \"classes\" ) ) ; ",
  "27064": "setAdditionalFile ( ns . get ( \"additional\" ) ) ; ",
  "27065": "setPackages ( ns . getList ( \"packages\" ) ) ; ",
  "27066": "setOutputFile ( ns . get ( \"output\" ) ) ; ",
  "27067": "} protected String readFile ( File file , List < String > lines ) { ",
  "27068": "lines . addAll ( Files . readAllLines ( file . toPath ( ) ) ) ; ",
  "27069": "while ( i < lines . size ( ) ) { ",
  "27070": "if ( lines . get ( i ) . trim ( ) . isEmpty ( ) ) { ",
  "27071": "lines . remove ( i ) ; ",
  "27072": "if ( lines . get ( i ) . startsWith ( \"#\" ) ) { ",
  "27073": "} protected String check ( ) { ",
  "27074": "String error ; ",
  "27075": "if ( ! m_JavaHome . exists ( ) ) ",
  "27076": "if ( ! m_JavaHome . isDirectory ( ) ) ",
  "27077": "if ( System . getProperty ( \"os.name\" ) . toLowerCase ( ) . contains ( \"windows\" ) ) ",
  "27078": "m_Jdeps = new File ( m_JavaHome . getAbsolutePath ( ) + File . separator + \"bin\" + File . separator + \"jdeps.exe\" ) ; ",
  "27079": "m_Jdeps = new File ( m_JavaHome . getAbsolutePath ( ) + File . separator + \"bin\" + File . separator + \"jdeps\" ) ; ",
  "27080": "if ( ! m_Jdeps . exists ( ) ) ",
  "27081": "if ( ! m_ClassesFile . exists ( ) ) ",
  "27082": "if ( m_ClassesFile . isDirectory ( ) ) ",
  "27083": "error = readFile ( m_ClassesFile , m_Classes ) ; ",
  "27084": "if ( error != null ) ",
  "27085": "if ( ( m_AdditionalFile != null ) && m_AdditionalFile . exists ( ) && ( ! m_AdditionalFile . isDirectory ( ) ) ) { ",
  "27086": "error = readFile ( m_AdditionalFile , m_Resources ) ; ",
  "27087": "} protected List < String > filter ( List < String > lines , String regexp , boolean invert ) { ",
  "27088": "List < String > result ; ",
  "27089": "Pattern pattern ; ",
  "27090": "result = new ArrayList < > ( ) ; ",
  "27091": "pattern = Pattern . compile ( regexp ) ; ",
  "27092": "if ( invert ) { ",
  "27093": "if ( ! pattern . matcher ( line ) . matches ( ) ) ",
  "27094": "result . add ( line ) ; ",
  "27095": "if ( pattern . matcher ( line ) . matches ( ) ) ",
  "27096": "} protected String packagesRegExp ( ) { ",
  "27097": "StringBuilder result ; ",
  "27098": "String pkg ; ",
  "27099": "result = new StringBuilder ( ) ; ",
  "27100": "for ( i = 0 ; i < m_Packages . size ( ) ; i ++ ) { ",
  "27101": "result . append ( \"|\" ) ; ",
  "27102": "pkg = m_Packages . get ( i ) ; ",
  "27103": "if ( ! pkg . endsWith ( \".\" ) ) ",
  "27104": "pkg = pkg + \".\" ; ",
  "27105": "pkg = pkg . replace ( \".\" , \"\\\\.\" ) ; ",
  "27106": "result . append ( pkg ) ; ",
  "27107": "result . append ( \").*$\" ) ; ",
  "27108": "} protected String determine ( ) { ",
  "27109": "String [ ] cmd ; ",
  "27110": "ProcessBuilder builder ; ",
  "27111": "CollectingProcessOutput output ; ",
  "27112": "List < String > lines ; ",
  "27113": "for ( String cls : m_Classes ) { ",
  "27114": "System . err . println ( cls ) ; ",
  "27115": "cmd = new String [ ] { ",
  "27116": "m_Jdeps . getAbsolutePath ( ) , ",
  "27117": "\"-cp\" , ",
  "27118": "m_ClassPath , ",
  "27119": "\"-recursive\" , ",
  "27120": "\"-verbose:class\" , ",
  "27121": "cls ",
  "27122": "builder = new ProcessBuilder ( ) ; ",
  "27123": "builder . command ( cmd ) ; ",
  "27124": "output = new CollectingProcessOutput ( ) ; ",
  "27125": "output . monitor ( builder ) ; ",
  "27126": "lines = new ArrayList < > ( Arrays . asList ( output . getStdOut ( ) . replace ( \"\\r\" , \"\" ) . split ( \"\\n\" ) ) ) ; ",
  "27127": "lines = filter ( lines , packagesRegExp ( ) , false ) ; ",
  "27128": "lines = filter ( lines , \".*\\\\$.*\" , true ) ; ",
  "27129": "lines = filter ( lines , \".*\\\\.jar\\\\)\" , true ) ; ",
  "27130": "for ( i = 0 ; i < lines . size ( ) ; i ++ ) { ",
  "27131": "line = lines . get ( i ) ; ",
  "27132": "lines . set ( i , line ) ; ",
  "27133": "m_DependentClasses . addAll ( lines ) ; ",
  "27134": "} public String execute ( ) { ",
  "27135": "result = check ( ) ; ",
  "27136": "result = determine ( ) ; ",
  "27137": "m_Dependencies = new ArrayList < > ( ) ; ",
  "27138": "m_Dependencies . addAll ( m_Classes ) ; ",
  "27139": "for ( String cls : m_DependentClasses ) { ",
  "27140": "if ( ! m_Dependencies . contains ( cls ) ) ",
  "27141": "m_Dependencies . add ( cls ) ; ",
  "27142": "for ( String cls : m_Resources ) { ",
  "27143": "Collections . sort ( m_Dependencies ) ; ",
  "27144": "} public void output ( ) { ",
  "27145": "if ( ( m_OutputFile == null || m_OutputFile . isDirectory ( ) ) ) { ",
  "27146": "for ( String dep : m_Dependencies ) ",
  "27147": "System . out . println ( dep ) ; ",
  "27148": "Files . write ( m_OutputFile . toPath ( ) , m_Dependencies , StandardOpenOption . CREATE , StandardOpenOption . TRUNCATE_EXISTING ) ; ",
  "27149": "} public IoWriter < QName > createIoWriter ( final XMLStreamWriter writer ) ",
  "27150": "return new IoWriter < QName > ( ) { ",
  "27151": "public void write ( DocumentRoot < QName > document ) throws CoreIoException { ",
  "27152": "writeStartElement ( RDF ) ; ",
  "27153": "setPrefix ( rdf ) ; ",
  "27154": "if ( ! document . getNamespaceBindings ( ) . contains ( rdf ) ) { ",
  "27155": "writeNamespace ( rdf ) ; ",
  "27156": "for ( NamespaceBinding nb : document . getNamespaceBindings ( ) ) { ",
  "27157": "setPrefix ( nb ) ; ",
  "27158": "writeNamespace ( nb ) ; ",
  "27159": "for ( TopLevelDocument < QName > child : document . getTopLevelDocuments ( ) ) ",
  "27160": "write ( child ) ; ",
  "27161": "writer . writeEndElement ( ) ; ",
  "27162": "catch ( XMLStreamException xse ) ",
  "27163": "throw new CoreIoException ( xse ) ; ",
  "27164": "private void write ( IdentifiableDocument < QName > doc ) throws XMLStreamException { ",
  "27165": "writeStartElement ( doc . getType ( ) ) ; ",
  "27166": "writeAttribute ( rdfAbout , doc . getIdentity ( ) . toString ( ) ) ; ",
  "27167": "for ( NamedProperty < QName > property : doc . getProperties ( ) ) { ",
  "27168": "write ( property ) ; ",
  "27169": "private void write ( final NamedProperty < QName > property ) { ",
  "27170": "new PropertyValue . Visitor < QName > ( ) { ",
  "27171": "public void visit ( NestedDocument < QName > v ) throws XMLStreamException { ",
  "27172": "writeStartElement ( property . getName ( ) ) ; ",
  "27173": "write ( v ) ; ",
  "27174": "public void visit ( Literal < QName > v ) throws XMLStreamException { ",
  "27175": "if ( isEmptyElementValue ( v ) ) { ",
  "27176": "writeEmptyElement ( property . getName ( ) ) ; ",
  "27177": "} . visit ( property . getValue ( ) ) ; ",
  "27178": "private boolean isEmptyElementValue ( Literal < QName > literal ) { ",
  "27179": "return literal instanceof Literal . UriLiteral ; ",
  "27180": "private void write ( Literal < QName > literal ) { ",
  "27181": "new Literal . Visitor < QName > ( ) { ",
  "27182": "public void visit ( Literal . StringLiteral < QName > l ) throws XMLStreamException { ",
  "27183": "writer . writeCharacters ( l . getValue ( ) ) ; ",
  "27184": "public void visit ( Literal . UriLiteral < QName > l ) throws XMLStreamException { ",
  "27185": "writeAttribute ( rdfResource , l . getValue ( ) . toString ( ) ) ; ",
  "27186": "public void visit ( Literal . IntegerLiteral < QName > l ) throws XMLStreamException { ",
  "27187": "writer . writeCharacters ( l . getValue ( ) . toString ( ) ) ; ",
  "27188": "public void visit ( Literal . DoubleLiteral < QName > l ) throws XMLStreamException { ",
  "27189": "public void visit ( Literal . TypedLiteral < QName > l ) throws XMLStreamException { ",
  "27190": "writer . writeCharacters ( l . getValue ( ) + \"^^\" + l . getType ( ) . getPrefix ( ) + \":\" + l . getType ( ) . getLocalPart ( ) ) ; ",
  "27191": "public void visit ( Literal . BooleanLiteral < QName > l ) throws XMLStreamException { ",
  "27192": "} . visit ( literal ) ; ",
  "27193": "private void writeEmptyElement ( QName tagName ) throws XMLStreamException { ",
  "27194": "writer . writeEmptyElement ( tagName . getPrefix ( ) , tagName . getLocalPart ( ) , tagName . getNamespaceURI ( ) ) ; ",
  "27195": "private void writeStartElement ( QName tagName ) throws XMLStreamException { ",
  "27196": "writer . writeStartElement ( tagName . getPrefix ( ) , tagName . getLocalPart ( ) , tagName . getNamespaceURI ( ) ) ; ",
  "27197": "private void setPrefix ( NamespaceBinding binding ) throws XMLStreamException { ",
  "27198": "writer . setPrefix ( binding . getPrefix ( ) , binding . getNamespaceURI ( ) ) ; ",
  "27199": "private void writeNamespace ( NamespaceBinding binding ) throws XMLStreamException { ",
  "27200": "writer . writeNamespace ( binding . getPrefix ( ) , binding . getNamespaceURI ( ) ) ; ",
  "27201": "private void writeAttribute ( QName attrName , String attrValue ) throws XMLStreamException { ",
  "27202": "writer . writeAttribute ( ",
  "27203": "attrName . getPrefix ( ) , ",
  "27204": "attrName . getNamespaceURI ( ) , ",
  "27205": "attrName . getLocalPart ( ) , ",
  "27206": "attrValue ) ; ",
  "27207": "} public IoReader < QName > createIoReader ( final XMLStreamReader xmlReader ) throws XMLStreamException ",
  "27208": "return new IoReader < QName > ( ) { ",
  "27209": "public DocumentRoot < QName > read ( ) throws CoreIoException ",
  "27210": "while ( xmlReader . hasNext ( ) ) ",
  "27211": "int eventType = xmlReader . next ( ) ; ",
  "27212": "switch ( eventType ) { ",
  "27213": "case XMLEvent . START_ELEMENT : ",
  "27214": "NamespaceBindings bindings = readBindings ( ) ; ",
  "27215": "Datatree . TopLevelDocuments < QName > topLevelDocuments = readTopLevelDocuments ( ) ; ",
  "27216": "return Datatree . DocumentRoot ( bindings , topLevelDocuments ) ; ",
  "27217": "throw new CoreIoException ( e ) ; ",
  "27218": "private Datatree . NamespaceBindings readBindings ( ) throws XMLStreamException { ",
  "27219": "NamespaceBinding [ ] bindings = new NamespaceBinding [ xmlReader . getNamespaceCount ( ) ] ; ",
  "27220": "for ( int i = 0 ; i < xmlReader . getNamespaceCount ( ) ; i ++ ) { ",
  "27221": "bindings [ i ] = Datatree . NamespaceBinding ( xmlReader . getNamespaceURI ( i ) , xmlReader . getNamespacePrefix ( i ) ) ; ",
  "27222": "return Datatree . NamespaceBindings ( bindings ) ; ",
  "27223": "private Stack < Object > documentStack = new Stack < Object > ( ) ; ",
  "27224": "private List < TopLevelDocument < QName > > topLevelDocuments = null ; ",
  "27225": "private Datatree . TopLevelDocuments < QName > readTopLevelDocuments ( ) ",
  "27226": "throws XMLStreamException { ",
  "27227": "StringBuilder currentText = null ; ",
  "27228": "topLevelDocuments = new ArrayList < TopLevelDocument < QName > > ( ) ; ",
  "27229": "while ( xmlReader . hasNext ( ) ) { ",
  "27230": "currentText = new StringBuilder ( 256 ) ; ",
  "27231": "QName elementURI = Datatree . QName ( xmlReader . getNamespaceURI ( ) , xmlReader . getLocalName ( ) , xmlReader . getPrefix ( ) ) ; ",
  "27232": "addToStack ( elementURI ) ; ",
  "27233": "case XMLEvent . END_ELEMENT : ",
  "27234": "String literalValue = null ; ",
  "27235": "if ( currentText != null ) { ",
  "27236": "literalValue = currentText . toString ( ) ; ",
  "27237": "currentText = null ; ",
  "27238": "updateDocumentInStack ( literalValue ) ; ",
  "27239": "case XMLEvent . CHARACTERS : ",
  "27240": "String characters = xmlReader . getText ( ) ; ",
  "27241": "currentText . append ( characters ) ; ",
  "27242": "Datatree . TopLevelDocuments < QName > documents = Datatree ",
  "27243": ". TopLevelDocuments ( topLevelDocuments . toArray ( new TopLevelDocument [ topLevelDocuments . size ( ) ] ) ) ; ",
  "27244": "return documents ; ",
  "27245": "private void addToStack ( QName elementURI ) throws XMLStreamException ",
  "27246": "URI identity = null ; ",
  "27247": "URI resourceURI = null ; ",
  "27248": "int attributes = xmlReader . getAttributeCount ( ) ; ",
  "27249": "for ( int i = 0 ; i < attributes ; ++ i ) ",
  "27250": "if ( rdfAbout . getLocalPart ( ) . equals ( xmlReader . getAttributeLocalName ( i ) ) && rdfAbout . getNamespaceURI ( ) . equals ( xmlReader . getAttributeNamespace ( i ) ) ) ",
  "27251": "identity = URI . create ( xmlReader . getAttributeValue ( i ) ) ; ",
  "27252": "if ( rdfResource . getLocalPart ( ) . equals ( xmlReader . getAttributeLocalName ( i ) ) && rdfResource . getNamespaceURI ( ) . equals ( xmlReader . getAttributeNamespace ( i ) ) ) ",
  "27253": "resourceURI = URI . create ( xmlReader . getAttributeValue ( i ) ) ; ",
  "27254": "if ( identity != null ) ",
  "27255": "Datatree . NamespaceBindings bindings = readBindings ( ) ; ",
  "27256": "IdentifiableDocument < QName > document = null ; ",
  "27257": "if ( documentStack . isEmpty ( ) ) ",
  "27258": "document = Datatree . TopLevelDocument ( bindings , elementURI , identity ) ; ",
  "27259": "document = Datatree . NestedDocument ( bindings , elementURI , identity ) ; ",
  "27260": "documentStack . push ( document ) ; ",
  "27261": "NamedProperty < QName > property = null ; ",
  "27262": "if ( resourceURI != null ) ",
  "27263": "property = Datatree . NamedProperty ( elementURI , resourceURI ) ; ",
  "27264": "property = Datatree . NamedProperty ( elementURI , \"\" ) ; ",
  "27265": "documentStack . push ( property ) ; ",
  "27266": "private void updateDocumentInStack ( String literalValue ) throws XMLStreamException ",
  "27267": "if ( ! documentStack . isEmpty ( ) ) ",
  "27268": "Object stackObject = documentStack . pop ( ) ; ",
  "27269": "if ( stackObject instanceof NamedProperty ) ",
  "27270": "NamedProperty < QName > property = ( NamedProperty < QName > ) stackObject ; ",
  "27271": "if ( literalValue != null && literalValue . length ( ) > 0 ) ",
  "27272": "property = Datatree . NamedProperty ( property . getName ( ) , literalValue ) ; ",
  "27273": "updateDocumentInStackWithProperty ( property ) ; ",
  "27274": "else if ( stackObject instanceof NestedDocument ) ",
  "27275": "NestedDocument < QName > document = ( NestedDocument < QName > ) stackObject ; ",
  "27276": "NamedProperty < QName > property = ( NamedProperty < QName > ) documentStack ",
  "27277": ". pop ( ) ; ",
  "27278": "property = Datatree . NamedProperty ( property . getName ( ) , document ) ; ",
  "27279": "if ( eventType == XMLEvent . END_ELEMENT ) ",
  "27280": "String elementURI = xmlReader . getNamespaceURI ( ) + xmlReader . getLocalName ( ) ; ",
  "27281": "if ( elementURI . equals ( property . getName ( ) . getNamespaceURI ( ) + property . getName ( ) . getLocalPart ( ) ) ) ",
  "27282": "else if ( stackObject instanceof TopLevelDocument ) ",
  "27283": "topLevelDocuments . add ( ( TopLevelDocument < QName > ) stackObject ) ; ",
  "27284": "private void updateDocumentInStackWithProperty ( NamedProperty < QName > property ) ",
  "27285": "IdentifiableDocument < QName > documentInStack = ( IdentifiableDocument < QName > ) documentStack . pop ( ) ; ",
  "27286": "documentInStack = addProperty ( documentInStack , property ) ; ",
  "27287": "documentStack . push ( documentInStack ) ; ",
  "27288": "private IdentifiableDocument < QName > addProperty ( ",
  "27289": "IdentifiableDocument < QName > document , NamedProperty < QName > property ) ",
  "27290": "List < NamedProperty < QName > > properties = new ArrayList < > ( ) ; ",
  "27291": "if ( document . getProperties ( ) == null || document . getProperties ( ) . size ( ) == 0 ) ",
  "27292": "properties = Datatree . NamedProperties ( property ) . getProperties ( ) ; ",
  "27293": "properties . addAll ( document . getProperties ( ) ) ; ",
  "27294": "NamedProperty < QName > [ ] propertyArray = properties . toArray ( new NamedProperty [ properties . size ( ) ] ) ; ",
  "27295": "NamedProperties < QName > namedProperties = Datatree . NamedProperties ( propertyArray ) ; ",
  "27296": "NamespaceBindings bindings = Datatree . NamespaceBindings ( ",
  "27297": "( NamespaceBinding [ ] ) document . getNamespaceBindings ( ) . toArray ( new NamespaceBinding [ document . getNamespaceBindings ( ) . size ( ) ] ) ) ; ",
  "27298": "if ( document instanceof TopLevelDocument ) ",
  "27299": "document = Datatree . TopLevelDocument ( bindings , ",
  "27300": "document . getType ( ) , ",
  "27301": "document . getIdentity ( ) , ",
  "27302": "namedProperties ) ; ",
  "27303": "document = Datatree . NestedDocument ( ",
  "27304": "bindings , ",
  "27305": "} public final boolean isAllowedOrigin ( final Origin origin ) { ",
  "27306": "if ( allowAnyOrigin ) ",
  "27307": "if ( allowedOrigins . contains ( origin ) ) ",
  "27308": "else if ( allowSubdomains ) ",
  "27309": "return isAllowedSubdomainOrigin ( origin ) ; ",
  "27310": "} public final boolean isAllowedSubdomainOrigin ( final Origin origin ) { ",
  "27311": "ValidatedOrigin validatedOrigin = origin . validate ( ) ; ",
  "27312": "String scheme = validatedOrigin . getScheme ( ) ; ",
  "27313": "String suffix = validatedOrigin . getSuffix ( ) ; ",
  "27314": "for ( ValidatedOrigin allowedOrigin : allowedOrigins ) { ",
  "27315": "if ( suffix . endsWith ( \".\" + allowedOrigin . getSuffix ( ) ) && ",
  "27316": "scheme . equalsIgnoreCase ( allowedOrigin . getScheme ( ) ) ) ",
  "27317": "} catch ( OriginException e ) { ",
  "27318": "} protected static String [ ] parseWords ( final String s ) { ",
  "27319": "String s1 = s . trim ( ) ; ",
  "27320": "if ( s1 . isEmpty ( ) ) ",
  "27321": "return new String [ ] { } ; ",
  "27322": "return s1 . split ( \"\\\\s*,\\\\s*|\\\\s+\" ) ; ",
  "27323": "public NotableLink findByNote ( final Note note ) { ",
  "27324": "return repositoryService . firstMatch ( ",
  "27325": "new QueryDefault < > ( NotableLink . class , ",
  "27326": "\"findByNote\" , ",
  "27327": "\"note\" , note ) ) ; ",
  "27328": "public List < NotableLink > findByNotable ( final Object notable ) { ",
  "27329": "if ( notable == null ) { ",
  "27330": "final Bookmark bookmark = bookmarkService . bookmarkFor ( notable ) ; ",
  "27331": "if ( bookmark == null ) { ",
  "27332": "final String notableStr = bookmark . toString ( ) ; ",
  "27333": "return repositoryService . allMatches ( ",
  "27334": "\"findByNotable\" , ",
  "27335": "\"notableStr\" , notableStr ) ) ; ",
  "27336": "public NotableLink findByNotableAndCalendarName ( ",
  "27337": "final Object notable , ",
  "27338": "final String calendarName ) { ",
  "27339": "if ( calendarName == null ) { ",
  "27340": "\"findByNotableAndCalendarName\" , ",
  "27341": "\"notableStr\" , notableStr , ",
  "27342": "\"calendarName\" , calendarName ) ) ; ",
  "27343": "public List < NotableLink > findByNotableInDateRange ( ",
  "27344": "final LocalDate startDate , ",
  "27345": "final LocalDate endDate ) { ",
  "27346": "if ( startDate == null ) { ",
  "27347": "if ( endDate == null ) { ",
  "27348": "\"findByNotableInDateRange\" , ",
  "27349": "\"startDate\" , startDate , ",
  "27350": "\"endDate\" , endDate ) ) ; ",
  "27351": "public NotableLink createLink ( ",
  "27352": "final Note note , ",
  "27353": "final Object notable ) { ",
  "27354": "final Class < ? extends NotableLink > subtype = subtypeClassFor ( notable ) ; ",
  "27355": "final NotableLink link = repositoryService . instantiate ( subtype ) ; ",
  "27356": "link . setNote ( note ) ; ",
  "27357": "link . setNotable ( notable ) ; ",
  "27358": "link . setNotableStr ( bookmark . toString ( ) ) ; ",
  "27359": "repositoryService . persistAndFlush ( link ) ; ",
  "27360": "return link ; ",
  "27361": "public void updateLink ( final Note note ) { ",
  "27362": "final NotableLink link = findByNote ( note ) ; ",
  "27363": "sync ( note , link ) ; ",
  "27364": "} void sync ( final Note note , final NotableLink link ) { ",
  "27365": "if ( link == null ) { ",
  "27366": "link . setDate ( note . getDate ( ) ) ; ",
  "27367": "link . setCalendarName ( note . getCalendarName ( ) ) ; ",
  "27368": "} public void transmit ( Command c , Map h , String b ) { ",
  "27369": "_server . receive ( c , h , b , this ) ; ",
  "27370": "public List < Note > findByNotable ( final Object notable ) { ",
  "27371": "final List < NotableLink > links = linkRepository . findByNotable ( notable ) ; ",
  "27372": "return Lists . newArrayList ( ",
  "27373": "Iterables . transform ( links , NotableLink . Functions . note ( ) ) ) ; ",
  "27374": "public Note findByNotableAndCalendarName ( ",
  "27375": "final NotableLink link = linkRepository ",
  "27376": ". findByNotableAndCalendarName ( notable , calendarName ) ; ",
  "27377": "return NotableLink . Functions . note ( ) . apply ( link ) ; ",
  "27378": "public List < Note > findInDateRange ( ",
  "27379": "new QueryDefault < > ( ",
  "27380": "Note . class , ",
  "27381": "\"findInDateRange\" , ",
  "27382": "public Iterable < Note > findByNotableInDateRange ( ",
  "27383": "final List < NotableLink > link = linkRepository ",
  "27384": ". findByNotableInDateRange ( notable , startDate , endDate ) ; ",
  "27385": "return Iterables . transform ( link , NotableLink . Functions . note ( ) ) ; ",
  "27386": "public Note add ( ",
  "27387": "final String noteText , ",
  "27388": "final LocalDate date , ",
  "27389": "final Note note = repositoryService . instantiate ( Note . class ) ; ",
  "27390": "note . setDate ( date ) ; ",
  "27391": "note . setCalendarName ( calendarName ) ; ",
  "27392": "note . setContent ( noteText ) ; ",
  "27393": "repositoryService . persistAndFlush ( note ) ; ",
  "27394": "final NotableLink link = notableLinkRepository . createLink ( note , notable ) ; ",
  "27395": "link . setCalendarName ( calendarName ) ; ",
  "27396": "link . setDate ( date ) ; ",
  "27397": "public void remove ( Note note ) { ",
  "27398": "final NotableLink link = linkRepository . findByNote ( note ) ; ",
  "27399": "repositoryService . removeAndFlush ( link ) ; ",
  "27400": "repositoryService . removeAndFlush ( note ) ; ",
  "27401": "Transmitter . transmit ( c , h , b , _output ) ; ",
  "27402": "receive ( Command . ERROR , null , e . getMessage ( ) ) ; "
}